"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40067],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:3,title:"Data Modification Queries"},i=void 0,l={unversionedId:"queryworkers/c8ql/examples/data-modification-queries",id:"queryworkers/c8ql/examples/data-modification-queries",title:"Data Modification Queries",description:"Overview",source:"@site/docs/queryworkers/c8ql/examples/data-modification-queries.md",sourceDirName:"queryworkers/c8ql/examples",slug:"/queryworkers/c8ql/examples/data-modification-queries",permalink:"/docs/queryworkers/c8ql/examples/data-modification-queries",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/examples/data-modification-queries.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Data Modification Queries"},sidebar:"defaultSidebar",previous:{title:"Counting",permalink:"/docs/queryworkers/c8ql/examples/counting"},next:{title:"Diffing Two Documents",permalink:"/docs/queryworkers/c8ql/examples/diffing-documents"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Updating documents",id:"updating-documents",level:2},{value:"Replacing documents",id:"replacing-documents",level:2},{value:"Removing documents",id:"removing-documents",level:2},{value:"Creating documents",id:"creating-documents",level:2},{value:"Copying data from one collection into another",id:"copying-data-from-one-collection-into-another",level:2},{value:"Handling errors",id:"handling-errors",level:2},{value:"Altering substructures",id:"altering-substructures",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The following operations can be used to modify data of multiple documents with one query. This is superior to fetching and updating the documents individually with multiple queries. However, if only a single document needs to be modified, C8's specialized data-modification operations for single documents might execute faster."),(0,a.kt)("h2",{id:"updating-documents"},"Updating documents"),(0,a.kt)("p",null,"To update existing documents, we can either use the ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE")," or the ",(0,a.kt)("inlineCode",{parentName:"p"},"REPLACE")," operation. ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE")," updates only the specified attributes in the found documents, and ",(0,a.kt)("inlineCode",{parentName:"p"},"REPLACE")," completely replaces the found documents with the specified values."),(0,a.kt)("p",null,"We'll start with an ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE")," query that rewrites the gender attribute in all documents:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  UPDATE u WITH { gender: TRANSLATE(u.gender, { m: 'male', f: 'female' }) } IN users\n")),(0,a.kt)("p",null,"To add new attributes to existing documents, we can also use an ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE")," query. The following query adds an attribute ",(0,a.kt)("inlineCode",{parentName:"p"},"numberOfLogins")," for all users with status active:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  FILTER u.active == true\n  UPDATE u WITH { numberOfLogins: 0 } IN users\n")),(0,a.kt)("p",null,"Existing attributes can also be updated based on their previous value:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  FILTER u.active == true\n  UPDATE u WITH { numberOfLogins: u.numberOfLogins + 1 } IN users\n")),(0,a.kt)("p",null,"The above query will only work if there was already a ",(0,a.kt)("inlineCode",{parentName:"p"},"numberOfLogins")," attribute present in the document. If it is unsure whether there is a ",(0,a.kt)("inlineCode",{parentName:"p"},"numberOfLogins")," attribute in the document, the increase must be made conditional:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  FILTER u.active == true\n  UPDATE u WITH {\n    numberOfLogins: HAS(u, 'numberOfLogins') ? u.numberOfLogins + 1 : 1\n  } IN users\n")),(0,a.kt)("p",null,"Updates of multiple attributes can be combined in a single query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  FILTER u.active == true\n  UPDATE u WITH {\n    lastLogin: DATE_NOW(),\n    numberOfLogins: HAS(u, 'numberOfLogins') ? u.numberOfLogins + 1 : 1\n  } IN users\n")),(0,a.kt)("p",null,"Note than an update query might fail during execution, for example because a document to be updated does not exist. In this case, the query will abort at the first error. In single-server mode, all modifications done by the query will be rolled back as if they never happened."),(0,a.kt)("h2",{id:"replacing-documents"},"Replacing documents"),(0,a.kt)("p",null,"To not just partially update, but completely replace existing documents, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"REPLACE")," operation. The following query replaces all documents in the collection backup with the documents found in collection users. Documents common to both collections will be replaced. All other documents will remain unchanged. Documents are compared using their ",(0,a.kt)("inlineCode",{parentName:"p"},"_key")," attributes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  REPLACE u IN backup\n")),(0,a.kt)("p",null,"The above query will fail if there are documents in collection users that are not in collection backup yet. In this case, the query would attempt to replace documents that do not exist. If such case is detected while executing the query, the query will abort. In single-server mode, all changes made by the query will also be rolled back."),(0,a.kt)("p",null,"To make the query succeed for such case, use the ",(0,a.kt)("em",{parentName:"p"},"ignoreErrors")," query option:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  REPLACE u IN backup OPTIONS { ignoreErrors: true }\n")),(0,a.kt)("h2",{id:"removing-documents"},"Removing documents"),(0,a.kt)("p",null,"Deleting documents can be achieved with the ",(0,a.kt)("em",{parentName:"p"},"REMOVE")," operation. To remove all users within a certain age range, we can use the following query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  FILTER u.active == true && u.age >= 35 && u.age <= 37\n  REMOVE u IN users\n")),(0,a.kt)("h2",{id:"creating-documents"},"Creating documents"),(0,a.kt)("p",null,"To create new documents, there is the ",(0,a.kt)("em",{parentName:"p"},"INSERT")," operation. It can also be used to generate copies of existing documents from other collections, or to create synthetic documents (e.g. for testing purposes). The following query creates 1000 test users in collection users with some attributes set:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR i IN 1..1000\n  INSERT {\n    id: 100000 + i,\n    age: 18 + FLOOR(RAND() * 25),\n    name: CONCAT('test', TO_STRING(i)),\n    active: false,\n    gender: i % 2 == 0 ? 'male' : 'female'\n  } IN users\n")),(0,a.kt)("h2",{id:"copying-data-from-one-collection-into-another"},"Copying data from one collection into another"),(0,a.kt)("p",null,"To copy data from one collection into another, an ",(0,a.kt)("em",{parentName:"p"},"INSERT")," operation can be used:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  INSERT u IN backup\n")),(0,a.kt)("p",null,"This will copy over all documents from collection users into collection backup. Note that both collections must already exist when the query is executed. The query might fail if backup already contains documents, as executing the insert might attempt to insert the same document (identified by ",(0,a.kt)("inlineCode",{parentName:"p"},"_key")," attribute) again. This will trigger a unique key constraint violation and abort the query. In single-server mode, all changes made by the query will also be rolled back."),(0,a.kt)("p",null,"To make such copy operation work in all cases, the target collection can be emptied before, using a ",(0,a.kt)("inlineCode",{parentName:"p"},"REMOVE")," query."),(0,a.kt)("h2",{id:"handling-errors"},"Handling errors"),(0,a.kt)("p",null,'In some cases it might be desirable to continue execution of a query even in the face of errors (e.g. "document not found"). To continue execution of a query in case of errors, there is the ',(0,a.kt)("em",{parentName:"p"},"ignoreErrors")," option."),(0,a.kt)("p",null,"To use it, place an ",(0,a.kt)("inlineCode",{parentName:"p"},"OPTIONS")," keyword directly after the data modification part of the query, e.g."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  REPLACE u IN backup OPTIONS { ignoreErrors: true }\n")),(0,a.kt)("p",null,"This will continue execution of the query even if errors occur during the ",(0,a.kt)("inlineCode",{parentName:"p"},"REPLACE")," operation. It works similar for ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"INSERT"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"REMOVE"),"."),(0,a.kt)("h2",{id:"altering-substructures"},"Altering substructures"),(0,a.kt)("p",null,"To modify lists in documents we have to work with temporary variables. We will collect the sublist in there and alter it. We choose a simple boolean filter condition to make the query better comprehensible."),(0,a.kt)("p",null,"First lets create a collection with a sample:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'database = db._create(\'complexCollection\')\ndatabase.save({\n  "topLevelAttribute" : "a",\n  "subList" : [\n    {\n      "attributeToAlter" : "oldValue",\n      "filterByMe" : true\n    },\n    {\n      "attributeToAlter" : "moreOldValues",\n      "filterByMe" : true\n    },\n    {\n      "attributeToAlter" : "unchangedValue",\n      "filterByMe" : false\n    }\n  ]\n})\n')),(0,a.kt)("p",null,"Heres the Query which keeps the ",(0,a.kt)("inlineCode",{parentName:"p"},"subList")," on ",(0,a.kt)("inlineCode",{parentName:"p"},"alteredList")," to update it later:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'FOR document in complexCollection\n  LET alteredList = (\n    FOR element IN document.subList\n       LET newItem = (! element.filterByMe ?\n                      element :\n                      MERGE(element, { attributeToAlter: "shiny New Value" }))\n       RETURN newItem)\n  UPDATE document WITH { subList:  alteredList } IN complexCollection\n')),(0,a.kt)("p",null,"While the query as it is is now functional:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'db.complexCollection.toArray()\n[\n  {\n    "_id" : "complexCollection/392671569467",\n    "_key" : "392671569467",\n    "_rev" : "392799430203",\n    "topLevelAttribute" : "a",\n    "subList" : [\n      {\n        "filterByMe" : true,\n        "attributeToAlter" : "shiny New Value"\n      },\n      {\n        "filterByMe" : true,\n        "attributeToAlter" : "shiny New Value"\n      },\n      {\n        "filterByMe" : false,\n        "attributeToAlter" : "unchangedValue"\n      }\n    ]\n  }\n]\n')),(0,a.kt)("p",null,"It will probably be soonish a performance bottleneck, since it ",(0,a.kt)("strong",{parentName:"p"},"modifies")," all documents in the collection ",(0,a.kt)("strong",{parentName:"p"},"regardless whether the values change or not"),". Therefore we want to only ",(0,a.kt)("inlineCode",{parentName:"p"},"UPDATE")," the documents if we really change their value. Hence we employ a second ",(0,a.kt)("inlineCode",{parentName:"p"},"FOR")," to test whether ",(0,a.kt)("inlineCode",{parentName:"p"},"subList")," will be altered or not:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'FOR document in complexCollection\n  LET willUpdateDocument = (\n    FOR element IN docToAlter.subList\n      FILTER element.filterByMe LIMIT 1 RETURN 1)\n\n  FILTER LENGTH(willUpdateDocument) > 0\n\n  LET alteredList = (\n    FOR element IN document.subList\n       LET newItem = (! element.filterByMe ?\n                      element :\n                      MERGE(element, { attributeToAlter: "shiny New Value" }))\n       RETURN newItem)\n\n  UPDATE document WITH { subList:  alteredList } IN complexCollection\n')))}p.isMDXComponent=!0}}]);