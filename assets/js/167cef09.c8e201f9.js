"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[66772],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=s(t),m=l,g=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return t?o.createElement(g,i(i({ref:n},u),{},{components:t})):o.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=d;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var s=2;s<a;s++)i[s]=t[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(67294),l=t(34334);const a="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,l.Z)(a,i),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var o=t(87462),l=t(67294),a=t(34334),i=t(72389),r=t(67392),c=t(7094),s=t(12466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){const{lazy:n,block:t,defaultValue:i,values:d,groupId:m,className:g}=e,b=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??b.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),f=(0,r.l)(y,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===i?i:i??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==h&&!y.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:k}=(0,c.U)(),[E,C]=(0,l.useState)(h),A=[],{blockElementScrollPositionUntilNextRender:v}=(0,s.o5)();if(null!=m){const e=w[m];null!=e&&e!==E&&y.some((n=>n.value===e))&&C(e)}const O=e=>{const n=e.currentTarget,t=A.indexOf(n),o=y[t].value;o!==E&&(v(n),C(o),null!=m&&k(m,String(o)))},N=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=A.indexOf(e.currentTarget)+1;n=A[t]??A[0];break}case"ArrowLeft":{const t=A.indexOf(e.currentTarget)-1;n=A[t]??A[A.length-1];break}}n?.focus()};return l.createElement("div",{className:(0,a.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},g)},y.map((e=>{let{value:n,label:t,attributes:i}=e;return l.createElement("li",(0,o.Z)({role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,key:n,ref:e=>A.push(e),onKeyDown:N,onFocus:O,onClick:O},i,{className:(0,a.Z)("tabs__item",p,i?.className,{"tabs__item--active":E===n})}),t??n)}))),n?(0,l.cloneElement)(b.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==E})))))}function m(e){const n=(0,i.Z)();return l.createElement(d,(0,o.Z)({key:String(n)},e))}},73172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=t(87462),l=(t(67294),t(3905)),a=t(65488),i=t(85162);const r={sidebar_position:2,title:"Quickstart"},c="Quickstart - Document Collections",s={unversionedId:"collections/documents/tutorials/working-with-documents",id:"collections/documents/tutorials/working-with-documents",title:"Quickstart",description:"This page guides you through quickly getting started with document collections.",source:"@site/docs/collections/documents/tutorials/working-with-documents.md",sourceDirName:"collections/documents/tutorials",slug:"/collections/documents/tutorials/working-with-documents",permalink:"/docs/collections/documents/tutorials/working-with-documents",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/collections/documents/tutorials/working-with-documents.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Quickstart"},sidebar:"defaultSidebar",previous:{title:"Document Store Example",permalink:"/docs/collections/documents/document-store-example"},next:{title:"Bulk Update with RestQL",permalink:"/docs/collections/documents/tutorials/bulk-update-restql"}},u={},p=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"SDK download",id:"sdk-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],d={toc:p};function m(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"quickstart---document-collections"},"Quickstart - Document Collections"),(0,l.kt)("p",null,"This page guides you through quickly getting started with document collections."),(0,l.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,l.kt)("p",null,"Let's assume your"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tenant name is ",(0,l.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,l.kt)("li",{parentName:"ul"},"User password is ",(0,l.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,l.kt)("h2",{id:"sdk-download"},"SDK download"),(0,l.kt)(a.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,l.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,l.kt)("h2",{id:"code-sample"},"Code Sample"),(0,l.kt)(a.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n  import pprint\n  import time\n\n  if __name__ == \'__main__\':\n\n    # Variables - URLs\n    GLOBAL_URL = "play.paas.macrometa.io"\n    REGION_URLS = [\n        "gdn-us-west.paas.macrometa.io",\n        "gdn-us-east.paas.macrometa.io",\n        "gdn-us-central.paas.macrometa.io"\n        "gdn-eu-west.paas.macrometa.io",\n        "gdn-eu-central.paas.macrometa.io",\n        "gdn-ap-west.paas.macrometa.io",\n        "gdn-ap-south.paas.macrometa.io",\n        "gdn-ap-northeast.paas.macrometa.io",\n        "gdn-ap-sydney.paas.macrometa.io",\n    ]\n\n    # Variables - DB\n    EMAIL = "nemo@nautilus.com"\n    PASSWORD = "xxxxx"\n    GEO_FABRIC = "_system"\n    COLLECTION_NAME = "ddoslist"\n    IP_ADDRESS = "20.1.1.9"\n\n    # Variables - Queries\n    READ_QUERY = f"FOR device in ddoslist FILTER device.ip == {IP_ADDRESS} RETURN" + "{IP:device.ip, IsAllowed:device.action}"\n\n    INSERT_QUERY = "INSERT { \\"ip\\" : \\"" + IP_ADDRESS + "\\", \\"action\\": \\"block\\", \\"rule\\":\\"blocklistA\\"} INTO ddoslist"\n\n    # Variables - Data\n    DATA = [\n      {"ip": "10.1.1.1", "action": "block", "rule": "blocklistA"},\n      {"ip": "20.1.1.2", "action": "block", "rule": "blocklistA"},\n      {"ip": "30.1.1.3", "action": "block", "rule": "blocklistB"},\n      {"ip": "40.1.1.4", "action": "block", "rule": "blocklistA"},\n      {"ip": "50.1.1.5", "action": "block", "rule": "blocklistB"},\n      {"ip": "20.1.1.3", "action": "allow", "rule": "allowlistA"},\n      {"ip": "20.1.1.4", "action": "allow", "rule": "allowlistA"},\n      {"ip": "30.1.1.4", "action": "allow", "rule": "allowlistB"},\n      {"ip": "30.1.1.5", "action": "allow", "rule": "allowlistB"}\n    ]\n    pp = pprint.PrettyPrinter(indent=4)\n\n    # Step 1: Open connection to GDN. You will be routed to closest region.\n    print(f"1. CONNECT: federation: {GLOBAL_URL},  user: {EMAIL}")\n    client = C8Client(protocol = \'https\', host = GLOBAL_URL, port = 443,\n                      email = EMAIL, password = PASSWORD,\n                      geofabric = GEO_FABRIC)\n\n    # Step 2: Create a collection if not exists\n    print(f"2. CREATE_COLLECTION: region: {GLOBAL_URL},  collection: {COLLECTION_NAME}")\n    if client.has_collection(COLLECTION_NAME):\n        collection = client.collection(COLLECTION_NAME)\n    else:\n        collection = client.create_collection(COLLECTION_NAME)\n\n    # Step 3: Insert data into collection.\n    print(f"3. INSERT_DDOS_DATA: in region: {GLOBAL_URL}")\n    client.insert_document(COLLECTION_NAME, document = DATA)\n\n    # Step 4: Read Data\n    print(f"4. IS_IP_ALLOWED...from region: {GLOBAL_URL}")\n    cursor = client.execute_query(READ_QUERY)\n    docs = [document for document in cursor]\n    if docs == []:\n      print(f"IP: {IP_ADDRESS}" + "IsAllowed: {"\'allow\'"}\\n")\n    else:\n      pp.pprint(docs)\n\n    # Step 5: Blocklist IP Address\n    print(f"5. BLOCKLIST the IP...from region: {GLOBAL_URL}, ip: {IP_ADDRESS}")\n    cursor = client.execute_query(INSERT_QUERY)\n    time.sleep(0.3)\n\n    # Step 6: Read Data from other regions.\n    print("6. Check again if IP is allowed globally")\n    for region_url in REGION_URLS:\n      print(f"\\n IS_IP_ALLOWED...cheking from region: {region_url}")\n      clientx = C8Client(protocol = \'https\', host = region_url, port = 443, email = EMAIL, password = PASSWORD,\n                          geofabric = GEO_FABRIC)\n      cursorx = clientx.execute_query(READ_QUERY)\n      docs = [document for document in cursorx]\n      pp.pprint(docs[0])\n\n    # Step 7: Delete Data\n    print(f"\\n7. DELETE_DATA: region: {GLOBAL_URL}, collection: {COLLECTION_NAME}")\n    collection.truncate()\n    #client.delete_collection(COLLECTION_NAME)\n'))),(0,l.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Variables - DB\nglobalUrl = "https://play.paas.macrometa.io";\nregionUrls = [\n  "https://gdn-us-west.paas.macrometa.io",\n  "https://gdn-eu-central.paas.macrometa.io",\n  "https://gdn-ap-south.paas.macrometa.io"\n];\n\n// Create an authenticated instance with a token or API key\n// const client = new jsc8({url: globalUrl, token: "XXXX", fabricName: \'_system\'});\nconst thisApikey = "XXXXX";\nconst client = new jsc8({ url: globalUrl, apiKey: thisApikey, fabricName: "_system" });\n// console.log("Authentication done!!...");\n\n// Or use email and password to authenticate client instance\n// const client = new jsc8(globalUrl);\n// await client.login("nemo@nautilus.com", "xxxx");\n\n// Variables\nconst collectionName = "ddoslist";\nconst ipAddress = "20.1.1.9";\n\n// Variables - Queries\nconst readQueryValue = `FOR device in ddoslist FILTER device.ip == "${ipAddress}" RETURN { IP:device.ip, IsAllowed:device.action}`;\nconst insertQueryValue = `INSERT { "ip": "${ipAddress}", "action": "block", "rule": "blacklistA"} INTO ddoslist`;\n\n// Variables - Data\nconst data = [\n  { ip: "10.1.1.1", action: "block", rule: "blacklistA" },\n  { ip: "20.1.1.2", action: "block", rule: "blacklistA" },\n  { ip: "30.1.1.3", action: "block", rule: "blacklistB" },\n  { ip: "40.1.1.4", action: "block", rule: "blacklistA" },\n  { ip: "50.1.1.5", action: "block", rule: "blacklistB" },\n  { ip: "20.1.1.3", action: "allow", rule: "whitelistA" },\n  { ip: "20.1.1.4", action: "allow", rule: "whitelistA" },\n  { ip: "30.1.1.4", action: "allow", rule: "whitelistB" },\n  { ip: "30.1.1.5", action: "allow", rule: "whitelistB" }\n];\n\n// Step 1: Open connection to GDN. You will be routed to closest region.\nconsole.log(`1. Connecting: federation: ${globalUrl},  user: ${thisApikey}`);\n\nasync function createCollection () {\n  console.log("\\n2. Create collections:");\n\n  try {\n    console.log(`Creating the collection ${collectionName}...`);\n    const existsColl = await client.hasCollection(collectionName);\n    if (existsColl === false) {\n      await client.createCollection(collectionName);\n      console.log(`Collection ${collectionName} was created successfully.`);\n    } else {\n      console.log(`Collection ${collectionName} alreasy exists.`);\n    }\n  } catch (e) {\n    console.log("Collection creation did not succeed due to " + e);\n  }\n}\n\nasync function insertData () {\n  console.log(`\\n3. Inserting data in region ${globalUrl}`);\n  try {\n    await client.insertDocumentMany(collectionName, data);\n    console.log("Data has been successfully added to the collection");\n  } catch (e) {\n    console.log("Data could not be inserted due to " + e);\n  }\n}\n\nasync function readData () {\n  console.log(`\\n4. reading data in region ${globalUrl}`);\n  console.log(`IP is allowed from region: ${globalUrl}`);\n  const result = await client.executeQuery(readQueryValue);\n  console.log(result);\n}\n\nasync function blacklistIP () {\n  console.log(`\\n5. Blacklisting the IP...from region: ${globalUrl}, ip: ${ipAddress}`);\n  await client.executeQuery(insertQueryValue);\n  console.log("Document added successfully");\n}\n\nasync function readDataFromAllRegions () {\n  console.log("\\n6. Checking if the IP is allowed globally");\n  try {\n    for (let i = 0; i < regionUrls.length; i++) {\n      // Create an authenticated instance with a token or API key\n      // const regionClient = new jsc8({url: regionUrls[i], token: "XXXX", fabricName: \'_system\'});\n      // const regionClient = new jsc8({url: regionUrls[i], apiKey: "XXXX", fabricName: \'_system\'});\n      // console.log("Authentication done!!...");\n      // Or use Email & Password to Authenticate client instance\n      // const regionClient = new jsc8(regionUrls[i]);\n      // await regionClient.login("nemo@nautilus.com", "xxxxxx");\n\n      const regionClient = new jsc8({ url: regionUrls[i], apiKey: thisApikey, fabricName: "_system" });\n\n      console.log(`\\n IP is blocked in region : ${regionUrls[i]}`);\n      const result = await regionClient.executeQuery(readQueryValue);\n      console.log(result);\n    }\n  } catch (e) {\n    console.log("Could not read due to " + e);\n  }\n}\n\nasync function deleteData () {\n  console.log("\\n7. Deleting the data");\n  try {\n    await client.deleteCollection(collectionName);\n    console.log("The collection has been deleted successfully");\n  } catch (e) {\n    console.log("Collection could not be deleted due to " + e);\n  }\n}\n\n(async function () {\n  await createCollection();\n  await insertData();\n  await readData();\n  await blacklistIP();\n  await readDataFromAllRegions();\n  await deleteData();\n})();\n')))))}m.isMDXComponent=!0}}]);