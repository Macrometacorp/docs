"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[11874],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(a),k=r,d=c["".concat(p,".").concat(k)]||c[k]||m[k]||o;return a?n.createElement(d,l(l({ref:t},u),{},{components:a})):n.createElement(d,l({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},13642:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const o={title:"Type Cast Functions"},l=void 0,i={unversionedId:"queryworkers/c8ql/functions/type-cast",id:"queryworkers/c8ql/functions/type-cast",title:"Type Cast Functions",description:"Some operators expect their operands to have a certain data type. For example, logical operators expect their operands to be boolean values, and the arithmetic operators expect their operands to be numeric values. If an operation is performed with operands of other types, an automatic conversion to the expected types is tried. This is called implicit type casting. It helps to avoid query aborts.",source:"@site/docs/queryworkers/c8ql/functions/type-cast.md",sourceDirName:"queryworkers/c8ql/functions",slug:"/queryworkers/c8ql/functions/type-cast",permalink:"/docs/queryworkers/c8ql/functions/type-cast",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/functions/type-cast.md",tags:[],version:"current",frontMatter:{title:"Type Cast Functions"},sidebar:"defaultSidebar",previous:{title:"String Functions",permalink:"/docs/queryworkers/c8ql/functions/string"},next:{title:"Type Check Functions",permalink:"/docs/queryworkers/c8ql/functions/type-check"}},p={},s=[{value:"TO_BOOL()",id:"to_bool",level:2},{value:"TO_NUMBER()",id:"to_number",level:2},{value:"TO_STRING()",id:"to_string",level:2},{value:"TO_ARRAY()",id:"to_array",level:2},{value:"TO_LIST()",id:"to_list",level:2}],u={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Some operators expect their operands to have a certain data type. For example, logical operators expect their operands to be boolean values, and the arithmetic operators expect their operands to be numeric values. If an operation is performed with operands of other types, an automatic conversion to the expected types is tried. This is called implicit type casting. It helps to avoid query aborts."),(0,r.kt)("p",null,"Type casts can also be performed upon request by invoking a type cast function. This is called explicit type casting. C8QL offers several functions for this. Each of the these functions takes an operand of any data type and returns a result value with the type corresponding to the function name. For example, ",(0,r.kt)("em",{parentName:"p"},"TO_NUMBER()")," will return a numeric value."),(0,r.kt)("h2",{id:"to_bool"},"TO_BOOL()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_BOOL(value) \u2192 bool")),(0,r.kt)("p",null,"Take an input ",(0,r.kt)("em",{parentName:"p"},"value")," of any type and convert it into the appropriate boolean value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"bool")," (boolean):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"null")," is converted to ",(0,r.kt)("em",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},"Numbers are converted to ",(0,r.kt)("em",{parentName:"li"},"true"),", except for 0, which is converted to ",(0,r.kt)("em",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},"Strings are converted to ",(0,r.kt)("em",{parentName:"li"},"true")," if they are non-empty, and to ",(0,r.kt)("em",{parentName:"li"},"false")," otherwise"),(0,r.kt)("li",{parentName:"ul"},"Arrays are always converted to ",(0,r.kt)("em",{parentName:"li"},"true")," (even if empty)"),(0,r.kt)("li",{parentName:"ul"},"Objects / documents are always converted to ",(0,r.kt)("em",{parentName:"li"},"true"))))),(0,r.kt)("p",null,"It's also possible to use double negation to cast to boolean:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'!!1 // true\n!!0 // false\n!!-0.0 // false\nnot not 1 // true\n!!"non-empty string" // true\n!!"" // false\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_BOOL()")," is preferred however, because it states the intention clearer."),(0,r.kt)("h2",{id:"to_number"},"TO_NUMBER()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_NUMBER(value) \u2192 number")),(0,r.kt)("p",null,"Take an input ",(0,r.kt)("em",{parentName:"p"},"value")," of any type and convert it into a numeric value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"value")," (any): input of arbitrary type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"returns ",(0,r.kt)("strong",{parentName:"p"},"number")," (number):"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"null")," and ",(0,r.kt)("em",{parentName:"p"},"false")," are converted to the value ",(0,r.kt)("em",{parentName:"p"},"0"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("em",{parentName:"p"},"true")," is converted to ",(0,r.kt)("em",{parentName:"p"},"1"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Numbers keep their original value")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Strings are converted to their numeric equivalent if the string contains a valid representation of a number. Whitespace at the start and end of the string is allowed. String values that do not contain any valid representation of a number will be converted to the number ",(0,r.kt)("em",{parentName:"p"},"0"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An empty array is converted to ",(0,r.kt)("em",{parentName:"p"},"0"),", an array with one member is converted into the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"TO_NUMBER()")," for its sole member. An array with two or more members is converted to the number ",(0,r.kt)("em",{parentName:"p"},"0"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"An object / document is converted to the number ",(0,r.kt)("em",{parentName:"p"},"0"),"."),(0,r.kt)("p",{parentName:"li"},"A unary plus will also cast to a number, but ",(0,r.kt)("inlineCode",{parentName:"p"},"TO_NUMBER()")," is the preferred way:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"")))))),(0,r.kt)("p",null,"+'5' // 5\n+","[8]"," // 8\n+","[8,9]"," // 0\n+{} // 0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"```\nA unary minus works likewise, except that a numeric value is also negated:\n```js\n")),(0,r.kt)("p",null,"-'5' // -5\n-","[8]"," // -8\n-","[8,9]"," // 0\n-{} // 0"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"```\n")),(0,r.kt)("h2",{id:"to_string"},"TO_STRING()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_STRING(value) \u2192 str")),(0,r.kt)("p",null,"Take an input ",(0,r.kt)("em",{parentName:"p"},"value")," of any type and convert it into a string value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"str")," (string):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"null")," is converted to an empty string ",(0,r.kt)("inlineCode",{parentName:"li"},'""')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"false")," is converted to the string ",(0,r.kt)("em",{parentName:"li"},'"false"'),", ",(0,r.kt)("em",{parentName:"li"},"true")," to the string ",(0,r.kt)("em",{parentName:"li"},'"true"')),(0,r.kt)("li",{parentName:"ul"},'Numbers are converted to their string representations. This can also be a scientific notation (e.g. "2e-7")'),(0,r.kt)("li",{parentName:"ul"},"Arrays and objects / documents are converted to string representations, which means JSON-encoded strings with no additional whitespace")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'TO_STRING(null) // ""\nTO_STRING(true) // "true"\nTO_STRING(false) // "false"\nTO_STRING(123) // "123"\nTO_STRING(+1.23) // "1.23"\nTO_STRING(-1.23) // "-1.23"\nTO_STRING(0.0000002) // "2e-7"\nTO_STRING( [1, 2, 3] ) // "[1,2,3]"\nTO_STRING( { foo: "bar", baz: null } ) // "{\\"foo\\":\\"bar\\",\\"baz\\":null}"\n')),(0,r.kt)("h2",{id:"to_array"},"TO_ARRAY()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_ARRAY(value) \u2192 array")),(0,r.kt)("p",null,"Take an input ",(0,r.kt)("em",{parentName:"p"},"value")," of any type and convert it into an array value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"array")," (array):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"null")," is converted to an empty array"),(0,r.kt)("li",{parentName:"ul"},"Boolean values, numbers and strings are converted to an array containing the original value as its single element"),(0,r.kt)("li",{parentName:"ul"},"Arrays keep their original value"),(0,r.kt)("li",{parentName:"ul"},"Objects / documents are converted to an array containing their attribute ",(0,r.kt)("strong",{parentName:"li"},"values")," as array elements, just like ",(0,r.kt)("a",{parentName:"li",href:"/docs/queryworkers/c8ql/functions/document#values"},"VALUES()"))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'TO_ARRAY(null) // []\nTO_ARRAY(false) // [false]\nTO_ARRAY(true) // [true]\nTO_ARRAY(5) // [5]\nTO_ARRAY("foo") // ["foo"]\nTO_ARRAY([1, 2, "foo"]) // [1, 2, "foo"]\nTO_ARRAY({foo: 1, bar: 2, baz: [3, 4, 5]}) // [1, 2, [3, 4, 5]]\n')),(0,r.kt)("h2",{id:"to_list"},"TO_LIST()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_LIST(value) \u2192 array")),(0,r.kt)("p",null,"This is an alias for ",(0,r.kt)("a",{parentName:"p",href:"#to_array"},"TO_ARRAY()"),"."))}m.isMDXComponent=!0}}]);