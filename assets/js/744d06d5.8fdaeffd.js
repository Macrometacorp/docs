"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23306],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),m=c(a),h=n,u=m["".concat(s,".").concat(h)]||m[h]||l[h]||i;return a?r.createElement(u,o(o({ref:t},d),{},{components:a})):r.createElement(u,o({ref:t},d))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},99817:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const i={sidebar_position:30,title:"Enrich Data with External Services"},o=void 0,p={unversionedId:"cep/enrich-data/enrich-data-external-services",id:"cep/enrich-data/enrich-data-external-services",title:"Enrich Data with External Services",description:"This section explains how to enrich the data in a specific stream by connecting with an external service and adding information received from that service to the existing data.",source:"@site/docs/cep/enrich-data/enrich-data-external-services.md",sourceDirName:"cep/enrich-data",slug:"/cep/enrich-data/enrich-data-external-services",permalink:"/docs/cep/enrich-data/enrich-data-external-services",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/enrich-data/enrich-data-external-services.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Enrich Data with External Services"},sidebar:"defaultSidebar",previous:{title:"Enrich Data with Another Stream",permalink:"/docs/cep/enrich-data/enrich-data-with-stream"},next:{title:"Enrich Data with Built-In Plugins",permalink:"/docs/cep/enrich-data/enrich-data-with-plugins"}},s={},c=[],d={toc:c};function l(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This section explains how to enrich the data in a specific stream by connecting with an external service and adding information received from that service to the existing data."),(0,n.kt)("p",null,"To understand how this is done, consider an example where you have some credit card numbers, but need to connect with an external service to identify the credit card companies that issued them, and then save that information in a database."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Start creating a new stream worker. You can name it ",(0,n.kt)("inlineCode",{parentName:"p"},"CCTypeIdentificationApp")," For instructions, see ",(0,n.kt)("a",{parentName:"p",href:"/docs/cep/tutorials/create-stream-app"},"Creating a Stream Worker"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Define the input stream from which the input data (i.e., the credit card no in this example) must be taken."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-js"},"create stream CreditCardStream (creditCardNo string);\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"To publish the input data to the external application, connect a sink to the stream you created as shown below. For more information about publishing information, see the ",(0,n.kt)("a",{parentName:"p",href:"/docs/cep/tutorials/publishing-data"},"Publishing Data guide"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SINK GetCreditCardInfoStream WITH (type='http-call', publisher.url='http://postman-echo.com/post', method='POST', headers=\"'Content-Type:application/json'\", sink.id=\"cardTypeSink\", map.type='json', map.payload='{{creditCardNo}}') (creditCardNo string);\n")),(0,n.kt)("admonition",{parentName:"li",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"Note the following about the above sink definition:"),(0,n.kt)("ul",{parentName:"admonition"},(0,n.kt)("li",{parentName:"ul"},"It is assumed that the external application receives requests in HTTP. Therefore, the sink type is ",(0,n.kt)("inlineCode",{parentName:"li"},"http-request"),"."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"publisher.url")," parameter specifies the URL to which the outgoing events need to be published via HTTP."),(0,n.kt)("li",{parentName:"ul"},"For more information about the HTTP transport, see ",(0,n.kt)("a",{parentName:"li",href:"/docs/cep/sink/http"},"HTTP Sink")," and ",(0,n.kt)("a",{parentName:"li",href:"/docs/cep/source/http"},"HTTP Source"),".")))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"To capture the response of the external application once it returns the credit card type, create a stream as follows. For more information about consuming data, see the ",(0,n.kt)("a",{parentName:"p",href:"/docs/cep/tutorials/consuming-data"},"Consuming Data guide"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SOURCE EnrichedCreditCardInfoStream WITH (creditCardNo string, creditCardType string);\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Assuming the external application sends its output via HTTP transport, connect a source of the ",(0,n.kt)("inlineCode",{parentName:"p"},"http"),"type to the ",(0,n.kt)("inlineCode",{parentName:"p"},"EnrichedCreditCardStream")," stream as follows. For more information about consuming events, see the ",(0,n.kt)("a",{parentName:"p",href:"/docs/cep/tutorials/consuming-data"},"Consuming Data guide"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SOURCE EnrichedCreditCardInfoStream WITH (source.type='http-call-response', sink.id='cardTypeSink', map.type='json', attributes.creditCardNo = 'trp:creditCardNo', attributes.creditCardType = \".\") (creditCardNo string,creditCardType string);\n")),(0,n.kt)("p",{parentName:"li"},"!!!info\nIt is assumed that the external application sends requests in HTTP. Therefore, the source type is ",(0,n.kt)("inlineCode",{parentName:"p"},"http-request"),". For more information about the HTTP transport, refer to ",(0,n.kt)("a",{parentName:"p",href:"../query-guide/functions/sink/http.md"},"HTTP sink")," and ",(0,n.kt)("a",{parentName:"p",href:"../query-guide/functions/source/http.md"},"HTTP source"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"To save the response of the external application, define a table named ",(0,n.kt)("inlineCode",{parentName:"p"},"CCInfoTable"),"."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE GLOBAL CCInfoTable (cardNo long, cardType string);\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"To save the data enriched by integrating the information received from the external service, add a query for a stream as follows."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"update or insert into CCInfoTable \n    on CCInfoTable.creditCardNo == creditCardNo\nselect *\nfrom EnrichedCreditCardInfoStream;\n")),(0,n.kt)("p",{parentName:"li"},"The above query selects all the attributes in the ",(0,n.kt)("inlineCode",{parentName:"p"},"EnrichedCreditCardInfoStream")," and inserts them into the ",(0,n.kt)("inlineCode",{parentName:"p"},"CCInfoTable")," table. If a specific record already exists,the query updates it by replacing the attribute values with the latest values taken from the ",(0,n.kt)("inlineCode",{parentName:"p"},"EnrichedCreditCardInfoStream"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"The completed stream worker is as follows:"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"@App:name(\"CCTypeIdentificationApp\")\n@App:qlVersion(\"2\")\n\nCREATE STREAM CreditCardStream (creditCardNo string);\n\nCREATE SINK GetCreditCardInfoStream WITH (type='http-call', publisher.url='http://postman-echo.com/post', method='POST', headers=\"'Content-Type:application/json'\", sink.id=\"cardTypeSink\", map.type='json', map.payload='{{creditCardNo}}') (creditCardNo string);\n\nCREATE SOURCE EnrichedCreditCardInfoStream WITH (source.type='http-call-response', sink.id='cardTypeSink', map.type='json', attributes.creditCardNo = 'trp:creditCardNo', attributes.creditCardType = \".\") (creditCardNo string,creditCardType string);\n\nCREATE TABLE GLOBAL CCInfoTable (creditCardNo string, creditCardType string);\n\ninsert into GetCreditCardInfoStream\nselect creditCardNo\nfrom CreditCardStream;\n\nupdate or insert into CCInfoTable on CCInfoTable.creditCardNo == creditCardNo\nselect *\nfrom EnrichedCreditCardInfoStream;\n")))))}l.isMDXComponent=!0}}]);