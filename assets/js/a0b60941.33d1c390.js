"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19824],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>p});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),u=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=u(t),p=r,g=d["".concat(i,".").concat(p)]||d[p]||c[p]||l;return t?a.createElement(g,o(o({ref:n},m),{},{components:t})):a.createElement(g,o({ref:n},m))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},16031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=t(87462),r=(t(67294),t(3905));const l={sidebar_position:4,title:"Coming from SQL"},o=void 0,s={unversionedId:"queryworkers/c8ql/coming-from-sql",id:"queryworkers/c8ql/coming-from-sql",title:"Coming from SQL",description:"If you worked with a relational database management system (RDBMS) such as MySQL, MariaDB or PostgreSQL, you will be familiar with its query language, a dialect of SQL (Structured Query Language).",source:"@site/docs/queryworkers/c8ql/coming-from-sql.md",sourceDirName:"queryworkers/c8ql",slug:"/queryworkers/c8ql/coming-from-sql",permalink:"/docs/queryworkers/c8ql/coming-from-sql",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/coming-from-sql.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Coming from SQL"},sidebar:"defaultSidebar",previous:{title:"Part 6 - Geospatial Queries",permalink:"/docs/queryworkers/c8ql/got-tutorial/geospatial-queries"},next:{title:"Operators",permalink:"/docs/queryworkers/c8ql/operators"}},i={},u=[{value:"Terminology",id:"terminology",level:2},{value:"INSERT",id:"insert",level:2},{value:"Inserting a single row / document",id:"inserting-a-single-row--document",level:3},{value:"Inserting multiple rows / documents",id:"inserting-multiple-rows--documents",level:3},{value:"Inserting rows / documents from a table / collection",id:"inserting-rows--documents-from-a-table--collection",level:3},{value:"Generating test rows / documents",id:"generating-test-rows--documents",level:3},{value:"UPDATE",id:"update",level:2},{value:"Updating a single row / document",id:"updating-a-single-row--document",level:3},{value:"Adding a new column / attribute with a default value",id:"adding-a-new-column--attribute-with-a-default-value",level:3},{value:"Adding a new column / attribute with a calculated value",id:"adding-a-new-column--attribute-with-a-calculated-value",level:3},{value:"Adding optional columns / attributes",id:"adding-optional-columns--attributes",level:3},{value:"Removing a column / attribute",id:"removing-a-column--attribute",level:3},{value:"Removing a column / attribute only for some rows / documents",id:"removing-a-column--attribute-only-for-some-rows--documents",level:3},{value:"REPLACE",id:"replace",level:2},{value:"Replacing a single row / document",id:"replacing-a-single-row--document",level:3},{value:"Replacing multiple rows / documents in a table",id:"replacing-multiple-rows--documents-in-a-table",level:3},{value:"DELETE / REMOVE",id:"delete--remove",level:2},{value:"Deleting a single row / document",id:"deleting-a-single-row--document",level:3},{value:"Deleting multiple rows / documents",id:"deleting-multiple-rows--documents",level:3},{value:"QUERIES",id:"queries",level:2},{value:"Selecting all rows / documents from a table / collection, with all columns / attributes",id:"selecting-all-rows--documents-from-a-table--collection-with-all-columns--attributes",level:3},{value:"Filtering rows / documents from a table / collection, with projection",id:"filtering-rows--documents-from-a-table--collection-with-projection",level:3},{value:"Sorting rows / documents from a table / collection",id:"sorting-rows--documents-from-a-table--collection",level:3},{value:"AGGREGATION",id:"aggregation",level:2},{value:"Counting rows / documents in a table / collection",id:"counting-rows--documents-in-a-table--collection",level:3},{value:"Grouping rows / documents in a table / collection",id:"grouping-rows--documents-in-a-table--collection",level:3},{value:"Minimum, maximum calculation of rows / documents in a table / collection",id:"minimum-maximum-calculation-of-rows--documents-in-a-table--collection",level:3},{value:"Building horizontal lists",id:"building-horizontal-lists",level:3},{value:"JOINS",id:"joins",level:2},{value:"Inner join",id:"inner-join",level:3},{value:"Outer join",id:"outer-join",level:3},{value:"How do browse vectors translate into document queries?",id:"how-do-browse-vectors-translate-into-document-queries",level:2},{value:"Composing the documents to be returned",id:"composing-the-documents-to-be-returned",level:2}],m={toc:u};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you worked with a relational database management system (RDBMS) such as MySQL, MariaDB or PostgreSQL, you will be familiar with its query language, a dialect of SQL (Structured Query Language)."),(0,r.kt)("p",null,"C8's query language is called C8QL. There are some similarities between both languages despite the different data models of the database systems. The most notable difference is probably the concept of ",(0,r.kt)("inlineCode",{parentName:"p"},"loops")," in C8QL, which makes it feel more like a programming language. The loops suits the schema-less model more natural and makes the query language very powerful while remaining easy to read and write."),(0,r.kt)("p",null,"The C8 Query Language (C8QL) is similar to the Structured Query Language (SQL) in its purpose. Both support reading and modifying collection data, however C8QL does not support data definition operations, such as creating and dropping databases, collections and indexes."),(0,r.kt)("p",null,"Though some of the keywords overlap, C8QL syntax differs from SQL. For instance, the SQL ",(0,r.kt)("inlineCode",{parentName:"p"},"WHERE")," and C8QL ",(0,r.kt)("inlineCode",{parentName:"p"},"FILTER")," clauses are equivalent in that they both define conditions for returning results. But, SQL uses predefined sequence to determine where the WHERE clause must occur in the statement. In C8QL, clauses execute from left to right, so the position of a FILTER clause in the query determines its precedence."),(0,r.kt)("p",null,"Despite few differences, anyone with an SQL background should have no difficulty in learning C8QL."),(0,r.kt)("h2",{id:"terminology"},"Terminology"),(0,r.kt)("p",null,"Below is a table with the terms of both systems."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"SQL")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"th"},"C8QL")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database"),(0,r.kt)("td",{parentName:"tr",align:null},"database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"table"),(0,r.kt)("td",{parentName:"tr",align:null},"collection")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"row"),(0,r.kt)("td",{parentName:"tr",align:null},"document")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"column"),(0,r.kt)("td",{parentName:"tr",align:null},"attribute")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"table joins"),(0,r.kt)("td",{parentName:"tr",align:null},"collection joins")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"primary key"),(0,r.kt)("td",{parentName:"tr",align:null},"primary key (",(0,r.kt)("inlineCode",{parentName:"td"},"_key")," attribute)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"index")))),(0,r.kt)("h2",{id:"insert"},"INSERT"),(0,r.kt)("p",null,"The INSERT keyword adds new documents to a collection.  It uses the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"INSERT document\n    INTO collection options\n")),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/insert"},"INSERT")," for more details."),(0,r.kt)("h3",{id:"inserting-a-single-row--document"},"Inserting a single row / document"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO users (name, gender)\n    VALUES ("John Doe", "m");\n')),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'INSERT { name: "John Doe", gender: "m" }\n   INTO users\n')),(0,r.kt)("h3",{id:"inserting-multiple-rows--documents"},"Inserting multiple rows / documents"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'INSERT INTO users (name, gender)\n    VALUES ("John Doe", "m"), \n           ("Jane Smith", "f");\n')),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR user IN [ \n    { name: "John Doe", gender: "m" },\n    { name: "Jane Smith", gender: "f"}\n   ]\n   INSERT user INTO users\n')),(0,r.kt)("h3",{id:"inserting-rows--documents-from-a-table--collection"},"Inserting rows / documents from a table / collection"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO backup (uid, name, gender)\n    SELECT uid, name, gender\n    FROM users\n    WHERE active = 1;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n   FILTER user.active == 1\n   INSERT user INTO backup\n")),(0,r.kt)("h3",{id:"generating-test-rows--documents"},"Generating test rows / documents"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Use scripts or stored procedures or populate from an existing table.\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},' FOR i IN 1..1000\n    INSERT {\n        name: CONCAT("test", i),\n        gender: (i % 2 == 0 ? "f" : "m")\n    }\n    INTO users\n')),(0,r.kt)("h2",{id:"update"},"UPDATE"),(0,r.kt)("p",null,"The UPDATE keyword partially modifies documents in a collection. There are two syntaxes available for this operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"UPDATE document IN collection options\n\nUPDATE keyExpression WITH document IN collection options\n")),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/update"},"UPDATE")," for more details."),(0,r.kt)("h3",{id:"updating-a-single-row--document"},"Updating a single row / document"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'UPDATE users \n  SET name = "John Smith"\n  WHERE id = 1;\n')),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'UPDATE { _key: "1" }\n  WITH { name: "John Smith" }\n  IN users\n')),(0,r.kt)("h3",{id:"adding-a-new-column--attribute-with-a-default-value"},"Adding a new column / attribute with a default value"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE users \n  ADD COLUMN numberOfLogins \n  INTEGER NOT NULL default 0;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  UPDATE user \n    WITH { numberOfLogins: 0 } IN users\n")),(0,r.kt)("h3",{id:"adding-a-new-column--attribute-with-a-calculated-value"},"Adding a new column / attribute with a calculated value"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE users \n  ADD COLUMN numberOfLogins INTEGER \n             NOT NULL default 0;\nUPDATE users \n  SET numberOfLogins = (\n    SELECT COUNT(*) FROM logins \n    WHERE user = users.id\n  ) \n  WHERE active = 1;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.active == 1\n    UPDATE user \n      WITH { \n        numberOfLogins: LENGTH(\n          FOR login IN logins \n            FILTER login.user == user._key \n            COLLECT WITH COUNT INTO numLogins \n            RETURN numLogins \n        )\n      } IN users\n")),(0,r.kt)("h3",{id:"adding-optional-columns--attributes"},"Adding optional columns / attributes"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE users \n  ADD COLUMN isImportantUser \n             INTEGER default NULL,\n  ADD COLUMN dateBecameImportant \n             INTEGER default NULL;\n \nUPDATE users \n  SET isImportantUser = 1, \n      dateBecameImportant = UNIX_TIMESTAMP()\n  WHERE isImportantUser IS NULL AND (\n    SELECT COUNT(*) FROM logins \n      WHERE user = user.id\n  ) > 50;\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Not directly possible, must set column to default value (e.g. NULL) for rows that do not qualify.")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"LET date = DATE_NOW()\n  FOR user IN users\n    FILTER user.isImportantUser == null\n    LET numberOfLogins = (\n      FOR login IN logins \n        FILTER login.user == user._key\n        COLLECT WITH COUNT INTO numLogins\n        RETURN numLogins\n      )\n    FILTER numberOfLogins > 50\n    UPDATE user \n      WITH { \n        isImportantUser: 1, \n        dateBecameImportant: date \n      } \n      IN users\n")),(0,r.kt)("h3",{id:"removing-a-column--attribute"},"Removing a column / attribute"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE users\n  DROP COLUMN numberOfLogins;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  UPDATE user WITH { numberOfLogins: null } \n    IN users \n  OPTIONS { keepNull: false }\n")),(0,r.kt)("h3",{id:"removing-a-column--attribute-only-for-some-rows--documents"},"Removing a column / attribute only for some rows / documents"),(0,r.kt)("p",null,"SQL: *"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"UPDATE users \n  SET isImportantUser = NULL, \n    dateBecameImportant = NULL\n  WHERE isImportantUser = 1 AND active = 0;\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Not directly possible, must set column to default value (e.g. NULL) for rows that qualify.")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.isImportantUser == 1 AND \n         user.active == 0\n    UPDATE user \n      WITH { \n        isImportantUser: null, \n        dateBecameImportant: null \n      } \n      IN users \n    OPTIONS { keepNull: false }\n")),(0,r.kt)("h2",{id:"replace"},"REPLACE"),(0,r.kt)("p",null,"The REPLACE keyword completely modifies documents in a collection. There are two syntaxes available for this operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    REPLACE document IN collection options\n\n    REPLACE keyExpression WITH document IN collection options\n")),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/replace"},"REPLACE")," for more details."),(0,r.kt)("h3",{id:"replacing-a-single-row--document"},"Replacing a single row / document"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'REPLACE INTO users (name, gender) \n  VALUES ("Jane Smith", "f")\n  WHERE id = 1;\n')),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'REPLACE { _key: "1" }\n  WITH {\n    name: "Jane Smith",\n    gender: "f"\n  }\n  IN users\n')),(0,r.kt)("h3",{id:"replacing-multiple-rows--documents-in-a-table"},"Replacing multiple rows / documents in a table"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"REPLACE INTO users (name, gender)\n  SELECT name, gender FROM backup\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN backup\n  REPLACE user \n    WITH { \n      name: backup.name, \n      gender: backup.gender \n    }\n    IN users\n")),(0,r.kt)("h2",{id:"delete--remove"},"DELETE / REMOVE"),(0,r.kt)("p",null,"SQL uses DELETE statements to remove rows from a table. In C8QL, the REMOVE keyword allows you to remove documents from a collection."),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/remove"},"REMOVE")," for more details."),(0,r.kt)("h3",{id:"deleting-a-single-row--document"},"Deleting a single row / document"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE FROM users\n  WHERE id = 1;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'REMOVE { _key:"1" } \n  IN users\n')),(0,r.kt)("h3",{id:"deleting-multiple-rows--documents"},"Deleting multiple rows / documents"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"DELETE FROM users\n  WHERE active = 1;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.active == 1\n  REMOVE user IN users\n")),(0,r.kt)("h2",{id:"queries"},"QUERIES"),(0,r.kt)("p",null,"When you want to retrieve rows from a table in SQL, you query the database with a ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT")," statement. In C8QL, you query documents from a collection using the ",(0,r.kt)("inlineCode",{parentName:"p"},"FOR")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," keywords."),(0,r.kt)("p",null,"Here, ",(0,r.kt)("inlineCode",{parentName:"p"},"FOR")," iterates over documents in a collection. ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," determines what the query returns to the client."),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/for"},"FOR")," for more details."),(0,r.kt)("h3",{id:"selecting-all-rows--documents-from-a-table--collection-with-all-columns--attributes"},"Selecting all rows / documents from a table / collection, with all columns / attributes"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * \n  FROM users;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  RETURN user\n")),(0,r.kt)("h3",{id:"filtering-rows--documents-from-a-table--collection-with-projection"},"Filtering rows / documents from a table / collection, with projection"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT CONCAT(firstName, " ", lastName) \n  AS name, gender FROM users\n  WHERE active = 1;\n')),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR user IN users\n  FILTER user.active == 1\n  RETURN {\n    name: CONCAT(user.firstName, " ",\n                 user.lastName),\n    gender: user.gender\n  }\n')),(0,r.kt)("h3",{id:"sorting-rows--documents-from-a-table--collection"},"Sorting rows / documents from a table / collection"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users\n  WHERE active = 1\n  ORDER BY name, gender;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.active == 1\n  SORT user.name, user.gender\n  RETURN user\n")),(0,r.kt)("h2",{id:"aggregation"},"AGGREGATION"),(0,r.kt)("p",null,"There are a series of functions and clauses in both SQL and C8QL to group or further refine the result-set to get the information you need. For instance, counting documents, finding the smallest or largest value, and so on."),(0,r.kt)("p",null,"Refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/collect"},"COLLECT")," for more details."),(0,r.kt)("h3",{id:"counting-rows--documents-in-a-table--collection"},"Counting rows / documents in a table / collection"),(0,r.kt)("p",null,"Both SQL and C8QL can count the rows or documents in the result-set and tell you how many it finds. C8QL manages counts using the ",(0,r.kt)("inlineCode",{parentName:"p"},"WITH")," keyword to count the documents into a return variable."),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT gender, COUNT(*) AS number FROM users\n  WHERE active = 1\n  GROUP BY gender;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.active == 1\n  COLLECT gender = user.gender \n    WITH COUNT INTO number\n  RETURN { \n    gender: gender, \n    number: number \n  }\n")),(0,r.kt)("h3",{id:"grouping-rows--documents-in-a-table--collection"},"Grouping rows / documents in a table / collection"),(0,r.kt)("p",null,"In SQL, the ",(0,r.kt)("inlineCode",{parentName:"p"},"GROUP BY")," clauses collects the result-set according to the given column. C8QL replaces this with the ",(0,r.kt)("inlineCode",{parentName:"p"},"COLLECT")," keyword."),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT YEAR(dateRegister) AS year, \n       MONTH(dateRegister) AS month, \n       COUNT(*) AS number \n  FROM users\n  WHERE active = 1\n  GROUP BY year, month\n  HAVING number > 20;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.active == 1\n  COLLECT\n    year = DATE_YEAR(user.dateRegistered), \n    month = DATE_MONTH(user.dateRegistered) \n    WITH COUNT INTO number\n    FILTER number > 20\n    RETURN { \n      year: year, \n      month: month, \n      number: number \n    }\n")),(0,r.kt)("h3",{id:"minimum-maximum-calculation-of-rows--documents-in-a-table--collection"},"Minimum, maximum calculation of rows / documents in a table / collection"),(0,r.kt)("p",null,"Both SQL and C8QL use functions to find the minimum and maximum values for a given field. In C8QL, it\u2019s handled with the ",(0,r.kt)("inlineCode",{parentName:"p"},"COLLECT")," keyword."),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT MIN(dateRegistered) AS minDate, \n  MAX(dateRegistered) AS maxDate \n  FROM users\n    WHERE active = 1;\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.active == 1\n  COLLECT AGGREGATE\n    minDate = MIN(user.dateRegistered),\n    maxDate = MAX(user.dateRegistered)\n  RETURN { minDate, maxDate }\n")),(0,r.kt)("h3",{id:"building-horizontal-lists"},"Building horizontal lists"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT gender, GROUP_CONCAT(id) AS userIds \n  FROM users\n    WHERE active = 1\n    GROUP BY gender;\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"Not really applicable \u2013 use either a concatenated string column or a special datatype (non-portable).")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users\n  FILTER user.active == 1\n  COLLECT gender = user.gender \n    INTO usersByGender\n  RETURN { \n    gender: gender, \n    userIds: usersByGender[*].user._key\n  }\n")),(0,r.kt)("h2",{id:"joins"},"JOINS"),(0,r.kt)("p",null,"Similar to joins in relational databases, C8QL has its own implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"JOINS"),". Coming from an SQL background, you might find the C8QL syntax very different from your expectations."),(0,r.kt)("h3",{id:"inner-join"},"Inner join"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users\n  INNER JOIN friends \n  ON (friends.user = users.id);\n")),(0,r.kt)("p",null,"C8QL:"),(0,r.kt)("p",null,"An inner join can be expressed easily in C8QL by nesting FOR loops and using FILTER statements:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users \n  FOR friend IN friends\n    FILTER friend.user == user._key\n    RETURN MERGE(user, friend)\n")),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"In C8QL the preferred way is to ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," the document parts from the different collections in individual sub-attributes to avoid attribute name conflicts.")),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users \n  FOR friend IN friends\n    FILTER friend.user == user._key\n    RETURN { user: user, friend: friend }\n")),(0,r.kt)("p",null,"It is also possible to return the matching documents in a horizontal list:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users \n  RETURN { \n    user: user, \n    friends: (\n      FOR friend IN friends\n        FILTER friend.user == user._key\n        RETURN friend\n    )\n  }\n")),(0,r.kt)("h3",{id:"outer-join"},"Outer join"),(0,r.kt)("p",null,"SQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users\n  LEFT JOIN friends \n    ON (friends.user = users.id);\n")),(0,r.kt)("p",null,"C8QL:\nOuter joins are not directly supported in C8QL, but can be implemented using subqueries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR user IN users \n  LET friends = (\n    FOR friend IN friends\n      FILTER friend.user == user._key\n      RETURN friend\n  )\n  FOR friendToJoin IN (\n    LENGTH(friends) > 0 ? friends :\n      [ { /* no match exists */ } ]\n    )\n    RETURN { \n      user: user,\n      friend: friend\n    }\n")),(0,r.kt)("p",null,"In the main, C8QL is a declarative language. Queries express what results you want but not how you want to get there. C8QL aims to be human-readable, therefore uses keywords from the English language."),(0,r.kt)("p",null,"It also aims to be client independent, meaning that the language and syntax are the same for all clients, no matter what programming language the clients use. Additionally, it supports complex query patterns and the various data models Macrometa offers."),(0,r.kt)("p",null,"C8QL also supports several aggregation and string functions. For more information, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/coming-from-sql"},"C8QL Functions"),"."),(0,r.kt)("h2",{id:"how-do-browse-vectors-translate-into-document-queries"},"How do browse vectors translate into document queries?"),(0,r.kt)("p",null,"In traditional SQL you may either fetch all columns of a table row by row, using ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT * FROM table"),", or select a subset of the columns. The list of table columns to fetch is commonly called ",(0,r.kt)("em",{parentName:"p"},"column list")," or ",(0,r.kt)("em",{parentName:"p"},"browse vector"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT columnA, columnB, columnZ FROM table\n")),(0,r.kt)("p",null,"Since documents aren't two-dimensional, and neither do you want to be limited to returning two-dimensional lists, the requirements for a query language are higher."),(0,r.kt)("p",null,"C8QL is thus a little bit more complex than plain SQL at first, but offers much more flexibility in the long run. It lets you handle arbitrarily structured documents in convenient ways, mostly leaned on the syntax used in JavaScript."),(0,r.kt)("h2",{id:"composing-the-documents-to-be-returned"},"Composing the documents to be returned"),(0,r.kt)("p",null,"The C8QL ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement returns one item per document it is handed. You can return the whole document, or just parts of it."),(0,r.kt)("p",null,"Given that ",(0,r.kt)("em",{parentName:"p"},"oneDocument")," is a document (retrieved like ",(0,r.kt)("inlineCode",{parentName:"p"},'LET oneDocument = DOCUMENT("myusers/3456789")')," for instance), it can be returned as-is like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"RETURN oneDocument\n")),(0,r.kt)("p",null,"The above statement returns a document like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "_id": "myusers/3456789",\n        "_key": "3456789"\n        "_rev": "14253647",\n        "firstName": "John",\n        "lastName": "Doe",\n        "address": {\n            "city": "Gotham",\n            "street": "Road To Nowhere 1"\n        },\n        "hobbies": [\n            { name: "swimming", howFavorite: 10 },\n            { name: "biking", howFavorite: 6 },\n            { name: "programming", howFavorite: 4 }\n        ]\n    }\n]\n')),(0,r.kt)("p",null,"To return the hobbies sub-structure only:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"RETURN oneDocument.hobbies\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    [\n        { name: "swimming", howFavorite: 10 },\n        { name: "biking", howFavorite: 6 },\n        { name: "programming", howFavorite: 4 }\n    ]\n]\n')),(0,r.kt)("p",null,"To return the hobbies and the address:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"RETURN {\n    hobbies: oneDocument.hobbies,\n    address: oneDocument.address\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        hobbies: [\n            { name: "swimming", howFavorite: 10 },\n            { name: "biking", howFavorite: 6 },\n            { name: "programming", howFavorite: 4 }\n        ],\n        address: {\n            "city": "Gotham",\n            "street": "Road To Nowhere 1"\n        }\n    }\n]\n')),(0,r.kt)("p",null,"To return the first hobby only:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"RETURN oneDocument.hobbies[0].name\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    "swimming"\n]\n')),(0,r.kt)("p",null,"To return a list of all hobby strings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"RETURN { hobbies: oneDocument.hobbies[*].name }\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    { hobbies: ["swimming", "biking", "programming"] }\n]\n')),(0,r.kt)("p",null,"More complex ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/array"},"array")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/document"},"object manipulations")," can be done using C8QL functions and ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operators"},"operators"),"."))}c.isMDXComponent=!0}}]);