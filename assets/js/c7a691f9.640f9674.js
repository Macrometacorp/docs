"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[39415],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(a),d=i,c=u["".concat(p,".").concat(d)]||u[d]||h[d]||r;return a?n.createElement(c,l(l({ref:t},m),{},{components:a})):n.createElement(c,l({ref:t},m))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},78389:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(87462),i=(a(67294),a(3905));const r={title:"Graph Functions",sidebar_position:40},l=void 0,o={unversionedId:"graphs/graph-functions",id:"graphs/graph-functions",title:"Graph Functions",description:"A lot of graph functions accept a vertex (or edge) example as parameter as defined in the next sections.",source:"@site/docs/graphs/graph-functions.md",sourceDirName:"graphs",slug:"/graphs/graph-functions",permalink:"/docs/graphs/graph-functions",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/graphs/graph-functions.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{title:"Graph Functions",sidebar_position:40},sidebar:"defaultSidebar",previous:{title:"Using Rest API",permalink:"/docs/graphs/using-rest-api"},next:{title:"Example Graphs",permalink:"/docs/graphs/example-graphs"}},p={},s=[{value:"Get vertex <em>from</em> of an edge",id:"get-vertex-from-of-an-edge",level:2},{value:"Get vertex <em>to</em> of an edge",id:"get-vertex-to-of-an-edge",level:2},{value:"Get Neighbors",id:"get-neighbors",level:2},{value:"Get Common Neighbors",id:"get-common-neighbors",level:2},{value:"Count Common Neighbors",id:"count-common-neighbors",level:3},{value:"Get Common Properties",id:"get-common-properties",level:2},{value:"Count Common Properties",id:"count-common-properties",level:2},{value:"Get Paths",id:"get-paths",level:2},{value:"Get Shortest Path",id:"get-shortest-path",level:2},{value:"Get Distance To",id:"get-distance-to",level:2},{value:"Absolute Eccentricity",id:"absolute-eccentricity",level:2},{value:"Get Eccentricity",id:"get-eccentricity",level:2},{value:"Get Absolute Closeness",id:"get-absolute-closeness",level:2},{value:"Get Closeness",id:"get-closeness",level:2},{value:"Get Absolute Betweenness",id:"get-absolute-betweenness",level:2},{value:"Get Betweenness",id:"get-betweenness",level:2},{value:"Get Radius",id:"get-radius",level:2},{value:"Get Diameter",id:"get-diameter",level:2}],m={toc:s};function h(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A lot of graph functions accept a vertex (or edge) example as parameter as defined in the next sections."),(0,i.kt)("p",null,"Examples will explain the API on the ",(0,i.kt)("a",{parentName:"p",href:"#the-city-graph"},"the city graph"),":"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Social Example Graph",src:a(62417).Z,width:"992",height:"777"})),(0,i.kt)("h2",{id:"get-vertex-from-of-an-edge"},"Get vertex ",(0,i.kt)("em",{parentName:"h2"},"from")," of an edge"),(0,i.kt)("p",null,"Get the source vertex of an edge"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._fromVertex(edgeId)")),(0,i.kt)("p",null,"Returns the vertex defined with the attribute ",(0,i.kt)("em",{parentName:"p"},"_from")," of the edge with ",(0,i.kt)("em",{parentName:"p"},"edgeId")," as its ",(0,i.kt)("em",{parentName:"p"},"_id"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"edgeId (required) ",(0,i.kt)("em",{parentName:"li"},"_id")," attribute of the edge")),(0,i.kt)("h2",{id:"get-vertex-to-of-an-edge"},"Get vertex ",(0,i.kt)("em",{parentName:"h2"},"to")," of an edge"),(0,i.kt)("p",null,"Get the target vertex of an edge"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._toVertex(edgeId)")),(0,i.kt)("p",null,"Returns the vertex defined with the attribute ",(0,i.kt)("em",{parentName:"p"},"_to")," of the edge with ",(0,i.kt)("em",{parentName:"p"},"edgeId")," as its ",(0,i.kt)("em",{parentName:"p"},"_id"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"edgeId (required) ",(0,i.kt)("em",{parentName:"li"},"_id")," attribute of the edge")),(0,i.kt)("h2",{id:"get-neighbors"},"Get Neighbors"),(0,i.kt)("p",null,"Get ",(0,i.kt)("inlineCode",{parentName:"p"},"all neighbors")," of the vertices defined by the example"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._neighbors(vertexExample, options)")),(0,i.kt)("p",null,"The function accepts an id, an example, a list of examples or even an empty example as parameter for vertexExample."),(0,i.kt)("p",null,"The complexity of this method is ",(0,i.kt)("strong",{parentName:"p"},"O(n","*","m^x)")," with ",(0,i.kt)("em",{parentName:"p"},"n")," being the vertices defined by the parameter vertexExamplex, ",(0,i.kt)("em",{parentName:"p"},"m")," the average amount of neighbors and ",(0,i.kt)("em",{parentName:"p"},"x")," the maximal depths. Hence the default call would have a complexity of ",(0,i.kt)("strong",{parentName:"p"},"O(n","*","m)"),";"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"vertexExample (optional)"),(0,i.kt)("li",{parentName:"ul"},"options (optional) An object defining further options. Can have the following values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges. Possible values are ",(0,i.kt)("em",{parentName:"li"},"outbound"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"any")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"edgeExamples"),": Filter the edges"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"neighborExamples"),": Filter the neighbor vertices"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"edgeCollectionRestriction")," : One or a list of edge-collection names that should be considered to be on the path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"vertexCollectionRestriction")," : One or a list of vertex-collection names that should be considered on the intermediate vertex steps."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"minDepth"),": Defines the minimal number of intermediate steps to neighbors (default is 1)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"maxDepth"),": Defines the maximal number of intermediate steps to neighbors (default is 1).")))),(0,i.kt)("h2",{id:"get-common-neighbors"},"Get Common Neighbors"),(0,i.kt)("p",null,"Get all ",(0,i.kt)("inlineCode",{parentName:"p"},"common neighbors")," of the vertices defined by the examples."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._commonNeighbors(vertex1Example, vertex2Examples, optionsVertex1, optionsVertex2)")),(0,i.kt)("p",null,"This function returns the intersection of ",(0,i.kt)("em",{parentName:"p"},"graph_module._neighbors(vertex1Example, optionsVertex1)")," and ",(0,i.kt)("em",{parentName:"p"},"graph_module._neighbors(vertex2Example, optionsVertex2)"),"."),(0,i.kt)("p",null,"For parameter documentation see ",(0,i.kt)("a",{parentName:"p",href:"#get-neighbors"},"_neighbors"),"."),(0,i.kt)("p",null,"The complexity of this method is ",(0,i.kt)("strong",{parentName:"p"},"O(n","*","m^x)")," with ",(0,i.kt)("em",{parentName:"p"},"n")," being the maximal amount of vertices defined by the parameters vertexExamples, ",(0,i.kt)("em",{parentName:"p"},"m")," the average amount of neighbors and ",(0,i.kt)("em",{parentName:"p"},"x")," the maximal depths. Hence the default call would have a complexity of ",(0,i.kt)("strong",{parentName:"p"},"O(n","*","m)"),";"),(0,i.kt)("h3",{id:"count-common-neighbors"},"Count Common Neighbors"),(0,i.kt)("p",null,"Get the amount of common neighbors of the vertices defined by the examples."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._countCommonNeighbors(vertex1Example, vertex2Examples, optionsVertex1, optionsVertex2)")),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("a",{parentName:"p",href:"#get-common-neighbors"},"_commonNeighbors")," but returns count instead of the elements."),(0,i.kt)("h2",{id:"get-common-properties"},"Get Common Properties"),(0,i.kt)("p",null,"Get the vertices of the graph that share ",(0,i.kt)("inlineCode",{parentName:"p"},"common properties"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._commonProperties(vertex1Example, vertex2Examples, options)")),(0,i.kt)("p",null,"The function accepts an id, an example, a list of examples or even an empty example as parameter for vertex1Example and vertex2Example."),(0,i.kt)("p",null,"The complexity of this method is ",(0,i.kt)("strong",{parentName:"p"},"O(n)")," with ",(0,i.kt)("em",{parentName:"p"},"n")," being the maximal amount of vertices defined by the parameters vertexExamples."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"vertex1Examples (optional) Filter the set of source vertices"),(0,i.kt)("li",{parentName:"ul"},"vertex2Examples (optional) Filter the set of vertices compared to."),(0,i.kt)("li",{parentName:"ul"},"options (optional) An object defining further options. Can have the following values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"vertex1CollectionRestriction")," : One or a list of vertex-collection names that should be searched for source vertices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"vertex2CollectionRestriction")," : One or a list of vertex-collection names that should be searched for compare vertices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"ignoreProperties")," : One or a list of attribute names of a document that should be ignored.")))),(0,i.kt)("h2",{id:"count-common-properties"},"Count Common Properties"),(0,i.kt)("p",null,"Get the amount of vertices of the graph that share common properties."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._countCommonProperties(vertex1Example, vertex2Examples, options)")),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("a",{parentName:"p",href:"#get-common-properties"},"_commonProperties")," but returns count instead of the objects."),(0,i.kt)("h2",{id:"get-paths"},"Get Paths"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"_paths")," function returns all paths of a graph."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._paths(options)")),(0,i.kt)("p",null,"This function determines all available paths in a graph."),(0,i.kt)("p",null,"The complexity of this method is ",(0,i.kt)("strong",{parentName:"p"},"O(n","*","n","*","m)")," with ",(0,i.kt)("em",{parentName:"p"},"n")," being the amount of vertices in the graph and ",(0,i.kt)("em",{parentName:"p"},"m")," the average amount of connected edges;"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"options (optional) An object containing options, see below:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges. Possible values are ",(0,i.kt)("em",{parentName:"li"},"any"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"outbound")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"followCycles")," (optional): If set to ",(0,i.kt)("em",{parentName:"li"},"true")," the query follows cycles in the graph, default is false."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"minLength")," (optional): Defines the minimal length a path must have to be returned (default is 0)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"maxLength")," (optional): Defines the maximal length a path must have to be returned (default is 10).")))),(0,i.kt)("h2",{id:"get-shortest-path"},"Get Shortest Path"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"_shortestPath")," function returns all shortest paths of a graph."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._shortestPath(startVertexExample, endVertexExample, options)")),(0,i.kt)("p",null,"This function determines all shortest paths in a graph. The function accepts an id, an example, a list of examples or even an empty example as parameter for start and end vertex."),(0,i.kt)("p",null,"The length of a path is by default the amount of edges from one start vertex to an end vertex. The option weight allows the user to define an edge attribute representing the length."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"startVertexExample (optional) An example for the desired start Vertices."),(0,i.kt)("li",{parentName:"ul"},"endVertexExample (optional) An example for the desired end Vertices."),(0,i.kt)("li",{parentName:"ul"},"options (optional) An object containing options, see below:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges as a string. Possible values are ",(0,i.kt)("em",{parentName:"li"},"outbound"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"any")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"edgeCollectionRestriction"),": One or multiple edge collection names. Only edges from these collections will be considered for the path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"startVertexCollectionRestriction"),": One or multiple vertex collection names. Only vertices from these collections will be considered as start vertex of a path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"endVertexCollectionRestriction"),": One or multiple vertex collection names. Only vertices from these collections will be considered as end vertex of a path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"weight"),": The name of the attribute of the edges containing the length as a string."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"defaultWeight"),": Only used with the option ",(0,i.kt)("em",{parentName:"li"},"weight"),".\nIf an edge does not have the attribute named as defined in option ",(0,i.kt)("em",{parentName:"li"},"weight")," this default is used as length.\nIf no default is supplied the default would be positive Infinity so the path could not be calculated.")))),(0,i.kt)("h2",{id:"get-distance-to"},"Get Distance To"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"_distanceTo")," function returns all paths and there distance within a graph."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._distanceTo(startVertexExample, endVertexExample, options)")),(0,i.kt)("p",null,"This function is a wrapper of ",(0,i.kt)("a",{parentName:"p",href:"#get-shortest-path"},"graph._shortestPath"),". It does not return the actual path but only the distance between two vertices."),(0,i.kt)("h2",{id:"absolute-eccentricity"},"Absolute Eccentricity"),(0,i.kt)("p",null,"Get the ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Distance_%28graph_theory%29"},"eccentricity"),'{:target="_blank"} of the vertices defined by the examples.'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._absoluteEccentricity(vertexExample, options)")),(0,i.kt)("p",null,"The function accepts an id, an example, a list of examples or even an empty example as parameter for vertexExample."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"vertexExample (optional) Filter the vertices."),(0,i.kt)("li",{parentName:"ul"},"options (optional) An object defining further options. Can have the following values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges. Possible values are ",(0,i.kt)("em",{parentName:"li"},"outbound"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"any")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"edgeCollectionRestriction")," : One or a list of edge-collection names that should be considered to be on the path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"startVertexCollectionRestriction")," : One or a list of vertex-collection names that should be considered for source vertices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"endVertexCollectionRestriction")," : One or a list of vertex-collection names that should be considered for target vertices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"weight"),": The name of the attribute of the edges containing the weight."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"defaultWeight"),": Only used with the option ",(0,i.kt)("em",{parentName:"li"},"weight"),".\nIf an edge does not have the attribute named as defined in option ",(0,i.kt)("em",{parentName:"li"},"weight")," this default is used as weight.\nIf no default is supplied the default would be positive infinity so the path and hence the eccentricity can not be calculated.")))),(0,i.kt)("h2",{id:"get-eccentricity"},"Get Eccentricity"),(0,i.kt)("p",null,"Get the normalized ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Distance_%28graph_theory%29"},"eccentricity"),'{:target="_blank"}\nof the vertices defined by the examples.'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._eccentricity(vertexExample, options)")),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("a",{parentName:"p",href:"#get-absolute-eccentricity"},"_absoluteEccentricity")," but returns a normalized result."),(0,i.kt)("h2",{id:"get-absolute-closeness"},"Get Absolute Closeness"),(0,i.kt)("p",null,"Get the ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Centrality#Closeness_centrality"},"closeness")," of the vertices defined by the examples."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._absoluteCloseness(vertexExample, options)")),(0,i.kt)("p",null,"The function accepts an id, an example, a list of examples or even an empty example as parameter for ",(0,i.kt)("em",{parentName:"p"},"vertexExample"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"vertexExample (optional) Filter the vertices."),(0,i.kt)("li",{parentName:"ul"},"options (optional) An object defining further options. Can have the following values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges. Possible values are ",(0,i.kt)("em",{parentName:"li"},"outbound"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"any")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"edgeCollectionRestriction")," : One or a list of edge-collection names that should be considered to be on the path."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"startVertexCollectionRestriction")," : One or a list of vertex-collection names that should be considered for source vertices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"endVertexCollectionRestriction")," : One or a list of vertex-collection names that should be considered for target vertices."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"weight"),": The name of the attribute of the edges containing the weight."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"defaultWeight"),": Only used with the option ",(0,i.kt)("em",{parentName:"li"},"weight"),".\nIf an edge does not have the attribute named as defined in option ",(0,i.kt)("em",{parentName:"li"},"weight")," this default is used as weight.\nIf no default is supplied the default would be positive infinity so the path and hence the closeness can not be calculated.")))),(0,i.kt)("h2",{id:"get-closeness"},"Get Closeness"),(0,i.kt)("p",null,"Get the normalized ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Centrality#Closeness_centrality"},"closeness"),'{:target="_blank"}\nof graphs vertices.'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._closeness(options)")),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("a",{parentName:"p",href:"#get-absolute-closeness"},"_absoluteCloseness")," but returns a normalized value."),(0,i.kt)("h2",{id:"get-absolute-betweenness"},"Get Absolute Betweenness"),(0,i.kt)("p",null,"Get the ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Betweenness_centrality"},"betweenness"),'{:target="_blank"}\nof all vertices in the graph.'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._absoluteBetweenness(vertexExample, options)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"vertexExample (optional) Filter the vertices, see ",(0,i.kt)("a",{parentName:"li",href:"#definition-of-examples"},"Definition of examples")),(0,i.kt)("li",{parentName:"ul"},"options (optional) An object defining further options. Can have the following values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges. Possible values are ",(0,i.kt)("em",{parentName:"li"},"outbound"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"any")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"weight"),": The name of the attribute of the edges containing the weight."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"defaultWeight"),": Only used with the option ",(0,i.kt)("em",{parentName:"li"},"weight"),".\nIf an edge does not have the attribute named as defined in option ",(0,i.kt)("em",{parentName:"li"},"weight")," this default is used as weight.\nIf no default is supplied the default would be positive infinity so the path and hence the betweenness can not be calculated.")))),(0,i.kt)("h2",{id:"get-betweenness"},"Get Betweenness"),(0,i.kt)("p",null,"Get the normalized ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Betweenness_centrality"},"betweenness")," of graphs vertices."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph_module._betweenness(options)")),(0,i.kt)("p",null,"Similar to ",(0,i.kt)("a",{parentName:"p",href:"#get-absolute-betweenness"},"_absoluteBetweenness")," but returns normalized values."),(0,i.kt)("h2",{id:"get-radius"},"Get Radius"),(0,i.kt)("p",null,"Get the ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29"},"radius")," of a graph."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"options (optional) An object defining further options. Can have the following values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges. Possible values are ",(0,i.kt)("em",{parentName:"li"},"outbound"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"any")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"weight"),": The name of the attribute of the edges containing the weight."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"defaultWeight"),": Only used with the option ",(0,i.kt)("em",{parentName:"li"},"weight"),".\nIf an edge does not have the attribute named as defined in option ",(0,i.kt)("em",{parentName:"li"},"weight")," this default is used as weight.\nIf no default is supplied the default would be positive infinity so the path and hence the radius can not be calculated.")))),(0,i.kt)("h2",{id:"get-diameter"},"Get Diameter"),(0,i.kt)("p",null,"Get the ",(0,i.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Eccentricity_%28graph_theory%29"},"diameter"),'{:target="_blank"}\nof a graph.'),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"graph._diameter(graphName, options)")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Parameters")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"options (optional) An object defining further options. Can have the following values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"direction"),": The direction of the edges. Possible values are ",(0,i.kt)("em",{parentName:"li"},"outbound"),", ",(0,i.kt)("em",{parentName:"li"},"inbound")," and ",(0,i.kt)("em",{parentName:"li"},"any")," (default)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"weight"),": The name of the attribute of the edges containing the weight."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"defaultWeight"),": Only used with the option ",(0,i.kt)("em",{parentName:"li"},"weight"),".\nIf an edge does not have the attribute named as defined in option ",(0,i.kt)("em",{parentName:"li"},"weight")," this default is used as weight.\nIf no default is supplied the default would be positive infinity so the path and hence the radius can not be calculated.")))))}h.isMDXComponent=!0},62417:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/cities_graph-d8e1073687e912930a91dbfc98bd8fe3.png"}}]);