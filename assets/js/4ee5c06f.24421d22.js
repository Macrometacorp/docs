"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[33713],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,f=c["".concat(i,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(f,s(s({ref:t},m),{},{components:n})):a.createElement(f,s({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=c;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},71022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:50,title:"Data Transformation Examples"},s=void 0,l={unversionedId:"cep/examples/data-transformation",id:"cep/examples/data-transformation",title:"Data Transformation Examples",description:"This page explains ways to transform your data.",source:"@site/docs/cep/examples/data-transformation.md",sourceDirName:"cep/examples",slug:"/cep/examples/data-transformation",permalink:"/docs/cep/examples/data-transformation",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/data-transformation.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50,title:"Data Transformation Examples"},sidebar:"defaultSidebar",previous:{title:"Nulls Example",permalink:"/docs/cep/examples/null-example"},next:{title:"Data Summarizations (Aggregations) Examples",permalink:"/docs/cep/examples/data-summarization"}},i={},p=[{value:"Math and Logical Operations",id:"math-and-logical-operations",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Transform JSON",id:"transform-json",level:2},{value:"Transform JSON Input",id:"transform-json-input",level:3},{value:"Transform JSON Output",id:"transform-json-output",level:3}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page explains ways to transform your data."),(0,r.kt)("h2",{id:"math-and-logical-operations"},"Math and Logical Operations"),(0,r.kt)("p",null,"This example shows the use of math or logical operations on events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"@App:name(\"DataTransformation\")\n@App:qlVersion(\"2\")\n\nCREATE STREAM TemperatureStream (sensorId string, temperature double);\n\nCREATE SINK FilteredResultsStream WITH (type='stream', stream='FilteredResultsStream', map.type='json')(sensorId string, approximateTemp double);\n\n@info(name = 'celsiusTemperature')\n\n-- Converts Celsius value into Fahrenheit\nINSERT INTO FahrenheitTemperatureStream\nSELECT sensorId, (temperature * 9 / 5) + 32 AS temperature\nFROM TemperatureStream;\n\n\n@info(name = 'Overall-analysis')\n-- Calculate approximated temperature to the first digit \nINSERT INTO events into OverallTemperatureStream\nSELECT sensorId, math:floor(temperature) as approximateTemp \nFROM FahrenheitTemperatureStream;\n\n@info(name = 'RangeFilter') \n-- Filter out events where `-2 < approximateTemp < 40`\nINSERT INTO FilteredResultsStream\nSELECT *\nFROM OverallTemperatureStream[ approximateTemp > -2 and approximateTemp < 40];\n")),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"TemperatureStream"),":"),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"'SensorId'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-17"),"]"),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("p",null,"After processing, the following events arrive at each stream:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"FahrenheitTemperatureStream: ","[",(0,r.kt)("inlineCode",{parentName:"li"},"'SensorId'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"1.4"),"]"),(0,r.kt)("li",{parentName:"ul"},"OverallTemperatureStream: ","[",(0,r.kt)("inlineCode",{parentName:"li"},"'SensorId'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"1.0"),"]"),(0,r.kt)("li",{parentName:"ul"},"NormalTemperatureStream: ","[",(0,r.kt)("inlineCode",{parentName:"li"},"'SensorId'"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"1.0"),"]")),(0,r.kt)("h2",{id:"transform-json"},"Transform JSON"),(0,r.kt)("p",null,"This example shows transforming JSON objects within a stream worker."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM InputStream(jsonString string);\n\n-- Transforms JSON string to JSON object that can then be manipulated\nINSERT INTO PersonalDetails\nSELECT json:toObject(jsonString) AS jsonObj \nFROM InputStream;\n\nINSERT INTO OutputStream\nSELECT jsonObj, \n-- Get the `name` element(string) form the JSON\n    json:getString(jsonObj,'$.name') AS name,\n\n-- Validate if `salary` element is available\n    json:isExists(jsonObj, '$.salary') AS isSalaryAvailable,\n\n-- Stringify the JSON object\n    json:toString(jsonObj) as jsonString\nFROM PersonalDetails;\n\n\n-- Set `salary` element to `0` is not available \nINSERT INTO PreprocessedStream\nSELECT json:setElement(jsonObj, '$', 0f, 'salary') AS jsonObj\nFROM OutputStream[isSalaryAvailable == false];\n")),(0,r.kt)("h3",{id:"transform-json-input"},"Transform JSON Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"InputStream"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "name" : "streamapp.user",\n        "address" : {\n            "country": "USA"\n        },\n        "contact": "+9xxxxxxxx"\n    }\n]\n')),(0,r.kt)("h3",{id:"transform-json-output"},"Transform JSON Output"),(0,r.kt)("p",null,"After processing, the following events arrive:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"OutputStream:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[ \n    {\n        "address": {\n            "country":"USA"\n        },\n        "contact":"+9xxxxxxxx",\n        "name":"streamapp.user"\n    }\n]\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"PreprocessedStream:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "name" : "streamapp.user",\n        "salary": 0.0,\n        "address" : {\n            "country": "USA"\n        },\n        "contact": "+9xxxxxxxx"\n    }\n]\n')))}u.isMDXComponent=!0}}]);