"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[24379],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,g=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(g,l(l({ref:t},s),{},{components:n})):r.createElement(g,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},25219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const i={title:"groupConcat (Aggregate Function)"},l=void 0,o={unversionedId:"cep/query-guide/functions/str/groupConcat",id:"cep/query-guide/functions/str/groupConcat",title:"groupConcat (Aggregate Function)",description:"This function aggregates the received events by concatenating the keys",source:"@site/docs/cep/query-guide/functions/str/groupConcat.md",sourceDirName:"cep/query-guide/functions/str",slug:"/cep/query-guide/functions/str/groupConcat",permalink:"/docs/cep/query-guide/functions/str/groupConcat",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/str/groupConcat.md",tags:[],version:"current",frontMatter:{title:"groupConcat (Aggregate Function)"},sidebar:"defaultSidebar",previous:{title:"fillTemplate (Function)",permalink:"/docs/cep/query-guide/functions/str/fillTemplate"},next:{title:"hex (Function)",permalink:"/docs/cep/query-guide/functions/str/hex"}},p={},u=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],s={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This function aggregates the received events by concatenating the keys\nin those events using a separator, e.g.,a comma (,) or a hyphen (-), and\nreturns the concatenated key string."),(0,a.kt)("p",null,"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<STRING> str:groupConcat(<STRING> key)\n<STRING> str:groupConcat(<STRING> key, <STRING> ...)\n<STRING> str:groupConcat(<STRING> key, <STRING> separator, <BOOL> distinct)\n<STRING> str:groupConcat(<STRING> key, <STRING> separator, <BOOL> distinct, <STRING> order)\n")),(0,a.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"key"),(0,a.kt)("td",{parentName:"tr",align:null},"The string that needs to be aggregated."),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"separator"),(0,a.kt)("td",{parentName:"tr",align:null},"The separator that separates each string key after concatenating the keys."),(0,a.kt)("td",{parentName:"tr",align:null},","),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"distinct"),(0,a.kt)("td",{parentName:"tr",align:null},"This is used to only have distinct values in the concatenated string that is returned."),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"order"),(0,a.kt)("td",{parentName:"tr",align:null},"This parameter accepts ",(0,a.kt)("inlineCode",{parentName:"td"},"ASC")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"DESC")," strings to sort the string keys in either ascending or descending order respectively."),(0,a.kt)("td",{parentName:"tr",align:null},"No order"),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'from InputStream WINDOW SLIDING_TIME(5 min)\nselect str:groupConcat("key") as groupedKeys\ninput OutputStream;\n')),(0,a.kt)("p",null,"When we input events having values for the ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"'A'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'B'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'S'"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"'C'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'A'"),", it returns ",(0,a.kt)("inlineCode",{parentName:"p"},'"A,B,S,C,A"')," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'from InputStream WINDOW SLIDING_TIME(5 min)\nselect groupConcat("key","-",true,"ASC") as groupedKeys\ninput OutputStream;\n')),(0,a.kt)("p",null,"When we input events having values for the ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," as ",(0,a.kt)("inlineCode",{parentName:"p"},"'A'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'B'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'S'"),",\n",(0,a.kt)("inlineCode",{parentName:"p"},"'C'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'A'"),", specify the seperator as hyphen and choose the order to be\nascending, the function returns ",(0,a.kt)("inlineCode",{parentName:"p"},'"A-B-C-S"')," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."))}c.isMDXComponent=!0}}]);