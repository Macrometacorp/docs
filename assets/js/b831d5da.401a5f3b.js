"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[41348],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),o=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},d=function(e){var t=o(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=o(n),u=a,k=m["".concat(l,".").concat(u)]||m[u]||c[u]||s;return n?r.createElement(k,p(p({ref:t},d),{},{components:n})):r.createElement(k,p({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,p=new Array(s);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var o=2;o<s;o++)p[o]=n[o];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78404:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var r=n(87462),a=(n(67294),n(3905));const s={title:"http-service-response (Sink)"},p=void 0,i={unversionedId:"cep/sink/http-service-response",id:"cep/sink/http-service-response",title:"http-service-response (Sink)",description:"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as text, XML and JSON.",source:"@site/docs/cep/sink/http-service-response.md",sourceDirName:"cep/sink",slug:"/cep/sink/http-service-response",permalink:"/docs/cep/sink/http-service-response",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/sink/http-service-response.md",tags:[],version:"current",frontMatter:{title:"http-service-response (Sink)"},sidebar:"defaultSidebar",previous:{title:"http-call (Sink)",permalink:"/docs/cep/sink/http-call"},next:{title:"http (Sink)",permalink:"/docs/cep/sink/http"}},l={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2}],d={toc:o};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The http-service-response sink send responses of the requests consumed by its corresponding http-service source, by mapping the response messages to formats such as ",(0,a.kt)("inlineCode",{parentName:"p"},"text"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"XML")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"JSON"),"."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'CREATE SINK <NAME> WITH (type="http-service-response", map.type="<STRING>", source.id="<STRING>", message.id="<STRING>", headers="<STRING>")\n')),(0,a.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"source.id"),(0,a.kt)("td",{parentName:"tr",align:null},"Identifier to correlate the http-service-response sink to its corresponding http-service source which consumed the request."),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"message.id"),(0,a.kt)("td",{parentName:"tr",align:null},"Identifier to correlate the response with the request received by http-service source."),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"headers"),(0,a.kt)("td",{parentName:"tr",align:null},"HTTP request headers in format ",(0,a.kt)("inlineCode",{parentName:"td"},"\"'<key>:<value>','<key>:<value>'\""),". When the ",(0,a.kt)("inlineCode",{parentName:"td"},"Content-Type")," header is not provided the system decides the Content-Type based on the provided sink mapper as following:  - ",(0,a.kt)("inlineCode",{parentName:"td"},"map.type='xml'"),": ",(0,a.kt)("inlineCode",{parentName:"td"},"application/xml"),"  - ",(0,a.kt)("inlineCode",{parentName:"td"},"map.type='json'"),": ",(0,a.kt)("inlineCode",{parentName:"td"},"application/json"),"  - ",(0,a.kt)("inlineCode",{parentName:"td"},"map.type='text'"),": ",(0,a.kt)("inlineCode",{parentName:"td"},"plain/text"),"  - ",(0,a.kt)("inlineCode",{parentName:"td"},"map.type='keyvalue'"),": ",(0,a.kt)("inlineCode",{parentName:"td"},"application/x-www-form-urlencoded"),"  - For all other cases system defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"plain/text")," Also the ",(0,a.kt)("inlineCode",{parentName:"td"},"Content-Length")," header need not to be provided, as the system automatically defines it by calculating the size of the payload."),(0,a.kt)("td",{parentName:"tr",align:null},"Content-Type and Content-Length headers"),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE SOURCE AddStream WITH (type='http-service', receiver.url='http://localhost:5005/add', source.id='adder', map.type='json, map.attributes=\"messageId='trp:messageId', value1='$.event.value1', value2='$.event.value2'\") (messageId string, value1 long, value2 long);\n\nCREATE SINK ResultStream WITH (type='http-service-response', source.id='adder', message.id='{{messageId}}', map.type='json') (messageId string, results long);\n\n@info(name = 'query1')\nfrom AddStream\nselect messageId, value1 + value2 as results\ninsert into ResultStream;\n")),(0,a.kt)("p",null,"The http-service source on stream ",(0,a.kt)("inlineCode",{parentName:"p"},"AddStream")," listens on url ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:5005/stocks")," for JSON messages with format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "event": {\n    "value1": 3,\n    "value2": 4\n  }\n}\n')),(0,a.kt)("p",null,"and when events arrive it maps to ",(0,a.kt)("inlineCode",{parentName:"p"},"AddStream")," events and pass them to query ",(0,a.kt)("inlineCode",{parentName:"p"},"query1")," for processing. The query results produced on ",(0,a.kt)("inlineCode",{parentName:"p"},"ResultStream")," are sent as a response via http-service-response sink with format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'{\n  "event": {\n    "results": 7\n  }\n}\n')),(0,a.kt)("p",null,"Here the request and response are correlated by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"messageId")," produced by the http-service to the respective http-service-response sink."))}c.isMDXComponent=!0}}]);