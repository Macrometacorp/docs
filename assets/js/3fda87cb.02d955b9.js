"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[55709],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},22659:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:30,title:"Basic Types Example"},o=void 0,p={unversionedId:"cep/examples/basic-types-example",id:"cep/examples/basic-types-example",title:"Basic Types Example",description:"This page provides introduction to basic stream worker attribute types which are int, long, float, double, string, and object, and some key functions such as convert(), instanceOf...(), and cast().",source:"@site/docs/cep/examples/basic-types-example.md",sourceDirName:"cep/examples",slug:"/cep/examples/basic-types-example",permalink:"/docs/cep/examples/basic-types-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/basic-types-example.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Basic Types Example"},sidebar:"defaultSidebar",previous:{title:"Stream Workers SDK Example",permalink:"/docs/cep/examples/stream-workers-sdk-example"},next:{title:"Data Cleaning Examples",permalink:"/docs/cep/examples/data-cleaning"}},s={},l=[{value:"Input",id:"input",level:2},{value:"Output",id:"output",level:2},{value:"Example",id:"example",level:2}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page provides introduction to basic stream worker attribute types which are ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"long"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", and some key functions such as ",(0,r.kt)("inlineCode",{parentName:"p"},"convert()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceOf...()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"cast()"),"."),(0,r.kt)("p",null,"In stream workers, other types such as ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/list/"},"list"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/map/"},"map"),", etc, should be passed as an ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," into streams."),(0,r.kt)("h2",{id:"input"},"Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"PatientRegistrationInputStream"),","),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"1200098"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Peter Johnson'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"194.3f"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"69.6"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"#Fjoiu59%3hkjnknk$#nFT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),"]"),(0,r.kt)("p",null,"Here, assume that the content of the photo (",(0,r.kt)("inlineCode",{parentName:"p"},"#Fjoiu59%3hkjnknk$#nFT"),") is binary."),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("p",null,"After processing, the event arriving at ",(0,r.kt)("inlineCode",{parentName:"p"},"PatientRegistrationStream")," will be as follows:"),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"1200098"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Peter Johnson'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"194.3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"69.6"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"#Fjoiu59%3hkjnknk$#nFT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),"]"),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `PatientRegistrationInputStream` with information in all primitive types.\nCREATE STREAM PatientRegistrationInputStream (\n                 seqNo long, name string, age int,\n                 height float, weight double, photo object,\n                 isEmployee bool, wardNo object);\n\n\n-- Defines the resulting `PatientRegistrationStream` after processing.\nCREATE STREAM PatientRegistrationStream (\n                 seqNo long, name string, age int,\n                 height double, weight double, photo object,\n                 isPhotoString bool, isEmployee bool,\n                 wardNo int);\n\n\n@info(name = 'Type-processor')\ninsert into PatientRegistrationStream\nselect seqNo, name, age,\n-- `convert()` used to convert `float` type to `double`.\n       convert(height, 'double') as height,\n\n       weight, photo,\n-- `instanceOfString()` checks if the photo is an instance of `string`.\n       instanceOfString(photo) as isPhotoString,\n\n       isEmployee,\n-- `cast()` cast the value of wardNo to `int`.\n       cast(wardNo, 'int') as wardNo\nfrom PatientRegistrationInputStream;\n")))}m.isMDXComponent=!0}}]);