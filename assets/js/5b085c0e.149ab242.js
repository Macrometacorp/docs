"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[87145],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=a,b=u["".concat(i,".").concat(c)]||u[c]||m[c]||o;return n?r.createElement(b,s(s({ref:t},d),{},{components:n})):r.createElement(b,s({ref:t},d))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},72533:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:6,title:"Table and Store Example"},s=void 0,l={unversionedId:"cep/examples/table-and-store-example",id:"cep/examples/table-and-store-example",title:"Table and Store Example",description:"This example shows how tables and database-backed stores can be used to store events.",source:"@site/docs/cep/examples/table-and-store-example.md",sourceDirName:"cep/examples",slug:"/cep/examples/table-and-store-example",permalink:"/docs/cep/examples/table-and-store-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/table-and-store-example.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Table and Store Example"},sidebar:"defaultSidebar",previous:{title:"Source and Sink Example",permalink:"/docs/cep/examples/source-and-sink-example"},next:{title:"REST APIs Stream Worker Example",permalink:"/docs/cep/examples/rest-apis-cep-example"}},i={},p=[{value:"Example",id:"example",level:2},{value:"Event at Table and Store",id:"event-at-table-and-store",level:2},{value:"Retrieve Values from Tables and Stores",id:"retrieve-values-from-tables-and-stores",level:2}],d={toc:p};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example shows how tables and database-backed stores can be used to store events."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `TemperatureStream` stream having `sensorId` and `temperature` attributes of types `string` and `double`.\nCREATE STREAM TemperatureStream (sensorId string, temperature double);\n\n-- Defines `TemperatureLogTable` having `sensorId`, `roomNo`, and `temperature` attributes of types `string`, `string`, and `double`.\nCREATE TABLE GLOBAL TemperatureLogTable (sensorId string, roomNo string, temperature double);\n\n-- Defines `SensorIdInfoTable` table.\nCREATE TABLE GLOBAL SensorIdInfoTable (sensorId string, roomNo string);\n\n@info(name = 'Join-query')\n-- Selects `sensorId`, `roomNo`, and `temperature` attributes from stream and table, and adds events to `TemperatureLogTable`.\ninsert into TemperatureLogTable\nselect t.sensorId as sensorId, s.roomNo as roomNo, t.temperature as temperature\nfrom TemperatureStream as t join SensorIdInfoTable as s\n     on t.sensorId == s.sensorId;\n")),(0,a.kt)("h2",{id:"event-at-table-and-store"},"Event at Table and Store"),(0,a.kt)("p",null,"When ",(0,a.kt)("inlineCode",{parentName:"p"},"SensorIdInfoTable")," table contains a recode ","[",(0,a.kt)("inlineCode",{parentName:"p"},"'aq-14'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'789'"),"]",", and when an event with values ","[",(0,a.kt)("inlineCode",{parentName:"p"},"'aq-14'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"35.4"),"]"," is sent to ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureStream")," stream."),(0,a.kt)("p",null,"The event will get converted and added to the ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureLogTable")," table as below."),(0,a.kt)("p",null,"[",(0,a.kt)("inlineCode",{parentName:"p"},"'aq-14'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"'789'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"35.4"),"]"),(0,a.kt)("h2",{id:"retrieve-values-from-tables-and-stores"},"Retrieve Values from Tables and Stores"),(0,a.kt)("p",null,"The stored values can be retrieved by joining tables and stores with the streams as in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Join-query")," depicted in the example, or using on-demand queries."),(0,a.kt)("p",null,"The data in ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureDetailsTable")," can be retrieved using on-demand queries as shown below, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"On Demand Query REST API"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"select *\nfrom TemperatureDetailsTable\n")))}m.isMDXComponent=!0}}]);