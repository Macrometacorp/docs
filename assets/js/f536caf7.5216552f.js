"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2830],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),d=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,f=m["".concat(i,".").concat(u)]||m[u]||p[u]||a;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var d=2;d<a;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(87462),o=(n(67294),n(3905));const a={title:"Import and Export Commands"},s="Import-Export",l={unversionedId:"cli/import-export-cli",id:"cli/import-export-cli",title:"Import and Export Commands",description:"gdnsl import",source:"@site/docs/cli/import-export-cli.md",sourceDirName:"cli",slug:"/cli/import-export-cli",permalink:"/docs/cli/import-export-cli",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cli/import-export-cli.md",tags:[],version:"current",frontMatter:{title:"Import and Export Commands"},sidebar:"defaultSidebar",previous:{title:"Graph Vertex Commands",permalink:"/docs/cli/graph-vertex-cli"},next:{title:"Index Commands",permalink:"/docs/cli/indexes-cli"}},i={},d=[{value:"gdnsl import",id:"gdnsl-import",level:2},{value:"gdnsl export",id:"gdnsl-export",level:2}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"import-export"},"Import-Export"),(0,o.kt)("h2",{id:"gdnsl-import"},"gdnsl import"),(0,o.kt)("p",null,"Import collection data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl import COLLECTION-NAME [flags]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Import documents in the "addresses" collection\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]"\n\n  # Import documents in the "addresses" collection with primaryKey as "name"\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]" --primary-key "name"\n\n  # Import documents with existing document having same _key in the colletion, shall be replaced\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]" --replace\n\n  # Import documents with extra information for errors and unprocessed documents returned in the result\n  gdnsl import addresses --json "[{\\"name\\": \\"John\\"}, {\\"lname\\": \\"Doe\\"}]" --details\n\n  # Import documents in the "addresses" collection\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname"\n\n  # Import documents in the "addresses" collection with primaryKey as "name"\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname" --primary-key "name"\n\n  # Import documents with existing document having same _key in the colletion, shall be replaced\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname" --replace\n\n  # Import documents with extra information for errors and unprocessed documents returned in the result\n  gdnsl import addresses --csv "John,Doe\\nJane,Doe" --columns "name,lname" --details\n\n  # Import documents from a JSON file\n  gdnsl import --file "path_to_file/import.json"\n\n  # Import documents from a CSV file\n  gdnsl import --file "path_to_file/import.csv"\n\n  # Import documents in the "addresses" collection with a batch size of 1000\n  gdnsl import addresses --file "import.json" --batch-size=1000\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Options:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help for query import command.\n\n  --json string             Should be an array of json documents. Each document is interpreted separately. For large data use --file instead.\n\n  --csv string              Should be an array of csv rows. Each row is separated by a newline character. For large data use --file instead.\n\n  --columns                 String should be a comma separated list of column names.\n\n  --primary-key string      If specified, this attribure will be used as _key of the new document. It must follow the [naming conventions](../naming-conventions.md#document-keys). If document already contains _key then it will be renamed as old_key.\n\n  --replace                 If true existing document having same _key in the colletion, shall be replaced.\n\n  --details                 If true extra information for errors and unprocessed documents will be returned in the result.\n\n  --batch-size              Number of docs to be imported in a batch. Cannot be greater than the set tenant limit. \n                            Default will the tenant limit. Works with the --file flag.\n\n  --file string             Path to JSON or CSV file. File format is inferred from the file extension.\n\n  --fabric                  Name of the fabric to use.\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Options inherited:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,o.kt)("h2",{id:"gdnsl-export"},"gdnsl export"),(0,o.kt)("p",null,"Export data from a collection or via a query."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl export [flags]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Examples:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Export data returned by the query\n  gdnsl export --query "FOR doc IN addresses RETURN doc"\n\n  # Export data returned by the query with based on the given filter\n  gdnsl export --query "FOR doc IN addresses FILTER doc.country == @country RETURN doc" --param "country=USA"\n\n  # Export data returned by the query in CSV format\n  gdnsl export --query "FOR doc IN addresses RETURN doc" --csv\n\n  # Export data returned by the query in JSON format to a file\n  gdnsl export --query "FOR doc IN addresses RETURN doc" --file test.json\n\n  # Export data from "addresses" collection\n  gdnsl export --collection addresses\n\n  # Export data from "addresses" collection with offset as 10\n  gdnsl export --collection addresses --offset 10\n\n  # Export data from "addresses" collection with limit as 10\n  gdnsl export --collection addresses --limit 10\n\n  # Export data from "addresses" collection in descending order\n  gdnsl export --collection addresses --order desc\n\n  # Export data from "addresses" collection in CSV format\n  gdnsl export --collection addresses --csv\n\n  # Export data from "addresses" collection in CSV format\n  gdnsl export --collection addresses --file test.csv\n\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Options:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'  -h, --help                Help for service.\n      --query string        Query string to execute and export data.\n      --param string        Params to be given to the query. Can be given multiple times.\n      --csv string          To export in csv format. Default is "json".\n      --collection string   Collection name to export data from.\n      --offset number       This option can be used to simulate paging. Default: 0.\n      --limit number        This option can be used to simulate paging. Limit the result. Default: 20, Max: 1000.\n      --order  string       Order the results asc or desc. Default: asc.\n      --file string         Path to JSON or CSV file. File format is inferred from the file extension.\n      --fabric              Name of the fabric to use.\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Options inherited:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")))}p.isMDXComponent=!0}}]);