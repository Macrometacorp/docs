"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56800],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,N=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(N,i(i({ref:t},p),{},{components:n})):a.createElement(N,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},15172:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:11,title:"UPDATE"},i=void 0,s={unversionedId:"queryworkers/c8ql/operations/update",id:"queryworkers/c8ql/operations/update",title:"UPDATE",description:"The UPDATE keyword can be used to partially update documents in a collection. On a single server, updates are executed transactionally in an all-or-nothing fashion.",source:"@site/docs/queryworkers/c8ql/operations/update.md",sourceDirName:"queryworkers/c8ql/operations",slug:"/queryworkers/c8ql/operations/update",permalink:"/docs/queryworkers/c8ql/operations/update",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/operations/update.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"UPDATE"},sidebar:"defaultSidebar",previous:{title:"REMOVE",permalink:"/docs/queryworkers/c8ql/operations/remove"},next:{title:"REPLACE",permalink:"/docs/queryworkers/c8ql/operations/replace"}},l={},u=[{value:"Using the current value of a document attribute",id:"using-the-current-value-of-a-document-attribute",level:2},{value:"Setting query options",id:"setting-query-options",level:2},{value:"Returning the modified documents",id:"returning-the-modified-documents",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," keyword can be used to partially update documents in a collection. On a single server, updates are executed transactionally in an all-or-nothing fashion. "),(0,r.kt)("p",null,"A query may execute intermediate transaction commits in case the running transaction (C8QL query) hits the specified size thresholds. In this case, the query's operations carried out so far will be committed and not rolled back in case of a later abort/rollback. "),(0,r.kt)("p",null,"For sharded collections, the entire query and/or update operation may not be transactional, especially if it involves different shards and/or DB-Servers."),(0,r.kt)("p",null,"Each ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," operation is restricted to a single collection, and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/update"},"collection name")," must not be dynamic. Only a single ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," statement per collection is allowed per C8QL query, and it cannot be followed by read or write operations that access the same collection, by traversal operations, or C8QL functions that can read documents."),(0,r.kt)("p",null,"The system attributes ",(0,r.kt)("em",{parentName:"p"},"_id"),", ",(0,r.kt)("em",{parentName:"p"},"_key")," and ",(0,r.kt)("em",{parentName:"p"},"_rev")," cannot be updated, ",(0,r.kt)("em",{parentName:"p"},"_from")," and ",(0,r.kt)("em",{parentName:"p"},"_to")," can."),(0,r.kt)("p",null,"The two syntaxes for an update operation are:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"UPDATE document IN collection options\nUPDATE keyExpression WITH document IN collection options\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"collection")," must contain the name of the collection in which the documents should be updated. ",(0,r.kt)("em",{parentName:"p"},"document")," must be a document that contains the attributes and values to be updated. When using the first syntax, ",(0,r.kt)("em",{parentName:"p"},"document")," must also contain the ",(0,r.kt)("em",{parentName:"p"},"_key")," attribute to identify the document to be updated. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE { _key: u._key, name: CONCAT(u.firstName, " ", u.lastName) } IN users\n')),(0,r.kt)("p",null,"The following query is invalid because it does not contain a ",(0,r.kt)("em",{parentName:"p"},"_key")," attribute and thus it is not possible to determine the documents to be updated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE { name: CONCAT(u.firstName, " ", u.lastName) } IN users\n')),(0,r.kt)("p",null,"When using the second syntax, ",(0,r.kt)("em",{parentName:"p"},"keyExpression")," provides the document identification. This can either be a string (which must then contain the document key) or a document, which must contain a ",(0,r.kt)("em",{parentName:"p"},"_key")," attribute."),(0,r.kt)("p",null,"An object with ",(0,r.kt)("inlineCode",{parentName:"p"},"_id")," attribute but without ",(0,r.kt)("inlineCode",{parentName:"p"},"_key")," attribute as well as a document ID as string like ",(0,r.kt)("inlineCode",{parentName:"p"},'"users/john"')," do not work. However, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"DOCUMENT(id)")," to fetch the document via its ID and ",(0,r.kt)("inlineCode",{parentName:"p"},"PARSE_IDENTIFIER(id).key")," to get the document key as string."),(0,r.kt)("p",null,"The following queries are equivalent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE u._key WITH { name: CONCAT(u.firstName, " ", u.lastName) } IN users\n\nFOR u IN users\n  UPDATE { _key: u._key } WITH { name: CONCAT(u.firstName, " ", u.lastName) } IN users\n\nFOR u IN users\n  UPDATE u WITH { name: CONCAT(u.firstName, " ", u.lastName) } IN users\n')),(0,r.kt)("p",null,"An update operation may update arbitrary documents which do not need to be identical to the ones produced by a preceding ",(0,r.kt)("inlineCode",{parentName:"p"},"FOR")," statement:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR i IN 1..1000\n  UPDATE CONCAT('test', i) WITH { foobar: true } IN users\n\nFOR u IN users\n  FILTER u.active == false\n  UPDATE u WITH { status: 'inactive' } IN backup\n")),(0,r.kt)("h2",{id:"using-the-current-value-of-a-document-attribute"},"Using the current value of a document attribute"),(0,r.kt)("p",null,"The pseudo-variable ",(0,r.kt)("inlineCode",{parentName:"p"},"OLD")," is not supported inside of ",(0,r.kt)("inlineCode",{parentName:"p"},"WITH")," clauses (it is available after ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE"),"). To access the current attribute value, you can usually refer to a document via the variable of the ",(0,r.kt)("inlineCode",{parentName:"p"},"FOR")," loop, which is used to iterate over a collection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR doc IN users\n  UPDATE doc WITH {\n    fullName: CONCAT(doc.firstName, " ", doc.lastName)\n  } IN users\n')),(0,r.kt)("p",null,"If there is no loop, because a single document is updated only, then there might not be a variable like above (",(0,r.kt)("inlineCode",{parentName:"p"},"doc"),"), which would let you refer to the document which is being updated:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'UPDATE "john" WITH { ... } IN users\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LET key = PARSE_IDENTIFIER("users/john").key\nUPDATE key WITH { ... } IN users\n')),(0,r.kt)("p",null,"To access the current value in this situation, the document has to be retrieved and stored in a variable first:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LET doc = DOCUMENT("users/john")\nUPDATE doc WITH {\n  fullName: CONCAT(doc.firstName, " ", doc.lastName)\n} IN users\n')),(0,r.kt)("p",null,"An existing attribute can be modified based on its current value this way, to increment a counter for instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"UPDATE doc WITH {\n  karma: doc.karma + 1\n} IN users\n")),(0,r.kt)("p",null,"If the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"karma")," doesn't exist yet, ",(0,r.kt)("inlineCode",{parentName:"p"},"doc.karma")," is evaluated to ",(0,r.kt)("em",{parentName:"p"},"null"),". The expression ",(0,r.kt)("inlineCode",{parentName:"p"},"null + 1")," results in the new attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"karma")," being set to ",(0,r.kt)("em",{parentName:"p"},"1"),". If the attribute does exist, then it is increased by ",(0,r.kt)("em",{parentName:"p"},"1"),"."),(0,r.kt)("p",null,"Arrays can be mutated too of course:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'UPDATE doc WITH {\n  hobbies: PUSH(doc.hobbies, "swimming")\n} IN users\n')),(0,r.kt)("p",null,"If the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"hobbies")," doesn't exist yet, it is conveniently initialized as ",(0,r.kt)("inlineCode",{parentName:"p"},'[ "swimming" ]')," and otherwise extended."),(0,r.kt)("h2",{id:"setting-query-options"},"Setting query options"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"options")," can be used to suppress query errors that may occur when trying to update non-existing documents or violating unique key constraints:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR i IN 1..1000\n  UPDATE {\n    _key: CONCAT('test', i)\n  } WITH {\n    foobar: true\n  } IN users OPTIONS { ignoreErrors: true }\n")),(0,r.kt)("p",null,"An update operation will only update the attributes specified in ",(0,r.kt)("em",{parentName:"p"},"document")," and leave other attributes untouched. Internal attributes (such as ",(0,r.kt)("em",{parentName:"p"},"_id"),", ",(0,r.kt)("em",{parentName:"p"},"_key"),", ",(0,r.kt)("em",{parentName:"p"},"_rev"),", ",(0,r.kt)("em",{parentName:"p"},"_from")," and ",(0,r.kt)("em",{parentName:"p"},"_to"),") cannot be updated and are ignored when specified in ",(0,r.kt)("em",{parentName:"p"},"document"),". Updating a document will modify the document's revision number with a server-generated value."),(0,r.kt)("p",null,"When updating an attribute with a null value, GDN will not remove the attribute from the document but store a null value for it. To get rid of attributes in an update operation, set them to null and provide the ",(0,r.kt)("em",{parentName:"p"},"keepNull")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  UPDATE u WITH {\n    foobar: true,\n    notNeeded: null\n  } IN users OPTIONS { keepNull: false }\n")),(0,r.kt)("p",null,"The above query will remove the ",(0,r.kt)("em",{parentName:"p"},"notNeeded")," attribute from the documents and update the ",(0,r.kt)("em",{parentName:"p"},"foobar")," attribute normally."),(0,r.kt)("p",null,"There is also the option ",(0,r.kt)("em",{parentName:"p"},"mergeObjects")," that controls whether object contents will be merged if an object attribute is present in both the ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," query and in the to-be-updated document."),(0,r.kt)("p",null,"The following query will set the updated document's ",(0,r.kt)("em",{parentName:"p"},"name")," attribute to the exact same value that is specified in the query. This is due to the ",(0,r.kt)("em",{parentName:"p"},"mergeObjects")," option being set to ",(0,r.kt)("em",{parentName:"p"},"false"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE u WITH {\n    name: { first: "foo", middle: "b.", last: "baz" }\n  } IN users OPTIONS { mergeObjects: false }\n')),(0,r.kt)("p",null,"Contrary, the following query will merge the contents of the ",(0,r.kt)("em",{parentName:"p"},"name")," attribute in the original document with the value specified in the query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE u WITH {\n    name: { first: "foo", middle: "b.", last: "baz" }\n  } IN users OPTIONS { mergeObjects: true }\n')),(0,r.kt)("p",null,"Attributes in ",(0,r.kt)("em",{parentName:"p"},"name")," that are present in the to-be-updated document but not in the query will now be preserved. Attributes that are present in both will be overwritten with the values specified in the query."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The default value for ",(0,r.kt)("em",{parentName:"p"},"mergeObjects")," is ",(0,r.kt)("em",{parentName:"p"},"true"),", so there is no need to specify it explicitly.")),(0,r.kt)("p",null,"To make sure data are durable when an update query returns, there is the ",(0,r.kt)("em",{parentName:"p"},"waitForSync")," query option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  UPDATE u WITH {\n    foobar: true\n  } IN users OPTIONS { waitForSync: true }\n")),(0,r.kt)("p",null,"In order to not accidentially overwrite documents that have been updated since you last fetched them, you can use the option ",(0,r.kt)("em",{parentName:"p"},"ignoreRevs")," to either let GDN compare the ",(0,r.kt)("inlineCode",{parentName:"p"},"_rev")," value and only succeed if they still match, or let GDN ignore them (default):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR i IN 1..1000\n  UPDATE { _key: CONCAT('test', i), _rev: \"1287623\" }\n  WITH { foobar: true } IN users\n  OPTIONS { ignoreRevs: false }\n")),(0,r.kt)("p",null,"Different write operations on the same collection do not block each other, as long as there are no ",(0,r.kt)("em",{parentName:"p"},"write-write conficts")," on the same documents. From an application development perspective it can be desired to have exclusive write access on collections, to simplify the development."),(0,r.kt)("p",null,"Exclusive access can also speed up modification queries, because we avoid conflict checks."),(0,r.kt)("p",null,"Use the ",(0,r.kt)("em",{parentName:"p"},"exclusive")," option to achieve this effect on a per query basis:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR doc IN collection\n  UPDATE doc \n  WITH { updated: true } IN collection \n  OPTIONS { exclusive: true }\n")),(0,r.kt)("h2",{id:"returning-the-modified-documents"},"Returning the modified documents"),(0,r.kt)("p",null,"The modified documents can also be returned by the query. In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"UPDATE")," statement needs to be followed a ",(0,r.kt)("inlineCode",{parentName:"p"},"RETURN")," statement (intermediate ",(0,r.kt)("inlineCode",{parentName:"p"},"LET")," statements are allowed, too). These statements can refer to the pseudo-values ",(0,r.kt)("inlineCode",{parentName:"p"},"OLD")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NEW"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"OLD")," pseudo-value refers to the document revisions before the update, and ",(0,r.kt)("inlineCode",{parentName:"p"},"NEW")," refers to document revisions after the update."),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"OLD")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NEW")," will contain all document attributes, even those not specified in the update expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"UPDATE document IN collection options RETURN OLD\nUPDATE document IN collection options RETURN NEW\nUPDATE keyExpression WITH document IN collection options RETURN OLD\nUPDATE keyExpression WITH document IN collection options RETURN NEW\n")),(0,r.kt)("p",null,"Following is an example using a variable named ",(0,r.kt)("inlineCode",{parentName:"p"},"previous")," to capture the original documents before modification. For each modified document, the document key is returned."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE u WITH { value: "test" }\n  IN users \n  LET previous = OLD \n  RETURN previous._key\n')),(0,r.kt)("p",null,"The following query uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"NEW")," pseudo-value to return the updated documents, without some of the system attributes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE u WITH { value: "test" } \n  IN users\n  LET updated = NEW \n  RETURN UNSET(updated, "_key", "_id", "_rev")\n')),(0,r.kt)("p",null,"It is also possible to return both ",(0,r.kt)("inlineCode",{parentName:"p"},"OLD")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NEW"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  UPDATE u WITH { value: "test" } \n  IN users\n  RETURN { before: OLD, after: NEW }\n')))}c.isMDXComponent=!0}}]);