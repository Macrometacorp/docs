"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[61055],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?a.createElement(f,o(o({ref:t},c),{},{components:r})):a.createElement(f,o({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2081:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const i={sidebar_position:2,title:"FOR"},o=void 0,l={unversionedId:"queryworkers/c8ql/operations/for",id:"queryworkers/c8ql/operations/for",title:"FOR",description:"The versatile FOR keyword can be used to iterate over a collection or View, all elements of an array or to traverse a graph.",source:"@site/docs/queryworkers/c8ql/operations/for.md",sourceDirName:"queryworkers/c8ql/operations",slug:"/queryworkers/c8ql/operations/for",permalink:"/docs/queryworkers/c8ql/operations/for",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/operations/for.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"FOR"},sidebar:"defaultSidebar",previous:{title:"Operations",permalink:"/docs/queryworkers/c8ql/operations/"},next:{title:"RETURN",permalink:"/docs/queryworkers/c8ql/operations/return"}},s={},p=[{value:"General Syntax",id:"general-syntax",level:2},{value:"Options",id:"options",level:2},{value:"Index hints",id:"index-hints",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"The versatile ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," keyword can be used to iterate over a collection or View, all elements of an array or to traverse a graph."),(0,n.kt)("h2",{id:"general-syntax"},"General Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"FOR variableName IN expression\n")),(0,n.kt)("p",null,"There is also a special variant for ",(0,n.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/graphs/traversals"},"graph traversals"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"FOR vertexVariableName, edgeVariableName, pathVariableName IN traversalExpression\n")),(0,n.kt)("p",null,"For Views, there is a special (optional) ",(0,n.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/search"},(0,n.kt)("inlineCode",{parentName:"a"},"SEARCH")," keyword"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"FOR variableName IN viewName SEARCH searchExpression\n")),(0,n.kt)("p",null,"Note that Views cannot be used as edge collections in traversals:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"FOR v IN 1..3 ANY startVertex viewName /* invalid! */\n")),(0,n.kt)("p",null,"Each array element returned by ",(0,n.kt)("em",{parentName:"p"},"expression")," is visited exactly once. It is required that ",(0,n.kt)("em",{parentName:"p"},"expression")," returns an array in all cases. The empty array is allowed, too. The current array element is made available for further processing in the variable specified by ",(0,n.kt)("em",{parentName:"p"},"variableName"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  RETURN u\n")),(0,n.kt)("p",null,"This will iterate over all elements from the array ",(0,n.kt)("em",{parentName:"p"},"users"),' (note: this array consists of all documents from the collection named "users" in this case) and make the current array element available in variable ',(0,n.kt)("em",{parentName:"p"},"u"),". ",(0,n.kt)("em",{parentName:"p"},"u")," is not modified in this example but simply pushed into the result using the ",(0,n.kt)("inlineCode",{parentName:"p"},"RETURN")," keyword."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"When iterating over collection-based arrays as shown here, the order of documents is undefined unless an explicit sort order is defined using a ",(0,n.kt)("inlineCode",{parentName:"p"},"SORT")," statement.")),(0,n.kt)("p",null,"The variable introduced by ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," is available until the scope the ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," is placed in is closed."),(0,n.kt)("p",null,"Another example that uses a statically declared array of values to iterate over:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'FOR year IN [ 2011, 2012, 2013 ]\n  RETURN { "year" : year, "isLeapYear" : year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) }\n')),(0,n.kt)("p",null,"Nesting of multiple ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," statements is allowed, too. When ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," statements are nested, a cross product of the array elements returned by the individual ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," statements will be created."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  FOR l IN locations\n    RETURN { "user" : u, "location" : l }\n')),(0,n.kt)("p",null,"In this example, there are two array iterations: an outer iteration over the array ",(0,n.kt)("em",{parentName:"p"},"users")," plus an inner iteration over the array ",(0,n.kt)("em",{parentName:"p"},"locations"),". The inner array is traversed as many times as there are elements in the outer array.  For each iteration, the current values of ",(0,n.kt)("em",{parentName:"p"},"users")," and ",(0,n.kt)("em",{parentName:"p"},"locations")," are made available for further processing in the variable ",(0,n.kt)("em",{parentName:"p"},"u")," and ",(0,n.kt)("em",{parentName:"p"},"l"),"."),(0,n.kt)("h2",{id:"options"},"Options"),(0,n.kt)("p",null,"For collections and views, the ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," construct supports an optional ",(0,n.kt)("inlineCode",{parentName:"p"},"OPTIONS")," suffix to modify behavior. The general syntax is:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"FOR variableName IN expression OPTIONS {option: value, ...}\n")),(0,n.kt)("h2",{id:"index-hints"},"Index hints"),(0,n.kt)("p",null,"For collections, index hints are provided though this inline options mechanism. Hints can be specified in two different formats."),(0,n.kt)("p",null,"The first format option is the simplest, just a single index name. This should be sufficient for many cases. Whenever there is a choice to potentially use an index for this ",(0,n.kt)("inlineCode",{parentName:"p"},"FOR")," loop, the optimizer will first check if the specified index can be used. If so, it will use it, regardless of whether it would normally use a different index. If it cannot use that index, then it will fall back to its normal logic to select another index. "),(0,n.kt)("p",null,"If the optional ",(0,n.kt)("inlineCode",{parentName:"p"},"forceIndexHint: true")," is specified, then it will not fall back, and instead generate an error."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"OPTIONS {indexHint: 'byName'[, forceIndexHint: <boolean>]}\n")),(0,n.kt)("p",null,"The second is an array of index names, in order of preference. When specified this way, the optimizer will behave much in the same way as above, but will check the feasibility of each of the specified indices, in the order they are given, falling back to its normal logic or failing only if none of the specified indices are feasible."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"OPTIONS {indexHint: ['byName', 'byColor'][, forceIndexHint: <boolean>]}\n")))}u.isMDXComponent=!0}}]);