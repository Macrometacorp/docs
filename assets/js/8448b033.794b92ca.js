"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68489],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var i=r.createContext({}),c=function(e){var t=r.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,f=u["".concat(i,".").concat(d)]||u[d]||p[d]||s;return a?r.createElement(f,o(o({ref:t},m),{},{components:a})):r.createElement(f,o({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,o=new Array(s);o[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<s;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var r=a(67294),n=a(34334);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(s,o),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>d});var r=a(87462),n=a(67294),s=a(34334),o=a(72389),l=a(67392),i=a(7094),c=a(12466);const m="tabList__CuJ",p="tabItem_LNqP";function u(e){const{lazy:t,block:a,defaultValue:o,values:u,groupId:d,className:f}=e,y=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=u??y.map((e=>{let{props:{value:t,label:a,attributes:r}}=e;return{value:t,label:a,attributes:r}})),h=(0,l.l)(b,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==k&&!b.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:v}=(0,i.U)(),[N,T]=(0,n.useState)(k),_=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=d){const e=g[d];null!=e&&e!==N&&b.some((t=>t.value===e))&&T(e)}const w=e=>{const t=e.currentTarget,a=_.indexOf(t),r=b[a].value;r!==N&&(x(t),T(r),null!=d&&v(d,String(r)))},S=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=_.indexOf(e.currentTarget)+1;t=_[a]??_[0];break}case"ArrowLeft":{const a=_.indexOf(e.currentTarget)-1;t=_[a]??_[_.length-1];break}}t?.focus()};return n.createElement("div",{className:(0,s.Z)("tabs-container",m)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":a},f)},b.map((e=>{let{value:t,label:a,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>_.push(e),onKeyDown:S,onFocus:w,onClick:w},o,{className:(0,s.Z)("tabs__item",p,o?.className,{"tabs__item--active":N===t})}),a??t)}))),t?(0,n.cloneElement)(y.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function d(e){const t=(0,o.Z)();return n.createElement(u,(0,r.Z)({key:String(t)},e))}},91010:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var r=a(87462),n=(a(67294),a(3905)),s=a(65488),o=a(85162);const l={sidebar_position:50,title:"Create Streams"},i=void 0,c={unversionedId:"streams/stream-tasks/create-streams",id:"streams/stream-tasks/create-streams",title:"Create Streams",description:"This page explains how to create streams in Macrometa.",source:"@site/docs/streams/stream-tasks/create-streams.md",sourceDirName:"streams/stream-tasks",slug:"/streams/stream-tasks/create-streams",permalink:"/docs/streams/stream-tasks/create-streams",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-tasks/create-streams.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{sidebar_position:50,title:"Create Streams"},sidebar:"defaultSidebar",previous:{title:"Stream Tasks",permalink:"/docs/streams/stream-tasks/"},next:{title:"View Streams",permalink:"/docs/streams/stream-tasks/view-streams"}},m={},p=[],u={toc:p};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This page explains how to create streams in Macrometa."),(0,n.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"console",label:"Web Console",mdxType:"TabItem"},(0,n.kt)("p",null,"Create a stream."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://auth-play.macrometa.io/"},"Log in to your Macrometa account"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Click ",(0,n.kt)("strong",{parentName:"p"},"Data > Streams"),"."),(0,n.kt)("p",{parentName:"li"},"Macrometa displays a list of streams and their attributes.")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Click ",(0,n.kt)("strong",{parentName:"p"},"New Stream"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Enter a stream ",(0,n.kt)("strong",{parentName:"p"},"Name"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Select ",(0,n.kt)("strong",{parentName:"p"},"Replication")," type: ",(0,n.kt)("strong",{parentName:"p"},"Local")," or ",(0,n.kt)("strong",{parentName:"p"},"Global"),". Default is ",(0,n.kt)("strong",{parentName:"p"},"Local"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Click ",(0,n.kt)("strong",{parentName:"p"},"Create"),".")))),(0,n.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,n.kt)("p",null,"You must ",(0,n.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the Python SDK")," before you can run this code."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'from operator import concat\nfrom c8 import C8Client\n\n# Connect to GDN.\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "xxxxxx" # Change this to your API key\nis_local = False # For a global stream pass True and False for local stream\nprefix_text = ""\ndemo_stream = "streamQuickstart"\n\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n\n# Get the right prefix for the stream\nif is_local:\n    prefix_text = "c8locals."\nelse:\n    prefix_text = "c8globals."\n\ndef createStream():\n    """ This function creates a stream """\n    stream_name = {"stream-id": ""}\n    if client.has_stream(demo_stream, local=is_local):\n        print("Stream already exists")\n        stream_name["stream-id"] = concat(prefix_text, demo_stream)\n        print ("OLD Producer =",  stream_name["stream-id"])\n    else:\n        stream_name = client.create_stream(demo_stream, local=is_local)\n        print ("New producer =",  stream_name["stream-id"])\n\ncreateStream()\n'))),(0,n.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,n.kt)("p",null,"You must ",(0,n.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the JavaScript SDK")," before you can run this code."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'// Connect to GDN.\nconst jsc8 = require("jsc8");\nconst client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "XXXXX", fabricName: "_system"});\nconsole.log("Authentication done!!...");\n\nconst stream = "streamQuickstart";\nlet prefixText = "";\nconst isLocal = false; // For a global stream pass True and False for local stream\n\n// Get the right prefix for the stream\nif (isLocal) {\n  prefixText = "c8locals.";\n} else {\n  prefixText = "c8globals.";\n}\n\nasync function createMyStream () {\n  let streamName = { "stream-id": "" };\n  if (await client.hasStream(stream, isLocal)) {\n    console.log("Stream already exists");\n    streamName["stream-id"] = prefixText + stream;\n    console.log(`OLD Producer = ${streamName["stream-id"]}`);\n  } else {\n    streamName = await client.createStream(stream, isLocal);\n    console.log(`NEW Producer = ${streamName.result["stream-id"]}`);\n  }\n}\n\ncreateMyStream()\n'))),(0,n.kt)(o.Z,{value:"api-py",label:"API - Python",mdxType:"TabItem"},(0,n.kt)("p",null,"Use our interactive API Reference with code generation in 18 programming languages to ",(0,n.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/CreateStream"},"Create a Stream"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-py"},'import requests\n\n# Constants\nURL = "api-play.paas.macrometa.io"\nHTTP_URL = f"https://{URL}"\nFABRIC = "_system"\nSTREAM_NAME = "streamQuickstart"\nAPI_KEY = "XXXXX" # Use your API key here\nAUTH_TOKEN = f"apikey {API_KEY}" # apikey keyword needs to be appended\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Create a stream\n# Note:- For a global stream pass global=true and global=false for local stream\nurl = f"{HTTP_URL}/_fabric/{FABRIC}/_api/streams/{STREAM_NAME}?global=true"\nresp = session.post(url)\nprint("\\nStream Created: ", resp.text)\n'))),(0,n.kt)(o.Z,{value:"api-js",label:"API - JS",mdxType:"TabItem"},(0,n.kt)("p",null,"Use our interactive API Reference with code generation in 18 programming languages to ","[Create a Stream]","(",(0,n.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/CreateStream"},"Link to API command"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n  _headers = {\n    Accept: "application/json",\n    "Content-Type": "application/json"\n  };\n\n  constructor (url, apiKey) {\n    this._url = url;\n    this._headers.authorization = `apikey ${apiKey}`; // apikey keyword needs to be appended\n  }\n\n  _handleResponse (response, resolve, reject) {\n    if (response.ok) {\n      resolve(response.json());\n    } else {\n      reject(response);\n    }\n  }\n\n  req (endpoint, { body, ...options } = {}) {\n    const self = this;\n    return new Promise(function (resolve, reject) {\n      fetch(self._url + endpoint, {\n        headers: self._headers,\n        body: body ? JSON.stringify(body) : undefined,\n        ...options\n      }).then((response) => self._handleResponse(response, resolve, reject));\n    });\n  }\n}\n\nconst apiKey = "XXXXX"; // Use your apikey here\nconst federationName = "api-play.paas.macrometa.io";\nconst federationUrl = `https://${federationName}`;\n\nconst stream = "streamQuickstart";\nconst isGlobal = true;\n\nconst run = async function () {\n  const connection = new APIRequest(federationUrl, apiKey);\n\n  /* ------------------------------ Create stream ----------------------------- */\n\n  try {\n    await connection.req(\n      `/_fabric/_system/streams/${stream}?global=${isGlobal}`,\n      {\n        body: { name: stream },\n        method: "POST"\n      }\n    );\n    console.log("Stream created successfully");\n  } catch (e) {\n    if (e.status === 409) {\n      console.log("Stream already exists, skipping creation of stream");\n    } else {\n      console.log("Error while creating stream");\n      throw e;\n    }\n  }\n}\n\nrun();\n'))),(0,n.kt)(o.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,n.kt)("p",null,"Use the ",(0,n.kt)("a",{parentName:"p",href:"../../cli/streams-cli#gdnsl-streams-create"},"gdnsl streams create")," CLI command to create a Document Store collection."))))}d.isMDXComponent=!0}}]);