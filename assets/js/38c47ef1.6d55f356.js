"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[69526],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),d=i,y=c["".concat(s,".").concat(d)]||c[d]||u[d]||r;return a?n.createElement(y,o(o({ref:t},m),{},{components:a})):n.createElement(y,o({ref:t},m))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},71290:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(87462),i=(a(67294),a(3905));const r={sidebar_position:17,title:"Dynamo Mode"},o=void 0,l={unversionedId:"tutorials/dynamo",id:"tutorials/dynamo",title:"Dynamo Mode",description:"Dynamo tables are always created globally and written to the _system GeoFabric regardless of which GeoFabric received the API call.",source:"@site/docs/tutorials/dynamo.md",sourceDirName:"tutorials",slug:"/tutorials/dynamo",permalink:"/docs/tutorials/dynamo",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/tutorials/dynamo.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17,title:"Dynamo Mode"},sidebar:"defaultSidebar",previous:{title:"Working with Cloudflare Workers",permalink:"/docs/tutorials/cloudflare-workers"},next:{title:"Overview",permalink:"/docs/apps"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Operations",id:"operations",level:2},{value:"Create global table",id:"create-global-table",level:3},{value:"List global tables",id:"list-global-tables",level:3},{value:"Put items",id:"put-items",level:3},{value:"Batch get item",id:"batch-get-item",level:3},{value:"Batch write item",id:"batch-write-item",level:3},{value:"Scan",id:"scan",level:3},{value:"Retrieve All Items",id:"retrieve-all-items",level:4},{value:"Count All Items",id:"count-all-items",level:4},{value:"Filter Items",id:"filter-items",level:4},{value:"Query items",id:"query-items",level:3},{value:"Query By Artist Name",id:"query-by-artist-name",level:4},{value:"Query By complex conditions",id:"query-by-complex-conditions",level:4},{value:"Update item",id:"update-item",level:3},{value:"Delete item",id:"delete-item",level:3},{value:"Delete table",id:"delete-table",level:3}],m={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Dynamo tables are always created globally and written to the ",(0,i.kt)("inlineCode",{parentName:"p"},"_system")," GeoFabric regardless of which GeoFabric received the API call."),(0,i.kt)("p",null,"For more information about Dynamo Mode, refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/dynamodb-api.pdf#API_Operations_Amazon_DynamoDB"},"Amazon DynamoDB")," documentation."),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create an API Key"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Login to your tenant account on ",(0,i.kt)("a",{parentName:"li",href:"https://play.paas.macrometa.io"},"https://play.paas.macrometa.io")),(0,i.kt)("li",{parentName:"ul"},"Create an API key via REST API. Make a copy of the key.")),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"Following api key is created under `demo@macrometa.io/_system` on https://play.paas.macrometa.io with `rw` permissions.\n\n    demo.demok1.1a1aad0f4b000ca4d2d3bdb505298cbb9467b65526b0f79364e61e5f00000000\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Download & Install AWS Console CLI"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"URL: ",(0,i.kt)("a",{parentName:"li",href:"https://aws.amazon.com/cli/"},"https://aws.amazon.com/cli/")),(0,i.kt)("li",{parentName:"ul"},"Mac OS: ",(0,i.kt)("a",{parentName:"li",href:"https://awscli.amazonaws.com/AWSCLIV2.pkg"},"https://awscli.amazonaws.com/AWSCLIV2.pkg"))),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"$ aws --version\n\naws-cli/2.0.34 Python/3.7.4 Darwin/19.5.0 botocore/2.0.0dev38\n")))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Configure cli using ",(0,i.kt)("inlineCode",{parentName:"p"},"aws configure")," command."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    (base) ~/demos$ aws configure\n    AWS Access Key ID [****************0000]: apikey demo.demok1.1a1aad0f4b000ca4d2d3bdb505298cbb9467b65526b0f79364e61e5f00000000\n    AWS Secret Access Key [****************0000]: \n    Default region name [us-west-1]: \n    Default output format [None]: \n")),(0,i.kt)("admonition",{parentName:"li",type:"note"},(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre"},"1. For API Keys, put `apikey` as prefix. See above example.\n2. For JWT Tokens, put `bearer` as prefix.\n"))))),(0,i.kt)("h2",{id:"operations"},"Operations"),(0,i.kt)("p",null,"This section provides calls you can use for general management operations using Dynamo Mode."),(0,i.kt)("h3",{id:"create-global-table"},"Create global table"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    aws dynamodb create-table \\\n        --table-name Music \\\n        --attribute-definitions \\\n            AttributeName=Artist,AttributeType=S \\\n            AttributeName=SongTitle,AttributeType=S \\\n        --key-schema \\\n            AttributeName=Artist,KeyType=HASH \\\n            AttributeName=SongTitle,KeyType=RANGE \\\n        --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n")),(0,i.kt)("h3",{id:"list-global-tables"},"List global tables"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    aws dynamodb list-global-tables --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n")),(0,i.kt)("h3",{id:"put-items"},"Put items"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb put-item \\\n        --table-name Music \\\n        --item \'{"Artist": {"S": "Obscure Indie Band"}, "SongTitle": {"S": "Call Me Today"}}\' \\\n        --condition-expression "attribute_not_exists(Artist)" \\\n        --return-values ALL_NEW \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb put-item \\\n        --table-name Music \\\n        --item \'{"Artist": {"S": "Luke Combs"}, "SongTitle": {"S": "Tequila"}}\' \\\n        --condition-expression "attribute_not_exists(Artist)" \\\n        --return-values ALL_NEW \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h3",{id:"batch-get-item"},"Batch get item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb batch-get-item \\\n        --request-items \'{"Music": {"Keys": [{"Artist": {"S": "Obscure Indie Band"},"SongTitle": {"S": "Call Me Today"}},{"Artist": {"S": "Luke Combs"},"SongTitle": {"S": \n"Tequila"}}],"ProjectionExpression":"Artist"}}\' \\\n        --return-consumed-capacity TOTAL \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h3",{id:"batch-write-item"},"Batch write item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'   aws dynamodb batch-write-item \\\n     --request-items \'{"Music": [{"PutRequest": {"Item": {"Artist": {"S": "TestName1"},"SongTitle": {"S": "The Best1"}}}},{"PutRequest": {"Item": {"Artist": {"S": \n"TestName2"},"SongTitle": {"S": "The Best2"}}}}]}\' \\\n     --return-consumed-capacity INDEXES \\\n     --return-item-collection-metrics SIZE \\\n     --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h3",{id:"scan"},"Scan"),(0,i.kt)("p",null,"This section provides calls you can use to view all data or broadly filtered data in Dynamo Mode."),(0,i.kt)("h4",{id:"retrieve-all-items"},"Retrieve All Items"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    aws dynamodb scan \\\n        --table-name Music \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n")),(0,i.kt)("h4",{id:"count-all-items"},"Count All Items"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb scan \\\n        --table-name Music \\\n        --select "COUNT" \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h4",{id:"filter-items"},"Filter Items"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb scan \\\n       --table-name Music \\\n       --filter-expression "Artist = :a" \\\n       --projection-expression "#ST, #AT" \\\n       --expression-attribute-names \'{"#ST": "SongTitle","#AT":"Artist"}\' \\\n       --expression-attribute-values \'{":a": {"S": "TestName1"}}\' \\\n       --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h3",{id:"query-items"},"Query items"),(0,i.kt)("p",null,"This section provides calls you can use for querying specific items in Dynamo Mode."),(0,i.kt)("h4",{id:"query-by-artist-name"},"Query By Artist Name"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb query \\\n        --table-name Music \\\n        --key-condition-expression "Artist == :name" \\\n        --expression-attribute-values  \'{":name":{"S":"Luke Combs"}}\' \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h4",{id:"query-by-complex-conditions"},"Query By complex conditions"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb query \\\n      --table-name Music \\\n      --key-condition-expression "Artist = :n1 AND begins_with(SongTitle, :n2)" \\\n      --expression-attribute-values  \'{":n1": {"S": "Luke Combs"}, ":n2": {"S": "Tequila"}}\' \\\n      --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb query \\\n      --table-name Music \\\n      --key-condition-expression "Artist = :n1 AND begins_with(SongTitle, :n2)" \\\n      --filter-expression "#a = :n1 and  #b = :n2" \\\n      --expression-attribute-names \'{"#a": "Artist", "#b": "SongTitle"}\' \\\n      --expression-attribute-values  \'{":n1":{"S":"Luke Combs"}, ":n2":{"S":"Tequila"}}\' \\\n      --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n      \n')),(0,i.kt)("h3",{id:"update-item"},"Update item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb update-item \\\n        --table-name Music \\\n        --key \'{"Artist": {"S": "Luke Combs"}, "SongTitle": {"S": "Tequila"}}\' \\\n        --update-expression "SET Year = :y, SongTitle = :t" \\\n        --expression-attribute-values  \'{":y":{"N":"2020"}, ":t":{"S":"Happy Day"}}\' \\\n        --return-values ALL_NEW \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h3",{id:"delete-item"},"Delete item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'    aws dynamodb delete-item \\\n        --table-name Music \\\n        --key \'{"Artist": {"S": "Luke Combs"}, "SongTitle": {"S": "Happy Day"}}\' \\\n        --return-values ALL_OLD \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n')),(0,i.kt)("h3",{id:"delete-table"},"Delete table"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"    aws dynamodb delete-table \\\n        --table-name Music \\\n        --endpoint-url https://api-play.paas.macrometa.io/_api/dynamo\n")))}u.isMDXComponent=!0}}]);