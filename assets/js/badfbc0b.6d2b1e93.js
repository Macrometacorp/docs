"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8199],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=o(n),u=r,h=d["".concat(s,".").concat(u)]||d[u]||m[u]||p;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,l=new Array(p);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var o=2;o<p;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},92718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>p,metadata:()=>i,toc:()=>o});var a=n(87462),r=(n(67294),n(3905));const p={title:"http-call-response (Source)"},l=void 0,i={unversionedId:"cep/source/http-call-response",id:"cep/source/http-call-response",title:"http-call-response (Source)",description:"The http-call-response source receives the responses for the calls made",source:"@site/docs/cep/source/http-call-response.md",sourceDirName:"cep/source",slug:"/cep/source/http-call-response",permalink:"/docs/cep/source/http-call-response",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/source/http-call-response.md",tags:[],version:"current",frontMatter:{title:"http-call-response (Source)"},sidebar:"defaultSidebar",previous:{title:"grpc (Source)",permalink:"/docs/cep/source/grpc"},next:{title:"http-service (Source)",permalink:"/docs/cep/source/http-service"}},s={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2}],c={toc:o};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The http-call-response source receives the responses for the calls made\nby its corresponding http-call sink, and maps them from formats such as\n",(0,r.kt)("inlineCode",{parentName:"p"},"text"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"XML")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),". To handle messages with different HTTP status\ncodes having different formats, multiple http-call-response sources are\nallowed to associate with a single http-call sink. It allows accessing\nthe attributes of the event that initiated the call, and the response\nheaders and properties via transport properties in the format\n",(0,r.kt)("inlineCode",{parentName:"p"},"trp:<attribute name>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"trp:<header/property>")," respectively."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (type="http-call-response", map.type="<STRING>", sink.id="<STRING>", http.status.code="<STRING>", allow.streaming.responses="<BOOL>")\n')),(0,r.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sink.id"),(0,r.kt)("td",{parentName:"tr",align:null},"Identifier to correlate the http-call-response source with its corresponding http-call sink that published the messages."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"http.status.code"),(0,r.kt)("td",{parentName:"tr",align:null},"The matching http responses status code regex, that is used to filter the the messages which will be processed by the source.Eg: ",(0,r.kt)("inlineCode",{parentName:"td"},"http.status.code = '200'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"http.status.code = '4\\\\d+'")),(0,r.kt)("td",{parentName:"tr",align:null},"200"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allow.streaming.responses"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable consuming responses on a streaming manner."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SINK EmployeeRequestStream WITH (type='http-call', method='POST', publisher.url='http://localhost:8005/registry/employee', sink.id='employee-info', map.type='json') (name string, id int);\n\nCREATE SOURCE EmployeeResponseStream WITH (type='http-call-response', sink.id='employee-info', http.status.code='2\\\\d+', map.type='json', map.attributes=\"name='trp:name', id='trp:id', location='$.town', age='$.age'\") (name string, id int, location string, age int);\n\nCREATE SOURCE EmployeeErrorStream WITH (type='http-call-response', sink.id='employee-info', http.status.code='4\\\\d+', map.type='text', map.regex.A='((.|\\n)*)', map.attributes=\"error='A[1]'\") (error string);\n")),(0,r.kt)("p",null,"When events arrive in ",(0,r.kt)("inlineCode",{parentName:"p"},"EmployeeRequestStream"),", http-call sink makes\ncalls to endpoint on url ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8005/registry/employee")," with\n",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," method and Content-Type ",(0,r.kt)("inlineCode",{parentName:"p"},"application/json"),"."),(0,r.kt)("p",null,"If the arriving event has attributes ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),":",(0,r.kt)("inlineCode",{parentName:"p"},"John")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),":",(0,r.kt)("inlineCode",{parentName:"p"},"1423")," it will send a message with\ndefault JSON mapping as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  "event": {\n    "name": "John",\n    "id": 1423\n  }\n}\n')),(0,r.kt)("p",null,"When the endpoint responds with status code in the range of 200 the\nmessage will be received by the http-call-response source associated\nwith the ",(0,r.kt)("inlineCode",{parentName:"p"},"EmployeeResponseStream")," stream, because it is correlated with\nthe sink by the same ",(0,r.kt)("inlineCode",{parentName:"p"},"sink.id")," ",(0,r.kt)("inlineCode",{parentName:"p"},"employee-info")," and as that expects\nmessages with ",(0,r.kt)("inlineCode",{parentName:"p"},"http.status.code")," in regex format ",(0,r.kt)("inlineCode",{parentName:"p"},"2\\\\d+"),". If the\nresponse message is in the format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{\n  "town": "NY",\n  "age": 24\n}\n')),(0,r.kt)("p",null,"the source maps the ",(0,r.kt)("inlineCode",{parentName:"p"},"location")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," attributes by executing JSON\npath on the message and maps the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," attributes by\nextracting them from the request event via as transport properties."),(0,r.kt)("p",null,"If the response status code is in the range of 400 then the message will be\nreceived by the http-call-response source associated with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"EmployeeErrorStream")," stream, because it is correlated with the sink by\nthe same ",(0,r.kt)("inlineCode",{parentName:"p"},"sink.id")," ",(0,r.kt)("inlineCode",{parentName:"p"},"employee-info")," and it expects messages with\n",(0,r.kt)("inlineCode",{parentName:"p"},"http.status.code")," in regex format ",(0,r.kt)("inlineCode",{parentName:"p"},"4\\\\d+"),", and maps the error response\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," attribute of the event."))}m.isMDXComponent=!0}}]);