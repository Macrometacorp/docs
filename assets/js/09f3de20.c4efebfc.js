"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[43236],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var o=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,l=function(e,n){if(null==e)return{};var t,o,l={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var r=o.createContext({}),c=function(e){var n=o.useContext(r),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return o.createElement(r.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,r=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),m=l,g=p["".concat(r,".").concat(m)]||p[m]||d[m]||a;return t?o.createElement(g,i(i({ref:n},u),{},{components:t})):o.createElement(g,i({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s.mdxType="string"==typeof e?e:l,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(67294),l=t(34334);const a="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return o.createElement("div",{role:"tabpanel",className:(0,l.Z)(a,i),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var o=t(87462),l=t(67294),a=t(34334),i=t(72389),s=t(67392),r=t(7094),c=t(12466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:i,values:p,groupId:m,className:g}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=p??h.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),b=(0,s.l)(y,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===i?i:i??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==f&&!y.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:C,setTabGroupChoices:S}=(0,r.U)(),[v,w]=(0,l.useState)(f),T=[],{blockElementScrollPositionUntilNextRender:A}=(0,c.o5)();if(null!=m){const e=C[m];null!=e&&e!==v&&y.some((n=>n.value===e))&&w(e)}const _=e=>{const n=e.currentTarget,t=T.indexOf(n),o=y[t].value;o!==v&&(A(n),w(o),null!=m&&S(m,String(o)))},N=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}n?.focus()};return l.createElement("div",{className:(0,a.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},g)},y.map((e=>{let{value:n,label:t,attributes:i}=e;return l.createElement("li",(0,o.Z)({role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,key:n,ref:e=>T.push(e),onKeyDown:N,onFocus:_,onClick:_},i,{className:(0,a.Z)("tabs__item",d,i?.className,{"tabs__item--active":v===n})}),t??n)}))),n?(0,l.cloneElement)(h.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==v})))))}function m(e){const n=(0,i.Z)();return l.createElement(p,(0,o.Z)({key:String(n)},e))}},71879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var o=t(87462),l=(t(67294),t(3905)),a=t(65488),i=t(85162);const s={sidebar_position:2,title:"Geo Spatial Tutorial"},r="Geo Spatial Tutorial",c={unversionedId:"collections/documents/geospatial/tutorial",id:"collections/documents/geospatial/tutorial",title:"Geo Spatial Tutorial",description:"The GeoJSON functionalities in GDN are based on Google\u2019s S2 geospatial index. We support indexing on a subset of the GeoJSON standard, as well as simple latitude-longitude pairs (Non-GeoJSON mode).",source:"@site/docs/collections/documents/geospatial/tutorial.md",sourceDirName:"collections/documents/geospatial",slug:"/collections/documents/geospatial/tutorial",permalink:"/docs/collections/documents/geospatial/tutorial",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/collections/documents/geospatial/tutorial.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Geo Spatial Tutorial"},sidebar:"defaultSidebar",previous:{title:"GeoJSON",permalink:"/docs/collections/documents/geospatial/geojson"},next:{title:"Key-Value Store",permalink:"/docs/collections/keyvalue/"}},u={},d=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"SDK download",id:"sdk-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"geo-spatial-tutorial"},"Geo Spatial Tutorial"),(0,l.kt)("p",null,"The GeoJSON functionalities in GDN are based on Google\u2019s S2 geospatial index. We support indexing on a subset of the GeoJSON standard, as well as simple latitude-longitude pairs (Non-GeoJSON mode)."),(0,l.kt)("p",null,"Calculating e.g. the distance between two coordinate tuples or checking whether a coordinate pair is located inside a polygon was possible, but those functions could not benefit by using the geo index optimizations. Those operations need to be as fast as possible to prevent them from being a show stopper."),(0,l.kt)("p",null,"Of course, speed is not everything, so we also want to provide a broader set of geo functionality by integrating full GeoJSON support including ",(0,l.kt)("inlineCode",{parentName:"p"},"Polygons"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Multi-Polygons")," and other geometry primitives."),(0,l.kt)("p",null,"With these functionalities, one can do more complex queries and build e.g. location-aware recommendation engines by combining the graph data model with geo-location aspects or use multiple data models. "),(0,l.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,l.kt)("p",null,"Let's assume your"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Tenant name is ",(0,l.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,l.kt)("li",{parentName:"ul"},"User password is ",(0,l.kt)("inlineCode",{parentName:"li"},"xxxxx"),".")),(0,l.kt)("h2",{id:"sdk-download"},"SDK download"),(0,l.kt)(a.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,l.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,l.kt)("h2",{id:"code-sample"},"Code Sample"),(0,l.kt)(a.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'""" This file is a demo of using Geo Locations on collections """\nimport pprint\nfrom c8 import C8Client\n\n# Variables - Connection\nURL = "play.paas.macrometa.io"\nAPI_KEY = "my API key" #Change to my API key\nGEO_FABRIC = "_system"\n\n\n# Variables - DB\ncollection_transit = "transit"\ncollection_shops = "shops"\n\n# Variable - Requests locations\nlatitude2 = 37.3972452334285 # Sunnyvale Elementary School\nlongitude2 = -121.99073796514953 # Sunnyvale Elementary School\n\n# Variables - Data\nshops_data = [\n    { "shop": "Walgreens", "address": "San Jose, CA", "coordinate": [ 37.2333253, -121.6846349 ] },\n    { "shop": "Costco", "address": "San Jose, CA", "coordinate": [ 37.4282724, -121.9066238 ] },\n    { "shop":"Walmart", "address": "San Jose, CA", "coordinate":\n        [ 37.3361905, -121.8905833 ] },\n    { "shop": "Bed Bath & Beyond", "address": "Mountain View, CA", "coordinate":\n        [ 37.4443293, -122.1598465] },\n    { "shop":"Best Buy", "address": "Mountain View, CA", "coordinate":\n        [ 37.35992431640625,-122.06830596923828 ] },\n    { "shop": "Target", "address": "Mountain View, CA", "coordinate":\n        [ 37.4443293, -122.1598465] },\n    { "shop": "Walgreens", "address": "Fremont, CA", "coordinate":\n        [ 37.48849288005677, -121.94342916254486 ] },\n    { "shop": "Costco", "address": "Almeda, CA", "coordinate":\n        [ 37.766039418486855, -122.2430211806723 ] },\n    { "shop": "Sweet Greens", "address": "San Francisco, CA", "coordinate":\n        [ 38.621725, -92.571271 ] }\n ]\n\ntransit_data = [\n    { "bus": "CA123", "stop": "Santa Clara, CA", "coordinate": [ 37.2333253, -121.6846349 ] },\n    { "bus": "CA233", "stop": "Milpitas, CA", "coordinate": [ 37.4282724, -121.9066238 ] },\n    { "bus": "CA433", "stop": "San Jose, CA", "coordinate": [ 37.3361905, -121.8905833 ] },\n    { "bus": "CA323", "stop": "Palo Alto, CA", "coordinate": [ 37.4443293, -122.1598465] },\n    { "bus": "CA523", "stop": "Mountain View, CA", "coordinate":\n        [ 37.35992431640625,-122.06830596923828 ] },\n    { "bus": "CA143", "stop": "Fremont, CA", "coordinate":\n        [ 37.48849288005677, -121.94342916254486 ] },\n    { "bus": "CA423", "stop": "Almeda, CA", "coordinate":\n        [ 37.766039418486855, -122.2430211806723 ] },\n    { "bus": "CA129", "stop": "San Francisco, CA", "coordinate": [ 38.621725, -92.571271 ] }\n]\n\npp = pprint.PrettyPrinter(indent=4)\n\n# Step 1: Open connection to GDN. You will be routed to the closest region.\nprint(f"\\n1. CONNECT: federation: {URL},  user: {API_KEY}")\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey = API_KEY, geofabric=GEO_FABRIC)\n\n# Step 2: Create a collection and geo index if not exists.\nprint(f"\\n2. CREATE_COLLECTION: region: {URL},  collection: {collection_shops}")\nif client.has_collection(collection_shops):\n    shopCol = client.collection(collection_shops)\nelse:\n    shopCol = client.create_collection(collection_shops)\n    client.add_geo_index(collection_shops, fields=["coordinate"], ordered=False)\n\n# Step 3: Insert data into collection.\nprint(f"\\n3. INSERT_SHOP_DATA: in region: {URL}")\n#shopCol.insert_many(shops_data)\nclient.insert_document(collection_name=collection_shops, document=shops_data)\n\n# Step 3a: Find shops closer to given location.\nlat1 = 37.43007055731992 # McCarthy Blvd, Milpitas\nlong1 = -121.92344167914754 # McCarthy Blvd, Milpitas\nradius = 10 * 1000 # meters\nprint(f"\\n3a. FIND_NEAR_BY_SHOPS for request: ({lat1}, {long1})")\nwithin_query = (f"FOR loc IN WITHIN ({collection_shops}, {lat1}, {long1}, {radius})"\n    f"SORT loc._distance ASC RETURN loc")\ncursor = client.execute_query(within_query)\ndocs = [document for document in cursor]\npp.pprint(docs)\n\n# Step 3b: Find shop closest to given location.\nprint(f"\\n3b. FIND_NEAREST_SHOP for request: ({lat1}, {long1})")\nnear_query = f"FOR loc IN NEAR ({collection_shops}, {lat1}, {long1}, 1) RETURN loc"\ncursor = client.execute_query(near_query)\ndocs = [document for document in cursor]\npp.pprint(docs)\n\n#-------------------------------------------------------------------#\n\n# Step 4: Create a collection and geoindex if none exists.\nprint(f"\\n4. CREATE_COLLECTION: region: {URL},  collection: {collection_transit}")\nif client.has_collection(collection_transit):\n    transitCol = client.collection(collection_transit)\nelse:\n    transitCol = client.create_collection(collection_transit)\n    client.add_geo_index(collection_transit, fields=["coordinate"], ordered=False)\n\n# Step 5: Insert data into collection.\nprint(f"\\n5. INSERT_TRANSIT_DATA: in region: {URL}")\nclient.insert_document(collection_name=collection_transit, document=transit_data)\n\n# Step 6a: Find buses currently within given rectangular fence.\nlat1 = 37.38905593900322\nlong1 = -122.14426630984782\nlat2 = 37.332401582858324\nlong2 = -121.80235913612003\n\nprint(f"\\n6a. FIND_BUSES available within RECTANGULAR fence: ({lat1}, {long1}, {lat2}, {long2})")\nwithin_query = (f"FOR loc IN WITHIN_RECTANGLE("\n    f"{collection_transit}, {lat1}, {long1}, {lat2}, {long2}) RETURN loc")\ncursor = client.execute_query(within_query)\ndocs = [document for document in cursor]\npp.pprint(docs)\n\n# Step 6b: Find shop closest to given location.\nprint(f"\\n6b. FIND_NEAREST_BUS for given location: ({lat1}, {long1})")\nnear_query = f"FOR loc IN NEAR ({collection_transit}, {lat1}, {long1}, 1) RETURN loc"\ncursor = client.execute_query(near_query)\ndocs = [document for document in cursor]\npp.pprint(docs)\n\n#-------------------------------------------------------------------#\n\n# Step 7: Delete data.\nprint(f"\\n7. DELETE_DATA: region: {URL}, collections: {collection_shops}, {collection_transit}")\nshopCol.truncate()\ntransitCol.truncate()\nclient.delete_collection(collection_transit)\nclient.delete_collection(collection_shops)\n'))),(0,l.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Variables - DB\nconst globalUrl = "https://play.paas.macrometa.io";\n\n// Create an authenticated instance with token or API key\n// const client = new jsc8({ url: globalUrl, token: "XXXX", fabricName: \'_system\' });\n// Step 1: Open connection to GDN. You will be routed to the closest region.\nconsole.log(`\\n1. Connect to federation: ${globalUrl}`);\nconst client = new jsc8({ url: globalUrl, apiKey: "XXXXX", fabricName: "_system" });\nconsole.log("Connected: Authentication done!!...");\n\n// Or use email and password to authenticate client instance\n// const client = new jsc8(globalUrl);\n// await client.login("nemo@nautilus.com", "xxxxx");\n\n// Variables\nconst collectionShops = "shops";\nconst collectionTransit = "transit";\n\n// Variable - Requests locations\n// const latitude2 = 37.3972452334285; // Sunnyvale Elementary School\n// const longitude2 = -121.99073796514953; // Sunnyvale Elementary School\nlet lat1, long1;\n\n// Variables - Data\nconst shopsDataValue = [\n  { shop: "Walgreens", address: "San Jose, CA", coordinate: [37.2333253, -121.6846349] },\n  { shop: "Costco", address: "San Jose, CA", coordinate: [37.4282724, -121.9066238] },\n  { shop: "Walmart", address: "San Jose, CA", coordinate: [37.3361905, -121.8905833] },\n  { shop: "Bed Bath & Beyond", address: "Mountain View, CA", coordinate: [37.4443293, -122.1598465] },\n  { shop: "Best Buy", address: "Mountain View, CA", coordinate: [37.35992431640625, -122.06830596923828] },\n  { shop: "Target", address: "Mountain View, CA", coordinate: [37.4443293, -122.1598465] },\n  { shop: "Walgreens", address: "Fremont, CA", coordinate: [37.48849288005677, -121.94342916254486] },\n  { shop: "Costco", address: "Almeda, CA", coordinate: [37.766039418486855, -122.2430211806723] },\n  { shop: "Sweet Greens", address: "San Francisco, CA", coordinate: [38.621725, -92.571271] }\n];\n\nconst transitDataValue = [\n  { bus: "CA123", stop: "Santa Clara, CA", coordinate: [37.2333253, -121.6846349] },\n  { bus: "CA233", stop: "Milpitas, CA", coordinate: [37.4282724, -121.9066238] },\n  { bus: "CA433", stop: "San Jose, CA", coordinate: [37.3361905, -121.8905833] },\n  { bus: "CA323", stop: "Palo Alto, CA", coordinate: [37.4443293, -122.1598465] },\n  { bus: "CA523", stop: "Mountain View, CA", coordinate: [37.35992431640625, -122.06830596923828] },\n  { bus: "CA143", stop: "Fremont, CA", coordinate: [37.48849288005677, -121.94342916254486] },\n  { bus: "CA423", stop: "Almeda, CA", coordinate: [37.766039418486855, -122.2430211806723] },\n  { bus: "CA129", stop: "San Francisco, CA", coordinate: [38.621725, -92.571271] }\n];\n\nasync function createCollection () {\n  console.log("\\n2. Create collections:");\n\n  try {\n    console.log(`Creating the collection ${collectionShops}...`);\n    const existsShops = await client.hasCollection(collectionShops);\n    if (!existsShops) {\n      await client.createCollection(collectionShops);\n      await client.addGeoIndex(collectionShops, ["coordinate"], { geoJson: false });\n      console.log("Collection created and geo-indexed successfully.");\n    } else {\n      console.log(`Collection ${collectionShops} already exists.`);\n    }\n\n    console.log(`Creating the collection ${collectionTransit}...`);\n    const existsTransit = await client.hasCollection(collectionTransit);\n    if (!existsTransit) {\n      await client.createCollection(collectionTransit);\n      await client.addGeoIndex(collectionTransit, ["coordinate"], { geoJson: false });\n      console.log("Collection created and geo-indexed successfully.");\n    } else {\n      console.log(`Collection ${collectionTransit} already exists.`);\n    }\n  } catch (e) {\n    console.error("Collection creation did not succeed due to: " + e);\n  }\n}\n\nasync function insertData (shopsDataValue, transitDataValue) {\n  try {\n    console.log(`\\n3a. Insert shop data in region ${globalUrl}`);\n    await client.insertDocumentMany(collectionShops, shopsDataValue);\n  } catch (e) {\n    console.log(`Cannot insert documents to collection ${collectionShops} due to ${e}`);\n  }\n\n  try {\n    console.log(`\\n3b. Insert transit data in region ${globalUrl}`);\n    await client.insertDocumentMany(collectionTransit, transitDataValue);\n  } catch (e) {\n    console.log(`Cannot insert documents to collection ${collectionTransit} due to ${e}`);\n  }\n}\n\nasync function findData () {\n  console.log("\\n4. Find data:");\n\n  // Find shops closer to given location\n  lat1 = 37.43007055731992; // McCarthy Blvd, Milpitas\n  long1 = -121.92344167914754; // McCarthy Blvd, Milpitas\n  const radius = 10 * 1000; // meters\n  let withinQuery = `FOR loc IN WITHIN (${collectionShops}, ${lat1}, ${long1}, ${radius}) SORT loc._distance ASC RETURN loc`;\n  console.log(`\\n4a. Find nearby shops for request: (${lat1}, ${long1})`);\n  let result = await client.executeQuery(withinQuery);\n  console.log(result);\n\n  // Find shop closest to given location\n  console.log(`\\n4b. Find nearest for request: (${lat1}, ${long1})`);\n  let nearQuery = `FOR loc IN NEAR (${collectionShops}, ${lat1}, ${long1}, 1) RETURN loc`;\n  result = await client.executeQuery(nearQuery);\n  console.log(result);\n\n  // Find buses currently within given rectangular fence\n  lat1 = 37.38905593900322;\n  long1 = -122.14426630984782;\n  const lat2 = 37.332401582858324;\n  const long2 = -121.80235913612003;\n\n  console.log(`\\n4c. Find buses available within rectangular fence: (${lat1}, ${long1}, ${lat2}, ${long2})`);\n\n  withinQuery = `FOR loc IN WITHIN_RECTANGLE (${collectionTransit}, ${lat1}, ${long1}, ${lat2}, ${long2}) RETURN loc`;\n  result = await client.executeQuery(withinQuery);\n  console.log(result);\n\n  // Find bus closest to given location\n  console.log(`\\n4d. Find nearest bus for given location: (${lat1}, ${long1})`);\n  nearQuery = `FOR loc IN NEAR (${collectionTransit}, ${lat1}, ${long1}, 1) RETURN loc`;\n  result = await client.executeQuery(nearQuery);\n  console.log(result);\n}\n\nasync function deleteData () {\n  console.log("\\n5. Delete data:");\n\n  if (await client.hasCollection(collectionShops)) {\n    await client.deleteCollection(collectionShops);\n    console.log(`Collection ${collectionShops} has been deleted successfully`);\n  } else {\n    console.log(`Cannot delete non-existent collection ${collectionShops}`);\n  }\n\n  if (await client.hasCollection(collectionTransit)) {\n    await client.deleteCollection(collectionTransit);\n    console.log(`Collection ${collectionTransit} has been deleted successfully`);\n  } else {\n    console.log(`Cannot delete non-existent collection ${collectionTransit}`);\n  }\n}\n\n(async function () {\n  await createCollection();\n  await insertData(shopsDataValue, transitDataValue);\n  await findData();\n  await deleteData();\n})();\n')))))}m.isMDXComponent=!0}}]);