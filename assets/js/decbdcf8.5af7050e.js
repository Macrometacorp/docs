"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[91472],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),s=d(n),k=i,N=s["".concat(o,".").concat(k)]||s[k]||u[k]||r;return n?a.createElement(N,l(l({ref:t},m),{},{components:n})):a.createElement(N,l({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:i,l[1]=p;for(var d=2;d<r;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},68379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:40,title:"Data Cleaning Examples"},l=void 0,p={unversionedId:"cep/examples/data-cleaning",id:"cep/examples/data-cleaning",title:"Data Cleaning Examples",description:"This page shows examples of ways to clean your data.",source:"@site/docs/cep/examples/data-cleaning.md",sourceDirName:"cep/examples",slug:"/cep/examples/data-cleaning",permalink:"/docs/cep/examples/data-cleaning",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/data-cleaning.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40,title:"Data Cleaning Examples"},sidebar:"defaultSidebar",previous:{title:"Basic Types Example",permalink:"/docs/cep/examples/basic-types-example"},next:{title:"Nulls Example",permalink:"/docs/cep/examples/null-example"}},o={},d=[{value:"If-Then-Else",id:"if-then-else",level:2},{value:"Events at Each Stream",id:"events-at-each-stream",level:3},{value:"Value-based Filtering",id:"value-based-filtering",level:2},{value:"Value-based Filtering Input",id:"value-based-filtering-input",level:3},{value:"Value-based Filtering Output",id:"value-based-filtering-output",level:3},{value:"Type-based Filtering",id:"type-based-filtering",level:2},{value:"Type-based Filtering Input",id:"type-based-filtering-input",level:3},{value:"Type-based Filtering Output",id:"type-based-filtering-output",level:3},{value:"Regex Matching",id:"regex-matching",level:2},{value:"Regex Matching Input",id:"regex-matching-input",level:3},{value:"Regex Matching Output",id:"regex-matching-output",level:3},{value:"Default Function with Null Values",id:"default-function-with-null-values",level:2},{value:"Default Input",id:"default-input",level:3},{value:"Default Output",id:"default-output",level:3},{value:"Remove Duplicate Events",id:"remove-duplicate-events",level:2},{value:"Example",id:"example",level:3},{value:"Behavior",id:"behavior",level:3}],m={toc:d};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This page shows examples of ways to clean your data."),(0,i.kt)("h2",{id:"if-then-else"},"If-Then-Else"),(0,i.kt)("p",null,"This example shows how to enrich events based on a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"if-then-else")," conditions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `TemperatureStream` stream to process events having `sensorId` and `temperature`(F)\nCREATE STREAM TemperatureStream (sensorId string, temperature double);\n\n@info(name = 'SimpleIfElseQuery')\nINSERT INTO ValidTemperatureStream\nSELECT sensorId,\n-- if `temperature` > -2, `isValid`, then return `true`, else `false` \n    ifThenElse(temperature > -2, 'Valid', 'InValid') as isValid \nFROM TemperatureStream;\n\n@info(name = 'ComplexIfElseQuery') \nINSERT INTO ProcessedTemperatureStream\nSELECT sensorId, \n-- If the `temperature` > 40 the status is set to `High`, between -2 and 40 as `Normal` and less than -2 as `InValid` \n    ifThenElse(temperature > -2, \n        ifThenElse(temperature > 40, 'High', 'Normal'), \n        'InValid') \n    as tempStatus\nFROM TemperatureStream  ;\n")),(0,i.kt)("h3",{id:"events-at-each-stream"},"Events at Each Stream"),(0,i.kt)("p",null,"When an event with values ","[",(0,i.kt)("inlineCode",{parentName:"p"},"'sensor1'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"35.4"),"]"," is sent to TemperatureStream, it is converted and travels through the streams as below."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ValidTemperatureStream : ","[",(0,i.kt)("inlineCode",{parentName:"li"},"'sensor1'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"'Valid'"),"]"),(0,i.kt)("li",{parentName:"ul"},"ProcessedTemperatureStream : ","[",(0,i.kt)("inlineCode",{parentName:"li"},"'sensor1'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"'Normal'"),"]")),(0,i.kt)("h2",{id:"value-based-filtering"},"Value-based Filtering"),(0,i.kt)("p",null,"This example shows filter-out events based on simple conditions such as ",(0,i.kt)("inlineCode",{parentName:"p"},"number value"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"range")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `TemperatureStream` stream to process events having `sensorId` and `temperature`(F)\nCREATE STREAM TemperatureStream (sensorId string, temperature double);\n\n@info(name = 'EqualsFilter')\n-- Filter out events with `sensorId` equal to A1234\nINSERT INTO SenorA1234TemperatureStream\nSELECT *\nFROM TemperatureStream[ sensorId == 'A1234'];\n\n\n@info(name = 'RangeFilter') \n-- Filter out events where `-2 < temperature < 40`\nINSERT INTO NormalTemperatureStream\nSELECT *\nFROM TemperatureStream[ temperature > -2 and temperature < 40];\n\n\n@info(name = 'NullFilter') \n-- Filter out events with `SensorId` is `null`\nINSERT INTO InValidTemperatureStream\nSELECT *\nFROM TemperatureStream[ sensorId is null ];\n")),(0,i.kt)("h3",{id:"value-based-filtering-input"},"Value-based Filtering Input"),(0,i.kt)("p",null,"Below events are sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"TemperatureStream"),","),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"[",(0,i.kt)("inlineCode",{parentName:"li"},"'A1234'"),", 39]"),(0,i.kt)("li",{parentName:"ol"},"[",(0,i.kt)("inlineCode",{parentName:"li"},"'sensor1'"),", 35]"),(0,i.kt)("li",{parentName:"ol"},"[",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", 43]")),(0,i.kt)("h3",{id:"value-based-filtering-output"},"Value-based Filtering Output"),(0,i.kt)("p",null,"After processing, the following events arrive at each stream:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SenorA1234TemperatureStream: ","[",(0,i.kt)("inlineCode",{parentName:"p"},"'A1234'"),", 39]"," only")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"NormalTemperatureStream:  ","[",(0,i.kt)("inlineCode",{parentName:"p"},"'sensor1'"),", 35]"," only")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"InValidTemperatureStream: ","[",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", 43]"," only"))),(0,i.kt)("h2",{id:"type-based-filtering"},"Type-based Filtering"),(0,i.kt)("p",null,"This example shows filter-out events based on the data ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," of the attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `SweetProductionStream` having information of `name` and `amount`\nCREATE STREAM SweetProductionStream (name string, amount int);\n\n@info(name='ProcessSweetProductionStream')\nINSERT INTO ProcessedSweetProductionStream\nSELECT \n-- `true` if `amount` is of `int` type\n   instanceOfInteger(amount) as isAIntInstance,\n    name, \n    amount\nFROM SweetProductionStream;\n")),(0,i.kt)("h3",{id:"type-based-filtering-input"},"Type-based Filtering Input"),(0,i.kt)("p",null,"Below event is sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"SweetProductionStream"),":"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'invalid'"),"]"),(0,i.kt)("h3",{id:"type-based-filtering-output"},"Type-based Filtering Output"),(0,i.kt)("p",null,"After processing, the event arriving at ",(0,i.kt)("inlineCode",{parentName:"p"},"ProcessedSweetProductionStream")," is:"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'invalid'"),"]"),(0,i.kt)("h2",{id:"regex-matching"},"Regex Matching"),(0,i.kt)("p",null,"This example demonstrates event cleansing using regex expressions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `SweetProductionStream` having information of `name` and `amount`\nCREATE STREAM SweetProductionStream (name string, amount int);\n\n@info(name='ProcessSweetProductionStream')\nINSERT INTO ChocolateProductStream\nSELECT name, \n-- Matches if `name` begins with the word 'chocolate'\n   regex:matches('chocolate(.*)', name) as isAChocolateProduct, \n-- Captures the `sweetType` of the sweet following the flavour in `name`\n   regex:group('.*\\s(.*)', name, 1) as sweetType\nFROM SweetProductionStream;\n")),(0,i.kt)("h3",{id:"regex-matching-input"},"Regex Matching Input"),(0,i.kt)("p",null,"Below event is sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"SweetProductionStream"),","),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"34"),"]"),(0,i.kt)("h3",{id:"regex-matching-output"},"Regex Matching Output"),(0,i.kt)("p",null,"After processing, the event arriving at ",(0,i.kt)("inlineCode",{parentName:"p"},"ChocolateProductStream")," is:"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'cake'"),"]"),(0,i.kt)("h2",{id:"default-function-with-null-values"},"Default Function with Null Values"),(0,i.kt)("p",null,"This example shows how to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," function to process attributes with ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `PatientRegistrationInputStream` having information in all primitive types\nCREATE STREAM PatientRegistrationInputStream (\n                 seqNo long, name string, age int,\n                 height float, weight double, photo object,\n                 isEmployee bool, wardNo object);\n\n\n@info(name = 'SimpleIfElseQuery')\nINSERT INTO PreprocessedPatientRegistrationInputStream\nSELECT \n-- Default value of `invalid` to be used if `name` is `null` \n    default(name, 'invalid') as name, \n\n-- Default value of `0l` to be used if `seqNo` is `null` \n    default(seqNo, 0l) as seqNo, \n\n-- Default value of `0d` to be used if `weight` is `null` \n    default(weight, 0d) as weight,\n    \n-- Default value of `0` to be used if `age` is `null` \n    default(age, 0) as age, \n\n-- Default value of `0f` to be used if `height` is `null` \n    default(height, 0f) as height   \n\nFROM PatientRegistrationInputStream;\n")),(0,i.kt)("h3",{id:"default-input"},"Default Input"),(0,i.kt)("p",null,"An event of all ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," attributes is sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"PatientRegistrationInputStream"),":"),(0,i.kt)("h3",{id:"default-output"},"Default Output"),(0,i.kt)("p",null,"After processing, the event arriving at ",(0,i.kt)("inlineCode",{parentName:"p"},"PreprocessedPatientRegistrationInputStream")," is:"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'invalid'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0"),"]"),(0,i.kt)("p",null,"With types:"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"double"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"float"),"]"),(0,i.kt)("h2",{id:"remove-duplicate-events"},"Remove Duplicate Events"),(0,i.kt)("p",null,"Provides examples of removing ",(0,i.kt)("inlineCode",{parentName:"p"},"duplicate")," events that arrive within a given time duration."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM TemperatureStream (sensorId string, seqNo string, temperature double);\n\n@info(name = 'Deduplicate-sensorId')\n-- Remove duplicate events arriving within `1 minute` time gap, based on unique `sensorId`.\nINSERT INTO UniqueSensorStream\nSELECT *\nFROM TemperatureStream#unique:deduplicate(sensorId, 1 min);\n\n@info(name = 'Deduplicate-sensorId-and-seqNo')\n-- Remove duplicate events arriving within `1 minute` time gap, based on unique `sensorId` and `seqNo` combination.\nINSERT INTO UniqueSensorSeqNoStream\nSELECT *\nFROM TemperatureStream#unique:deduplicate(str:concat(sensorId,'-',seqNo), 1 min)\n")),(0,i.kt)("h3",{id:"behavior"},"Behavior"),(0,i.kt)("p",null,"When events are sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"TemperatureStream")," stream, following events are emitted after deduplication on ",(0,i.kt)("inlineCode",{parentName:"p"},"UniqueSensorStream")," via ",(0,i.kt)("inlineCode",{parentName:"p"},"Deduplicate-sensorId")," query, and ",(0,i.kt)("inlineCode",{parentName:"p"},"UniqueSensorSeqNoStream")," stream via ",(0,i.kt)("inlineCode",{parentName:"p"},"Deduplicate-sensorId-and-seqNo")," query."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Time"),(0,i.kt)("th",{parentName:"tr",align:null},"Input to ",(0,i.kt)("inlineCode",{parentName:"th"},"TemperatureStream")),(0,i.kt)("th",{parentName:"tr",align:null},"Output at ",(0,i.kt)("inlineCode",{parentName:"th"},"UniqueSensorStream")),(0,i.kt)("th",{parentName:"tr",align:null},"Output at ",(0,i.kt)("inlineCode",{parentName:"th"},"UniqueSensorSeqNoStream")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:00"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:10"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'201'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"23.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'201'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"23.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:20"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'500'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'500'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'500'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:40"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:50"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:01:05"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'501'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'501'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:01:10"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'203'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'203'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'203'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:02:20"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:03:10"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'204'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'204'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]")))))}u.isMDXComponent=!0}}]);