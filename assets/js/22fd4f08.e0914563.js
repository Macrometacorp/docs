"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[10590],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,s(s({ref:n},c),{},{components:t})):r.createElement(f,s({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(67294),a=t(34334);const o="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,s),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(87462),a=t(67294),o=t(34334),s=t(72389),i=t(67392),l=t(7094),p=t(12466);const c="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:n,block:t,defaultValue:s,values:m,groupId:d,className:f}=e,y=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??y.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),h=(0,i.l)(b,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===s?s:s??y.find((e=>e.props.default))?.props.value??y[0].props.value;if(null!==v&&!b.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:T}=(0,l.U)(),[w,g]=(0,a.useState)(v),E=[],{blockElementScrollPositionUntilNextRender:A}=(0,p.o5)();if(null!=d){const e=k[d];null!=e&&e!==w&&b.some((n=>n.value===e))&&g(e)}const _=e=>{const n=e.currentTarget,t=E.indexOf(n),r=b[t].value;r!==w&&(A(n),g(r),null!=d&&T(d,String(r)))},N=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=E.indexOf(e.currentTarget)+1;n=E[t]??E[0];break}case"ArrowLeft":{const t=E.indexOf(e.currentTarget)-1;n=E[t]??E[E.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},f)},b.map((e=>{let{value:n,label:t,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>E.push(e),onKeyDown:N,onFocus:_,onClick:_},s,{className:(0,o.Z)("tabs__item",u,s?.className,{"tabs__item--active":w===n})}),t??n)}))),n?(0,a.cloneElement)(y.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},y.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function d(e){const n=(0,s.Z)();return a.createElement(m,(0,r.Z)({key:String(n)},e))}},39771:(e,n,t)=>{t.d(n,{ZP:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={toc:[]};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Copy and paste the code block below in your favorite IDE."),(0,a.kt)("li",{parentName:"ol"},"Update constants with your values, such as the ",(0,a.kt)("a",{parentName:"li",href:"/docs/account-management/api-keys/"},"API key"),"."),(0,a.kt)("li",{parentName:"ol"},"Run the code.")))}s.isMDXComponent=!0},79516:(e,n,t)=>{t.d(n,{ZP:()=>s});var r=t(87462),a=(t(67294),t(3905));const o={toc:[]};function s(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A ",(0,a.kt)("a",{parentName:"li",href:"https://auth-play.macrometa.io/"},"Macrometa account")," with admin permissions."),(0,a.kt)("li",{parentName:"ul"},"An API key with admin permissions. For more information, refer to ",(0,a.kt)("a",{parentName:"li",href:"/docs/account-management/api-keys/create-api-keys"},"Create API Keys"),".")))}s.isMDXComponent=!0},28032:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>y,frontMatter:()=>p,metadata:()=>u,toc:()=>d});var r=t(87462),a=(t(67294),t(3905)),o=t(65488),s=t(85162),i=t(79516),l=t(39771);const p={sidebar_position:10,title:"REST APIs Stream Worker Example"},c=void 0,u={unversionedId:"cep/examples/rest-apis-cep-example",id:"cep/examples/rest-apis-cep-example",title:"REST APIs Stream Worker Example",description:"Modern applications need to be highly responsive, always online, and able to access data instantly across the globe. At the same time, they need to be deployed on data centers close to their users. Macrometa global data network (GDN) is a real-time materialized view engine that provides instant data to applications and APIs in a simple interface.",source:"@site/docs/cep/examples/rest-apis-cep-example.md",sourceDirName:"cep/examples",slug:"/cep/examples/rest-apis-cep-example",permalink:"/docs/cep/examples/rest-apis-cep-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/rest-apis-cep-example.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"REST APIs Stream Worker Example"},sidebar:"defaultSidebar",previous:{title:"Table and Store Example",permalink:"/docs/cep/examples/table-and-store-example"},next:{title:"Stream Workers SDK Example",permalink:"/docs/cep/examples/stream-workers-sdk-example"}},m={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"REST API Stream Worker Example",id:"rest-api-stream-worker-example",level:2}],f={toc:d};function y(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Modern applications need to be highly responsive, always online, and able to access data instantly across the globe. At the same time, they need to be deployed on data centers close to their users. Macrometa global data network (GDN) is a real-time materialized view engine that provides instant data to applications and APIs in a simple interface."),(0,a.kt)("p",null,"For more information about using Macrometa APIs, refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-docs/"},"APIs"),"."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)(i.ZP,{mdxType:"Prerequisites"}),(0,a.kt)("h2",{id:"rest-api-stream-worker-example"},"REST API Stream Worker Example"),(0,a.kt)("p",null,"Macrometa stream processing allows you to integrate streaming data and take appropriate actions."),(0,a.kt)(l.ZP,{mdxType:"Steps"}),(0,a.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// If you are using Node.js version less than 17.5, then run `npm install node-fetch` and comment out the line below.\n// const fetch = (url) => import(\'node-fetch\').then(({default: fetch}) => fetch(url));\n\nconst WebSocket = require(\'ws\');\nclass APIRequest {\n  _headers = {\n    Accept: "application/json",\n    "Content-Type": "application/json"\n  };\n\n  constructor (httpUrl, apiKey) {\n    this._url = httpUrl;\n    this._headers.authorization = `apikey ${apiKey}`; // apikey keyword is needed here\n  }\n\n  _handleResponse (response, resolve, reject) {\n    if (response.ok) {\n      resolve(response.json());\n    } else {\n      reject(response);\n    }\n  }\n\n  req (endpoint, { body, ...options } = {}) {\n    const self = this;\n    return new Promise(function (resolve, reject) {\n      fetch(self._url + endpoint, {\n        headers: self._headers,\n        body: body ? JSON.stringify(body) : undefined,\n        ...options\n      }).then((response) => self._handleResponse(response, resolve, reject));\n    });\n  }\n}\n\nconst apiKey = "XXXXX" // Use your API key here\nconst globalUrl = "api-play.paas.macrometa.io";\nconst httpUrl = `https://${globalUrl}`;\nconst tenant = "XXXXX" // Use your tenant name here\n\nconst isGlobal = false;\nconst stream = "tutorialAppInputStream";\nconst streamWorkerName = "stream_worker_tutorial";\nconst streamWorkerDef = `@App:name(\'stream_worker_tutorial\')\n  @App:description(\'This application demonstrates how to use user-defined functions in the stream worker.\')\n  @App:qlVersion("2")\n  CREATE FUNCTION concatFn[javascript] return string {\n      var str1 = data[0];\n      var str2 = data[1];\n      var str3 = data[2];\n      var response = str1 + str2 + str3;\n      return response;\n  };\n  -- Stream\n  CREATE STREAM tutorialAppInputStream (deviceID string, roomNo int, temperature double);\n  -- Table\n  CREATE TABLE GLOBAL tutorialAppOutputTable (id string, temperature double);\n  @info(name=\'Query\')\n  INSERT INTO tutorialAppOutputTable\n  SELECT concatFn(roomNo,\'-\',deviceID) as id, temperature\n  FROM tutorialAppInputStream;`;\n\nconst run = async function () {\n  try {\n    const connection = new APIRequest(httpUrl, apiKey);\n\n    /* ---------------------------- Create stream worker ---------------------------- */\n    try {\n      const streamWorker = await connection.req("/_fabric/_system/_api/streamapps", {\n        body: {\n          definition: streamWorkerDef,\n          regions: []\n        },\n        method: "POST"\n      });\n      console.log("Stream worker created successfully", streamWorker);\n    } catch (e) {\n      if (e.status === 409) {\n        console.log("Stream worker already exists, skipping creation");\n      } else {\n        console.log("Error while creating stream worker");\n        throw e;\n      }\n    }\n\n    /* --------------------------- Activate stream worker --------------------------- */\n\n    await connection.req(\n      `/_fabric/_system/_api/streamapps/${streamWorkerName}/active?active=true`,\n      {\n        method: "PATCH"\n      }\n    );\n\n    console.log("Activating stream worker...", streamWorkerName);\n\n    await new Promise((resolve) => setTimeout(resolve, 10000));\n\n    console.log("Stream worker activated successfully");\n\n    /* ------------------ Publish messages to sample stream worker ------------------ */\n    \n    const region = isGlobal ? "c8global" : "c8local";\n    const streamName = `${region}s.${stream}`;\n\n    // Fetching local URL in case the stream is local as defined in the stream worker\n    const localDcDetails = await connection.req(`/datacenter/local`, {\n      method: "GET"\n    });\n\n    const dcUrl = localDcDetails.tags.url;\n\n    const url = isGlobal\n      ? globalUrl\n      : `api-${dcUrl}`;\n\n    const otpProducer = await connection.req(`/apid/otp`, {\n      method: "POST"\n    });\n\n    const producerUrl = `wss://${url}/_ws/ws/v2/producer/persistent/${tenant}/${region}._system/${streamName}?otp=${otpProducer.otp}`;\n\n    /* -------------------------- Initializing producer -------------------------- */\n\n    const producer = new WebSocket(producerUrl);\n\n    producer.onopen = function () {\n      console.log("WebSocket:Producer is open now for " + streamName);\n    };\n\n    producer.onerror = function () {\n      console.log(\n        "Failed to establish WebSocket:Producer connection for " + streamName\n      );\n    };\n\n    producer.onclose = function () {\n      console.log("Closed WebSocket:Producer connection for " + streamName);\n    };\n\n    producer.onmessage = function () {\n      console.log("WebSocket:Producer message sent successfully");\n    };\n\n    await new Promise((resolve) => setTimeout(resolve, 10000));\n\n    const inputData = [\n      {\n        deviceID: "AD11",\n        roomNo: 200,\n        temperature: 18\n      },\n      { deviceID: "AD11", roomNo: 201, temperature: 47 }\n    ];\n\n    producer.send(\n      JSON.stringify({\n        payload: Buffer.from((JSON.stringify(inputData[0]))).toString(\'base64\')\n      })\n    );\n\n    await new Promise((resolve) => setTimeout(resolve, 10000));\n\n    producer.send(\n      JSON.stringify({\n        payload: Buffer.from((JSON.stringify(inputData[1]))).toString(\'base64\')\n      })\n    );\n\n    await new Promise((resolve) => setTimeout(resolve, 10000));\n\n    producer.close();\n\n    /* ----------------------------- Verify results ----------------------------- */\n\n    const selectQuery = "FOR doc IN tutorialAppOutputTable RETURN doc";\n\n    const result = await connection.req(`/_fabric/_system/_api/cursor`, {\n      body: {\n        id: "tutorialStreamAppQuery",\n        query: selectQuery,\n        bindVars: {}\n      },\n      method: "POST"\n    });\n\n    console.log("Input sent ---\x3e", inputData);\n    console.log("Output received ---\x3e", result.result);\n\n    /* ---------------------------- Delete stream worker ---------------------------- */\n    \n    const deletion = await connection.req(\n      `/_fabric/_system/_api/streamapps/${streamWorkerName}`,\n      {\n        method: "DELETE"\n      }\n    );\n\n    console.log("Stream worker deleted successfully", deletion);\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nrun();\n'))),(0,a.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'import requests\nimport json\nimport base64\nimport six\nimport time\nfrom websocket import create_connection\n\n# Constants  \nURL = "api-play.paas.macrometa.io"\nHTTP_URL = f"https://{URL}"\nAPI_KEY = "XXXXX" # Use your API key here\nAUTH_TOKEN = f"apikey {API_KEY}"\nFABRIC = "_system"\nTENANT_NAME = "XXXXX" # Add your tenant name here\nSTREAM_NAME = "tutorialAppInputStream"\nSTREAM_WORKER_NAME = "stream_worker_tutorial"\nSTREAM_WORKER ="""\n  @App:name(\'stream_worker_tutorial\')\n  @App:qlVersion("2")\n  CREATE FUNCTION concatFn[javascript] return string {\n      var str1 = data[0];\n      var str2 = data[1];\n      var str3 = data[2];\n      var response = str1 + str2 + str3;\n      return response;\n  };\n  -- Stream\n  CREATE STREAM tutorialAppInputStream (deviceID string, roomNo int, temperature double);\n  -- Table\n  CREATE TABLE GLOBAL tutorialAppOutputTable (id string, temperature double);\n  @info(name=\'Query\')\n  INSERT INTO tutorialAppOutputTable\n  SELECT concatFn(roomNo,\'-\',deviceID) as id, temperature\n  FROM tutorialAppInputStream;\n"""\n\nINPUT_DATA = [\n      {\n        "deviceID": "AD11",\n        "roomNo": 200,\n        "temperature": 18,\n      },\n      { "deviceID": "AD11",\n        "roomNo": 201,\n        "temperature": 47 },\n    ]\n\nSELECT_QUERY = "FOR doc IN tutorialAppOutputTable return doc"\n\n# Create a HTTPS Session\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Create a stream worker\n\nurl = f"{HTTP_URL}/_fabric/_system/_api/streamapps"\npayload = {\n  "definition": STREAM_WORKER,\n  "regions": []\n}\n\nresp = session.post(url, data=json.dumps(payload))\nresult = json.loads(resp.text)\nprint("FED URL:", HTTP_URL)\nprint("\\nstream worker Created: ", result)\n\n# Activate stream worker\n\nurl = f"{HTTP_URL}/_fabric/_system/_api/streamapps/{STREAM_WORKER_NAME}/active?active=true"\nresp = session.patch(url)\nresult = json.loads(resp.text)\nprint("\\nstream worker Activated: ", result)\n\n# Wait for all inputs and outputs to initialize\n\ntime.sleep(5)\n\n# Publish messages to the input stream\n\nstream_type = "c8local"\nproducerurl = f"wss://{URL}/_ws/ws/v2/producer/persistent/{TENANT_NAME}/{stream_type}.{FABRIC}/{stream_type}s.{STREAM_NAME}"\nws = create_connection(producerurl,header={"content-type": \'application/json\', \'authorization\': AUTH_TOKEN})\npayload = {\n                "payload": base64.b64encode(\n                    six.b(json.dumps(INPUT_DATA[0]))\n                ).decode("utf-8")\n            }\n\nws.send(json.dumps(payload))\n\nresponse = json.loads(ws.recv())\nif response[\'result\'] == \'ok\':\n    print(\'Message published successfully\')\nelse:\n    print(\'Failed to publish message:\', response)\n\npayload = {\n                "payload": base64.b64encode(\n                    six.b(json.dumps(INPUT_DATA[1]))\n                ).decode("utf-8")\n            }\nws.send(json.dumps(payload))\n\nresponse = json.loads(ws.recv())\nif response[\'result\'] == \'ok\':\n    print(\'Message published successfully\')\nelse:\n    print(\'Failed to publish message:\', response)\nws.close()\n\n# Verify results from the collection\n\nurl = f"{HTTP_URL}/_fabric/_system/_api/cursor"\npayload= {\n  "id": "tutorialStreamAppQuery",\n  "query": SELECT_QUERY,\n  "bindVars": {},\n}\nresp = session.post(url, data=json.dumps(payload))\nresult = json.loads(resp.text)\nprint("\\nstream worker Results: ", result)\n\n# Delete stream worker\n\nurl = f"{HTTP_URL}/_fabric/_system/_api/streamapps/{STREAM_WORKER_NAME}"\nresp = session.delete(url)\nresult = json.loads(resp.text)\nprint("\\nstream worker Deleted: ", result)\n')))))}y.isMDXComponent=!0}}]);