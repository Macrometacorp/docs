"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[17696],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>c});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),p=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,u=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=p(r),c=n,b=s["".concat(u,".").concat(c)]||s[c]||m[c]||l;return r?a.createElement(b,i(i({ref:t},d),{},{components:r})):a.createElement(b,i({ref:t},d))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=s;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},75059:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const l={title:"perceptronClassifier (Stream Processor)"},i=void 0,o={unversionedId:"cep/query-guide/functions/streaming-ml/perceptronclassifier",id:"cep/query-guide/functions/streaming-ml/perceptronclassifier",title:"perceptronClassifier (Stream Processor)",description:"This extension predicts using a linear binary classification Perceptron model.",source:"@site/docs/cep/query-guide/functions/streaming-ml/perceptronclassifier.md",sourceDirName:"cep/query-guide/functions/streaming-ml",slug:"/cep/query-guide/functions/streaming-ml/perceptronclassifier",permalink:"/docs/cep/query-guide/functions/streaming-ml/perceptronclassifier",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/streaming-ml/perceptronclassifier.md",tags:[],version:"current",frontMatter:{title:"perceptronClassifier (Stream Processor)"},sidebar:"defaultSidebar",previous:{title:"kMeansMiniBatch (Stream Processor)",permalink:"/docs/cep/query-guide/functions/streaming-ml/kmeansminibatch"},next:{title:"updateBayesianRegression (Stream Processor)",permalink:"/docs/cep/query-guide/functions/streaming-ml/updatebayesianregression"}},u={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Extra Return Attributes",id:"extra-return-attributes",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2}],d={toc:p};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This extension predicts using a linear binary classification Perceptron model."),(0,n.kt)("h2",{id:"syntax"},"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"streamingml:perceptronClassifier(<STRING> model.name, <DOUBLE|FLOAT|INT|LONG> model.feature, <DOUBLE|FLOAT|INT|LONG> ...)\nstreamingml:perceptronClassifier(<STRING> model.name, <DOUBLE> model.bias, <DOUBLE|FLOAT|INT|LONG> model.feature, <DOUBLE|FLOAT|INT|LONG> ...)\nstreamingml:perceptronClassifier(<STRING> model.name, <DOUBLE> model.threshold, <DOUBLE|FLOAT|INT|LONG> model.feature, <DOUBLE|FLOAT|INT|LONG> ...)\nstreamingml:perceptronClassifier(<STRING> model.name, <DOUBLE> model.bias, <DOUBLE> model.threshold, <DOUBLE|FLOAT|INT|LONG> model.feature, <DOUBLE|FLOAT|INT|LONG> ...)\n")),(0,n.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,n.kt)("th",{parentName:"tr",align:null},"Optional"),(0,n.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"model.name"),(0,n.kt)("td",{parentName:"tr",align:null},"The name of the model to be used."),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"No"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"model.bias"),(0,n.kt)("td",{parentName:"tr",align:null},"The bias of the Perceptron algorithm."),(0,n.kt)("td",{parentName:"tr",align:null},"0.0"),(0,n.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"model.threshold"),(0,n.kt)("td",{parentName:"tr",align:null},"The threshold that separates the two classes. The value specified must be between zero and one."),(0,n.kt)("td",{parentName:"tr",align:null},"0.5"),(0,n.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"model.feature"),(0,n.kt)("td",{parentName:"tr",align:null},"The features of the model that need to be attributes of the stream."),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"DOUBLE FLOAT INT LONG"),(0,n.kt)("td",{parentName:"tr",align:null},"No"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,n.kt)("h2",{id:"extra-return-attributes"},"Extra Return Attributes"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Types"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"prediction"),(0,n.kt)("td",{parentName:"tr",align:null},"The predicted value (",(0,n.kt)("inlineCode",{parentName:"td"},"true/false"),")."),(0,n.kt)("td",{parentName:"tr",align:null},"BOOL")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"confidenceLevel"),(0,n.kt)("td",{parentName:"tr",align:null},"The probability of the prediction."),(0,n.kt)("td",{parentName:"tr",align:null},"DOUBLE")))),(0,n.kt)("h2",{id:"example-1"},"Example 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE STREAM StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\ninsert all events into OutputStream\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0,0.5, attribute_0, attribute_1, attribute_2, attribute_3);\n")),(0,n.kt)("p",null,"This query uses a Perceptron model named ",(0,n.kt)("inlineCode",{parentName:"p"},"model1")," with a ",(0,n.kt)("inlineCode",{parentName:"p"},"0.0")," bias and\na ",(0,n.kt)("inlineCode",{parentName:"p"},"0.5")," threshold learning rate to predict the label of the feature\nvector represented by ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_0"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_1"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_2"),", and\n",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_3"),". The predicted label (",(0,n.kt)("inlineCode",{parentName:"p"},"true/false"),") is emitted to the\n",(0,n.kt)("inlineCode",{parentName:"p"},"OutputStream")," streamalong with the prediction confidence\nlevel(probability) and the feature vector. As a result, the OutputStream\nstream is defined as follows: (attribute_0 double, attribute_1 double,\nattribute_2 double, attribute_3 double, prediction bool,\nconfidenceLevel double)."),(0,n.kt)("h2",{id:"example-2"},"Example 2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE STREAM StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\ninsert all events into OutputStream\nfrom StreamA#streamingml:perceptronClassifier('model1',0.0, attribute_0, attribute_1, attribute_2, attribute_3);\n")),(0,n.kt)("p",null,"This query uses a Perceptron model named ",(0,n.kt)("inlineCode",{parentName:"p"},"model1")," with a ",(0,n.kt)("inlineCode",{parentName:"p"},"0.0")," bias to\npredict the label of the feature vector represented by ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_0"),",\n",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_1"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_2"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_3"),". The\nprediction(",(0,n.kt)("inlineCode",{parentName:"p"},"true/false"),") is emitted to the ",(0,n.kt)("inlineCode",{parentName:"p"},"OutputStream"),"stream along\nwith the prediction confidence level(probability) and the feature. As a\nresult, the OutputStream stream is defined as follows: (attribute_0\ndouble, attribute_1 double, attribute_2 double, attribute_3 double,\nprediction bool, confidenceLevel double)."),(0,n.kt)("h2",{id:"example-3"},"Example 3"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE STREAM StreamA (attribute_0 double, attribute_1 double, attribute_2 double, attribute_3 double);\n\ninsert all events into OutputStream\nfrom StreamA#streamingml:perceptronClassifier(`model1`, attribute_0, attribute_1, attribute_2);\n")),(0,n.kt)("p",null,"This query uses a Perceptron model named ",(0,n.kt)("inlineCode",{parentName:"p"},"model1")," with a default 0.0\nbias to predict the label of the feature vector represented by\n",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_0"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_1"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"attribute_2"),". The predicted\nprobability is emitted to the OutputStream stream along with the feature\nvector. As a result, the OutputStream is defined as follows:\n(attribute_0 double, attribute_1 double, attribute_2 double,\nattribute_3 double, prediction bool, confidenceLevel double)."))}m.isMDXComponent=!0}}]);