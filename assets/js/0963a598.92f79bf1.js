"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77320],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),c=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(i.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(t),m=o,y=p["".concat(i,".").concat(m)]||p[m]||d[m]||r;return t?a.createElement(y,s(s({ref:n},u),{},{components:t})):a.createElement(y,s({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(67294),o=t(34334);const r="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,s),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(87462),o=t(67294),r=t(34334),s=t(72389),l=t(67392),i=t(7094),c=t(12466);const u="tabList__CuJ",d="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:s,values:p,groupId:m,className:y}=e,f=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=p??f.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,l.l)(g,((e,n)=>e.value===n.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===s?s:s??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==h&&!g.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:_}=(0,i.U)(),[N,T]=(0,o.useState)(h),D=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=m){const e=k[m];null!=e&&e!==N&&g.some((n=>n.value===e))&&T(e)}const R=e=>{const n=e.currentTarget,t=D.indexOf(n),a=g[t].value;a!==N&&(E(n),T(a),null!=m&&_(m,String(a)))},w=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=D.indexOf(e.currentTarget)+1;n=D[t]??D[0];break}case"ArrowLeft":{const t=D.indexOf(e.currentTarget)-1;n=D[t]??D[D.length-1];break}}n?.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},y)},g.map((e=>{let{value:n,label:t,attributes:s}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>D.push(e),onKeyDown:w,onFocus:R,onClick:R},s,{className:(0,r.Z)("tabs__item",d,s?.className,{"tabs__item--active":N===n})}),t??n)}))),n?(0,o.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function m(e){const n=(0,s.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}},63827:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=t(87462),o=(t(67294),t(3905)),r=t(65488),s=t(85162);const l={sidebar_position:3,title:"Bulk Update with RestQL"},i=void 0,c={unversionedId:"collections/documents/tutorials/bulk-update-restql",id:"collections/documents/tutorials/bulk-update-restql",title:"Bulk Update with RestQL",description:"This tutorial is about using RestQL to bulk update document Collection data.",source:"@site/docs/collections/documents/tutorials/bulk-update-restql.md",sourceDirName:"collections/documents/tutorials",slug:"/collections/documents/tutorials/bulk-update-restql",permalink:"/docs/collections/documents/tutorials/bulk-update-restql",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/collections/documents/tutorials/bulk-update-restql.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Bulk Update with RestQL"},sidebar:"defaultSidebar",previous:{title:"Quickstart",permalink:"/docs/collections/documents/tutorials/working-with-documents"},next:{title:"Realtime Updates",permalink:"/docs/collections/documents/tutorials/using-realtime-updates"}},u={},d=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"SDK download",id:"sdk-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This tutorial is about using RestQL to bulk update ",(0,o.kt)("inlineCode",{parentName:"p"},"document")," Collection data."),(0,o.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,o.kt)("p",null,"Let's assume your"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tenant name is ",(0,o.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,o.kt)("li",{parentName:"ul"},"User password is ",(0,o.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,o.kt)("h2",{id:"sdk-download"},"SDK download"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\nTo install pyC8, simply run\n\n    $ pip3 install pyC8\n\nor, if you prefer to use conda:\n\n    conda install -c conda-forge pyC8\n\nor pipenv:\n\n    pipenv install --pre pyC8\n\nOnce the installation process is finished, you can begin developing applications in Python.\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"With Yarn or NPM\n\n    yarn add jsc8\n    (or)\n    npm install jsc8\n\nIf you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n    npm install --global jsc8\n\nFrom source,\n\n    git clone https://github.com/macrometacorp/jsc8.git\n    cd jsC8\n    npm install\n    npm run dist\n")))),(0,o.kt)("h2",{id:"code-sample"},"Code Sample"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n    _headers = {\n        Accept: "application/json",\n        "Content-Type": "application/json"\n    };\n\n    constructor(url) {\n        this._url = url;\n    }\n\n    login(email, password) {\n        const endpoint = "/_open/auth";\n        const self = this;\n        return new Promise(function (resolve, reject) {\n            self.req(endpoint, {\n                body: { email, password },\n                method: "POST"\n            })\n                .then(({ jwt, ...data }) => {\n                    self._headers.authorization = `bearer ${jwt}`;\n                    resolve(data);\n                })\n                .catch(reject);\n        });\n    }\n\n    _handleResponse(response, resolve, reject) {\n        if (response.ok) {\n            resolve(response.json());\n        } else {\n            reject(response);\n        }\n    }\n\n    req(endpoint, { body, ...options } = {}) {\n        const self = this;\n        return new Promise(function (resolve, reject) {\n            fetch(self._url + endpoint, {\n                headers: self._headers,\n                body: body ? JSON.stringify(body) : undefined,\n                ...options,\n            }).then((response) => self._handleResponse(response, resolve, reject));\n        });\n    }\n}\n\n// Variables\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst federationUrl = "https://api-smoke1.eng.macrometa.io";\nconst fabricName = "_system";\nconst collectionName = "superhero" + Math.floor(1000 + Math.random() * 9000).toString();\nconst jamesKey = "james.kirk" + Math.floor(1000 + Math.random() * 9000).toString();\nconst bruceKey = "bruce.wayne" + Math.floor(1000 + Math.random() * 9000).toString();\nconst barryKey = "barry.allen" + Math.floor(1000 + Math.random() * 9000).toString();\n\nconst inputDocs = [\n  { "_key": jamesKey, "firstname": "James", "lastname": "Kirk", "email": "james.kirk@macrometa.io", "zipcode": "12312" },\n  { "_key": bruceKey, "firstname": "Bruce", "lastname": "Wayne", "email": "bruce.wayne@macrometa.io", "zipcode": "12345" }\n];\n\nconst updateKeys = [jamesKey, bruceKey];\nconst updateKeyValue = {\n  bruceKey: { key: bruceKey, zipcode: "22222" },\n  jamesKey: { key: jamesKey, zipcode: "55555" }\n};\n\n// Queries\nconst insertData = `FOR doc in @InputDocs \\\nINSERT { "firstname":doc.firstname, "lastname":doc.lastname, "email":doc.email, "zipcode":doc.zipcode, "_key": doc._key } IN ${collectionName}`;\n\nconst getData = `FOR doc IN ${collectionName} RETURN doc`;\n\nconst updateData = `FOR i IN ${collectionName} \\\nFILTER i._key IN @updateKeys \\\nUPDATE i with { zipcode: (i._key == @updateKeyValue[i._key].key) ? @updateKeyValue[i._key].zipcode : i.zipcode } IN ${collectionName}`;\n\nconst updatedInsertData = `INSERT \n{ "firstname": "Barry", "lastname": "Allen", "email": "barry.allen@macrometa.io", "zipcode": "44444", "_key": @barryKey } IN ${collectionName}`;\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nconst run = async function () {\n    try {\n        const connection = new APIRequest(federationUrl);\n\n        /* -------------------- Login (nemo@nautilus.com/xxxxxxx) -------------------- */\n        await connection.login(email, password);\n        console.log("Login Successfully using ", email);\n\n        /* -------------------------- Create Doc Collection ------------------------- */\n        try {\n            const collection = await connection.req(`/_fabric/${fabricName}/_api/collection`, {\n                body: { name: collectionName },\n                method: "POST"\n            });\n            console.log("Collection " + collectionName + " created.\\n", collection);\n        } catch (e) {\n            if (e.status === 409) {\n              console.log("Collection already exists, skipping creation");\n            } else {\n              console.log("Create collection failed");\n              throw e;\n            }\n        }\n\n        /* ------------------------ Saving a query ----------------------- */\n        const saveRestQlQuery = (queryName, query, parameters) =>\n            connection.req(`/_fabric/${fabricName}/_api/restql`, {\n                body: {\n                    query: {\n                        name: queryName,\n                        value: query,\n                        parameter: parameters\n                    }\n                },\n                method: "POST"\n            });\n\n        console.log("------- Save the Queries  ------");\n        await saveRestQlQuery("insertData", insertData, {});\n        await saveRestQlQuery("getData", getData, {});\n        await saveRestQlQuery("updateData", updateData, {});\n\n        console.log("Queries Saved Successfully");\n\n        /* ----------------------- Executing a query ---------------------- */\n        const executeRestql = (queryName, parameter) =>\n            connection.req(`/_fabric/${fabricName}/_api/restql/execute/${queryName}`, {\n                body: {\n                    bindVars: parameter\n                },\n                method: "POST"\n            });\n\n        await sleep(2000);\n        console.log("------- Execute the Queries  ------");\n\n        await executeRestql("insertData", {\n            InputDocs: inputDocs\n        });\n        console.log("Data Inserted \\n");\n\n        console.log("Get Data...");\n\n        const dataBeforeUpdate = await executeRestql("getData");\n        console.log(dataBeforeUpdate.result);\n        console.log("\\n");\n\n        await executeRestql("updateData", {\n            updateKeys,\n            updateKeyValue\n        });\n\n        console.log("Data updated \\n");\n\n        const dataAfterUpdate = await executeRestql("getData");\n        console.log(dataAfterUpdate.result);\n        console.log("\\n");\n\n        /* ------------------------ Updating a query ----------------------- */\n        const updateRestQlQuery = (queryName, query, parameters) =>\n            connection.req(`/_fabric/${fabricName}/_api/restql/${queryName}`, {\n                body: {\n                    query: {\n                        value: query,\n                        parameter: parameters\n                    }\n                },\n                method: "PUT"\n            });\n\n        console.log("------- Updating the insertData query  ------");\n        await updateRestQlQuery("insertData", updatedInsertData, {});\n        console.log("Query updated successfully");\n\n        await sleep(2000);\n        await executeRestql("insertData", {\n            barryKey\n        });\n        console.log("New data inserted with the updated insertData query\\n");\n\n        const resultAfterUpdate = await executeRestql("getData");\n        console.log(resultAfterUpdate.result);\n        console.log("\\n");\n\n        const deleteRestQl = (queryName) =>\n        connection.req(`/_fabric/${fabricName}/_api/restql/${queryName}`, {\n            method: "DELETE"\n        });\n\n        console.log("------- Deleting the insertData, getData, and updateData queries ------");\n        await deleteRestQl("insertData");\n        await deleteRestQl("getData");\n        await deleteRestQl("updateData");\n        console.log("RestQls deleted successfully");\n\n    } catch (e) {\n        console.log("Error caught while executing RestQL demo: ");\n        console.error(e);\n    }\n};\n\nrun();\n'))),(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'from c8 import C8Client\nimport time\n\nHTTP_URL = "play.paas.macrometa.io"\nGUEST_MAIL = "nemo@nautilus.com"\nGUEST_PASSWORD = "xxxxxx"\nGEO_FABRIC = "_system"\nCOLLECTION_NAME = "superhero"\n\ninputDocs = [\n    { "_key": "james.kirk@mafabriccrometa.io", "firstname": "James", "lastname": "Kirk", "email": "james.kirk@mafabriccrometa.io", "zipcode": "12312"},\n    { "_key": "han.solo@macrfabricometa.io", "firstname": "Han", "lastname": "Solo", "email": "han.solo@macrfabricometa.io", "zipcode": "12311"},\n    { "_key": "bruce.wayne@mfabricacrometa.io", "firstname": "Bruce", "lastname": "Wayne", "email": "bruce.wayne@mfabricacrometa.io", "zipcode": "12345" }\n]\nupdateKeys = ["james.kirk@mafabriccrometa.io", "bruce.wayne@mfabricacrometa.io"]\nupdateKeyValue = {\n    "bruce.wayne@mfabricacrometa.io": { "key": "bruce.wayne@mfabricacrometa.io", "zipcode": "22222" },\n    "james.kirk@mafabriccrometa.io": { "key": "james.kirk@mafabriccrometa.io", "zipcode": "55555"}\n}\nINSERT_DATA_QUERY = (\n    f"FOR doc in @InputDocs INSERT {{\'firstname\':doc.firstname, \'lastname\':doc.lastname, \'email\':doc.email, \'zipcode\':doc.zipcode, \'_key\': doc._key}} IN {COLLECTION_NAME}"\n)\nGET_DATA_QUERY = "FOR doc IN superhero RETURN doc"\nUPDATE_DATA_QUERY = (\n    f"FOR i IN {COLLECTION_NAME} FILTER i._key IN @updateKeys UPDATE i with {{ zipcode: (i._key == @updateKeyValue[i._key].key) ? @updateKeyValue[i._key].zipcode : i.zipcode }} IN {COLLECTION_NAME}"\n)\nUPDATED_INSERT_QUERY = (\n    f"INSERT {{\'_key\': \'barry.allen@macrometa.io\', \'value\': \'Barry Allen\'}} IN {COLLECTION_NAME}"\n)\n\nINSERT_DATA = {\n    "query": {\n        "name": "insertRecord",\n        "value": INSERT_DATA_QUERY,\n    }\n}\nUPDATED_INSERT_DATA = {\n    "query": {\n        "value": UPDATED_INSERT_QUERY,\n    }\n}\n\nGET_DATA = {"query": {"name": "getRecords", "value": GET_DATA_QUERY}}\nUPDATE_DAT = {"query": {"name": "updateRecord", "value": UPDATE_DATA_QUERY}}\n\nif __name__ == "__main__":\n    print("\\n ------- CONNECTION SETUP  ------")\n    print(f"tenant: {GUEST_MAIL}, geofabric:{GEO_FABRIC}")\n    client = C8Client(\n        protocol="https",\n        host=HTTP_URL,\n        port=443,\n        email=GUEST_MAIL,\n        password=GUEST_PASSWORD,\n        geofabric=GEO_FABRIC,\n    )\n    print("\\n ------- CREATE GEO-REPLICATED COLLECTION  ------")\n    if client.has_collection(COLLECTION_NAME):\n        print("Collection exists")\n    else:\n        employees = client.create_collection(COLLECTION_NAME)\n\n    print(f"Created collection: {COLLECTION_NAME}")\n\n    print("\\n ------- CREATE RESTQLs  ------")\n    EXISTING_QUERIES = str(client.get_restqls())\n    client.create_restql(INSERT_DATA)\n    client.create_restql(GET_DATA)\n    client.create_restql(UPDATE_DAT)\n    print(f"Created RESTQLs:{EXISTING_QUERIES}")\n    time.sleep(5)\n\n    print("\\n ------- EXECUTE RESTQLs ------")\n    print("Insert data....")\n\n    try:\n        response = client.execute_restql(\n        "insertRecord", {"bindVars": {"InputDocs": inputDocs}}\n    )\n    except:\n        print("Failed to insert the document because it already exists")\n\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n    print("Update data....")\n    try:\n        response = client.execute_restql(\n        "updateRecord",\n        {"bindVars": {"updateKeys": updateKeys, "updateKeyValue": updateKeyValue}},\n    )\n    except:\n        print("Failed to update the document because it already exists")\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n\n    #Updating restqls\n    client.update_restql("insertRecord",UPDATED_INSERT_DATA)\n    time.sleep(2)\n    print("Inserting updated data....")\n    try:\n        response = client.execute_restql("insertRecord")\n    except:\n        print("Failed to insert the document because it already exists")\n\n    #Deleting RestQls\n    client.delete_restql("insertRecord")\n    client.delete_restql("getRecords")\n    client.delete_restql("updateRecord")\n    print("\\n ------- DONE  ------")\n'))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require(\'jsc8\');\n\n// Create a authenticated instance with Token / Apikey\n// const client = new jsc8({url: "https://play.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n// const client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\nconst client = new jsc8("https://play.paas.macrometa.io");\n\n// Variables\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst collectionName = "superhero" + Math.floor(1000 + Math.random() * 9000).toString();\nconst jamesKey = "james.kirk" + Math.floor(1000 + Math.random() * 9000).toString();\nconst bruceKey = "bruce.wayne" + Math.floor(1000 + Math.random() * 9000).toString();\nconst barryKey = "barry.allen" + Math.floor(1000 + Math.random() * 9000).toString();\n\nconst inputDocs = [\n  { "_key": jamesKey, "firstname": "James", "lastname": "Kirk", "email": "james.kirk@macrometa.io", "zipcode": "12312" },\n  { "_key": bruceKey, "firstname": "Bruce", "lastname": "Wayne", "email": "bruce.wayne@macrometa.io", "zipcode": "12345" }\n];\n\nconst updateKeys = [jamesKey, bruceKey];\nconst updateKeyValue = {\n  bruceKey: { key: bruceKey, zipcode: "22222" },\n  jamesKey: { key: jamesKey, zipcode: "55555" }\n};\n\n// Queries\nconst insertData = `FOR doc in @InputDocs \\\nINSERT { "firstname":doc.firstname, "lastname":doc.lastname, "email":doc.email, "zipcode":doc.zipcode, "_key": doc._key } IN ${collectionName}`;\n\nconst getData = `FOR doc IN ${collectionName} RETURN doc`;\n\nconst updateData = `FOR i IN ${collectionName} \\\nFILTER i._key IN @updateKeys \\\nUPDATE i with { zipcode: (i._key == @updateKeyValue[i._key].key) ? @updateKeyValue[i._key].zipcode : i.zipcode } IN ${collectionName}`;\n\nconst updatedInsertData = `INSERT \n{ "firstname": "Barry", "lastname": "Allen", "email": "barry.allen@macrometa.io", "zipcode": "44444", "_key": @barryKey } IN ${collectionName}`;\n\nfunction errorResponseHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.error(message);\n}\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nasync function restqldemo () {\n  try {\n    /* Authenticate client instance with username and password */\n    console.log("------- Authenticate client instance with username AND password  ------");\n    await client.login(email, password);\n\n    /* Create collection */\n    console.log("------- Create geo-replicated collection  ------");\n\n    try {\n      const collection = await client.createCollection(collectionName);\n      console.log("Collection " + collectionName + " created.\\n", collection);\n    } catch (e) {\n      if (e.statusCode === 409) {\n        console.log("Collection already exists, skipping creation");\n      } else {\n        console.log("Create collection failed");\n        throw e;\n      }\n    }\n\n    /* Save queries */\n    console.log("------- Saving the queries  ------");\n\n    await client.createRestql("insertData", insertData, {});\n    await client.createRestql("getData", getData, {});\n    await client.createRestql("updateData", updateData, {});\n\n    console.log("Saved Queries Successfully\\n");\n\n    /* Execute RestQl Queries */\n    console.log("------- Running the queries  ------");\n\n    await sleep(2000);\n    await client.executeRestql("insertData", {\n      InputDocs: inputDocs\n    });\n\n    console.log("Data Inserted \\n");\n\n    let res = await client.executeRestql("getData");\n\n    console.log("Output of get data query:");\n    console.log(res.result);\n    console.log("\\n");\n\n    await client.executeRestql("updateData", {\n      updateKeys,\n      updateKeyValue\n    });\n\n    console.log("Data updated \\n");\n\n    res = await client.executeRestql("getData");\n\n    console.log("Output of get data query after update:");\n    console.log(res.result);\n    console.log("\\n");\n\n    await client.updateRestql("insertData", updatedInsertData, {});\n    await sleep(2000);\n\n    await client.executeRestql("insertData", {\n      barryKey\n    });\n\n    console.log("New Data Inserted \\n");\n\n    res = await client.executeRestql("getData");\n\n    console.log("Output of get data query after insertion of new data:");\n    console.log(res.result);\n    console.log("\\n");\n\n    res = await client.getRestqls();\n\n    console.log("List of all available query workers: ");\n    console.log(res.result);\n\n    console.log("Deleting saved queries - insertData, getData, updateData");\n    await client.deleteRestql("insertData");\n    await client.deleteRestql("getData");\n    await client.deleteRestql("updateData");\n\n    res = await client.getRestqls();\n\n    console.log("List of all available query workers after deletion:");\n    console.log(res.result);\n  } catch (e) {\n    console.log("Error caught while executing RestQl Demo: ");\n    errorResponseHandler(e);\n  }\n}\n\nrestqldemo().then(console.log("Running queries"));\n')))))}m.isMDXComponent=!0}}]);