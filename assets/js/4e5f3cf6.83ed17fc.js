"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[68013],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1667:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"tokenizeAsObject (Stream Processor)"},i=void 0,o={unversionedId:"cep/query-guide/functions/json/tokenizeAsObject",id:"cep/query-guide/functions/json/tokenizeAsObject",title:"tokenizeAsObject (Stream Processor)",description:"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events.",source:"@site/docs/cep/query-guide/functions/json/tokenizeAsObject.md",sourceDirName:"cep/query-guide/functions/json",slug:"/cep/query-guide/functions/json/tokenizeAsObject",permalink:"/docs/cep/query-guide/functions/json/tokenizeAsObject",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/json/tokenizeAsObject.md",tags:[],version:"current",frontMatter:{title:"tokenizeAsObject (Stream Processor)"},sidebar:"defaultSidebar",previous:{title:"tokenize (Stream Processor)",permalink:"/docs/cep/query-guide/functions/json/tokenize"},next:{title:"List Functions",permalink:"/docs/cep/query-guide/functions/list/"}},s={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Stream processor tokenizes the given JSON into to multiple JSON object elements and sends them as separate events."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:tokenizeAsObject(<STRING|OBJECT> json, <STRING> path)\njson:tokenizeAsObject(<STRING|OBJECT> json, <STRING> path, <BOOL> fail.on.missing.attribute)\n")),(0,r.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The input JSON that needs to be tokenized."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The path of the set of elements that will be tokenized."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,r.kt)("td",{parentName:"tr",align:null},"If there are no element on the given path, when set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," the system will drop the event, and when set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," the system will pass ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," value to the jsonElement output attribute."),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"Extra Return Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Types"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonElement"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element retrieved based on the given path will be returned as a JSON object. If the ",(0,r.kt)("inlineCode",{parentName:"td"},"path")," selects a JSON array then the system returns each element in the array as a JSON object via a separate events."),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT")))),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement\nfrom InputStream#json:tokenizeAsObject(json, path);\n")),(0,r.kt)("p",null,"If the input ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"{name:'John', enrolledSubjects:['Mathematics', 'Physics']}"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.enrolledSubjects"),", then for both the elements in the selected JSON array, it generates it generates events as ",(0,r.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Mathematics')"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Physics')"),". For the same input JSON, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name"),", then it will only produce one event ",(0,r.kt)("inlineCode",{parentName:"p"},"('$.name', 'John')")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," provided a single JSON element."),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement\nfrom InputStream#json:tokenizeAsObject(json, path, true);\n")),(0,r.kt)("p",null,"If the input ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"{name:'John', age:25}"),", and the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),", then the system will produce ",(0,r.kt)("inlineCode",{parentName:"p"},"('$.salary', null)"),", as the ",(0,r.kt)("inlineCode",{parentName:"p"},"fail.on.missing.attribute")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and there are no matching element for ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."))}m.isMDXComponent=!0}}]);