"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13255],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),y=r,d=m["".concat(l,".").concat(y)]||m[y]||u[y]||o;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(67294),r=n(34334);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(87462),r=n(67294),o=n(34334),s=n(72389),i=n(67392),l=n(7094),c=n(12466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:s,values:m,groupId:y,className:d}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,i.l)(f,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===s?s:s??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:I}=(0,l.U)(),[v,w]=(0,r.useState)(b),P=[],{blockElementScrollPositionUntilNextRender:A}=(0,c.o5)();if(null!=y){const e=g[y];null!=e&&e!==v&&f.some((t=>t.value===e))&&w(e)}const C=e=>{const t=e.currentTarget,n=P.indexOf(t),a=f[n].value;a!==v&&(A(t),w(a),null!=y&&I(y,String(a)))},T=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=P.indexOf(e.currentTarget)+1;t=P[n]??P[0];break}case"ArrowLeft":{const n=P.indexOf(e.currentTarget)-1;t=P[n]??P[P.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},d)},f.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>P.push(e),onKeyDown:T,onFocus:C,onClick:C},s,{className:(0,o.Z)("tabs__item",u,s?.className,{"tabs__item--active":v===t})}),n??t)}))),t?(0,r.cloneElement)(k.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function y(e){const t=(0,s.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},86842:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(65488),s=n(85162);const i={sidebar_position:10,title:"Create API Keys"},l=void 0,c={unversionedId:"account-management/api-keys/create-api-keys",id:"account-management/api-keys/create-api-keys",title:"Create API Keys",description:"This page describes how to create API keys.",source:"@site/docs/account-management/api-keys/create-api-keys.md",sourceDirName:"account-management/api-keys",slug:"/account-management/api-keys/create-api-keys",permalink:"/docs/account-management/api-keys/create-api-keys",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/account-management/api-keys/create-api-keys.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Create API Keys"},sidebar:"defaultSidebar",previous:{title:"API Keys",permalink:"/docs/account-management/api-keys/"},next:{title:"View API Keys",permalink:"/docs/account-management/api-keys/view-api-keys"}},p={},u=[],m={toc:u};function y(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page describes how to create API keys."),(0,r.kt)("p",null,"After creating the API key, best practice is to save the automatically generated ",(0,r.kt)("inlineCode",{parentName:"p"},"KeyID")," string somewhere secure."),(0,r.kt)("p",null,"To learn about how to grant permissions to an API key, refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/account-management/api-keys/update-api-keys"},"Update API Keys"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you create a new fabric after you create an API key, then the API key permissions will not apply to the newly-created fabric. You will need to ",(0,r.kt)("a",{parentName:"p",href:"/docs/account-management/api-keys/update-api-keys"},"update the API key")," permissions.")),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"console",label:"Web Console",mdxType:"TabItem"},(0,r.kt)("p",null,"Follow these instructions to create a new API key using the GDN console web UI."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://auth-play.macrometa.io/"},"Log in to your Macrometa account"),"."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Access > API Keys"),"."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"New API Key"),"."),(0,r.kt)("li",{parentName:"ol"},"Enter a unique ID."))),(0,r.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst keyid = "id1";\n\nconst client = new jsc8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n// Choose one of the following authentication methods and remove the commenting.\n\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\nasync function main () {\n  await client\n    .login(email, password)\n    .then((e) => console.log("1. User authentication done!"))\n    .catch((error) => error);\n\n  console.log("2. Creating API key with KeyID = " + keyid);\n  await client\n    .createApiKey(keyid)\n    .then((apiKey) => console.log(apiKey))\n    .catch((error) => messageHandler(error));\n}\n\nmain()\n  .then()\n  .catch((error) => console.log(error));\n\n'))),(0,r.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from c8 import C8Client\n  \nAPI_ACTIVE = False\nCHOSEN_API_KEY_ID = "myNewKey"\nEMAIL = \'nemo@nautilus.com\'\nPASSWORD = \'xxxxx\'\nURL = "play.paas.macrometa.io"\n\nclient = C8Client(protocol=\'https\', host=URL, port=443, email=EMAIL, password=PASSWORD)\n\n\n# Get a list of all the API key ID\'s names\napiKeyIds = []\nfor api in client.list_all_api_keys():\n    apiKeyIds.append(api["keyid"])\n\n# Checks if `chosen_api_key` exists\nfor apiElement in apiKeyIds:\n    if apiElement == CHOSEN_API_KEY_ID:\n        API_ACTIVE = True\n        break\n\n# Checks if the API key exists\nif API_ACTIVE:\n    # Display a message that the key already exists\n    print("Can\'t create an already existing key")\nelse:\n    # Create a new API key\n    try:\n        print("Create API Key: ", client.create_api_key(CHOSEN_API_KEY_ID))\n    except Exception as err:\n        print("Error generating the API key")\n        print(err)\n'))),(0,r.kt)(s.Z,{value:"RA",label:"REST API",mdxType:"TabItem"},(0,r.kt)("p",null,"Use our interactive API Reference with code generation in 18 programming languages to ",(0,r.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/CreateApiKey"},"Create an API Key"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'# Create an API Key\nURL = "api-gdn.macrometa.io"\nHTTP_URL = "https://{}".format(URL)\nkeyid = "id1"\nurl = HTTP_URL + "/_api/key"\npayload= {\n"keyid": keyid\n}\n\nresp = session.post(url, data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\nprint("ERROR: " , resp)\nelse:\nprint("API Key Created: ", resp)\n'))),(0,r.kt)(s.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/cli/api-key-cli"},"gdnsl apikey")," CLI command to create API keys."))))}y.isMDXComponent=!0}}]);