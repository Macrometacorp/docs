"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[20021],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,k=c["".concat(o,".").concat(d)]||c[d]||u[d]||p;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,l=new Array(p);l[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<p;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},49303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>p,metadata:()=>i,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const p={title:"text (Sink Mapper)"},l=void 0,i={unversionedId:"cep/query-guide/functions/sinkmapper/text",id:"cep/query-guide/functions/sinkmapper/text",title:"text (Sink Mapper)",description:"This extension is an Event to Text output mapper. Transports that publish",source:"@site/docs/cep/query-guide/functions/sinkmapper/text.md",sourceDirName:"cep/query-guide/functions/sinkmapper",slug:"/cep/query-guide/functions/sinkmapper/text",permalink:"/docs/cep/query-guide/functions/sinkmapper/text",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/sinkmapper/text.md",tags:[],version:"current",frontMatter:{title:"text (Sink Mapper)"},sidebar:"defaultSidebar",previous:{title:"protobuf (Sink Mapper)",permalink:"/docs/cep/query-guide/functions/sinkmapper/protobuf"},next:{title:"xml (Sink Mapper)",permalink:"/docs/cep/query-guide/functions/sinkmapper/xml"}},o={},s=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2}],m={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This extension is an Event to Text output mapper. Transports that publish\ntext messages can use this extension to convert the stream worker events to\ntext messages. Users can use a predefined text format where event\nconversion is carried out without any additional configurations, or use\ncustom placeholder(using ",(0,r.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"}}"),") to map custom text messages."),(0,r.kt)("p",null,"You can also enable mustache based custom mapping. In mustache-based custom mapping, you can use custom placeholder (using ",(0,r.kt)("inlineCode",{parentName:"p"},"{{")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"}}"),"\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"{{{")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"}}}"),") to map custom text. In mustache-based custom\nmapping, all variables are HTML escaped by default. For example: ",(0,r.kt)("inlineCode",{parentName:"p"},"&")," is\nreplaced with ",(0,r.kt)("inlineCode",{parentName:"p"},"&amp;")," ",(0,r.kt)("inlineCode",{parentName:"p"},'"')," is replaced with ",(0,r.kt)("inlineCode",{parentName:"p"},"&quot;")," ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," is replaced with\n",(0,r.kt)("inlineCode",{parentName:"p"},"&#61;")," If you want to return unescaped HTML, use the triple mustache\n",(0,r.kt)("inlineCode",{parentName:"p"},"{{{")," instead of double ",(0,r.kt)("inlineCode",{parentName:"p"},"{{"),"."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SINK <NAME> WITH (type="text", event.grouping.enabled="<BOOL>", delimiter="<STRING>", new.line.character="<STRING>", mustache.enabled="<BOOL>")\n')),(0,r.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"event.grouping.enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", events are grouped via a delimiter when multiple events are received. It is required to specify a value for the ",(0,r.kt)("inlineCode",{parentName:"td"},"delimiter")," parameter when the value for this parameter is ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"delimiter"),(0,r.kt)("td",{parentName:"tr",align:null},"This parameter specifies how events are separated when a grouped event is received. This must be a whole line and not a single character."),(0,r.kt)("td",{parentName:"tr",align:null},"~","~","~","~","~","~","~","~","~","~"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"new.line.character"),(0,r.kt)("td",{parentName:"tr",align:null},"This attribute indicates the new line character of the event that is expected to be received. This is used mostly when communication between 2 types of operating systems is expected. For example, Linux uses ",(0,r.kt)("inlineCode",{parentName:"td"},"\\n")," whereas Windows uses ",(0,r.kt)("inlineCode",{parentName:"td"},"\\r\\n")," as the end of line character."),(0,r.kt)("td",{parentName:"tr",align:null},"\\","n"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mustache.enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", then mustache mapping gets enabled for custom text mapping."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='stream', topic='stock', map.type='text') (symbol string, price float, volume long);\n")),(0,r.kt)("p",null,"This query performs a default text input mapping. The expected output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'symbol:"GDN",\nprice:55.6,\nvolume:100\n')),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='stream', topic='stock', map.type='text', map.event.grouping.enabled='true') (symbol string, price float, volume long);\n")),(0,r.kt)("p",null,"This query performs a default text input mapping with event grouping.\nThe expected output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'symbol:"GDN",\nprice:55.6,\nvolume:100\n~~~~~~~~~~\nsymbol:"GDN",\nprice:55.6,\nvolume:100\n')),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='stream', topic='stock', map.type='text',  map.payload=\"SensorID : {{symbol}}/{{volume}}, SensorPrice : Rs{{price}}/=, Value : {{volume}}ml\") (symbol string, price float, volume long);\n")),(0,r.kt)("p",null,"This query performs a custom text mapping. The expected output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SensorID : gdn/100, \nSensorPrice : Rs1000/=, \nValue : 100ml \n")),(0,r.kt)("p",null,"for the following stream processor event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{gdn,1000,100}\n")),(0,r.kt)("h2",{id:"example-4"},"Example 4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='stream', topic='stock', map.type='text', map.event.grouping.enabled='true', map.payload=\"Stock price of {{symbol}} is {{price}}\") (symbol string, price float, volume long);\n")),(0,r.kt)("p",null,"This query performs a custom text mapping with event grouping. The expected output is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Stock price of GDN is 55.6\n~~~~~~~~~~\nStock price of GDN is 55.6\n~~~~~~~~~~\nStock price of GDN is 55.6\n")),(0,r.kt)("h2",{id:"example-5"},"Example 5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='stream', topic='stock', map.type='text', map.mustache.enabled='true',  map.payload=\"SensorID : {{{symbol}}}/{{{volume}}}, SensorPrice : Rs{{{price}}}/=, Value : {{{volume}}}ml\") (symbol string, price float, volume long);\n")),(0,r.kt)("p",null,"This query performs a custom text mapping to return unescaped HTML. The expected output is: SensorID :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SensorID : a&b/100,\nSensorPrice : Rs1000/=,\nValue : 100ml\n")),(0,r.kt)("p",null,"for the following stream processor event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"{a&b,1000,100}\n")))}u.isMDXComponent=!0}}]);