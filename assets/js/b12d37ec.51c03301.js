"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[61958],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,b=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return n?a.createElement(b,o(o({ref:t},u),{},{components:n})):a.createElement(b,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(34334);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),r=n(67294),s=n(34334),o=n(72389),i=n(67392),l=n(7094),c=n(12466);const u="tabList__CuJ",m="tabItem_LNqP";function p(e){const{lazy:t,block:n,defaultValue:o,values:p,groupId:d,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,i.l)(h,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[x,_]=(0,r.useState)(y),k=[],{blockElementScrollPositionUntilNextRender:I}=(0,c.o5)();if(null!=d){const e=v[d];null!=e&&e!==x&&h.some((t=>t.value===e))&&_(e)}const S=e=>{const t=e.currentTarget,n=k.indexOf(t),a=h[n].value;a!==x&&(I(t),_(a),null!=d&&w(d,String(a)))},T=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=k.indexOf(e.currentTarget)+1;t=k[n]??k[0];break}case"ArrowLeft":{const n=k.indexOf(e.currentTarget)-1;t=k[n]??k[k.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},b)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>k.push(e),onKeyDown:T,onFocus:S,onClick:S},o,{className:(0,s.Z)("tabs__item",m,o?.className,{"tabs__item--active":x===t})}),n??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function d(e){const t=(0,o.Z)();return r.createElement(p,(0,a.Z)({key:String(t)},e))}},46081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),s=n(65488),o=n(85162);const i={sidebar_position:100,title:"Pub-Sub with Streams Example"},l=void 0,c={unversionedId:"streams/stream-examples/pub-sub-streams",id:"streams/stream-examples/pub-sub-streams",title:"Pub-Sub with Streams Example",description:"This page describes how to create geo-replicated streams and set up queues and pub-sub messaging with local latencies across the globe.",source:"@site/docs/streams/stream-examples/pub-sub-streams.md",sourceDirName:"streams/stream-examples",slug:"/streams/stream-examples/pub-sub-streams",permalink:"/docs/streams/stream-examples/pub-sub-streams",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-examples/pub-sub-streams.md",tags:[],version:"current",sidebarPosition:100,frontMatter:{sidebar_position:100,title:"Pub-Sub with Streams Example"},sidebar:"defaultSidebar",previous:{title:"Stream Examples",permalink:"/docs/streams/stream-examples/"},next:{title:"Pub-Sub with Streams in Browser Example",permalink:"/docs/streams/stream-examples/pub-sub-streams-browser"}},u={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Pub-Sub with Streams Code",id:"pub-sub-with-streams-code",level:2}],p={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page describes how to create geo-replicated streams and set up queues and pub-sub messaging with local latencies across the globe."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"https://auth-play.macrometa.io/"},"Macrometa account")," with sufficient permissions to create streams."),(0,r.kt)("li",{parentName:"ul"},"Appropriate SDK installed. For more information, refer to ",(0,r.kt)("a",{parentName:"li",href:"/docs/sdks/install-sdks"},"Install SDKs"),".")),(0,r.kt)("h2",{id:"pub-sub-with-streams-code"},"Pub-Sub with Streams Code"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Copy and paste the code block below in your favorite IDE."),(0,r.kt)("li",{parentName:"ol"},"Update constants with your values, such as the API key."),(0,r.kt)("li",{parentName:"ol"},"Run the code."),(0,r.kt)("li",{parentName:"ol"},"(Optional) Log in to the Macrometa console to view the streams.")),(0,r.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Connect to GDN.\nconst jsc8 = require("jsc8");\nconst readline = require("readline");\nconst globalUrl = "https://play.paas.macrometa.io";\nconst apiKey = "xxxx"; //Change this to your API Key\n\n// Create an authenticated instance with an API key (recommended)\nconst client = new jsc8({\n  url: globalUrl,\n  apiKey: apiKey,\n  fabricName: "_system"\n});\n\n/* Authenticate via JSON Web Token (JWT)\nconst client = new jsc8({ url: globalUrl, token: "XXXX", fabricName: "_system" });\n*/\n  \n/* Create an authenticated client instance via email and password\nconst client = new jsc8(globalUrl);\nawait client.login("your@email.com", "password");\n*/\n\n// Variables\nconst stream = "streamQuickstart";\nlet prefix_text = "";\nconst is_local = false; //For a local stream pass this variable as True, or False for a global stream\n\n// Get the right prefix for the stream\nif (is_local) {\n  prefix_text = "c8locals.";\n} else {\n  prefix_text = "c8globals.";\n}\n\nasync function createMyStream () {\n  let streamName = { "stream-id": "" };\n  if (await client.hasStream(stream, is_local)) {\n    console.log("This stream already exists!");\n    streamName["stream-id"] = prefix_text + stream;\n    console.log(`Old Producer = ${streamName["stream-id"]}`);\n  } else {\n    streamName = await client.createStream(stream, is_local);\n    console.log(`New Producer = ${streamName.result["stream-id"]}`);\n  }\n}\n\nasync function sendData () {\n  console.log("\\n ------- Publish Messages  ------");\n  const producer = await client.createStreamProducer(stream, is_local);\n\n  producer.on("open", () => {\n    const input = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    });\n\n    // Repeatedly ask the user for message to be published to the stream. User can always exit by typing 0\n    var recursiveUserInput = () => {\n      input.question(\n        "Enter your message to publish or Type 0 to exit:\\n",\n        (userInput) => {\n          if (userInput === "0") {\n            producer.close();\n            return input.close();\n          }\n\n          const data = {\n            payload: Buffer.from(userInput).toString("base64")\n          };\n          producer.send(JSON.stringify(data));\n          console.log(`Message sent: ${userInput}`);\n          recursiveUserInput();\n        }\n      );\n    }\n    recursiveUserInput();\n  });\n  producer.onclose = function () {\n    console.log("Closed WebSocket:Producer connection for " + stream);\n  };\n}\n\nasync function receiveData () {\n  console.log("\\n ------- Receive Messages  ------");\n  const consumer = await client.createStreamReader(\n    stream,\n    "test-subscription-1",\n    is_local\n  );\n  \n  // Close consumer connection when user types 0\n  const input = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  input.question(\n    "Type \'0\' to exit anytime:\\n",\n    (userInput) => {\n      if (userInput === "0") {\n        consumer.close();\n        return input.close();\n      } \n    }\n  );\n\n  consumer.on("message", (msg) => {\n    const { payload, messageId } = JSON.parse(msg);\n    console.log(Buffer.from(payload, "base64").toString("ascii"));\n    // Send message acknowledgement\n    consumer.send(JSON.stringify({ messageId }));\n  });\n\n  consumer.onclose = function () {\n    console.log("Closed WebSocket:Consumer connection for " + stream);\n  };\n}\n\nasync function selectAction () {\n  const input = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n\n  input.question(\n    "Type \'w\' to write data. Type \'r\' to read data: ",\n    (userInput) => {\n      if (userInput === "w") {\n        sendData();\n      } else if (userInput === "r") {\n        receiveData();\n      } else {\n        console.log("Invalid user input. Stopping program.");\n        return false;\n      }\n      input.close();\n    }\n  );\n}\n\n(async function () {\n  await createMyStream();\n  await selectAction();\n})();\n'))),(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'""" This file is a demo to send data to/from a stream """\nfrom operator import concat\nimport base64\nimport json\nimport warnings\nfrom c8 import C8Client\nwarnings.filterwarnings("ignore")\n\n# Connect to GDN.\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "xxxxx" # Change this to your API key\nis_local = False\nprefix_text = ""\ndemo_stream = \'streamQuickstart\'\n\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n# Get the right prefix for the stream.\nif is_local:\n    prefix_text = "c8locals."\nelse:\n    prefix_text = "c8globals."\n\n# Create global and local streams.\ndef createStream():\n    """ This function creates a stream """\n    stream_name = {"stream-id": ""}\n    if client.has_stream(demo_stream, local = is_local):\n        print("Stream already exists")\n        stream_name["stream-id"] = concat(prefix_text, demo_stream)\n        print ("Old Producer =",  stream_name["stream-id"])\n    else:\n        stream_name = client.create_stream(demo_stream, local=is_local)\n        print ("New Producer =",  stream_name["stream-id"])\n\n# Create the producer and publish messages.\ndef sendData():\n    """ This function sends data through a stream """\n    producer = client.create_stream_producer(demo_stream, local=is_local)\n    while True:\n        user_input = input("Enter your message to publish: ")\n        if user_input == \'0\':\n            break\n        producer.send(user_input)\n\n\n# Create the subscriber and receive data.\ndef receiveData():\n    """ This function receives data from a stream """\n    subscriber = client.subscribe(stream=demo_stream, local=is_local,\n        subscription_name="test-subscription-1")\n    while True:\n        print("\\nListening for message...")\n        m1 = json.loads(subscriber.recv())  # Listen on stream for any receiving messages\n        msg1 = base64.b64decode(m1["payload"]).decode(\'utf-8\')\n        print(F"Received message: \'{msg1}\'") \n    # Output the ID of the received message\n        # print(F"Message ID:\'{m1[\'messageId\']}\'")\n        subscriber.send(json.dumps({\'messageId\': m1[\'messageId\']})) # Acknowledge the received message\n\ncreateStream()\n\n# User enters choice.\n# On one terminal use \'r\' to start the subscriber to read data\n# Then on another terminal use \'w\' to start the producer and publish message\nuser_input = input("Type \'w\' to write data, type \'r\' read data, and type \'0\' to quit at any time: ")\nif user_input == "w":\n    sendData()\nelif user_input == "r":\n    receiveData()\nelse:\n    print ("Invalid user input. Stopping program") \n')))))}d.isMDXComponent=!0}}]);