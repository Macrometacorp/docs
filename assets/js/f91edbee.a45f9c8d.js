"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[99032],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),p=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||l;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},16632:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const l={title:"equals (Function)"},o=void 0,i={unversionedId:"cep/query-guide/functions/geospatial/equals",id:"cep/query-guide/functions/geospatial/equals",title:"equals (Function)",description:"Two available sets of parameters:",source:"@site/docs/cep/query-guide/functions/geospatial/equals.md",sourceDirName:"cep/query-guide/functions/geospatial",slug:"/cep/query-guide/functions/geospatial/equals",permalink:"/docs/cep/query-guide/functions/geospatial/equals",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/geospatial/equals.md",tags:[],version:"current",frontMatter:{title:"equals (Function)"},sidebar:"defaultSidebar",previous:{title:"distance (Function)",permalink:"/docs/cep/query-guide/functions/geospatial/distance"},next:{title:"intersects (Function)",permalink:"/docs/cep/query-guide/functions/geospatial/intersects"}},u={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],s={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Two available sets of parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First set returns ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if the incoming ",(0,r.kt)("inlineCode",{parentName:"li"},"geo.json.geometry")," event equals the given ",(0,r.kt)("inlineCode",{parentName:"li"},"geo.json.geometryFence"),"."),(0,r.kt)("li",{parentName:"ul"},"Second set returns ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if the location pointed by longitude and latitude equals the given ",(0,r.kt)("inlineCode",{parentName:"li"},"geo.json.geometryFence"),".")),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> geo:equals(<DOUBLE> longitude, <DOUBLE> latitude, <STRING> geo.json.geometry.fence)\n<BOOL> geo:equals(<STRING> geo.json.geometry, <STRING> geo.json.geometry.fence)\n")),(0,r.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"longitude"),(0,r.kt)("td",{parentName:"tr",align:null},"Longitude of the geo location."),(0,r.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"latitude"),(0,r.kt)("td",{parentName:"tr",align:null},"Latitude of the geo location."),(0,r.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"geo.json.geometry"),(0,r.kt)("td",{parentName:"tr",align:null},"String that contains geometry type and coordinates for a GeoJSON geometry."),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"geo.json.geometry.fence"),(0,r.kt)("td",{parentName:"tr",align:null},"String that contains geometry type and coordinates for a GeoJSON geometry fence."),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"geo:equals( {'type':'Polygon','coordinates':[[[0.5, 0.5],[0.5, 1.5],[1.5, 1.5],[1.5, 0.5],[0.5, 0.5]]]} , {'type':'Polygon','coordinates':[[[10, 10],[10, 11],[11, 11],[11, 10],[10, 10]]]} )\n")),(0,r.kt)("p",null,"This example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," because ",(0,r.kt)("inlineCode",{parentName:"p"},"geo.json.geometry")," is not equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"geo.json.geometry.fence"),"."),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"geo:equals(10.5. 20.5 , {'type':'Polygon','coordinates':[[[0, 0],[0, 1],[1, 1],[1, 0],[0, 0]]]})\n")),(0,r.kt)("p",null,"This example returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," because the coordinates are not equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"geo.json.geometry.fence"),"."))}c.isMDXComponent=!0}}]);