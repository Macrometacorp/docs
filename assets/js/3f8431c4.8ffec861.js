"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[13301],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?i.createElement(f,a(a({ref:t},u),{},{components:n})):i.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=n(87462),r=(n(67294),n(3905));const o={sidebar_position:1,title:"List Functions"},a=void 0,s={unversionedId:"cep/query-guide/functions/list/index",id:"cep/query-guide/functions/list/index",title:"List Functions",description:"List functions allow you to create and interact with lists.",source:"@site/docs/cep/query-guide/functions/list/index.md",sourceDirName:"cep/query-guide/functions/list",slug:"/cep/query-guide/functions/list/",permalink:"/docs/cep/query-guide/functions/list/",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/list/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"List Functions"},sidebar:"defaultSidebar",previous:{title:"tokenizeAsObject (Stream Processor)",permalink:"/docs/cep/query-guide/functions/json/tokenizeAsObject"},next:{title:"add (Function)",permalink:"/docs/cep/query-guide/functions/list/add"}},l={},c=[{value:"Input",id:"input",level:2},{value:"Output",id:"output",level:2},{value:"Example",id:"example",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"List functions allow you to create and interact with lists."),(0,r.kt)("p",null,"For information on performing scatter and gather using ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/list/tokenize"},"list:tokenize()"),", and ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/list/collect"},"list:collect()"),", refer to the examples in ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/examples/data-pipelines"},"Data Pipeline Examples"),"."),(0,r.kt)("h2",{id:"input"},"Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"ProductComboStream"),","),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"'Ice Cream'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Chocolate'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Cake'"),"]"),(0,r.kt)("h2",{id:"output"},"Output"),(0,r.kt)("p",null,"After processing, the following events will be arriving at each stream:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NewListStream: [",(0,r.kt)("inlineCode",{parentName:"li"},"[Ice Cream, Chocolate, Cake]"),"]"),(0,r.kt)("li",{parentName:"ul"},"ListAnalysisStream: ","[",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Chocolate"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"3"),"]"),(0,r.kt)("li",{parentName:"ul"},"UpdatedListStream: [",(0,r.kt)("inlineCode",{parentName:"li"},"[Ice Cream, Chocolate, Toffee]"),"]")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"This example shows how to use basic list functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `ProductComboStream` having `string` type attributes `product1`, `product2`, and `product3`.\nCREATE STREAM ProductComboStream ( product1 string, product2 string, product3 string);\n\n\n@info(name = 'Create-list')\n-- Create a list with values of `product1`, `product2`, and `product3`.\ninsert into NewListStream\nselect list:create(product1, product2, product3)\n            as productList\nfrom ProductComboStream;\n\n\n@info(name = 'Check-list')\n-- Check if `productList` is a List.\ninsert into ListAnalysisStream\nselect list:isList(productList) as isList,\n-- Check if `productList` contains `'Cake'`.\n       list:contains(productList, 'Cake')\n            as isCakePresent,\n-- Check if `productList` is empty.\n       list:isEmpty(productList) as isEmpty,\n-- Get the value at index `1` from `productList` .\n       list:get(productList, 1) as valueAt1,\n-- Get size of `productList`.\n       list:size(productList) as size\nfrom NewListStream;\n\n\n@info(name = 'Clone-and-update')\n-- Clone `productList`, add `Toffee` to the end of the list, and remove `Cake` from the list.\ninsert into UpdatedListStream\nselect list:remove(\n            list:add(list:clone(productList), \"Toffee\"),\n            \"Cake\") as productList\nfrom NewListStream;\n")))}p.isMDXComponent=!0}}]);