"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[75278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var l=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},s=Object.keys(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(l=0;l<s.length;l++)n=s[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=l.createContext({}),c=function(e){var t=l.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return l.createElement(o.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,d=u["".concat(o,".").concat(g)]||u[g]||k[g]||s;return n?l.createElement(d,r(r({ref:t},p),{},{components:n})):l.createElement(d,r({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var c=2;c<s;c++)r[c]=n[c];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}u.displayName="MDXCreateElement"},73006:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>k,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var l=n(87462),a=(n(67294),n(3905));const s={title:"Key-Value Store Commands"},r="Key-Value (gdnsl kv)",i={unversionedId:"cli/key-value-cli",id:"cli/key-value-cli",title:"Key-Value Store Commands",description:"Commands to work with key-value collections.",source:"@site/docs/cli/key-value-cli.md",sourceDirName:"cli",slug:"/cli/key-value-cli",permalink:"/docs/cli/key-value-cli",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cli/key-value-cli.md",tags:[],version:"current",frontMatter:{title:"Key-Value Store Commands"},sidebar:"defaultSidebar",previous:{title:"Index Commands",permalink:"/docs/cli/indexes-cli"},next:{title:"Query Commands",permalink:"/docs/cli/queries-cli"}},o={},c=[{value:"gdnsl kv create",id:"gdnsl-kv-create",level:2},{value:"gdnsl kv list",id:"gdnsl-kv-list",level:2},{value:"gdnsl kv delete",id:"gdnsl-kv-delete",level:2},{value:"gdnsl kv get",id:"gdnsl-kv-get",level:2},{value:"gdnsl kv set",id:"gdnsl-kv-set",level:2}],p={toc:c};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"key-value-gdnsl-kv"},"Key-Value (gdnsl kv)"),(0,a.kt)("p",null,"Commands to work with key-value collections."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl kv [flags]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\n  # Help for KV command group\n  gdnsl kv -h\n\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to manage KV collections.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-kv-create"},"gdnsl kv create"),(0,a.kt)("p",null,"Create a Key Value collection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl kv create [flags] NAME\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\n  # Create a global KV collection\n  gdnsl kv create cities\n\n  # Create a global KV collection with ttl\n  gdnsl kv create cities --ttl \n\n  # Create a global KV collection with stream enabled\n  gdnsl kv create cities --stream \n\n  # Create a global KV collection with both TTL and Stream enabled\n  gdnsl kv create cities --ttl --stream \n\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to create a Key Value collection.\n      --ttl                 Enable TTL on the collection. Default is false.\n      --stream              Enable stream on the collection. Default is false.\n      --fabric              Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-kv-list"},"gdnsl kv list"),(0,a.kt)("p",null,"List Key Value collections."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl kv list\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\n  # List all KV collections\n  gdnsl kv list\n  \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to list a Key Value collection.\n      --fabric              Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-kv-delete"},"gdnsl kv delete"),(0,a.kt)("p",null,"Delete a Key Value collection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl kv delete [flags] NAME\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Delete cities KV collection\n  gdnsl kv delete cities\n\n  # Delete key1, key2 entries from cities KV collection\n  gdnsl kv delete cities --keyarray "k1, k2" \n\n  # Delete key1 from cities KV collection\n  gdnsl kv delete cities --key k1 \n\n  # Delete all entries from cities KV collection\n  gdnsl kv delete cities --truncate\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to delete a Key Value collection.\n      --keyarray  stringa   Delete entries for all given keys from KV collection.\n      --key string          Delete entry for given key from KV collection.\n      --truncate            Delete all entries from KV collection.\n      --fabric              Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-kv-get"},"gdnsl kv get"),(0,a.kt)("p",null,"Get keys, values or count from a Key Value collection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl kv get [flags] NAME\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Get number of entries in cities collection\n  gdnsl kv get cities --count \n\n  # Get all keys in cities collection\n  gdnsl kv get cities --keys \n\n  # Get keys in cities collection\n  gdnsl kv get cities --keys --offset 0 --limit 50 --order asc \n\n  # Get all values in cities collection\n  gdnsl kv get cities --values \n\n  # Get keys in cities collection\n  gdnsl kv get cities --values --offset 0 --limit 50 --order asc cities --keys \n\n  # Get keys in cities collection\n  gdnsl kv get cities --values --keyarray "key1, key2, key3" \n\n  # Get value for key1 in cities collection\n  gdnsl kv get cities --key key1\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'  -h, --help                Help to get a Key Value collection.\n      --count               Number of entries in the KV collection.\n      --keys                Get all keys in the KV collection.\n      --values              Get all values in the KV collection.\n      --offset int          Default value 0.\n      --limit int           Default value 20. Max 10000. \n      --order string        "asc" or "desc". Default value asc. \n      --keyarray string     List of comma separated keys.\n      --key string          Get value for a given key in the KV collection.\n      --fabric              Name of the fabric to use.\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-kv-set"},"gdnsl kv set"),(0,a.kt)("p",null,"Set values or KV pair in a Key Value collection."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl kv set [flags] NAME\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Add k1:v1 entry to cities collection with TTL (unix timestamp in seconds)\n  gdnsl kv set cities --key k1 --value v1 --ttl 1671658506\n\n  # Add k1:v1 entry to cities collection with no expiration\n  gdnsl kv set cities --key k1 --value v1\n\n  # Add [k1:v1, k2:v2, k3:v3] entries to cities collection\n  gdnsl kv set cities --kv "k1:v1" --kv "k2:v2" --kv "k3:v3" \n\n  # Add [k1:v1, k2:v2, k3:v3] entries to cities collection with TTL\n  gdnsl kv set cities --kv "k1:v1:1671658506" --kv "k2:v2:1645479306", --kv "k3:v3:-1" \n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help            Help to set kv in a collection.\n      --key string      Key for the kv entry.\n      --value string    Value for the kv entry.\n      --kv array        Key value tuples for the KV collection.\n      --fabric          Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")))}k.isMDXComponent=!0}}]);