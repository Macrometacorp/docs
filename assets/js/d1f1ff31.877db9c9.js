"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40174],{3905:(e,t,s)=>{s.d(t,{Zo:()=>m,kt:()=>b});var n=s(67294);function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}function a(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function o(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?a(Object(s),!0).forEach((function(t){r(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):a(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}function i(e,t){if(null==e)return{};var s,n,r=function(e,t){if(null==e)return{};var s,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(r[s]=e[s])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),s=t;return e&&(s="function"==typeof e?e(t):o(o({},t),e)),s},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var s=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=c(s),b=r,d=p["".concat(l,".").concat(b)]||p[b]||u[b]||a;return s?n.createElement(d,o(o({ref:t},m),{},{components:s})):n.createElement(d,o({ref:t},m))}));function b(e,t){var s=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=s.length,o=new Array(a);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<a;c++)o[c]=s[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,s)}p.displayName="MDXCreateElement"},85162:(e,t,s)=>{s.d(t,{Z:()=>o});var n=s(67294),r=s(34334);const a="tabItem_Ymn6";function o(e){let{children:t,hidden:s,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,o),hidden:s},t)}},65488:(e,t,s)=>{s.d(t,{Z:()=>b});var n=s(87462),r=s(67294),a=s(34334),o=s(72389),i=s(67392),l=s(7094),c=s(12466);const m="tabList__CuJ",u="tabItem_LNqP";function p(e){const{lazy:t,block:s,defaultValue:o,values:p,groupId:b,className:d}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=p??f.map((e=>{let{props:{value:t,label:s,attributes:n}}=e;return{value:t,label:s,attributes:n}})),h=(0,i.l)(y,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:S,setTabGroupChoices:v}=(0,l.U)(),[_,k]=(0,r.useState)(g),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=b){const e=S[b];null!=e&&e!==_&&y.some((t=>t.value===e))&&k(e)}const N=e=>{const t=e.currentTarget,s=T.indexOf(t),n=y[s].value;n!==_&&(E(t),k(n),null!=b&&v(b,String(n)))},A=e=>{let t=null;switch(e.key){case"ArrowRight":{const s=T.indexOf(e.currentTarget)+1;t=T[s]??T[0];break}case"ArrowLeft":{const s=T.indexOf(e.currentTarget)-1;t=T[s]??T[T.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,a.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":s},d)},y.map((e=>{let{value:t,label:s,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===t?0:-1,"aria-selected":_===t,key:t,ref:e=>T.push(e),onKeyDown:A,onFocus:N,onClick:N},o,{className:(0,a.Z)("tabs__item",u,o?.className,{"tabs__item--active":_===t})}),s??t)}))),t?(0,r.cloneElement)(f.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==_})))))}function b(e){const t=(0,o.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},24528:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>b,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var n=s(87462),r=(s(67294),s(3905)),a=s(65488),o=s(85162);const i={sidebar_position:80,title:"Unsubscribe from Streams"},l=void 0,c={unversionedId:"streams/stream-tasks/unsubscribe-streams",id:"streams/stream-tasks/unsubscribe-streams",title:"Unsubscribe from Streams",description:"This page explains how you can unsubscribe from streams in Macrometa.",source:"@site/docs/streams/stream-tasks/unsubscribe-streams.md",sourceDirName:"streams/stream-tasks",slug:"/streams/stream-tasks/unsubscribe-streams",permalink:"/docs/streams/stream-tasks/unsubscribe-streams",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-tasks/unsubscribe-streams.md",tags:[],version:"current",sidebarPosition:80,frontMatter:{sidebar_position:80,title:"Unsubscribe from Streams"},sidebar:"defaultSidebar",previous:{title:"Subscribe to Streams",permalink:"/docs/streams/stream-tasks/subscribe-streams"},next:{title:"Delete Streams",permalink:"/docs/streams/stream-tasks/delete-stream"}},m={},u=[],p={toc:u};function b(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page explains how you can unsubscribe from streams in Macrometa."),(0,r.kt)(a.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("p",null,"You must ",(0,r.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the Python SDK")," before you can run this code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'from c8 import C8Client\n\n# Connect to GDN.\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "XXXXX" # Change this to your API key\n\n# Enter the consumer/subscription name which is subscribed to more than 2 streams\nCONSUMER_NAME = "testConsumer"\nIS_LOCAL = False # True for local stream and false for global stream\n\n# True if you want to delete subscription from all local streams or False if you want to delete subscription on all global streams\nIS_LOCAL_STREAMS = False \n\nstream_name = "streamQuickstart"\n\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n\nif IS_LOCAL:\n    stream_name = f"c8locals.{stream_name}"\nelse:\n    stream_name = f"c8globals.{stream_name}"\n\ntype = ""\nif IS_LOCAL_STREAMS:\n    type = "local"\nelse:\n    type = "global" \n\n# Delete subscription (remove the given subscription from a particular stream)\nresp = client.delete_stream_subscription(stream=stream_name, subscription=CONSUMER_NAME, local=IS_LOCAL)\nprint("Subscription deleted from stream ", stream_name,   ": ", resp)\n\n# Unsubscribe subscription (remove the given subscription from all streams (either global or local as specified by IS_LOCAL_STREAMS))\nresp = client.unsubscribe(subscription=CONSUMER_NAME, local=IS_LOCAL_STREAMS)\nprint("Subscription unsubscribed (removed from all ", type, " streams): ", resp)\n'))),(0,r.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("p",null,"You must ",(0,r.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the JavaScript SDK")," before you can run this code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\nconst client = new jsc8({ url: "https://play.paas.macrometa.io", apiKey: "xxxxx", fabricName: "_system" });\n\nconst streamName = "streamQuickstart";\n\n// Enter the consumer/subscription name which is subscribed to more than 2 streams\nconst consumerName = "testConsumer"\nconst isLocal = false // True for local stream and false for global stream\n\n// True if you want to delete subscription from all local streams or False if you want to delete subscription on all global streams\nconst isLocalStreams = true\n\nlet type = ""\nif (isLocalStreams) {\n  type = "local"\n} else {\n  type = "global"\n}\n\n(async function () {\n  // Delete subscription (remove the given subscription from a particular stream)\n  const consumerDeleteSubsctiption = await client.deleteStreamSubscription(streamName, consumerName, isLocal)\n  console.log(\n    `${consumerName} subscription deleted successfully from stream ${streamName}`,\n    consumerDeleteSubsctiption\n  );\n\n  // Unsubscribe subscription (remove the given subscription from all streams (either global or local as specified by isLocalStreams))\n  const stream = client.getStream(" ", isLocalStreams)\n  const consumerUnsubscribe = await stream.deleteSubscription(consumerName)\n  console.log(\n    `${consumerName} unsubscribed successfully (removed from all ${type} streams)`,\n    consumerUnsubscribe\n  );\n})();\n'))),(0,r.kt)(o.Z,{value:"api-py",label:"API - Python",mdxType:"TabItem"},(0,r.kt)("p",null,"Use our interactive API Reference with code generation in 18 programming languages to ",(0,r.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/DeleteAllSubscriptions"},"Remove a Subscription from All Streams")," or ",(0,r.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/DeleteSubscription"},"Remove a Subscription from a Specific Stream"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import requests\n\n# Constants\nURL = "api-play.paas.macrometa.io"\nHTTP_URL = f"https://{URL}"\nFABRIC = "_system"\nSTREAM_NAME = "streamQuickstart"\nAPI_KEY = "XXXXX" # Use your apikey here\nAUTH_TOKEN = f"apikey {API_KEY}" # apikey keyword needs to be appended\n\n# Enter the consumer/subscription name which is subscribed to more than 2 streams\nCONSUMER_NAME = "testConsumer"\nIS_GLOBAL = True # For global stream pass c8globals as prefix to stream name or c8locals if stream is local\n\n# True if you want to delete subscription from all global streams or False if you want to delete subscription on all local streams\nIS_GLOBAL_STREAMS = True \n\nstream_type = ""\nif IS_GLOBAL:\n    stream_type = "c8global"\nelse:\n    stream_type = "c8local"\n\ntype = ""\nif IS_GLOBAL_STREAMS:\n    type = "global"\nelse:\n    type = "local"\n\n# Create HTTPS session\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Delete subscription (remove the given subscription from a particular stream)\nurl = f"{HTTP_URL}/_fabric/{FABRIC}/_api/streams/{stream_type}s.{STREAM_NAME}/subscriptions/{CONSUMER_NAME}"\nresp = session.delete(url)\nprint("Subscription deleted from stream ", STREAM_NAME,   ": ", resp.text)\n\n# Unsubscribe subscription (remove the given subscription from all streams (either global or local as specified by IS_GLOBAL_STREAMS))\nurl = f"{HTTP_URL}/_fabric/{FABRIC}/_api/streams/subscription/{CONSUMER_NAME}?global={IS_GLOBAL_STREAMS}"\nresp = session.delete(url)\nprint("Subscription unsubscribed (removed from all ", type, " streams): ", resp.text)\n'))),(0,r.kt)(o.Z,{value:"api-js",label:"API - JS",mdxType:"TabItem"},(0,r.kt)("p",null,"Use our interactive API Reference with code generation in 18 programming languages to ",(0,r.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/DeleteAllSubscriptions"},"Remove a Subscription from All Streams")," or ",(0,r.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/DeleteSubscription"},"Remove a Subscription from a Specific Stream"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n  _headers = {\n    Accept: "application/json",\n    "Content-Type": "application/json"\n  };\n\n  constructor (url, apiKey) {\n    this._url = url;\n    this._headers.authorization = `apikey ${apiKey}`; // apikey keyword needs to be appended\n  }\n\n  _handleResponse (response, resolve, reject) {\n    if (response.ok) {\n      resolve(response.json());\n    } else {\n      reject(response);\n    }\n  }\n\n  req (endpoint, { body, ...options } = {}) {\n    const self = this;\n    return new Promise(function (resolve, reject) {\n      fetch(self._url + endpoint, {\n        headers: self._headers,\n        body: body ? JSON.stringify(body) : undefined,\n        ...options\n      }).then((response) => self._handleResponse(response, resolve, reject));\n    });\n  }\n}\n\nconst apiKey = "xxxxx"; // Use your apikey here\nconst federationName = "api-play.paas.macrometa.io";\nconst federationUrl = `https://${federationName}`;\nconst fabric = "_system"\nconst stream = "streamQuickstart";\n\n// Enter the consumer/subscription name which is subscribed to more than 2 streams\nconst consumerName = "testConsumer"\nconst isGlobal = true // For global stream pass c8globals as prefix to stream name or c8locals if stream is local\n\n// True if you want to delete subscription from all global streams or False if you want to delete subscription on all local streams\nconst isGlobalStreams = true\n\nlet prefixText = ""\nif (isGlobal) {\n  prefixText = "c8globals."\n} else {\n  prefixText = "c8locals."\n}\n\nlet type = ""\nif (isGlobalStreams) {\n  type = "global"\n} else {\n  type = "local"\n}\n\nconst run = async function () {\n  try {\n    const connection = new APIRequest(federationUrl, apiKey);\n\n    // Delete subscription (remove the given subscription from a particular stream)\n    const consumerDeleteSubsctiption = await connection.req(\n      `/_fabric/${fabric}/_api/streams/${prefixText}${stream}/subscriptions/${consumerName}`,\n      {\n        method: "DELETE"\n      }\n    );\n    console.log(\n      `${consumerName} subscription deleted successfully from stream ${stream}`,\n      consumerDeleteSubsctiption\n    );\n\n    // Unsubscribe subscription (remove the given subscription from all streams (either global or local as specified by isGlobalStreams))\n    const consumerUnsubscribe = await connection.req(\n      `/_fabric/${fabric}/_api/streams/subscription/${consumerName}?global=${isGlobalStreams}`,\n      {\n        method: "DELETE"\n      }\n    );\n    console.log(\n      `${consumerName} unsubscribed successfully (removed from all ${type} streams)`,\n      consumerUnsubscribe\n    );\n  } catch (e) {\n    console.error(e);\n  }\n};\nrun();\n'))),(0,r.kt)(o.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/cli/streams-cli#gdnsl-streams-subscription"},"gdnsl streams subscription")," CLI commands to delete existing stream subscriptions."))))}b.isMDXComponent=!0}}]);