"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[58389],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=s.createContext({}),c=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,b=m["".concat(i,".").concat(d)]||m[d]||u[d]||r;return n?s.createElement(b,o(o({ref:t},p),{},{components:n})):s.createElement(b,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var s=n(67294),a=n(34334);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return s.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var s=n(87462),a=n(67294),r=n(34334),o=n(72389),l=n(67392),i=n(7094),c=n(12466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:o,values:m,groupId:d,className:b}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??h.map((e=>{let{props:{value:t,label:n,attributes:s}}=e;return{value:t,label:n,attributes:s}})),g=(0,l.l)(f,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:k}=(0,i.U)(),[w,T]=(0,a.useState)(y),_=[],{blockElementScrollPositionUntilNextRender:P}=(0,c.o5)();if(null!=d){const e=v[d];null!=e&&e!==w&&f.some((t=>t.value===e))&&T(e)}const N=e=>{const t=e.currentTarget,n=_.indexOf(t),s=f[n].value;s!==w&&(P(t),T(s),null!=d&&k(d,String(s)))},E=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=_.indexOf(e.currentTarget)+1;t=_[n]??_[0];break}case"ArrowLeft":{const n=_.indexOf(e.currentTarget)-1;t=_[n]??_[_.length-1];break}}t?.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},b)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,s.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>_.push(e),onKeyDown:E,onFocus:N,onClick:N},o,{className:(0,r.Z)("tabs__item",u,o?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,a.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,o.Z)();return a.createElement(m,(0,s.Z)({key:String(t)},e))}},21226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var s=n(87462),a=(n(67294),n(3905)),r=n(65488),o=n(85162);const l={sidebar_position:60,title:"Publish Messages to Streams"},i=void 0,c={unversionedId:"streams/stream-tasks/publish-messages",id:"streams/stream-tasks/publish-messages",title:"Publish Messages to Streams",description:"This page explains how to publish messages to a stream in Macrometa.",source:"@site/docs/streams/stream-tasks/publish-messages.md",sourceDirName:"streams/stream-tasks",slug:"/streams/stream-tasks/publish-messages",permalink:"/docs/streams/stream-tasks/publish-messages",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-tasks/publish-messages.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{sidebar_position:60,title:"Publish Messages to Streams"},sidebar:"defaultSidebar",previous:{title:"View Streams",permalink:"/docs/streams/stream-tasks/view-streams"},next:{title:"Subscribe to Streams",permalink:"/docs/streams/stream-tasks/subscribe-streams"}},p={},u=[],m={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page explains how to publish messages to a stream in Macrometa."),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,a.kt)("p",null,"You must ",(0,a.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the Python SDK")," before you can run this code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'from operator import concat\nfrom c8 import C8Client\n\n# Connect to GDN.\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "xxxxxx" # Change this to your API key\nis_local = False # For a global stream pass True and False for local stream\ndemo_stream = "streamQuickstart"\n\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n\n# Create the producer and publish messages.\ndef sendData():\n    """ This function sends data through a stream """\n    producer = client.create_stream_producer(demo_stream, local=is_local)\n    while True:\n        user_input = input("Enter your message to publish: ")\n        if user_input == \'0\':\n            break\n        producer.send(user_input)\n\nsendData()\n'))),(0,a.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,a.kt)("p",null,"You must ",(0,a.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the JavaScript SDK")," before you can run this code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Connect to GDN.\nconst jsc8 = require("jsc8");\nconst client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "XXXXX", fabricName: "_system"});\nconsole.log("Authentication done!!...");\n\nconst stream = "streamQuickstart";\n\nasync function sendData () {\n  console.log("\\n ------- Publish Messages  ------");\n  const producer = await client.createStreamProducer(stream);\n\n  producer.on("open", () => {\n    for (let i = 0; i < 10; i++) {\n      const msg1 = `Persistent hello from (${JSON.stringify(i)})`;\n      const data = {\n        payload: Buffer.from(msg1).toString("base64")\n      };\n\n      console.log(`Stream: ${msg1}`);\n      producer.send(JSON.stringify(data));\n    }\n  });\n  producer.onclose = function (e) {\n    console.log("Closed WebSocket:Producer connection for " + streamName);\n  };\n}\n\nsendData()\n'))),(0,a.kt)(o.Z,{value:"api-py",label:"REST API - Python",mdxType:"TabItem"},(0,a.kt)("p",null,"Use our interactive API reference with code generation in 18 programming languages to ",(0,a.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/PublishStreamMessage"},"publish a message"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'import requests\n\n# Constants\nURL = "api-play.paas.macrometa.io"\nHTTP_URL = f"https://{URL}"\nFABRIC = "_system"\nSTREAM_NAME = "streamQuickstart"\nAPI_KEY = "XXXXX" # Use your API key here\nAUTH_TOKEN = f"apikey {API_KEY}" # Append the key word for the API key\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Publish messages\n# Send message in body\nproducerurl = f"wss://{URL}/_ws/ws/v2/producer/persistent/{TENANT_NAME}/{stream_type}.{FABRIC}/{stream_type}s.{STREAM_NAME}"\n\n# Enter your message here\nmsg = "Hello World"\ndef create_producer():\n    ws = create_connection(producerurl, header=[f"Authorization: {AUTH_TOKEN}"])\n    payload = {\n        "payload": base64.b64encode(\n            six.b(msg)\n        ).decode("utf-8")\n    }\n    ws.send(json.dumps(payload))\n    print(f"Message sent: {msg}")\n    time.sleep(3)\n    response = json.loads(ws.recv())\n    if response[\'result\'] == \'ok\':\n        print("Received acknowledgement that message was delivered successfully")\n    else:\n        print(f"Failed to publish message: {response}")\n    ws.close()\n\n# Or\n# Use publish message api to publish message\n#url = f"{HTTP_URL}/_fabric/{FABRIC}/_api/streams/{stream_type}s.{STREAM_NAME}/publish?global={IS_GLOBAL}"\n#resp = session.post(url, data="Hello")\n#print("\\nMessage Posted: ", resp.text)\n'))),(0,a.kt)(o.Z,{value:"api-js",label:"REST API - JavaScript",mdxType:"TabItem"},(0,a.kt)("p",null,"Use our interactive API reference with code generation in 18 programming languages to ",(0,a.kt)("a",{parentName:"p",href:"https://macrometa.com/docs/api#/operations/PublishStreamMessage"},"publish a message"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n  _headers = {\n    Accept: "application/json",\n    "Content-Type": "application/json"\n  };\n\n  constructor (url, apiKey) {\n    this._url = url;\n    this._headers.authorization = `apikey ${apiKey}`; // Append the key word for the API key\n  }\n\n  _handleResponse (response, resolve, reject) {\n    if (response.ok) {\n      resolve(response.json());\n    } else {\n      reject(response);\n    }\n  }\n\n  req (endpoint, { body, ...options } = {}) {\n    const self = this;\n    return new Promise(function (resolve, reject) {\n      fetch(self._url + endpoint, {\n        headers: self._headers,\n        body: body ? JSON.stringify(body) : undefined,\n        ...options\n      }).then((response) => self._handleResponse(response, resolve, reject));\n    });\n  }\n}\n\nconst apiKey = "XXXXX"; // Use your apikey here\nconst federationName = "api-play.paas.macrometa.io";\nconst federationUrl = `https://${federationName}`;\n\nconst stream = "streamQuickstart";\nconst isGlobal = true;\n\nconst run = async function () {\n  const connection = new APIRequest(federationUrl, apiKey);\n\n  /* ----------------- Publish and subscribe message to stream ---------------- */\n\n    const region = isGlobal ? "c8global" : "c8local";\n    const streamName = `${region}s.${stream}`;\n\n    // Fetching local URL in case the stream is local\n    const localDcDetails = await connection.req(`/datacenter/local`, {\n      method: "GET"\n    });\n\n    const dcUrl = localDcDetails.tags.url;\n\n    url = isGlobal\n      ? url\n      : `api-${dcUrl}`;\n\n    const otpConsumer = await connection.req(`/apid/otp`, {\n      method: "POST"\n    });\n    const otpProducer = await connection.req(`/apid/otp`, {\n      method: "POST"\n    });\n\n    const consumerUrl = `wss://${url}/_ws/ws/v2/consumer/persistent/${tenant}/${region}._system/${streamName}/${consumerName}?otp=${otpConsumer.otp}`;\n\n    const producerUrl = `wss://${url}/_ws/ws/v2/producer/persistent/${tenant}/${region}._system/${streamName}?otp=${otpProducer.otp}`;\n\n    let consumer;\n    let producer;\n    let producerInterval;\n\nrun();\n'))),(0,a.kt)(o.Z,{value:"cli",label:"CLI",mdxType:"TabItem"},(0,a.kt)("p",null,"Use the ",(0,a.kt)("a",{parentName:"p",href:"../../cli/streams-cli#gdnsl-streams-publish"},"gdnsl streams publish")," CLI command to create a Document Store collection."))))}d.isMDXComponent=!0}}]);