"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[22048],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=l(n),d=i,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||r;return n?a.createElement(f,p(p({ref:t},s),{},{components:n})):a.createElement(f,p({ref:t},s))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,p=new Array(r);p[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,p[1]=o;for(var l=2;l<r;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},69517:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(87462),i=(n(67294),n(3905));const r={sidebar_position:1,title:"Map Functions"},p=void 0,o={unversionedId:"cep/query-guide/functions/map/index",id:"cep/query-guide/functions/map/index",title:"Map Functions",description:"Map functions allow you to create and interact with maps.",source:"@site/docs/cep/query-guide/functions/map/index.md",sourceDirName:"cep/query-guide/functions/map",slug:"/cep/query-guide/functions/map/",permalink:"/docs/cep/query-guide/functions/map/",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/map/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Map Functions"},sidebar:"defaultSidebar",previous:{title:"tokenize (Stream Processor)",permalink:"/docs/cep/query-guide/functions/list/tokenize"},next:{title:"clear (Function)",permalink:"/docs/cep/query-guide/functions/map/clear"}},c={},l=[{value:"Input",id:"input",level:2},{value:"Output",id:"output",level:2},{value:"Example",id:"example",level:2}],s={toc:l};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Map functions allow you to create and interact with maps."),(0,i.kt)("p",null,"For information on performing scatter and gather using ",(0,i.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/map/tokenize"},"map:tokenize()"),", and ",(0,i.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/map/collect"},"map:collect()"),", refer to the examples in ",(0,i.kt)("a",{parentName:"p",href:"/docs/cep/examples/data-pipelines"},"Data Pipeline Examples"),"."),(0,i.kt)("h2",{id:"input"},"Input"),(0,i.kt)("p",null,"Below event is sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"CoupleDealInfoStream"),","),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'Chocolate'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"18.0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'Ice Cream'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"24.0"),"]"),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"After processing, the following events arrive at each stream:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"NewMapStream: ","[",(0,i.kt)("inlineCode",{parentName:"li"},"{Ice Cream=24.0, Chocolate =18.0}"),"]"),(0,i.kt)("li",{parentName:"ul"},"MapAnalysisStream: [",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"[Ice Cream, Chocolate]"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"2"),"]"),(0,i.kt)("li",{parentName:"ul"},"ItemInsertedMapStream: ","[",(0,i.kt)("inlineCode",{parentName:"li"},"{Ice Cream=24.0, Gift=1.0, Chocolate =18.0}"),"]")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"This example provides examples of basic map functions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `CoupleDealInfoStream` having attributes `item1`, `price1`, `item2`, and `price2` with `string` and `double` types.\nCREATE STREAM CoupleDealInfoStream ( item1 string, price1 double, item2 string, price2 double);\n\n@info(name = 'Create-map')\n-- Create a map with values of `item1` and `item2` as keys, and `price1` and `price2` as values.\ninsert into NewMapStream\nselect map:create(item1, price1, item2, price2) as itemPriceMap\nfrom CoupleDealInfoStream;\n\n@info(name = 'Check-map')\n-- Check if `itemPriceMap` is a Map.\ninsert into MapAnalysisStream\nselect map:isMap(itemPriceMap) as isMap,\n-- Check if `itemPriceMap` contains a key `'Cookie'`.\n       map:containsKey(itemPriceMap, 'Cookie')\n            as isCookiePresent,\n-- Check if `itemPriceMap` contains a value `24.0`.\n       map:containsValue(itemPriceMap, 24.0)\n            as isThereItemWithPrice24,\n-- Check if `itemPriceMap` is empty.\n       map:isEmpty(itemPriceMap) as isEmpty,\n-- Get all keys of `itemPriceMap` as a List.\n       map:keys(itemPriceMap) as keys,\n-- Get size of `itemPriceMap`.\n       map:size(itemPriceMap) as size\nfrom NewMapStream;\n\n@info(name = 'Clone-and-update')\n-- Clone `itemPriceMap`, put `Gift` key with value `1.0` to it, and replace `Cake` key with value `12.0`.\ninsert into ItemInsertedMapStream\nselect map:replace(\n                   map:put(map:clone(itemPriceMap),\n                           \"Gift\",\n                           1.0),\n                   \"Cake\",\n                   12.0) as itemPriceMap\nfrom NewMapStream;\n")))}m.isMDXComponent=!0}}]);