"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[69566],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,k=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return a?n.createElement(k,o(o({ref:t},u),{},{components:a})):n.createElement(k,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},13208:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={title:"kafkaMultiDC (Source)"},o=void 0,i={unversionedId:"cep/source/kafkaMultiDC",id:"cep/source/kafkaMultiDC",title:"kafkaMultiDC (Source)",description:"The Kafka Multi-Datacenter(DC) source receives records from the same",source:"@site/docs/cep/source/kafkaMultiDC.md",sourceDirName:"cep/source",slug:"/cep/source/kafkaMultiDC",permalink:"/docs/cep/source/kafkaMultiDC",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/source/kafkaMultiDC.md",tags:[],version:"current",frontMatter:{title:"kafkaMultiDC (Source)"},sidebar:"defaultSidebar",previous:{title:"kafka (Source)",permalink:"/docs/cep/source/kafka"},next:{title:"MQTT Source",permalink:"/docs/cep/source/mqtt"}},p={},s=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2}],u={toc:s};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Kafka Multi-Datacenter(DC) source receives records from the same\ntopic in brokers deployed in two different kafka clusters. It filters\nout all the duplicate messages and ensuresthat the events are received\nin the correct order using sequential numbering. It receives events in\nformats such as ",(0,r.kt)("inlineCode",{parentName:"p"},"TEXT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"XML")," JSON",(0,r.kt)("inlineCode",{parentName:"p"},"and"),"Binary","`",".The Kafka Source\ncreates the default partition ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," for a given topic, if the topic has\nnot yet been created in the Kafka cluster."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (type="kafkaMultiDC", map.type="<STRING>", bootstrap.servers="<STRING>", topic="<STRING>", partition.no="<INT>", is.binary.message="<BOOL>", optional.configuration="<STRING>")\n')),(0,r.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bootstrap.servers"),(0,r.kt)("td",{parentName:"tr",align:null},"This contains the kafka server list which the kafka source listens to. This is given using comma-separated values. eg: ",(0,r.kt)("inlineCode",{parentName:"td"},"localhost:9092,localhost:9093")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"topic"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the topic that the source listens to. eg: ",(0,r.kt)("inlineCode",{parentName:"td"},"topic_one")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"partition.no"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the partition number of the given topic."),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is.binary.message"),(0,r.kt)("td",{parentName:"tr",align:null},"In order to receive the binary events via the Kafka Multi-DC source, the value of this parameter needs to be set to ",(0,r.kt)("inlineCode",{parentName:"td"},"True"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"optional.configuration"),(0,r.kt)("td",{parentName:"tr",align:null},"This contains all the other possible configurations with which the consumer can be created.eg: producer.type:async,batch.size:200"),(0,r.kt)("td",{parentName:"tr",align:null},"null"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@App:name('TestExecutionPlan')\nCREATE STREAM BarStream (symbol string, price float, volume long);\n\n@info(name = 'query1')\nCREATE SOURCE FooStream WITH (type='kafkaMultiDC', topic='kafka_topic', bootstrap.servers='host1:9092,host1:9093', partition.no='1', map.type='xml') (symbol string, price float, volume long);\n\ninsert into BarStream\nfrom FooStream select symbol, price, volume;\n")),(0,r.kt)("p",null,"The following query listens to ",(0,r.kt)("inlineCode",{parentName:"p"},"kafka_topic")," topic, deployed in the\nbroker host1:9092 and host1:9093, with partition 1. A thread is created\nfor each broker. The receiving xml events are mapped to a stream processor event\nand sent to the FooStream."))}c.isMDXComponent=!0}}]);