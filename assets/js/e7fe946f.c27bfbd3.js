"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[16933],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=l,b=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(b,o(o({ref:t},p),{},{components:n})):a.createElement(b,o({ref:t},p))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),l=n(34334);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),l=n(67294),r=n(34334),o=n(72389),i=n(67392),s=n(7094),c=n(12466);const p="tabList__CuJ",u="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:o,values:m,groupId:d,className:b}=e,f=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),h=(0,i.l)(g,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:C}=(0,s.U)(),[v,O]=(0,l.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=d){const e=k[d];null!=e&&e!==v&&g.some((t=>t.value===e))&&O(e)}const L=e=>{const t=e.currentTarget,n=N.indexOf(t),a=g[n].value;a!==v&&(E(t),O(a),null!=d&&C(d,String(a)))},_=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]??N[N.length-1];break}}t?.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},b)},g.map((e=>{let{value:t,label:n,attributes:o}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>N.push(e),onKeyDown:_,onFocus:L,onClick:L},o,{className:(0,r.Z)("tabs__item",u,o?.className,{"tabs__item--active":v===t})}),n??t)}))),t?(0,l.cloneElement)(f.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function d(e){const t=(0,o.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}},18329:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(87462),l=(n(67294),n(3905)),r=n(65488),o=n(85162);const i={sidebar_position:140,title:"Realtime DB Updates Example"},s=void 0,c={unversionedId:"streams/stream-examples/realtime-updates",id:"streams/stream-examples/realtime-updates",title:"Realtime DB Updates Example",description:"This tutorial is about using Macrometa GDN as a realtime database with local latencies across the globe.",source:"@site/docs/streams/stream-examples/realtime-updates.md",sourceDirName:"streams/stream-examples",slug:"/streams/stream-examples/realtime-updates",permalink:"/docs/streams/stream-examples/realtime-updates",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-examples/realtime-updates.md",tags:[],version:"current",sidebarPosition:140,frontMatter:{sidebar_position:140,title:"Realtime DB Updates Example"},sidebar:"defaultSidebar",previous:{title:"REST API Streams Example",permalink:"/docs/streams/stream-examples/rest-apis-stream-example"},next:{title:"Kafka on GDN - Beta",permalink:"/docs/streams/kafka_on_gdn/"}},p={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Realtime Updates Code",id:"realtime-updates-code",level:2}],m={toc:u};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This tutorial is about using Macrometa GDN as a realtime database with local latencies across the globe."),(0,l.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"A Macrometa account with sufficient permissions to create streams."),(0,l.kt)("li",{parentName:"ul"},"An API key. For more information, refer to ",(0,l.kt)("a",{parentName:"li",href:"../../account-management/api-keys/create-api-keys"},"Create API Keys"),"."),(0,l.kt)("li",{parentName:"ul"},"Appropriate SDK installed. For more information, refer to ",(0,l.kt)("a",{parentName:"li",href:"/docs/sdks/install-sdks"},"Install SDKs"),".")),(0,l.kt)("h2",{id:"realtime-updates-code"},"Realtime Updates Code"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Constants - DB\nconst globalUrl = "https://play.paas.macrometa.io/";\nconst email = "your@email.com";\nconst password = "password";\nconst client = new jsc8(globalUrl);\n\n// Variables\nconst collectionName = "ddos";\nlet listener;\nconst data = [\n  { ip: "10.1.1.1", action: "block", rule: "blocklistA" },\n  { ip: "20.1.1.2", action: "block", rule: "blocklistA" },\n  { ip: "30.1.1.3", action: "block", rule: "blocklistB" },\n  { ip: "40.1.1.4", action: "block", rule: "blocklistA" },\n  { ip: "50.1.1.5", action: "block", rule: "blocklistB" }\n];\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n};\n\n// Create an authenticated instance with a token or API key\n\n// const client = new jsc8({url: globalUrl, token: "XXXX", fabricName: \'_system\'});\n// const client = new jsc8({url: globalUrl, apiKey: "XXXX", fabricName: \'_system\'});\n\n// Or use email and password to authenticate client instance\n\nasync function createCollection () {\n  console.log("\\n1. Log in.");\n  await client.login(email, password);\n  console.log("\\n2. Create collection.");\n  try {\n    console.log(`Creating the collection ${collectionName}...`);\n    const existsColl = await client.hasCollection(collectionName);\n    if (existsColl === false) {\n      await client.createCollection(collectionName, { stream: true });\n    }\n    // Add an onChange listener for collection\n    listener = await client.onCollectionChange(collectionName);\n    \n    // Decode the message printed here in readable format\n    listener.on("message", (msg) => {\n      const receivedMsg = msg && JSON.parse(msg);\n      console.log("message=>", Buffer.from(receivedMsg.payload, "base64").toString("ascii"))\n    });\n    listener.on("open", () => console.log("Connection open"));\n    listener.on("close", () => console.log("Connection closed"));\n  } catch (e) {\n    await console.log("Collection creation did not succeed due to " + e);\n  }\n}\nasync function insertData () {\n  console.log(`\\n3. Insert data in region ${globalUrl}`);\n  await client.insertDocumentMany(collectionName, data);\n}\nasync function deleteData () {\n  console.log("\\n4. Delete data");\n  await client.deleteCollection(collectionName);\n}\n(async function () {\n  await createCollection();\n  await sleep(2000);\n  await insertData();\n  await sleep(10000);\n  await listener.close();\n  await deleteData();\n})();\n'))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'from c8 import C8Client\nimport threading\nimport pprint\nimport time\n\n# Variables - URLs\nGLOBAL_URL = "play.paas.macrometa.io"\n\n# Variables - DB\nEMAIL = "your@email.com"\nFABRIC = "_system"\nCOLLECTION_NAME = "ddos"\n\n# Variables - Data\ndata = [\n    {"ip": "10.1.1.1", "action": "block", "rule": "blacklistA"},\n    {"ip": "20.1.1.2", "action": "block", "rule": "blacklistA"},\n    {"ip": "30.1.1.3", "action": "block", "rule": "blacklistB"},\n    {"ip": "40.1.1.4", "action": "block", "rule": "blacklistA"},\n    {"ip": "50.1.1.5", "action": "block", "rule": "blacklistB"},\n]\n\npp = pprint.PrettyPrinter(indent=4)\n\nif __name__ == \'__main__\':\n\n    # Step1: Open connection to GDN. You will be routed to closest region.\n    print(f"\\n1. CONNECT: federation: {GLOBAL_URL},  user: {EMAIL}")\n    client = C8Client(protocol=\'https\', host=GLOBAL_URL, port=443, apikey="", geofabric=FABRIC)\n\n    # Step 2: Create a collection if one does not exist\n    print(f"\\n2. CREATE_COLLECTION: region: {GLOBAL_URL},  collection: {COLLECTION_NAME}")\n    if client.has_collection(COLLECTION_NAME):\n        collection = client.collection(COLLECTION_NAME)\n    else:\n        collection = client.create_collection(COLLECTION_NAME, stream=True)\n\n    # Subscribe to be notified when changes are made to collection.\n\n    def create_callback():\n        def callback_fn(event):\n            pp.pprint(event)\n            return\n\n        client.on_change(COLLECTION_NAME, callback=callback_fn, timeout=15)\n\n    # Step3: Subscribe to receive documents in realtime (PUSH model)\n    print(f"\\n3. SUBSCRIBE_COLLECTION: region: {GLOBAL_URL},  collection: {COLLECTION_NAME}")\n    rt_thread = threading.Thread(target=create_callback)\n    rt_thread.start()\n    time.sleep(10)\n    print(f"Callback registered for collection: {COLLECTION_NAME}")\n\n    # Step4: Subscribe to receive documents in realtime (PUSH model)\n    print(f"\\n4. INSERT_DOCUMENTS: region: {GLOBAL_URL},  collection: {COLLECTION_NAME}")\n    client.insert_document(COLLECTION_NAME, document=data)\n\n    # Step5: Wait to close the callback.\n    print("\\n5. Waiting to close callback")\n    rt_thread.join(2)\n\n    # Step6: Delete data.\n    print(f"\\n6. DELETE_DATA: region: {GLOBAL_URL}, collection: {COLLECTION_NAME}")\n    collection.truncate()\n    client.delete_collection(COLLECTION_NAME)\n')))))}d.isMDXComponent=!0}}]);