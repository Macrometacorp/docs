"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[43242],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),f=r,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34568:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:20,title:"Kafka Python Client"},i=void 0,s={unversionedId:"streams/kafka_on_gdn/kafka-python-client",id:"streams/kafka_on_gdn/kafka-python-client",title:"Kafka Python Client",description:"The Kafka-Python client library is designed to function much like the official Java client, with a sprinkling of Pythonic interfaces(e.g., consumer iterators). The library consists six different APIs via classes KafkaConsumer, KafkaProducer, KafkaAdminClient, KafkaClient, BrokerConnection, and ClusterMetadata.",source:"@site/docs/streams/kafka_on_gdn/kafka-python-client.md",sourceDirName:"streams/kafka_on_gdn",slug:"/streams/kafka_on_gdn/kafka-python-client",permalink:"/docs/streams/kafka_on_gdn/kafka-python-client",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/kafka_on_gdn/kafka-python-client.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Kafka Python Client"},sidebar:"defaultSidebar",previous:{title:"Kafka Java Client",permalink:"/docs/streams/kafka_on_gdn/kafka-java-client"},next:{title:"Confluent Python client",permalink:"/docs/streams/kafka_on_gdn/confluent-python-client"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Producer",id:"producer",level:2},{value:"Consumer",id:"consumer",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Kafka-Python client library is designed to function much like the official Java client, with a sprinkling of Pythonic interfaces(e.g., consumer iterators). The library consists six different APIs via classes KafkaConsumer, KafkaProducer, KafkaAdminClient, KafkaClient, BrokerConnection, and ClusterMetadata."),(0,r.kt)("p",null,"The KafkaProducer can be used across threads without issue, unlike the KafkaConsumer which cannot. While it is possible to use the KafkaConsumer in a thread-local manner, multiprocessing is recommended."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"The library needs Python 3.8+ installed. Find the installer at ",(0,r.kt)("a",{parentName:"p",href:"https://www.python.org/downloads/"},"Python.org"),"."),(0,r.kt)("p",null,"You can install the Kafka-Python library either via PyPi, using pip, or by building the library from source. For more information, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://pip.pypa.io/en/stable/installation/"},"pip documentation"),"."),(0,r.kt)("h2",{id:"producer"},"Producer"),(0,r.kt)("p",null,"You can instantiate a Producer object using a bunch of parameters."),(0,r.kt)("p",null,"The following example creates a Python producer for the ",(0,r.kt)("inlineCode",{parentName:"p"},"<c8globals or c8locals>.<my-topic>")," topic and sends five messages on that topic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import ssl\nfrom json import dumps\nfrom kafka import KafkaProducer\n\ncontext = ssl.create_default_context()\ncontext.check_hostname = False\ncontext.verify_mode = ssl.CERT_NONE\n\nproducer = KafkaProducer(bootstrap_servers=['<my-gdn>.<my-paas>.macrometa.io:9093'],\n                         security_protocol='SASL_SSL',\n                         sasl_mechanism='PLAIN',\n                         sasl_plain_username='<my-tenant>/<my-fabric>',\n                         sasl_plain_password='token:<my-api-key or my-JWT>',\n                         ssl_cafile=config['<path-to-ca.cert.pem-file>'],\n                         ssl_context=context,\n                         value_serializer=lambda x: dumps(x).encode('utf-8'))\n\nfor e in range(5):\n    data = {'number' : e}\n    producer.send('<c8globals or c8locals>.<my-topic>', value=data)\n    print('{} added'.format(e))\n")),(0,r.kt)("h2",{id:"consumer"},"Consumer"),(0,r.kt)("p",null,"The following example creates a consumer with the ",(0,r.kt)("inlineCode",{parentName:"p"},"<my-subscription>")," subscription name on the ",(0,r.kt)("inlineCode",{parentName:"p"},"<c8globals or c8locals>.<my-topic>"),' topic or multiple topics with global either local distribution. For example: KafkaConsumer("c8globals.topic-1", "c8locals.topic-2", bootstrap_servers=...). The listener receives incoming messages, prints the content and ID of messages that arrive.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import ssl\nfrom kafka import KafkaConsumer\nfrom json import loads\n\ncontext = ssl.create_default_context()\ncontext.check_hostname = False\ncontext.verify_mode = ssl.CERT_NONE\n\nconsumer = KafkaConsumer(\n    '<c8globals or c8locals>.<my-topic>',\n    bootstrap_servers=['<my-gdn>.<my-paas>.macrometa.io:9093'],\n    auto_offset_reset='earliest',\n    enable_auto_commit=True,\n    group_id='<my-subscription>',\n    security_protocol='SASL_SSL',\n    sasl_mechanism='PLAIN',\n    sasl_plain_username='<my-tenant>/<my-fabric>',\n    sasl_plain_password='token:<my-api-key or my-JWT>',\n    ssl_cafile=config['<path-to-ca.cert.pem-file>'],\n    ssl_context=context,\n    value_deserializer=lambda x: loads(x.decode('utf-8')))\n\nfor message in consumer:\n    message = message.value\n    print('{} added'.format(message))\n")))}m.isMDXComponent=!0}}]);