"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[54019],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>c});var r=a(67294);function t(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){t(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var s=r.createContext({}),p=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),c=t,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return a?r.createElement(f,l(l({ref:n},u),{},{components:a})):r.createElement(f,l({ref:n},u))}));function c(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:t,l[1]=o;for(var p=2;p<i;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},50425:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=a(87462),t=(a(67294),a(3905));const i={sidebar_position:12,title:"Array Operators"},l=void 0,o={unversionedId:"queryworkers/c8ql/array-operators",id:"queryworkers/c8ql/array-operators",title:"Array Operators",description:"Array expansion",source:"@site/docs/queryworkers/c8ql/array-operators.md",sourceDirName:"queryworkers/c8ql",slug:"/queryworkers/c8ql/array-operators",permalink:"/docs/queryworkers/c8ql/array-operators",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/array-operators.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,title:"Array Operators"},sidebar:"defaultSidebar",previous:{title:"Graph Traversals",permalink:"/docs/queryworkers/c8ql/graphs/traversals"},next:{title:"Common Errors",permalink:"/docs/queryworkers/c8ql/common-errors"}},s={},p=[{value:"Array expansion",id:"array-expansion",level:2},{value:"Array contraction",id:"array-contraction",level:2},{value:"Inline expressions",id:"inline-expressions",level:2},{value:"Inline filter",id:"inline-filter",level:3},{value:"Inline limit",id:"inline-limit",level:3},{value:"Inline projection",id:"inline-projection",level:3}],u={toc:p};function d(e){let{components:n,...a}=e;return(0,t.kt)("wrapper",(0,r.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h2",{id:"array-expansion"},"Array expansion"),(0,t.kt)("p",null,"In order to access a named attribute from all elements in an array easily, C8QL offers the shortcut operator ",(0,t.kt)("inlineCode",{parentName:"p"},"[*]")," for array variable expansion."),(0,t.kt)("p",null,"Using the ",(0,t.kt)("inlineCode",{parentName:"p"},"[*]")," operator with an array variable will iterate over all elements in the array, thus allowing to access a particular attribute of each element.  It is required that the expanded variable is an array.  The result of the ",(0,t.kt)("inlineCode",{parentName:"p"},"[*]")," operator is again an array."),(0,t.kt)("p",null,"To demonstrate the array expansion operator, let's go on with the following three example ",(0,t.kt)("em",{parentName:"p"},"users")," documents:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    name: "john",\n    age: 35,\n    friends: [\n      { name: "tina", age: 43 },\n      { name: "helga", age: 52 },\n      { name: "alfred", age: 34 }\n    ]\n  },\n  {\n    name: "yves",\n    age: 24,\n    friends: [\n      { name: "sergei", age: 27 },\n      { name: "tiffany", age: 25 }\n    ]\n  },\n  {\n    name: "sandra",\n    age: 40,\n    friends: [\n      { name: "bob", age: 32 },\n      { name: "elena", age: 48 }\n    ]\n  }\n]\n')),(0,t.kt)("p",null,"With the ",(0,t.kt)("inlineCode",{parentName:"p"},"[*]")," operator it becomes easy to query just the names of the friends for each user:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-sql"},"FOR u IN users\n  RETURN { name: u.name, friends: u.friends[*].name }\n")),(0,t.kt)("p",null,"This will produce:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "name" : "john", "friends" : [ "tina", "helga", "alfred" ] },\n  { "name" : "yves", "friends" : [ "sergei", "tiffany" ] },\n  { "name" : "sandra", "friends" : [ "bob", "elena" ] }\n]\n')),(0,t.kt)("p",null,"This is a shortcut for the longer, semantically equivalent query:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  RETURN { name: u.name, friends: (FOR f IN u.friends RETURN f.name) }\n")),(0,t.kt)("h2",{id:"array-contraction"},"Array contraction"),(0,t.kt)("p",null,"In order to collapse (or flatten) results in nested arrays, C8QL provides the ",(0,t.kt)("inlineCode",{parentName:"p"},"[**]")," operator. It works similar to the ",(0,t.kt)("inlineCode",{parentName:"p"},"[*]")," operator, but additionally collapses nested arrays."),(0,t.kt)("p",null,"How many levels are collapsed is determined by the amount of asterisk characters used. ",(0,t.kt)("inlineCode",{parentName:"p"},"[**]")," collapses one level of nesting - just like ",(0,t.kt)("inlineCode",{parentName:"p"},"FLATTEN(array)")," or ",(0,t.kt)("inlineCode",{parentName:"p"},"FLATTEN(array, 1)")," would do -, ",(0,t.kt)("inlineCode",{parentName:"p"},"[***]")," collapses two levels - the equivalent to ",(0,t.kt)("inlineCode",{parentName:"p"},"FLATTEN(array, 2)")," - and so on."),(0,t.kt)("p",null,"Let's compare the array expansion operator with an array contraction operator. For example, the following query produces an array of friend names per user:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  RETURN u.friends[*].name\n")),(0,t.kt)("p",null,"As we have multiple users, the overall result is a nested array:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  [\n    "tina",\n    "helga",\n    "alfred"\n  ],\n  [\n    "sergei",\n    "tiffany"\n  ],\n  [\n    "bob",\n    "elena"\n  ]\n]\n')),(0,t.kt)("p",null,"If the goal is to get rid of the nested array, we can apply the ",(0,t.kt)("inlineCode",{parentName:"p"},"[**]")," operator on the result. But simply appending ",(0,t.kt)("inlineCode",{parentName:"p"},"[**]")," to the query won't help, because ",(0,t.kt)("em",{parentName:"p"},"u.friends")," is not a nested (multi-dimensional) array, but a simple (one-dimensional) array. Still, the ",(0,t.kt)("inlineCode",{parentName:"p"},"[**]")," can be used if it has access to a multi-dimensional nested result."),(0,t.kt)("p",null,"We can extend above query as follows and still create the same nested result:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"RETURN (\n  FOR u IN users RETURN u.friends[*].name\n)\n")),(0,t.kt)("p",null,"By now appending the ",(0,t.kt)("inlineCode",{parentName:"p"},"[**]")," operator at the end of the query..."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"RETURN (\n  FOR u IN users RETURN u.friends[*].name\n)[**]\n")),(0,t.kt)("p",null,"... the query result becomes:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  [\n    "tina",\n    "helga",\n    "alfred",\n    "sergei",\n    "tiffany",\n    "bob",\n    "elena"\n  ]\n]\n')),(0,t.kt)("p",null,"Note that the elements are not de-duplicated. For a flat array with only unique elements, a combination of ",(0,t.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/array"},"UNIQUE()")," and ",(0,t.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/array"},"FLATTEN()")," is advisable."),(0,t.kt)("h2",{id:"inline-expressions"},"Inline expressions"),(0,t.kt)("p",null,"It is possible to filter elements while iterating over an array, to limit the amount of returned elements and to create a projection using the current array element. Sorting is not supported by this shorthand form."),(0,t.kt)("p",null,"These inline expressions can follow array expansion and contraction operators ",(0,t.kt)("inlineCode",{parentName:"p"},"[\\* ...]"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"[\\*\\* ...]")," etc. The keywords ",(0,t.kt)("inlineCode",{parentName:"p"},"FILTER"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"LIMIT")," and ",(0,t.kt)("inlineCode",{parentName:"p"},"RETURN")," must occur in this order if they are used in combination, and can only occur once:"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"anyArray[* FILTER conditions LIMIT skip,limit RETURN projection]")),(0,t.kt)("p",null,"Example with nested numbers and array contraction:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"LET arr = [ [ 1, 2 ], 3, [ 4, 5 ], 6 ]\nRETURN arr[** FILTER CURRENT % 2 == 0]\n")),(0,t.kt)("p",null,"All even numbers are returned in a flat array:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},"[\n  [ 2, 4, 6 ]\n]\n")),(0,t.kt)("p",null,"Complex example with multiple conditions, limit and projection:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n    RETURN {\n        name: u.name,\n        friends: u.friends[* FILTER CONTAINS(CURRENT.name, "a") AND CURRENT.age > 40\n            LIMIT 2\n            RETURN CONCAT(CURRENT.name, " is ", CURRENT.age)\n        ]\n    }\n')),(0,t.kt)("p",null,"No more than two computed strings based on ",(0,t.kt)("em",{parentName:"p"},"friends")," with an ",(0,t.kt)("inlineCode",{parentName:"p"},"a")," in their name and older than 40 years are returned per user:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "name": "john",\n    "friends": [\n      "tina is 43",\n      "helga is 52"\n    ]\n  },\n  {\n    "name": "sandra",\n    "friends": [\n      "elena is 48"\n    ]\n  },\n  {\n    "name": "yves",\n    "friends": []\n  }\n]\n')),(0,t.kt)("h3",{id:"inline-filter"},"Inline filter"),(0,t.kt)("p",null,"To return only the names of friends that have an ",(0,t.kt)("inlineCode",{parentName:"p"},"age")," value higher than the user herself, an inline ",(0,t.kt)("inlineCode",{parentName:"p"},"FILTER")," can be used:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  RETURN { name: u.name, friends: u.friends[* FILTER CURRENT.age > u.age].name }\n")),(0,t.kt)("p",null,"The pseudo-variable ",(0,t.kt)("inlineCode",{parentName:"p"},"CURRENT")," can be used to access the current array element. The ",(0,t.kt)("inlineCode",{parentName:"p"},"FILTER")," condition can refer to ",(0,t.kt)("inlineCode",{parentName:"p"},"CURRENT")," or any variables valid in the outer scope."),(0,t.kt)("h3",{id:"inline-limit"},"Inline limit"),(0,t.kt)("p",null,"The number of elements returned can be restricted with ",(0,t.kt)("inlineCode",{parentName:"p"},"LIMIT"),". It works the same as the ",(0,t.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/limit"},"limit operation"),". ",(0,t.kt)("inlineCode",{parentName:"p"},"LIMIT")," must come after ",(0,t.kt)("inlineCode",{parentName:"p"},"FILTER")," and before ",(0,t.kt)("inlineCode",{parentName:"p"},"RETURN"),", if they are present."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  RETURN { name: u.name, friends: u.friends[* LIMIT 1].name }\n")),(0,t.kt)("p",null,"Above example returns one friend each:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "name": "john", "friends": [ "tina" ] },\n  { "name": "sandra", "friends": [ "bob" ] },\n  { "name": "yves", "friends": [ "sergei" ] }\n]\n')),(0,t.kt)("p",null,"A number of elements can also be skipped and up to ",(0,t.kt)("em",{parentName:"p"},"n")," returned:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  RETURN { name: u.name, friends: u.friends[* LIMIT 1,2].name }\n")),(0,t.kt)("p",null,"The example query skips the first friend and returns two friends at most per user:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "name": "john", "friends": [ "helga", "alfred" ] },\n  { "name": "sandra", "friends": [ "elena" ] },\n  { "name": "yves", "friends": [ "tiffany" ] }\n]\n')),(0,t.kt)("h3",{id:"inline-projection"},"Inline projection"),(0,t.kt)("p",null,"To return a projection of the current element, use ",(0,t.kt)("inlineCode",{parentName:"p"},"RETURN"),". If a ",(0,t.kt)("inlineCode",{parentName:"p"},"FILTER")," is also present, ",(0,t.kt)("inlineCode",{parentName:"p"},"RETURN")," must come later."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'FOR u IN users\n  RETURN u.friends[* RETURN CONCAT(CURRENT.name, " is a friend of ", u.name)]\n')),(0,t.kt)("p",null,"The above will return:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-json"},'[\n  [\n    "tina is a friend of john",\n    "helga is a friend of john",\n    "alfred is a friend of john"\n  ],\n  [\n    "sergei is a friend of yves",\n    "tiffany is a friend of yves"\n  ],\n  [\n    "bob is a friend of sandra",\n    "elena is a friend of sandra"\n  ]\n]\n')))}d.isMDXComponent=!0}}]);