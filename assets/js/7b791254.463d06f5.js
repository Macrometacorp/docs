"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19380],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),i=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=i(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=i(t),d=o,g=p["".concat(c,".").concat(d)]||p[d]||u[d]||r;return t?a.createElement(g,s(s({ref:n},m),{},{components:t})):a.createElement(g,s({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var i=2;i<r;i++)s[i]=t[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>s});var a=t(67294),o=t(34334);const r="tabItem_Ymn6";function s(e){let{children:n,hidden:t,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,s),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>d});var a=t(87462),o=t(67294),r=t(34334),s=t(72389),l=t(67392),c=t(7094),i=t(12466);const m="tabList__CuJ",u="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:s,values:p,groupId:d,className:g}=e,h=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=p??h.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),f=(0,l.l)(y,((e,n)=>e.value===n.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===s?s:s??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==b&&!y.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:C,setTabGroupChoices:N}=(0,c.U)(),[E,T]=(0,o.useState)(b),x=[],{blockElementScrollPositionUntilNextRender:k}=(0,i.o5)();if(null!=d){const e=C[d];null!=e&&e!==E&&y.some((n=>n.value===e))&&T(e)}const w=e=>{const n=e.currentTarget,t=x.indexOf(n),a=y[t].value;a!==E&&(k(n),T(a),null!=d&&N(d,String(a)))},I=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}n?.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",m)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},g)},y.map((e=>{let{value:n,label:t,attributes:s}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===n?0:-1,"aria-selected":E===n,key:n,ref:e=>x.push(e),onKeyDown:I,onFocus:w,onClick:w},s,{className:(0,r.Z)("tabs__item",u,s?.className,{"tabs__item--active":E===n})}),t??n)}))),n?(0,o.cloneElement)(h.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==E})))))}function d(e){const n=(0,s.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}},65379:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=t(87462),o=(t(67294),t(3905)),r=t(65488),s=t(85162);const l={title:"Document Store Example",sidebar_position:90},c=void 0,i={unversionedId:"collections/documents/document-store-example",id:"collections/documents/document-store-example",title:"Document Store Example",description:"This page provides an example of how to create and use a document store using code.",source:"@site/docs/collections/documents/document-store-example.md",sourceDirName:"collections/documents",slug:"/collections/documents/document-store-example",permalink:"/docs/collections/documents/document-store-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/collections/documents/document-store-example.md",tags:[],version:"current",sidebarPosition:90,frontMatter:{title:"Document Store Example",sidebar_position:90},sidebar:"defaultSidebar",previous:{title:"Document Store Stream",permalink:"/docs/collections/documents/document-store-stream"},next:{title:"Quickstart",permalink:"/docs/collections/documents/tutorials/working-with-documents"}},m={},u=[{value:"SDK download",id:"sdk-download",level:2},{value:"Connect to GDN",id:"connect-to-gdn",level:2},{value:"Get GeoFabric Details",id:"get-geofabric-details",level:2},{value:"Create Collection",id:"create-collection",level:2},{value:"Create Index",id:"create-index",level:2},{value:"Insert Documents",id:"insert-documents",level:2},{value:"Query documents using C8QL",id:"query-documents-using-c8ql",level:2},{value:"Get realtime updates",id:"get-realtime-updates",level:2},{value:"Query as API",id:"query-as-api",level:2}],p={toc:u};function d(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This page provides an example of how to create and use a document store using code."),(0,o.kt)("p",null,"Assume the following credentials for this example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tenant name is ",(0,o.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com"),"."),(0,o.kt)("li",{parentName:"ul"},"User password is ",(0,o.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,o.kt)("h2",{id:"sdk-download"},"SDK download"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"\n  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the SDK outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,o.kt)("h2",{id:"connect-to-gdn"},"Connect to GDN"),(0,o.kt)("p",null,"The first step in using GDN is to establish a connection to a region. When this code executes, it initializes the server connection to the *",(0,o.kt)("em",{parentName:"p"},"closest")," region to your location."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'play.paas.macrometa.io'\nEMAIL ='nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\nconst fabric = "_system";\n\nconst client = new jsc8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n')))),(0,o.kt)("h2",{id:"get-geofabric-details"},"Get GeoFabric Details"),(0,o.kt)("p",null,"To get details of fabric,"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'play.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Getting GeoFabric details...\")\nprint(client.get_fabric_details())\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst client = new jsc8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\n\nasync function getFabric () {\n  await client\n    .login(email, password)\n    .then(() => console.log("1. User authentication done!"))\n    .catch((error) => messageHandler(error));\n\n  console.log("2. Getting the details of fabric: " + fabric);\n  await client\n    .get()\n    .then((fabricDetails) => console.log(fabricDetails))\n    .catch((error) => messageHandler(error));\n}\n\ngetFabric()\n  .then()\n  .catch((error) => messageHandler(error));\n')))),(0,o.kt)("h2",{id:"create-collection"},"Create Collection"),(0,o.kt)("p",null,"We can now create collection in the fabric. To do this, first you connect to fabric and then create a collection called ",(0,o.kt)("inlineCode",{parentName:"p"},"employees"),"."),(0,o.kt)("p",null,"The below example shows the steps."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'play.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Creating collection\u2026\")\n\nclient.create_collection(name=COLLECTION_NAME, stream=True)\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsC8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst collectionName = "employees";\nconst client = new jsC8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum,\n  };\n  console.log(message);\n}\n\nasync function createCollection () {\n  await client\n    .login(email, password)\n    .then(() => console.log("1. User authentication done!"))\n    .catch((error) => messageHandler(error));\n\n  console.log(\n    "2. Creating collection " + collectionName + " in " + fabric + " fabric"\n  );\n  await client\n    .createCollection(collectionName, {\n      stream: true,\n      waitForSync: false,\n      isLocal: false\n    })\n    .then((collectionDetails) => {\n      console.log(\n        "Collection " + collectionDetails.name + " created successfully"\n      );\n      console.log(collectionDetails);\n    })\n    .catch((error) => messageHandler(error));\n}\n\ncreateCollection()\n  .then()\n  .catch((error) => messageHandler(error));\n')))),(0,o.kt)("h2",{id:"create-index"},"Create Index"),(0,o.kt)("p",null,"Let's add a ",(0,o.kt)("inlineCode",{parentName:"p"},"hash_index")," called emails to our collection employees. Please refer to reference guide for details on other available index types."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'play.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\nFIELDS = ['email', 'name']\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Adding hash index...\")\n\nclient.add_hash_index(COLLECTION_NAME, fields=FIELDS, unique=False)      \n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst collectionName = "employees";\nconst client = new jsc8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\n\nasync function createIndex () {\n  await client\n    .login(email, password)\n    .then(() => console.log("1. User authentication done!"))\n    .catch((error) => messageHandler(error));\n\n  console.log(\n    "2. Creating index on collection " +\n      collectionName +\n      " in " +\n      fabric +\n      " Fabric"\n  );\n  await client\n    .addHashIndex(collectionName, ["email", "_key"])\n    .then((hashIndex) => {\n      console.log("3. Index details: ");\n      console.log(hashIndex);\n    })\n    .catch((error) => messageHandler(error));\n}\n\ncreateIndex()\n  .then()\n  .catch((error) => messageHandler(error));\n')))),(0,o.kt)("h2",{id:"insert-documents"},"Insert Documents"),(0,o.kt)("p",null,"Let's insert documents to the employees collection as shown below."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'play.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\nDOCS = [\n    {'_key':'James', 'firstname': 'James', 'lastname':'Kirk', 'email':'james.kirk@macrometa.io'},\n    {'_key': 'Han', 'firstname': 'Han', 'lastname':'Solo', 'email':'han.solo@macrometa.io'},\n    {'_key': 'Bruce', 'firstname': 'Bruce', 'lastname':'Wayne', 'email':'bruce.wayne@macrometa.io'}\n  ]\n\nprint(\"--- Connecting to C8\")\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\nprint(\"Inserting documents...\")\n\nclient.insert_document(collection_name=COLLECTION_NAME, document=DOCS)\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst collectionName = "employees";\nconst client = new jsc8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n\n// Variables\nconst docJean = {\n  _key: "Jean",\n  firstname: "Jean",\n  lastname: "Picard",\n  email: "jean.picard@macrometa.io"\n};\n\nconst docJames = {\n  _key: "James",\n  firstname: "James",\n  lastname: "Kirk",\n  email: "james.kirk@macrometa.io"\n};\n\nconst docHan = {\n  _key: "Han",\n  firstname: "Han",\n  lastname: "Solo",\n  email: "han.solo@macrometa.io"\n};\n\nconst docBruce = {\n  _key: "Bruce",\n  firstname: "Bruce",\n  lastname: "Wayne",\n  email: "bruce.wayne@macrometa.io"\n};\n\nconst docs = [docJean, docJames, docHan, docBruce];\n\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\n\nasync function insertDataInCollection () {\n  await client\n    .login(email, password)\n    .then((e) => console.log("1. User authentication done!"))\n    .catch((error) => messageHandler(error));\n  console.log("2. Insert documents into collection " + collectionName);\n  await client\n    .insertDocumentMany(collectionName, docs)\n    .then((documentsDetails) => {\n      console.log(documentsDetails);\n      console.log("Documents inserted into collection " + collectionName);\n    })\n    .catch((error) => messageHandler(error));\n}\n\ninsertDataInCollection()\n  .then()\n  .catch((error) => messageHandler(error));\n')))),(0,o.kt)("h2",{id:"query-documents-using-c8ql"},"Query documents using C8QL"),(0,o.kt)("p",null,"C8QL is C8's query language. You can execute C8QL query on our newly created collection employees to get its contents."),(0,o.kt)("p",null,"The query ",(0,o.kt)("inlineCode",{parentName:"p"},"FOR employee IN employees RETURN employee")," is equivalent to SQL's SELECT query."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'play.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nQUERY = 'FOR employee IN employees RETURN employee'\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\ncursor = client.execute_query(QUERY)\ndocs = [document for document in cursor]\nprint(f\"Response from Query: {docs}\")\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsC8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst query = "FOR employee IN employees RETURN employee";\nconst client = new jsC8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\n\nasync function c8Queries() {\n  await client\n    .login(email, password)\n    .then((e) => console.log("1. User authentication done!"))\n    .catch((error) => messageHandler(error));\n\n  console.log("2. Executing query");\n  await client\n    .executeQuery(query)\n    .then((queryResult) => console.log(queryResult))\n    .catch((error) => messageHandler(error));\n}\n\nc8Queries()\n  .then()\n  .catch((error) => messageHandler(error));\n')))),(0,o.kt)("h2",{id:"get-realtime-updates"},"Get realtime updates"),(0,o.kt)("p",null,"Example for real-time updates from a collection in fabric:"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Enable the 'Stream' parameter within the collection to get real-time updates.")),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\nHOST = 'play.paas.macrometa.io'\nEMAIL = 'nemo@nautilus.com'\nPASSWORD = 'xxxxx'\nGEOFABRIC = '_system'\nCOLLECTION_NAME = 'employees'\n\nclient = C8Client(protocol='https', host=HOST, port=443,\n                          email=EMAIL, password=PASSWORD,\n                          geofabric=GEOFABRIC)\n\ndef callback_fn(event):\n    print(event)\n\nclient.on_change(COLLECTION_NAME, callback=callback_fn)\n"))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const jsC8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst collectionName = "employees";\nconst client = new jsC8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric,\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n\nfunction messageHandler(error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum,\n  };\n  console.log(message);\n}\n\nasync function callback_fn(collection) {\n  console.log("Connection open on ", collection.name);\n}\n\nasync function realTimeListener() {\n  await client\n    .login(email, password)\n    .then((e) => console.log("1. User authentication done!"))\n    .catch((error) => messageHandler(error));\n\n  await client\n    .onCollectionChange(collectionName)\n    .then((listener) => {\n      listener.on("message", (msg) => console.log("message=>", msg));\n      listener.on("open", () => {\n        callback_fn(collectionName).then((e) => console.log(e));\n      });\n      listener.on("close", () => console.log("connection closed"));\n    })\n    .catch((error) => error);\n}\n\nrealTimeListener()\n  .then()\n  .catch((error) => messageHandler(error));\n')))),(0,o.kt)("h2",{id:"query-as-api"},"Query as API"),(0,o.kt)("p",null,"Query as API (aka RESTQL) enables developers to quickly convert saved C8QL queries into geo-distributed REST APIs. This eliminates the need for separate backend servers & containers for CRUD operations."),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'import time\nfrom c8 import C8Client\n\nHTTP_URL = "play.paas.macrometa.io"\nGUEST_MAIL = "nemo@nautilus.com"\nGUEST_PASSWORD = "xxxxxx"\nGEO_FABRIC = "_system"\nCOLLECTION_NAME = "person"\n\nVALUE = "INSERT {\'firstname\':@firstname, \'lastname\':@lastname, \'email\':@email, \'zipcode\':@zipcode, \'_key\': \'abc\'} IN %s" % COLLECTION_NAME\nPARAMETER = {"firstname": "", "lastname": "", "email": "", "zipcode": ""}\n\nINSERT_DATA = {"query": {"name": "insertRecord", "parameter": PARAMETER, "value": VALUE}} \nGET_DATA = {"query": {"name": "getRecords", "value": "FOR doc IN %s RETURN doc" % COLLECTION_NAME}}\nUPDATE_DATA = {"query": {"name": "updateRecord", "value": "UPDATE \'abc\' WITH { \\"lastname\\": \\"cena\\" } IN %s" % COLLECTION_NAME }}\nDELETE_DATA = {"query": {"name": "deleteRecord", "value": "REMOVE \'abc\' IN %s" % COLLECTION_NAME}}\nGET_COUNT = {"query": {"name": "countRecords", "value": "RETURN COUNT(FOR doc IN %s RETURN 1)" % COLLECTION_NAME}}\n\nif __name__ == \'__main__\':\n\n    print("\\n ------- CONNECTION SETUP  ------")\n    print(f"tenant: {GUEST_MAIL}, geofabric:{GEO_FABRIC}")\n    client = C8Client(protocol=\'https\', host=HTTP_URL, port=443,\n                    email=GUEST_MAIL, password=GUEST_PASSWORD,\n                    geofabric=GEO_FABRIC)    \n\n    print("\\n ------- CREATE GEO-REPLICATED COLLECTION  ------")\n    if client.has_collection(COLLECTION_NAME):\n        print("Collection exists")\n    else:\n        employees = client.create_collection(COLLECTION_NAME, stream=True)\n    print(f"Created collection: {COLLECTION_NAME}")\n\n    print("\\n ------- CREATE RESTQLs  ------")\n    client.create_restql(INSERT_DATA)  # name: insertRecord\n    client.create_restql(GET_DATA)  # name: getRecords\n    client.create_restql(UPDATE_DATA)  # name: updateRecord\n    client.create_restql(DELETE_DATA)  # name: deleteRecord\n    client.create_restql(GET_COUNT)  # name: countRecords\n    print(f"Created RESTQLs:{client.get_restqls}")\n\n    time.sleep(3)\n    print("\\n ------- EXECUTE RESTQLs ------")\n    print("Insert data....")\n    response = client.execute_restql(\n        "insertRecord",\n        {"bindVars": {"firstname": "john", "lastname": "doe",\n                      "email": "john.doe@macrometa.io", "zipcode": "511037"}})\n    print(response)\n\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n\n    print("Update data....")\n    response = client.execute_restql("updateRecord")\n    print(response)\n\n    print("Get data....")\n    response = client.execute_restql("getRecords")\n    print(response)\n\n    print("Count records....")\n    response = client.execute_restql("countRecords")\n    print(response)\n\n    print("Delete data....")\n    response = client.execute_restql("deleteRecord")\n    print(response)\n\n    print("\\n ------- DELETE RESTQLs ------")\n    client.delete_restql("insertRecord")\n    client.delete_restql("getRecords")\n    client.delete_restql("updateRecord")\n    client.delete_restql("countRecords")\n    client.delete_restql("deleteRecord")\n\n    print("\\n ------- DONE  ------")\n'))),(0,o.kt)(s.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},' const jsc8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst client = new jsc8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or use one of the following authentication methods and remove the commenting.\n// Create an authenticated instance with a JWT token.\n// const clientUsingJwt = new jsc8({url: "https://play.paas.macrometa.io" , token: "XXXX" , fabricName: fabric});\n// Create an authenticated instance with an API key.\n// const clientUsingApiKey = new jsc8({url: "https://play.paas.macrometa.io" , apiKey: "XXXX" , fabricName: fabric });\n\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum,\n  };\n  console.log(message);\n}\n\n//Variables\nconst collectionName = "employees";\n\n//Queries\nconst insertData =\n  "INSERT {\'firstname\':@firstname, \'lastname\':@lastname, \'email\':@email, \'zipcode\':@zipcode, \'_key\': \'abc\'} IN " +\n  collectionName;\n\nconst getData = "FOR doc IN " + collectionName + " RETURN doc";\n\nconst updateData =\n  "UPDATE \'abc\' WITH {\'lastname\': @lastname } IN " + collectionName;\n\nconst deleteData = "REMOVE \'abc\' IN " + collectionName;\n\nconst getCount = "RETURN COUNT(FOR doc IN " + collectionName + " RETURN 1)";\n\nasync function restqldemo () {\n  await client\n    .login(email, password)\n    .then(() => console.log("\\n1. User authentication done!"))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n------- SAVING THE QUERIES  ------");\n\n  await client\n    .createRestql("insertData", insertData, {})\n    .then((restQl) => {\n      console.log("2. " + restQl.result.name + "query created.");\n    })\n    .catch((error) => messageHandler(error));\n  await client\n    .createRestql("getData", getData, {})\n    .then((restQl) =>\n      console.log("3. " + restQl.result.name + "query created.")\n    )\n    .catch((error) => messageHandler(error));\n  await client\n    .createRestql("updateData", updateData, {})\n    .then((restQl) =>\n      console.log("4. " + restQl.result.name + "query created.")\n    )\n    .catch((error) => messageHandler(error));\n  await client\n    .createRestql("deleteData", deleteData, {})\n    .then((restQl) =>\n      console.log("5. " + restQl.result.name + "query created.")\n    )\n    .catch((error) => messageHandler(error));\n  await client\n    .createRestql("getCount", getCount, {})\n    .then((restQl) =>\n      console.log("6. " + restQl.result.name + "query created.")\n    )\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n------- RUNNING THE QUERIES  ------");\n\n  const bindVars = {\n    firstname: "john",\n    lastname: "doe",\n    email: "john.doe@macrometa.io",\n    zipcode: "511037",\n  };\n\n  await client\n    .executeRestql("insertData", bindVars)\n    .then(() => console.log("\\n7. Data inserted."))\n    .catch((error) => messageHandler(error));\n\n  await client\n    .executeRestql("getData")\n    .then((res) => {\n      console.log("\\n8. getData query result: ");\n      console.log(res.result);\n    })\n    .catch((error) => messageHandler(error));\n\n  await client\n    .executeRestql("updateData", { lastname: "mathews" })\n    .then(() => console.log("\\n9. Data updated."))\n    .catch((error) => messageHandler(error));\n\n  await client\n    .executeRestql("getData")\n    .then((res) => {\n      console.log("\\n10. Updated getData query output: ");\n      console.log(res.result);\n    })\n    .catch((error) => messageHandler(error));\n\n  await client\n    .executeRestql("getCount")\n    .then((res) => {\n      console.log("\\n11. Count: " + res.result);\n    })\n    .catch((error) => messageHandler(error));\n\n  await client\n    .executeRestql("deleteData")\n    .then(() => console.log("\\n12. DeleteData query executed."))\n    .catch((error) => messageHandler(error));\n}\n\nrestqldemo()\n  .then(console.log("Starting execution"))\n  .catch((error) => messageHandler(error));\n')))))}d.isMDXComponent=!0}}]);