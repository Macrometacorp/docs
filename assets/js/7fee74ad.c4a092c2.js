"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52826],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=d(n),c=a,g=m["".concat(s,".").concat(c)]||m[c]||u[c]||l;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var d=2;d<l;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},34559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const l={title:"redis (Store)"},o=void 0,i={unversionedId:"cep/query-guide/functions/store/redis",id:"cep/query-guide/functions/store/redis",title:"redis (Store)",description:"This extension assigns data source and connection instructions to event",source:"@site/docs/cep/query-guide/functions/store/redis.md",sourceDirName:"cep/query-guide/functions/store",slug:"/cep/query-guide/functions/store/redis",permalink:"/docs/cep/query-guide/functions/store/redis",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/store/redis.md",tags:[],version:"current",frontMatter:{title:"redis (Store)"},sidebar:"defaultSidebar",previous:{title:"rdbms (Store)",permalink:"/docs/cep/query-guide/functions/store/rdbms"},next:{title:"charAt (Function)",permalink:"/docs/cep/query-guide/functions/str/charAt"}},s={},d=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2}],p={toc:d};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This extension assigns data source and connection instructions to event\ntables. It also implements read write operations on connected\ndatasource. This extension only can be used to read the data which\npersisted using the same extension since unique implementation has been\nused to map the relational data in to redis's key and value\nrepresentation"),(0,a.kt)("p",null,"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'@PrimaryKey("PRIMARY_KEY")\n@Index("INDEX")\nCREATE STORE <NAME> WITH (type="redis", table.name="<STRING>", cluster.mode="<BOOL>", nodes="<STRING>", ttl.seconds="<LONG>", ttl.on.update="<BOOL>", ttl.on.read="<BOOL>")\n')),(0,a.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"table.name"),(0,a.kt)("td",{parentName:"tr",align:null},"The name with which the event table should be persisted in the store. If noname is specified via this parameter, the event table is persisted with the same name as the Stream App table."),(0,a.kt)("td",{parentName:"tr",align:null},"The tale name defined in the stream processor app"),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cluster.mode"),(0,a.kt)("td",{parentName:"tr",align:null},"This will decide the redis mode. if this is false, client will connect to a single redis node."),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"nodes"),(0,a.kt)("td",{parentName:"tr",align:null},'host, port and the password of the node(s).In single node mode node details can be provided as follows- "node=',(0,a.kt)("inlineCode",{parentName:"td"},"hosts:port\\@password"),'\\ In clustered mode host and port of all the master nodes should be provided separated by a comma(,). As an example "nodes = ',(0,a.kt)("inlineCode",{parentName:"td"},"localhost:30001,localhost:30002"),'".'),(0,a.kt)("td",{parentName:"tr",align:null},"localhost:6379\\@root"),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ttl.seconds"),(0,a.kt)("td",{parentName:"tr",align:null},"Time to live in seconds for each record"),(0,a.kt)("td",{parentName:"tr",align:null},"-1"),(0,a.kt)("td",{parentName:"tr",align:null},"LONG"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ttl.on.update"),(0,a.kt)("td",{parentName:"tr",align:null},"Set ttl on row update"),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ttl.on.read"),(0,a.kt)("td",{parentName:"tr",align:null},"Set ttl on read rows"),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE STORE fooTable WITH (type='redis',nodes='localhost:6379@root',table.name='fooTable',cluster.mode=false) (time long, date String)\n")),(0,a.kt)("p",null,"Above example will create a redis table with the name fooTable and work\non asingle redis node."),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@Store(type='redis', table.name='SweetProductionTable', nodes='localhost:30001,localhost:30002,localhost:30003', cluster.mode='true')\n@primaryKey('symbol')\n@index('price')\nCREATE STORE SweetProductionTable (symbol string, price float, volume long);\n")),(0,a.kt)("p",null,"Above example demonstrate how to use the redis extension to connect in\nto redis cluster. Please note that, as nodes all the master node's host\nand port should be provided in order to work correctly. In clustered\nnode password will not besupported"),(0,a.kt)("h2",{id:"example-3"},"Example 3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE STORE fooTable WITH (type='redis',nodes='localhost:6379@root',table.name='fooTable', ttl.seconds='30', ttl.onUpdate='true', ttl.onRead='true') (time long, date String)\n")),(0,a.kt)("p",null,"Above example will create a redis table with the name fooTable and work\non asingle redis node. All rows inserted, updated or read will have its\nttl set to 30 seconds"))}u.isMDXComponent=!0}}]);