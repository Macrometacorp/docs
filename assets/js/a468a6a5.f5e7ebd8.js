"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[978],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?a.createElement(f,l(l({ref:t},c),{},{components:n})):a.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93187:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:30,title:"Search View with Nested Fields"},l=void 0,o={unversionedId:"search/views/create-search-views-nested",id:"search/views/create-search-views-nested",title:"Search View with Nested Fields",description:"If you want to create search views for lower-level fields, then you can use the GDN API with JSON.",source:"@site/docs/search/views/create-search-views-nested.md",sourceDirName:"search/views",slug:"/search/views/create-search-views-nested",permalink:"/docs/search/views/create-search-views-nested",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/search/views/create-search-views-nested.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Search View with Nested Fields"},sidebar:"defaultSidebar",previous:{title:"Create a Search View",permalink:"/docs/search/views/create-search-views"},next:{title:"Integration",permalink:"/docs/search/views/integration"}},s={},p=[{value:"Create JSON Object",id:"create-json-object",level:2},{value:"Example cURL Request",id:"example-curl-request",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If you want to create search views for lower-level fields, then you can use the GDN API with JSON."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We recommend familiarizing yourself with JSON and the GDN API before continuing.")),(0,r.kt)("p",null,"Create a search view by making a call to this GDN API endpoint:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"https://api-play.paas.macrometa.io/_fabric/{your-fabric-name}/_api/search/view")),(0,r.kt)("h2",{id:"create-json-object"},"Create JSON Object"),(0,r.kt)("p",null,"Create a JSON object with these fields:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"links")," (object): An array with the following values:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"testCollection")," (string): Replace ",(0,r.kt)("inlineCode",{parentName:"p"},"testCollection")," with the a name for your collection."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"analyzers")," (array of strings): The list of analyzers to be used for indexing of string values (default: ",'["identity"]',").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fields")," (object):"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"field-name")," (object/string): This is a recursive structure for the specific attribute path, potentially containing any of the following attributes: analyzers, include all fields, trackListPositions, storeValuesAny attributes not specified are inherited from the parent."))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"includeAllFields")," (boolean): A flag that determines whether or not to index all fields on a particular level of depth (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"trackListPositions")," (boolean): A flag that determines whether or not values in a list should be treated separately (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),").")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"storeValues"),": Method of tracking attribute values. Set to ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," to store values and enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"EXISTS()")," function, or set to ",(0,r.kt)("inlineCode",{parentName:"p"},"none")," to disable (default: ",(0,r.kt)("inlineCode",{parentName:"p"},"none"),").")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"name")," (string): The name of the search view.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"primarySort")," (array of strings): The default sort for the view.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"type"),": Must be ",(0,r.kt)("inlineCode",{parentName:"p"},"search"),"."))),(0,r.kt)("p",null,"The following example shows how to format the JSON object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n "links": { \n   "testCollection": {            \n     "analyzers": [ "text_en" ],\n       "fields": {                \n         "parties": { \n           "fields": {            \n             "name": {} \n           } \n         } \n       },\n       "includeAllFields": false, \n       "storeValues": "none",\n       "trackListPositions": false\n      } \n    },\n   "name": "testView",              \n   "primarySort": [],\n   "type": "search" \n}\n')),(0,r.kt)("p",null,"There are two options for accessing the nested data:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Use the top-level field and set the ",(0,r.kt)("inlineCode",{parentName:"p"},"includeAllFields")," parameter to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),". Once created, the seach view will include all sub-fields of the top-level field.\n",(0,r.kt)("inlineCode",{parentName:"p"},'"includeAllFields": true'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Set a path to the sub-field. The following example demonstrates how to set a path to the following nested field ",(0,r.kt)("inlineCode",{parentName:"p"},"topLevelField.subLevelField"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"fields": { \n"topLevelField": {\n  "fields": {\n    "subLevelField": {}\n    }\n  }\n}\n')),(0,r.kt)("p",{parentName:"li"},"This option is more optimized because it only indexes the specified fields, ",(0,r.kt)("inlineCode",{parentName:"p"},"subLevelField")," in this case. The first option could be a good choice if you may add more sub-fields in the future."))),(0,r.kt)("h2",{id:"example-curl-request"},"Example cURL Request"),(0,r.kt)("p",null,"The following example shows a complete cURL request to create the nested search field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cURL"},'curl -X \'POST\' \\\n  \'https://api-play.paas.macrometa.io/_fabric/<your-fabric-name>/_api/search/view\' \\\n  -H \'accept: application/json\' \\\n  -H \'Content-Type: application/json\' \\\n  -H \'Authorization: bearer <JWT_TOKEN>\' \\\n  -d \'{\n  "links": { \n    "testCollection": { \n      "analyzers": [ "text_en" ],\n      "fields": { \n        "parties": { \n          "fields": { \n            "name": {} \n        } \n      } \n    },\n    "includeAllFields": false, \n    "storeValues": "none",\n    "trackListPositions": false\n  } \n },\n "name": "testView", \n "primarySort": [],\n "type": "search" \n}\'\n')))}d.isMDXComponent=!0}}]);