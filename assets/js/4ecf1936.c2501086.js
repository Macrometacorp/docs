"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[99189],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),c=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,m=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=c(n),d=a,h=s["".concat(m,".").concat(d)]||s[d]||p[d]||i;return n?r.createElement(h,l(l({ref:t},u),{},{components:n})):r.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},99975:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={title:"timeBatch (Window)"},l=void 0,o={unversionedId:"cep/query-guide/functions/core/timeBatch",id:"cep/query-guide/functions/core/timeBatch",title:"timeBatch (Window)",description:"A batch (tumbling) time window that holds and process events that arrive during window.time period as a batch.",source:"@site/docs/cep/query-guide/functions/core/timeBatch.md",sourceDirName:"cep/query-guide/functions/core",slug:"/cep/query-guide/functions/core/timeBatch",permalink:"/docs/cep/query-guide/functions/core/timeBatch",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/core/timeBatch.md",tags:[],version:"current",frontMatter:{title:"timeBatch (Window)"},sidebar:"defaultSidebar",previous:{title:"time (Window)",permalink:"/docs/cep/query-guide/functions/core/time"},next:{title:"timeLength (Window)",permalink:"/docs/cep/query-guide/functions/core/timeLength"}},m={},c=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A batch (tumbling) time window that holds and process events that arrive during ",(0,a.kt)("inlineCode",{parentName:"p"},"window.time")," period as a batch."),(0,a.kt)("p",null,"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"timeBatch(<INT|LONG|TIME> window.time)\ntimeBatch(<INT|LONG|TIME> window.time, <INT|LONG> start.time)\ntimeBatch(<INT|LONG|TIME> window.time, <BOOL> stream.current.event)\ntimeBatch(<INT|LONG|TIME> window.time, <INT|LONG> start.time, <BOOL> stream.current.event)\n")),(0,a.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"window.time"),(0,a.kt)("td",{parentName:"tr",align:null},"The batch time period in which the window process the events."),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"INT LONG TIME"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"start.time"),(0,a.kt)("td",{parentName:"tr",align:null},"This specifies an offset in milliseconds in order to start the window at a time different to the standard time."),(0,a.kt)("td",{parentName:"tr",align:null},"Timestamp of first event"),(0,a.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"stream.current.event"),(0,a.kt)("td",{parentName:"tr",align:null},"Let the window stream the current events out as and when they arrive to the window while expiring them in batches."),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE STREAM InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect symbol, sum(price) as price\nfrom InputEventStream window tumbling_time(20 sec);\n")),(0,a.kt)("p",null,"This window collects and processes incoming events as a batch every 20 seconds and then outputs them to a stream."),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE STREAM InputEventStream (symbol string, price float, volume int);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect symbol, sum(price) as sumPrice\nfrom InputEventStream window tumbling_time(20 sec, true);\n")),(0,a.kt)("p",null,"This window sends the arriving events directly to the output letting the ",(0,a.kt)("inlineCode",{parentName:"p"},"sumPrice")," to increase gradually and on every 20 second interval it clears the window as a batch resetting the ",(0,a.kt)("inlineCode",{parentName:"p"},"sumPrice")," to zero."),(0,a.kt)("h2",{id:"example-3"},"Example 3"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE STREAM InputEventStream (symbol string, price float, volume int);\nCREATE WINDOW StockEventWindow (symbol string, price float, volume int) timeBatch(20 sec) output all events;\n\n@info(name = 'query0')\ninsert into StockEventWindow\nfrom InputEventStream;\n\n@info(name = 'query1')\ninsert all events into OutputStream \nselect symbol, sum(price) as price\nfrom StockEventWindow;\n")),(0,a.kt)("p",null,"This uses a defined window to process events arrived every 20 seconds as a batch and output all events."))}p.isMDXComponent=!0}}]);