"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[44124],{3905:(e,n,s)=>{s.d(n,{Zo:()=>p,kt:()=>u});var t=s(67294);function a(e,n,s){return n in e?Object.defineProperty(e,n,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[n]=s,e}function r(e,n){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),s.push.apply(s,t)}return s}function o(e){for(var n=1;n<arguments.length;n++){var s=null!=arguments[n]?arguments[n]:{};n%2?r(Object(s),!0).forEach((function(n){a(e,n,s[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(s,n))}))}return e}function l(e,n){if(null==e)return{};var s,t,a=function(e,n){if(null==e)return{};var s,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)s=r[t],n.indexOf(s)>=0||(a[s]=e[s]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)s=r[t],n.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}var c=t.createContext({}),i=function(e){var n=t.useContext(c),s=n;return e&&(s="function"==typeof e?e(n):o(o({},n),e)),s},p=function(e){var n=i(e.components);return t.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var s=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=i(s),u=a,y=d["".concat(c,".").concat(u)]||d[u]||m[u]||r;return s?t.createElement(y,o(o({ref:n},p),{},{components:s})):t.createElement(y,o({ref:n},p))}));function u(e,n){var s=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=s.length,o=new Array(r);o[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<r;i++)o[i]=s[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,s)}d.displayName="MDXCreateElement"},85162:(e,n,s)=>{s.d(n,{Z:()=>o});var t=s(67294),a=s(34334);const r="tabItem_Ymn6";function o(e){let{children:n,hidden:s,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,o),hidden:s},n)}},65488:(e,n,s)=>{s.d(n,{Z:()=>u});var t=s(87462),a=s(67294),r=s(34334),o=s(72389),l=s(67392),c=s(7094),i=s(12466);const p="tabList__CuJ",m="tabItem_LNqP";function d(e){const{lazy:n,block:s,defaultValue:o,values:d,groupId:u,className:y}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??b.map((e=>{let{props:{value:n,label:s,attributes:t}}=e;return{value:n,label:s,attributes:t}})),_=(0,l.l)(g,((e,n)=>e.value===n.value));if(_.length>0)throw new Error(`Docusaurus error: Duplicate values "${_.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===o?o:o??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==v&&!g.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:h,setTabGroupChoices:A}=(0,c.U)(),[f,k]=(0,a.useState)(v),E=[],{blockElementScrollPositionUntilNextRender:L}=(0,i.o5)();if(null!=u){const e=h[u];null!=e&&e!==f&&g.some((n=>n.value===e))&&k(e)}const S=e=>{const n=e.currentTarget,s=E.indexOf(n),t=g[s].value;t!==f&&(L(n),k(t),null!=u&&A(u,String(t)))},C=e=>{let n=null;switch(e.key){case"ArrowRight":{const s=E.indexOf(e.currentTarget)+1;n=E[s]??E[0];break}case"ArrowLeft":{const s=E.indexOf(e.currentTarget)-1;n=E[s]??E[E.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":s},y)},g.map((e=>{let{value:n,label:s,attributes:o}=e;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:f===n?0:-1,"aria-selected":f===n,key:n,ref:e=>E.push(e),onKeyDown:C,onFocus:S,onClick:S},o,{className:(0,r.Z)("tabs__item",m,o?.className,{"tabs__item--active":f===n})}),s??n)}))),n?(0,a.cloneElement)(b.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==f})))))}function u(e){const n=(0,o.Z)();return a.createElement(d,(0,t.Z)({key:String(n)},e))}},84698:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var t=s(87462),a=(s(67294),s(3905)),r=s(65488),o=s(85162);const l={sidebar_position:1,title:"SDKs"},c=void 0,i={unversionedId:"sdks/index",id:"sdks/index",title:"SDKs",description:"This section demonstrates some of the tasks that you can complete with Macrometa SDKs. Macrometa offers the following SDKs:",source:"@site/docs/sdks/index.md",sourceDirName:"sdks",slug:"/sdks/",permalink:"/docs/sdks/",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/sdks/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"SDKs"},sidebar:"defaultSidebar",previous:{title:"Release Notes 0.17.9",permalink:"/docs/release-notes/release-notes-0-17-09"},next:{title:"Install SDKs",permalink:"/docs/sdks/install-sdks"}},p={},m=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"SDK Example",id:"sdk-example",level:2}],d={toc:m};function u(e){let{components:n,...s}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,s,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This section demonstrates some of the tasks that you can complete with Macrometa SDKs. Macrometa offers the following SDKs:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Macrometacorp/c84j"},"c84j")," - Java SDK"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Macrometacorp/jsC8"},"jsC8")," - JavaScript SDK"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Macrometacorp/pyC8"},"pyC8")," - Python SDK"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Macrometacorp/VueC8"},"VueC8")," - VueJS SDK")),(0,a.kt)("p",null,"Read through the complete example below to see how to perform tasks with SDKs or with APIs using Python or JavaScript calls."),(0,a.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You must have a Macrometa account with admin privileges"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/sdks/install-sdks"},"Install the SDK")," that corresponds to the programming language you want to use.")),(0,a.kt)("h2",{id:"sdk-example"},"SDK Example"),(0,a.kt)("p",null,"Assume your tenant name is ",(0,a.kt)("inlineCode",{parentName:"p"},"nemo@nautilus.com")," and user password is ",(0,a.kt)("inlineCode",{parentName:"p"},"xxxxx"),"."),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Email and password to authenticate client instance\nconst email = "nemo@nautilus.com";\nconst password = "xxxxxx";\nconst fabric = "_system";\nconst collectionName = "testCollection";\nconst streamName = "testStream";\n// API key ID\nconst keyid = "id1";\n\nconst client = new jsc8({\n  url: "https://play.paas.macrometa.io",\n  fabricName: fabric\n});\n\n// Or create an authenticated instance with a token or API key.\n// const client = new jsc8({url: "https://play.paas.macrometa.io", token: "XXXX", fabricName: fabric});\n// const client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "XXXX", fabricName: fabric});\n// console.log("Authentication done!");\n\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\n\nasync function main () {\n  await client\n    .login(email, password)\n    .then((e) => console.log("User authentication done!"))\n    .catch((error) => error);\n  console.log("1. Creating API key with KeyID = " + keyid);\n  await client\n    .createApiKey(keyid)\n    .then((apiKey) => console.log(apiKey))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n2. Getting available API keys");\n  await client\n    .getAvailableApiKeys()\n    .then((apiKeys) => console.log(apiKeys.result))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n3. Listing accessible databases for Key_ID = " + keyid);\n  await client\n    .listAccessibleDatabases(keyid)\n    .then((databases) => {\n      console.log(databases.result);\n    })\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n4. Listing accessible streams for Key_ID = " + keyid);\n  await client\n    .listAccessibleStreams(keyid, fabric, (full = false))\n    .then((streams) => {\n      console.log(streams.result);\n    })\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n5. Listing collections");\n  await client\n    .getCollections()\n    .then((collections) => {\n      console.log(collections);\n    })\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n6. Creating collection");\n  await client\n    .createCollection(collectionName)\n    .then((collection) => {\n      console.log("Collection created successfully");\n    })\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n7. Setting collection access level");\n  await client\n    .setCollectionAccessLevel(keyid, fabric, collectionName, "rw")\n    .then((collectionAccessLevel) => {\n      console.log(collectionAccessLevel);\n    })\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n8. Creating stream " + streamName);\n  await client\n    .createStream(streamName)\n    .then((stream) => console.log(stream))\n    .catch((error) => messageHandler(error));\n\n  console.log(\n    "\\n9. Setting stream " + streamName + " access level to read only"\n  );\n  await client\n    .setStreamAccessLevel(keyid, fabric, "c8globals." + streamName, "ro")\n    .then((streamAccessLevel) => console.log(streamAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log(\n    "\\n10. Setting database " + fabric + " access level to read write for Key_ID " +\n      keyid\n  );\n  await client\n    .setDatabaseAccessLevel(keyid, fabric, "rw")\n    .then((databaseAccessLevel) => console.log(databaseAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n11. Getting collection" + collectionName + " access levels");\n  await client\n    .getCollectionAccessLevel(keyid, fabric, collectionName)\n    .then((collectionAccessLevel) => console.log(collectionAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n12. Getting stream" + streamName + " access levels");\n  await client\n    .getStreamAccessLevel(keyid, fabric, "c8globals." + streamName)\n    .then((streamAccessLevel) => console.log(streamAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n13. Getting database " + fabric + " access levels");\n  await client\n    .getDatabaseAccessLevel(keyid, fabric)\n    .then((databaseAccessLevel) => console.log(databaseAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n14. Deleting database access level for Key_ID = " + keyid);\n  await client\n    .clearDatabaseAccessLevel(keyid, fabric)\n    .then((databaseAccessLevel) => console.log(databaseAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n15. Deleting stream access level for Key_ID = " + keyid);\n  await client\n    .clearStreamAccessLevel(keyid, fabric, "c8globals." + streamName)\n    .then((streamAccessLevel) => console.log(streamAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n16. Deleting collection access level for Key_ID = " + keyid);\n  await client\n    .clearCollectionAccessLevel(keyid, fabric, collectionName)\n    .then((collectionAccessLevel) => console.log(collectionAccessLevel))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n17. Deleting " + keyid);\n  await client\n    .removeApiKey(keyid)\n    .then((removeApiKey) => console.log(removeApiKey))\n    .catch((error) => messageHandler(error));\n\n  console.log("\\n18. Deleting stream " + streamName);\n  await client\n    .deleteStream("c8globals." + streamName)\n    .then((stream) => console.log(stream))\n    .catch((error) => messageHandler(error));\n  \n  console.log("\\n19. Deleting collection " + collectionName);\n  await client\n    .deleteCollection(collectionName)\n    .then((collection) => console.log(collection))\n    .catch((error) => messageHandler(error));\n}\nmain()\n  .then()\n  .catch((error) => console.log(error));\n'))),(0,a.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='play.paas.macrometa.io', port=443,\n                        email='nemo@nautilus.com', password='xxxxx',\n                        geofabric='_system')\n\n# API key ID\nkeyid = \"id1\"\n\n# Create an API key\nprint(\"Create API Key: \", client.create_api_key(keyid))\n\n# Fetch List of accessible databases and streams\nprint(\"Accessible Databases: \", client.list_accessible_databases(keyid))\n\nprint(\"Accessible Streams of a db: \", client.list_accessible_streams(keyid, '_system'))\n\n# Set access levels for an API key\n\n# Create a new collection if it does not exist\nif client.has_collection('testCollection'):\n    print(\"Collection exists\")\nelse:\n    client.create_collection_kv(name='testCollection')\n# Create a new stream\n# print(client.create_stream('testStream'))\n\nprint(\"Set DB Access Level: \", client.set_database_access_level(keyid, '_system', 'rw'))\n\nprint(\"Set Coll Access Level: \", client.set_collection_access_level(keyid, 'testCollection', '_system', 'rw'))\n\nprint(\"Set Stream Access Level: \", client.set_stream_access_level(keyid,'c8globals.testStream', '_system'))\n\n# Get AccessLevel\nprint(\"Get DB Access Level\", client.get_database_access_level(keyid,'_system'))\n\nprint(\"Get Coll Access Level: \", client.get_collection_access_level(keyid,'testCollection', '_system'))\n\nprint(\"Get Stream Access Level: \", client.get_stream_access_level(keyid,'c8globals.testStream', '_system'))\n\n# Clear Access Level\nprint(\"Clear DB Access Level: \", client.clear_database_access_level(keyid,'_system'))\n\nprint(\"Clear Coll Access Level: \", client.clear_collection_access_level(keyid,'testCollection', '_system'))\n\nprint(\"Clear Stream Access Level: \", client.clear_stream_access_level(keyid,'c8globals.testStream', '_system'))\n\n# Remove api key\nremove = client.remove_api_key(keyid)\n\nprint(remove)\n"))),(0,a.kt)(o.Z,{value:"RA p",label:"Rest API (python)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'import requests\nimport json\n\n# Constants\n\nURL = "api-gdn.macrometa.io"\nHTTP_URL = "https://{}".format(URL)\nEMAIL = "nemo@nautilus.com"\nPASSWORD = "xxxxxx"\nAUTH_TOKEN = "bearer "\n\n# Create a HTTPS Session\n\nurl = "{}/_open/auth".format(HTTP_URL)\npayload = {\n    \'email\':EMAIL,\n    \'password\':PASSWORD\n    }\nheaders = {\n    \'content-type\': \'application/json\'\n    }\n\nresponse = requests.post(url, data = json.dumps(payload), headers = headers)\n\nif response.status_code == 200:\n    resp_body = json.loads(response.text)\n    AUTH_TOKEN += resp_body["jwt"]\n    TENANT = resp_body["tenant"]\nelse:\n    raise Exception("Error while getting auth token. Code:{}, Reason:{}".format(response.status_code,response.reason))\n\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Create an API Key\nkeyid = "id1"\nurl = HTTP_URL + "/_api/key"\npayload= {\n"keyid": keyid\n}\n\nresp = session.post(url, data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("API Key Created: ", resp)\n        \n# Fetch List of accessible databases and streams\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/stream"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Streams: ", resp)\n\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/collection"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Collections: ", resp)\n\nurl = HTTP_URL + "/_api/key/" + keyid + "/database"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Databases: ", resp)\n\n# Set Database Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Database Access Level: ", resp)\n\n# Set Collection Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Collection Access Level: ", resp)\n\n# Set Stream Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Stream Access Level: ", resp)\n\n# Get Database Acces Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Database Access Level: ", resp)\n\n# Get Stream Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Stream Access Level: ", resp)\n\n# Get Collection Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Collection Access Level: ", resp)\n\n# Clear Database Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Database Access Level: ", resp)\n\n# Clear Collection Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Collection Access Level: ", resp)\n\n# Clear Stream Access Level\nurl = HTTP_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Stream Access Level: ", resp)\n\n# Delete an API Key\nurl = HTTP_URL + "/_api/key/"+ keyid\nresp = session.delete(url, data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("API Key Deleted: ", resp)\n'))),(0,a.kt)(o.Z,{value:"RA js",label:"Rest API (javascript)",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n_headers = {\nAccept: "application/json",\n"Content-Type": "application/json",\n};\n\nconstructor(url) {\nthis._url = url;\n}\n\nlogin(email, password) {\nconst endpoint = "/_open/auth";\n\nconst self = this;\n\nreturn new Promise(function (resolve, reject) {\nself\n.req(endpoint, {\nbody: { email, password },\nmethod: "POST",\n})\n.then(({ jwt, ...data }) => {\nself._headers.authorization = bearer `${jwt}`;\nresolve(data);\n})\n.catch(reject);\n});\n}\n\n_handleResponse(response, resolve, reject) {\nif (response.ok) {\nresolve(response.json());\n} else {\nreject(response);\n}\n}\n\nreq(endpoint, { body, ...options } = {}) {\nconst self = this;\nreturn new Promise(function (resolve, reject) {\nfetch(self._url + endpoint, {\nheaders: self._headers,\nbody: body ? JSON.stringify(body) : undefined,\n...options,\n}).then((response) => self._handleResponse(response, resolve, reject));\n});\n}\n}\nconst EMAIL = "nemo@nautilus.com";\nconst PASSWORD = "xxxxxx";\nconst HTTP_URL = "https://api-gdn.prod.macrometa.io";\n\nconst COLLECTION_NAME = "testCollection";\nconst STREAM_NAME = "testStream"\nconst KEY_ID = "id1"\nconst run = async function () {\ntry {\nconst connection = new APIRequest(HTTP_URL);\n\n/* -------------------- Login (nemo@nautilus.com/xxxxxx) -------------------- */\n\nawait connection.login(EMAIL, PASSWORD);\n\nconsole.log("Login Successfully using", EMAIL);\n\n/* -------------------------- Create an API Key ------------------------- */\n\nconst apiKey = await connection.req(\n`/_fabric/_system/_api/key`,\n{\nmethod: "POST",\nbody: {\n    "keyid": KEY_ID\n}\n}\n);\n\nconsole.log("API KEY CREATED SUCCESSFULLY", apiKey);\n\n/* ---------------------------- Get List of Accessible Databases and Streams ---------------------------- */\n\nconst accessibleStreams = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream`,\n{\nmethod: "GET",\n}\n);\n\nconsole.log("ACCESSIBLE STREAMS", accessibleStreams);\n\nconst accessibleCollections = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection`,\n{\nmethod: "GET",\n}\n);\n\nconsole.log("ACCESSIBLE COLLECTIONS", accessibleCollections);\n\nconst accessibleDatabases = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database`,\n{\nmethod: "GET",\n}\n);\n\nconsole.log("ACCESSIBLE DATABASES", accessibleDatabases);\n    \n\n/* ----------------------------- Set Access Level ----------------------------- */\nconst setDatabaseAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system`,\n{\nmethod: "PUT",\nbody:{\n    "grant": "rw"\n}\n}\n);\nconsole.log("SET DATABASE ACCESS LEVEL", setDatabaseAccessLevel);\n\n\nconst setCollectionAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection/${COLLECTION_NAME}`,\n{\nmethod: "PUT",\nbody:{\n    "grant": "rw"\n}\n}\n);\n    \nconsole.log("SET COLLECTION ACCESS LEVEL", setCollectionAccessLevel);\n\nconst setStreamAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream/c8globals.${STREAM_NAME}`,\n{\nmethod: "PUT",\nbody:{\n    "grant": "rw"\n}\n}\n);\n    \nconsole.log("SET STREAM ACCESS LEVEL", setStreamAccessLevel);\n\n    \n/* ---------------------------- Get Access Level ---------------------------- */\n\nconst getStreamAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream/c8globals.${STREAM_NAME}`,\n{\nmethod: "GET",\n}\n);\n    \nconsole.log("GET STREAM ACCESS LEVEL", getStreamAccessLevel);\n\nconst getCollectionAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection/${COLLECTION_NAME}`,\n{\nmethod: "GET",\n}\n);\n    \nconsole.log("GET COLLECTION ACCESS LEVEL", getCollectionAccessLevel);\n\nconst getDatabaseAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system`,\n{\nmethod: "GET",\n}\n);\nconsole.log("SET DATABASE ACCESS LEVEL", getDatabaseAccessLevel);\n\n\n\n/* -----------------------------Clear Access Level ----------------------------- */\n\nconst clearDatabaseAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system`,\n{\nmethod: "DELETE",\n}\n);\nconsole.log("CLEAR DATABASE ACCESS LEVEL", clearDatabaseAccessLevel);\n\nconst clearCollectionAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection/${COLLECTION_NAME}`,\n{\nmethod: "DELETE",\n}\n);\n        \nconsole.log("CLEAR COLLECTION ACCESS LEVEL", clearCollectionAccessLevel);\n\nconst clearStreamAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream/c8globals.${STREAM_NAME}`,\n{\nmethod: "DELETE",\n}\n);\n    \nconsole.log("CLEAR STREAM ACCESS LEVEL", clearStreamAccessLevel);\n/* --------------------------- Delete API Key ---------------------------- */\n\nconst removeApiKey = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}`,\n{\nmethod: "DELETE",\n}\n);\n    \nconsole.log("CLEAR STREAM ACCESS LEVEL", removeApiKey);\n\n    \n} catch (e) {\nconsole.error(e);\n}\n};\n\nrun();\n')))))}u.isMDXComponent=!0}}]);