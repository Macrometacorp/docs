"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[23661],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(a),d=s,g=u["".concat(l,".").concat(d)]||u[d]||p[d]||r;return a?n.createElement(g,o(o({ref:t},m),{},{components:a})):n.createElement(g,o({ref:t},m))}));function d(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),s=a(34334);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,o),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(87462),s=a(67294),r=a(34334),o=a(72389),i=a(67392),l=a(7094),c=a(12466);const m="tabList__CuJ",p="tabItem_LNqP";function u(e){const{lazy:t,block:a,defaultValue:o,values:u,groupId:d,className:g}=e,b=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=u??b.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,i.l)(h,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===o?o:o??b.find((e=>e.props.default))?.props.value??b[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,l.U)(),[v,S]=(0,s.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:_}=(0,c.o5)();if(null!=d){const e=k[d];null!=e&&e!==v&&h.some((t=>t.value===e))&&S(e)}const T=e=>{const t=e.currentTarget,a=N.indexOf(t),n=h[a].value;n!==v&&(_(t),S(n),null!=d&&w(d,String(n)))},x=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=N.indexOf(e.currentTarget)+1;t=N[a]??N[0];break}case"ArrowLeft":{const a=N.indexOf(e.currentTarget)-1;t=N[a]??N[N.length-1];break}}t?.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",m)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},g)},h.map((e=>{let{value:t,label:a,attributes:o}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>N.push(e),onKeyDown:x,onFocus:T,onClick:T},o,{className:(0,r.Z)("tabs__item",p,o?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,s.cloneElement)(b.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function d(e){const t=(0,o.Z)();return s.createElement(u,(0,n.Z)({key:String(t)},e))}},31839:(e,t,a)=>{a.d(t,{ZP:()=>l});var n=a(87462),s=(a(67294),a(3905)),r=a(65488),o=a(85162);const i={toc:[]};function l(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"When this code runs, it initializes the server connection to the specified region URL. For more information about connecting to GDN, refer to ",(0,s.kt)("a",{parentName:"p",href:"/docs/account-management/auth/"},"Authentication"),"."),(0,s.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'# Import libraries\nfrom c8 import C8Client\n\n# Define constants\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "my API key" # Change this to your API key\n\nprint("--- Connecting to GDN")\n\n# Choose one of the following methods to access the GDN. API key is recommended.\n\n# Authenticate with API key\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n\n# Authenticate with JWT\n# client = C8Client(protocol=\'https\', host=URL, port=443, token=<your token>, geofabric=GEO_FABRIC))\n\n# Authenticate with email and password\n# client = C8Client(protocol=\'https\', host=URL, port=443, email=<your email id>, password=<your password>, geofabric=GEO_FABRIC)\n'))),(0,s.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Choose one of the following methods to access the GDN. API key is recommended.\n// API key\nconst client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n\n// JSON Web Token\n// const client = new jsc8({url: "https://play.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n\n// Or use email and password to authenticate client instance\n// const client = new jsc8("https://play.paas.macrometa.io");\n// Replace values with your email and password (use it inside an async function).\n// await client.login("nemo@nautilus.com", "xxxxxx"); \n')))))}l.isMDXComponent=!0},25635:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(87462),s=(a(67294),a(3905));const r={toc:[]};function o(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create a new JavaScript (.js) or Python (.py) file in your favorite IDE."),(0,s.kt)("li",{parentName:"ol"},"Copy the code block below and paste it into your JavaScript or Python file."),(0,s.kt)("li",{parentName:"ol"},"With each subsequent step, append the code block to the existing file and then run it.")))}o.isMDXComponent=!0},60296:(e,t,a)=>{a.d(t,{ZP:()=>o});var n=a(87462),s=(a(67294),a(3905));const r={toc:[{value:"Prerequisites",id:"prerequisites",level:2}]};function o(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("a",{parentName:"li",href:"https://auth-play.macrometa.io/"},"Macrometa account")," with admin permissions."),(0,s.kt)("li",{parentName:"ul"},"An API key with admin permissions. For more information, refer to ",(0,s.kt)("a",{parentName:"li",href:"/docs/account-management/api-keys/create-api-keys"},"Create API Keys"),"."),(0,s.kt)("li",{parentName:"ul"},"The appropriate SDK installed. For more information, refer to ",(0,s.kt)("a",{parentName:"li",href:"/docs/sdks/install-sdks"},"Install SDKs"),".")))}o.isMDXComponent=!0},66365:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>h,frontMatter:()=>m,metadata:()=>u,toc:()=>g});var n=a(87462),s=(a(67294),a(3905)),r=a(65488),o=a(85162),i=a(60296),l=a(25635),c=a(31839);const m={sidebar_position:10,title:"Getting Started with Streams"},p=void 0,u={unversionedId:"streams/getting-started-streams",id:"streams/getting-started-streams",title:"Getting Started with Streams",description:"This article is an introduction to using streams with Macrometa SDKs.",source:"@site/docs/streams/getting-started-streams.md",sourceDirName:"streams",slug:"/streams/getting-started-streams",permalink:"/docs/streams/getting-started-streams",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/getting-started-streams.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"Getting Started with Streams"},sidebar:"defaultSidebar",previous:{title:"Streams",permalink:"/docs/streams/"},next:{title:"Stream Basics",permalink:"/docs/streams/stream-basics/"}},d={},g=[{value:"Get Started with Streams",id:"get-started-with-streams",level:2},{value:"Step 1. Connect to GDN",id:"step-1-connect-to-gdn",level:3},{value:"Step 2. Get GeoFabric Details",id:"step-2-get-geofabric-details",level:3},{value:"Step 3. Create Global and Local Streams",id:"step-3-create-global-and-local-streams",level:3},{value:"Step 4. Publish Messages",id:"step-4-publish-messages",level:3},{value:"Step 5. Subscribe to Stream",id:"step-5-subscribe-to-stream",level:3},{value:"Full Demo File",id:"full-demo-file",level:2}],b={toc:g};function h(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This article is an introduction to using streams with ",(0,s.kt)("a",{parentName:"p",href:"/docs/sdks/"},"Macrometa SDKs"),"."),(0,s.kt)(i.ZP,{mdxType:"Prerequisites"}),(0,s.kt)("h2",{id:"get-started-with-streams"},"Get Started with Streams"),(0,s.kt)("p",null,"This page guides you through creating a stream, publishing messages to it, and subscribing to the stream using the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Macrometacorp/pyC8"},"pyC8")," and ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/Macrometacorp/jsC8"},"jsC8")," SDKs."),(0,s.kt)(l.ZP,{mdxType:"Steps"}),(0,s.kt)("p",null,"If you want to skip the explanation and just run the code, then go directly to the ",(0,s.kt)("a",{parentName:"p",href:"#full-demo-file"},"Full Demo File"),"."),(0,s.kt)("h3",{id:"step-1-connect-to-gdn"},"Step 1. Connect to GDN"),(0,s.kt)("p",null,"To use streams with Macrometa Global Data Network (GDN), you must first establish a connection to a local region."),(0,s.kt)(c.ZP,{mdxType:"ConnectToGDN"}),(0,s.kt)("h3",{id:"step-2-get-geofabric-details"},"Step 2. Get GeoFabric Details"),(0,s.kt)("p",null,"Get fabric details, including the name and associated regions."),(0,s.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'# Importing stuff you\'ll need later\nfrom operator import concat\nimport base64\nimport json\nimport warnings\nwarnings.filterwarnings("ignore")\n\n# Get the fabric details\nprint("Getting fabric details...")\nprint(client.get_fabric_details())\n'))),(0,s.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'async function getFabric() {\n  try {\n    await console.log("Getting the fabric details...");\n    let result = await client.get();\n\n    await console.log("result is: ", result);\n  } catch(e){\n    await console.log("Fabric details could not be fetched because "+ e);\n  }\n}\n\ngetFabric();\n')))),(0,s.kt)("h3",{id:"step-3-create-global-and-local-streams"},"Step 3. Create Global and Local Streams"),(0,s.kt)("p",null,"The streams in GDN can be either local or globally geo-replicated. The code below allows you to create either or both and then get the stream details."),(0,s.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'prefix_text = ""\nis_local = False # If false, then the stream created below is global\ndemo_stream = \'streamQuickstart\'\n    \n# Get the right prefix for the streamName\nif is_local:\n    prefix_text = "c8locals."\nelse:\n    prefix_text = "c8globals."\n\n# Create the stream if it doesn\'t already exist\n# To create both a global and local stream, run the code twice, once with is_local = True, once False\nstream_name = {"stream-id": ""}\nif client.has_stream(demo_stream, local = is_local):\n    print("Stream already exists")\n    stream_name["stream-id"] = concat(prefix_text, demo_stream)\n    print ("Old Producer =",  stream_name["stream-id"])\nelse:\n    stream_name = client.create_stream(demo_stream, local=is_local)\n    print ("New Producer =",  stream_name["stream-id"])\n\n# Get and print stream details\nprint("Get streams: ", client.get_streams())\n'))),(0,s.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'async function streams() {\n    try{\n      await console.log("Creating local stream...");\n      const stream_local = await client.createStream("testStream-local", true);\n\n      await console.log("Creating global stream...");\n      const stream_global = await client.createStream("testStream-global", false);\n\n    } catch(e){\n      await console.log("Streams could not be fetched because "+ e);\n    }\n}\n\nstreams();\n')))),(0,s.kt)("h3",{id:"step-4-publish-messages"},"Step 4. Publish Messages"),(0,s.kt)("p",null,"Example to publish documents to a stream. The stream can be either a local stream or could be a geo-replicated stream."),(0,s.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'producer = client.create_stream_producer(demo_stream, local=is_local)\nfor i in range(10):\n    msg1 = "Persistent Hello from " + "("+ str(i) +")"\n    print("Stream: ", msg1)\n    producer.send(msg1)\n'))),(0,s.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'async function streams() {\n    try {\n      await console.log("Creating local stream...");\n      const stream = client.stream("my-stream", true);\n      await stream.createStream();\n      const producerOTP = await stream.getOtp();\n      const producer = await stream.producer("play.paas.macrometa.io", {\n        otp: producerOTP,\n    });\n      producer.on("open", () => {\n        // If your message is an object, convert the object to a string.\n        // e.g. const message = JSON.stringify({message:\'Hello World\'});\n        const message = "Hello World";\n        const payloadObj = { payload: Buffer.from(message).toString("base64") };\n        producer.send(JSON.stringify(payloadObj));\n      });\n      producer.on("message", (msg) => {\n        console.log(msg, "Sent Successfully");\n      });\n\n    } catch(e) {\n      await console.log("Publishing could not be done because "+ e);\n    }\n}\n\nstreams()\n')))),(0,s.kt)("h3",{id:"step-5-subscribe-to-stream"},"Step 5. Subscribe to Stream"),(0,s.kt)("p",null,"Example to subscribe documents from a stream. The stream can be either a local stream or a geo-replicated global stream."),(0,s.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"subscriber = client.subscribe(stream=demo_stream, local=is_local,\n    subscription_name=\"test-subscription-1\")\nfor i in range(10):\n    print(\"In \",i)\n    m1 = json.loads(subscriber.recv())  # Listen on stream for any receiving messages\n    msg1 = base64.b64decode(m1[\"payload\"]).decode('utf-8')\n    print(F\"Received message '{msg1}' id='{m1['messageId']}'\") # Print the received message\n    subscriber.send(json.dumps({'messageId': m1['messageId']})) # Acknowledge the received message\n"))),(0,s.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'async function getDCList() {\n  const geo_fabric = "_system"\n  let dcListAll = await client.listUserFabrics();\n  let dcListObject = await dcListAll.find(function(o) { return o.name === geo_fabric; });\n  return dcListObject.options.dcList.split(",");\n}\n\n(async function() {\n  const dcList = await getDCList();\n  await console.log("dcList: ", dcList);\n  await client.createStream("my-stream", true);\n  \n  //Here the last boolean value tells if the stream is local or global. false means that it is global.\n  const consumer = await client.createStreamReader("my-stream", "my-subscription", true);\n  consumer.on("message", (msg) => {\n    const { payload, messageId } = JSON.parse(msg);\n    \n    // Received message payload\n    console.log(Buffer.from(payload, "base64").toString("ascii"));\n    // Send message acknowledgement\n    consumer.send(JSON.stringify({ messageId }));\n  });\n\n})();\n')))),(0,s.kt)("h2",{id:"full-demo-file"},"Full Demo File"),(0,s.kt)("p",null,"It's time to see streams in action!"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Replace the contents of your .js or .py file from above with the code block below.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"In your browser, open the GDN console and then click ",(0,s.kt)("strong",{parentName:"p"},"Data > Streams"),"."),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"Select your recently created stream (c8globals.streamQuickstart) to view the output of the message within the console."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Open two terminal windows and start the program in each window"),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"In one terminal, type 'r' to begin listening for messages, while in the other terminal, type 'w' to begin writing messages"),(0,s.kt)("li",{parentName:"ul"},"Upon each write, you should see the message received in the second terminal window, as well as the message displayed in the GDN console output")))),(0,s.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},'""" This file is a demo to send data to/from a stream """\nfrom operator import concat\nimport base64\nimport json\nimport warnings\nfrom c8 import C8Client\nwarnings.filterwarnings("ignore")\n\n# Connect to GDN.\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "xxxxx" # Change this to your API key\nis_local = False\nprefix_text = ""\ndemo_stream = \'streamQuickstart\'\n\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n# Get the right prefix for the stream.\nif is_local:\n    prefix_text = "c8locals."\nelse:\n    prefix_text = "c8globals."\n\n# Create global and local streams.\ndef createStream():\n    """ This function creates a stream """\n    stream_name = {"stream-id": ""}\n    if client.has_stream(demo_stream, local = is_local):\n        print("Stream already exists")\n        stream_name["stream-id"] = concat(prefix_text, demo_stream)\n        print ("Old Producer =",  stream_name["stream-id"])\n    else:\n        stream_name = client.create_stream(demo_stream, local=is_local)\n        print ("New Producer =",  stream_name["stream-id"])\n\n# Create the producer and publish messages.\ndef sendData():\n    """ This function sends data through a stream """\n    producer = client.create_stream_producer(demo_stream, local=is_local)\n    while True:\n        user_input = input("Enter your message to publish: ")\n        if user_input == \'0\':\n            break\n        producer.send(user_input)\n\n\n# Create the subscriber and receive data.\ndef receiveData():\n    """ This function receives data from a stream """\n    subscriber = client.subscribe(stream=demo_stream, local=is_local,\n        subscription_name="test-subscription-1")\n    while True:\n        print("\\nListening for message...")\n        m1 = json.loads(subscriber.recv())  # Listen on stream for any receiving messages\n        msg1 = base64.b64decode(m1["payload"]).decode(\'utf-8\')\n        print(F"Received message: \'{msg1}\'") \n    # Output the ID of the received message\n        # print(F"Message ID:\'{m1[\'messageId\']}\'")\n        subscriber.send(json.dumps({\'messageId\': m1[\'messageId\']})) # Acknowledge the received message\n\ncreateStream()\n\n# User enters choice.\n# On one terminal use \'r\' to start the subscriber to read data\n# Then on another terminal use \'w\' to start the producer and publish message\nuser_input = input("Type \'w\' to write data, type \'r\' read data, and type \'0\' to quit at any time: ")\nif user_input == "w":\n    sendData()\nelif user_input == "r":\n    receiveData()\nelse:\n    print ("Invalid user input. Stopping program") \n'))),(0,s.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'// Connect to GDN.\nconst jsc8 = require("jsc8");\n// Choose one of the following methods to access the GDN. API key is recommended.\nconst client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "xxxxx", fabricName: \'_system\'});\nconsole.log("Authentication done!!...");\n\n// Get GeoFabric details.\nasync function getFabric() {\n    try {\n      await console.log("Getting the fabric details...");\n      let result = await client.get();\n  \n      await console.log("result is: ", result);\n    } catch(e) {\n      await console.log("Fabric details could not be fetched because "+ e);\n    }\n}\n\n// Create global and local streams.\nasync function createStreams() {\n    try{\n      console.log("Creating local stream...");\n      await client.createStream("testStream-local", true);\n\n      console.log("Creating global stream...");\n      await client.createStream("testStream-global", false);\n\n    } catch(e) {\n      await console.log("Streams could not be created because "+ e);\n    }\n}\n\n// Subscribe to stream\nasync function createConsumer() {\n  const dcList = await getDCList();\n  await console.log("dcList: ", dcList);\n\n  try{\n    console.log("Creating local stream...");\n    await client.createStream("my-stream", true);\n  } catch(e) {\n    await console.log("Stream could not be created because "+ e);\n  }\n\n  // Here the last boolean value tells if the stream is local or global. false means that it is global.\n  const consumer = await client.createStreamReader("my-stream", "my-subscription", true);\n\n  consumer.on("message", (msg) => {\n    const { payload, messageId } = JSON.parse(msg);\n    \n    // Received message payload\n    console.log(Buffer.from(payload, "base64").toString("ascii"));\n\n    // Send message acknowledgement\n    consumer.send(JSON.stringify({ messageId }));\n  });\n}\n\n// Publish messages to stream.\nasync function createProducer() {\n    try {\n      await console.log("Creating local stream...");\n      const stream = client.stream("my-stream", true);\n      const producerOTP = await stream.getOtp();\n      const producer = await stream.producer("play.paas.macrometa.io", {\n        otp: producerOTP,\n      });\n      producer.on("open", () => {\n        // If your message is an object, then convert the object to a string.\n        // e.g. const message = JSON.stringify({message:\'Hello World\'});\n        const message = "Hello World";\n        const payloadObj = { payload: Buffer.from(message).toString("base64") };\n        producer.send(JSON.stringify(payloadObj));\n      });\n      producer.on("message", (msg) => {\n        console.log(msg, "Sent successfully");\n      });\n    } catch(e) {\n      await console.log("Publishing could not be done because "+ e);\n    }\n}\n\nasync function getDCList() {\n    const geo_fabric = "_system"\n    let dcListAll = await client.listUserFabrics();\n    let dcListObject = await dcListAll.find(function(o) { return o.name === geo_fabric; });\n    return dcListObject.options.dcList.split(",");\n}\n\nasync function main() {\n    await getFabric();\n    await createStreams();\n    await createConsumer();\n    await createProducer();\n};\n\nmain();\n')))))}h.isMDXComponent=!0}}]);