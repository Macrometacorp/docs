"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6477],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||l;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},25981:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const l={title:"http (Source)"},i=void 0,o={unversionedId:"cep/source/http",id:"cep/source/http",title:"http (Source)",description:"HTTP source receives POST requests via HTTP and HTTPS protocols in",source:"@site/docs/cep/source/http.md",sourceDirName:"cep/source",slug:"/cep/source/http",permalink:"/docs/cep/source/http",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/source/http.md",tags:[],version:"current",frontMatter:{title:"http (Source)"},sidebar:"defaultSidebar",previous:{title:"http-service (Source)",permalink:"/docs/cep/source/http-service"},next:{title:"inMemory (Source)",permalink:"/docs/cep/source/inMemory"}},s={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"System Parameters",id:"system-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],d={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"HTTP source receives POST requests via HTTP and HTTPS protocols in\nformat such as ",(0,r.kt)("inlineCode",{parentName:"p"},"text")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON"),". It also supports basic\nauthentication to ensure events are received from authorized\nusers/systems. The request headers and properties can be accessed via\ntransport properties in the format ",(0,r.kt)("inlineCode",{parentName:"p"},"trp:<header>"),"."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (type="http", map.type="<STRING>", receiver.url="<STRING>", basic.auth.enabled="<STRING>", worker.count="<INT>", socket.idle.timeout="<INT>", ssl.verify.client="<STRING>", ssl.protocol="<STRING>", tls.store.type="<STRING>", ssl.configurations="<STRING>", request.size.validation.configurations="<STRING>", header.validation.configurations="<STRING>", server.bootstrap.configurations="<STRING>", trace.log.enabled="<BOOL>")\n')),(0,r.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"basic.auth.enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"This only works in VM, Docker and Kubernetes. Where when enabled it authenticates each request using the ",(0,r.kt)("inlineCode",{parentName:"td"},"Authorization:'Basic encodeBase64(username:Password)'")," header."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"worker.count"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of active worker threads to serve the incoming events. By default the value is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"1")," to ensure events are processed in the same order they arrived. By increasing this value, higher performance can be achieved in the expense of losing event ordering."),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"socket.idle.timeout"),(0,r.kt)("td",{parentName:"tr",align:null},"Idle timeout for HTTP connection in millis."),(0,r.kt)("td",{parentName:"tr",align:null},"120000"),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ssl.verify.client"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of client certificate verification. Supported values are ",(0,r.kt)("inlineCode",{parentName:"td"},"require"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"optional"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ssl.protocol"),(0,r.kt)("td",{parentName:"tr",align:null},"SSL/TLS protocol."),(0,r.kt)("td",{parentName:"tr",align:null},"TLS"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tls.store.type"),(0,r.kt)("td",{parentName:"tr",align:null},"TLS store type."),(0,r.kt)("td",{parentName:"tr",align:null},"JKS"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ssl.configurations"),(0,r.kt)("td",{parentName:"tr",align:null},"SSL/TSL configurations in format ",(0,r.kt)("inlineCode",{parentName:"td"},"\"'<key>:<value>','<key>:<value>'\""),". Some supported parameters:  - SSL/TLS protocols: ",(0,r.kt)("inlineCode",{parentName:"td"},"'sslEnabledProtocols:TLSv1.1,TLSv1.2'"),"  - List of ciphers: ",(0,r.kt)("inlineCode",{parentName:"td"},"'ciphers:TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256'"),"  - Enable session creation: ",(0,r.kt)("inlineCode",{parentName:"td"},"'client.enable.session.creation:true'"),"  - Supported server names: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.suported.server.names:server'"),"  - Add HTTP SNIMatcher: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.supported.snimatchers:SNIMatcher'")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"request.size.validation.configurations"),(0,r.kt)("td",{parentName:"tr",align:null},"Configurations to validate the HTTP request size. Expected format ",(0,r.kt)("inlineCode",{parentName:"td"},"\"'<key>:<value>','<key>:<value>'\""),". Some supported configurations :  - Enable request size validation: ",(0,r.kt)("inlineCode",{parentName:"td"},"'request.size.validation:true'"),"  If request size is validated  - Maximum request size: ",(0,r.kt)("inlineCode",{parentName:"td"},"'request.size.validation.maximum.value:2048'"),"  - Response status code when request size validation fails: ",(0,r.kt)("inlineCode",{parentName:"td"},"'request.size.validation.reject.status.code:401'"),"  - Response message when request size validation fails: ",(0,r.kt)("inlineCode",{parentName:"td"},"'request.size.validation.reject.message:Message is bigger than the valid size'"),"  - Response Content-Type when request size validation fails: ",(0,r.kt)("inlineCode",{parentName:"td"},"'request.size.validation.reject.message.content.type:plain/text'")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"header.validation.configurations"),(0,r.kt)("td",{parentName:"tr",align:null},"Configurations to validate HTTP headers. Expected format ",(0,r.kt)("inlineCode",{parentName:"td"},"\"'<key>:<value>','<key>:<value>'\""),". Some supported configurations :  - Enable header size validation: ",(0,r.kt)("inlineCode",{parentName:"td"},"'header.size.validation:true'"),"  If header size is validated  - Maximum length of initial line: ",(0,r.kt)("inlineCode",{parentName:"td"},"'header.validation.maximum.request.line:4096'"),"  - Maximum length of all headers: ",(0,r.kt)("inlineCode",{parentName:"td"},"'header.validation.maximum.size:8192'"),"  - Maximum length of the content or each chunk: ",(0,r.kt)("inlineCode",{parentName:"td"},"'header.validation.maximum.chunk.size:8192'"),"  - Response status code when header validation fails: ",(0,r.kt)("inlineCode",{parentName:"td"},"'header.validation.reject.status.code:401'"),"  - Response message when header validation fails: ",(0,r.kt)("inlineCode",{parentName:"td"},"'header.validation.reject.message:Message header is bigger than the valid size'"),"  - Response Content-Type when header validation fails: ",(0,r.kt)("inlineCode",{parentName:"td"},"'header.validation.reject.message.content.type:plain/text'")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"server.bootstrap.configurations"),(0,r.kt)("td",{parentName:"tr",align:null},"Server bootstrap configurations in format ",(0,r.kt)("inlineCode",{parentName:"td"},"\"'<key>:<value>','<key>:<value>'\""),". Some supported configurations :  - Server connect timeout in millis: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.bootstrap.connect.timeout:15000'"),"  - Server socket timeout in seconds: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.bootstrap.socket.timeout:15'"),"  - Enable TCP no delay: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.bootstrap.nodelay:true'"),"  - Enable server keep alive: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.bootstrap.keepalive:true'"),"  - Send buffer size: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.bootstrap.sendbuffersize:1048576'"),"  - Receive buffer size: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.bootstrap.recievebuffersize:1048576'"),"  - Number of connections queued: ",(0,r.kt)("inlineCode",{parentName:"td"},"'server.bootstrap.socket.backlog:100'")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"trace.log.enabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable trace log for traffic monitoring."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("h2",{id:"system-parameters"},"System Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Parameters"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"serverBootstrapBossGroupSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of boss threads to accept incoming connections."),(0,r.kt)("td",{parentName:"tr",align:null},"Number of available processors"),(0,r.kt)("td",{parentName:"tr",align:null},"Any positive integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"serverBootstrapWorkerGroupSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of worker threads to accept the connections from boss threads and perform non-blocking read and write from one or more channels."),(0,r.kt)("td",{parentName:"tr",align:null},"(Number of available processors) ","*"," 2"),(0,r.kt)("td",{parentName:"tr",align:null},"Any positive integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"serverBootstrapClientGroupSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of client threads to perform non-blocking read and write to one or more channels."),(0,r.kt)("td",{parentName:"tr",align:null},"(Number of available processors) ","*"," 2"),(0,r.kt)("td",{parentName:"tr",align:null},"Any positive integer")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultHost"),(0,r.kt)("td",{parentName:"tr",align:null},"The default host of the transport."),(0,r.kt)("td",{parentName:"tr",align:null},"0.0.0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"Any valid host")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultScheme"),(0,r.kt)("td",{parentName:"tr",align:null},"The default protocol."),(0,r.kt)("td",{parentName:"tr",align:null},"http"),(0,r.kt)("td",{parentName:"tr",align:null},"http https")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultHttpPort"),(0,r.kt)("td",{parentName:"tr",align:null},"The default HTTP port when default scheme is ",(0,r.kt)("inlineCode",{parentName:"td"},"http"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"8280"),(0,r.kt)("td",{parentName:"tr",align:null},"Any valid port")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultHttpsPort"),(0,r.kt)("td",{parentName:"tr",align:null},"The default HTTPS port when default scheme is ",(0,r.kt)("inlineCode",{parentName:"td"},"https"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"8243"),(0,r.kt)("td",{parentName:"tr",align:null},"Any valid port")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"keyStoreLocation"),(0,r.kt)("td",{parentName:"tr",align:null},"The default keystore file path."),(0,r.kt)("td",{parentName:"tr",align:null},"`","\\${carbon.home}/resources/security/gdncarbon.jks","`"),(0,r.kt)("td",{parentName:"tr",align:null},"Path to ","`",".jks","`"," file")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"keyStorePassword"),(0,r.kt)("td",{parentName:"tr",align:null},"The default keystore password."),(0,r.kt)("td",{parentName:"tr",align:null},"gdncarbon"),(0,r.kt)("td",{parentName:"tr",align:null},"Keystore password as string")))),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@App:name(\"http-source\")\n@App:qlVersion(\"2\")\n\nCREATE SOURCE SampleHTTPSource WITH (type = 'http', map.type='json') (msg string);\n\nCREATE SINK STREAM SampleHTTPInputStream (msg string);\n\nINSERT INTO SampleHTTPInputStream\nSELECT msg\nFROM SampleHTTPSource;\n")),(0,r.kt)("p",null,"It maps the incoming messages and sends them to ",(0,r.kt)("inlineCode",{parentName:"p"},"SampleHTTPInputStream")," for processing."),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@App:name('Sample-HTTP-Source')\n@App:description(\"This application how to receive POST requests via Stream Workers API.\")\n@App:qlVersion('2')\n\n/**\nTesting the Stream Application:\n    1. Open Stream `SampleHTTPOutputStream` in Console to monitor the output.\n\n    2. Go to Stream Workers API and try `Publish message via HTTP-Source stream.` endpoint. Run it with\n    application name set to `Sample-HTTP-Source`, stream name set to `SampleHTTPSource`, and body with the next data:\n        {\"carId\":\"c1\",\"longitude\":18.4334, \"latitude\":30.2123}\n\n    3. This application read the carId, longitude and latitude from the `SampleHTTPSource` and sends it to\n    sink stream `SampleHTTPOutputStream`\n**/\n\n-- Defines `SampleHTTPSource` stream to process events having `carId`, `longitude`, and `latitude`.\nCREATE SOURCE SampleHTTPSource WITH (type = 'http', map.type='json') (carId string, longitude double, latitude double);\n\n-- Defines `SampleHTTPOutputStream` to emit the events after the data is processed by external service\nCREATE SINK STREAM SampleHTTPOutputStream (carId string, longitude double, latitude double);\n\n-- Note: Consume data received from the external service\n@info(name = 'ConsumeProcessedData')\nINSERT INTO SampleHTTPOutputStream\nSELECT carId, longitude, latitude\nFROM SampleHTTPSource;\n")))}u.isMDXComponent=!0}}]);