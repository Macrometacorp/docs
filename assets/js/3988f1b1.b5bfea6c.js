"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31818],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(a),m=r,b=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(b,l(l({ref:t},p),{},{components:a})):n.createElement(b,l({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),r=a(34334);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,l),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(87462),r=a(67294),o=a(34334),l=a(72389),i=a(67392),s=a(7094),u=a(12466);const p="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:a,defaultValue:l,values:d,groupId:m,className:b}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=d??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,i.l)(y,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===l?l:l??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==k&&!y.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:N}=(0,s.U)(),[v,w]=(0,r.useState)(k),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=m){const e=g[m];null!=e&&e!==v&&y.some((t=>t.value===e))&&w(e)}const q=e=>{const t=e.currentTarget,a=T.indexOf(t),n=y[a].value;n!==v&&(E(t),w(n),null!=m&&N(m,String(n)))},C=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=T.indexOf(e.currentTarget)+1;t=T[a]??T[0];break}case"ArrowLeft":{const a=T.indexOf(e.currentTarget)-1;t=T[a]??T[T.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},b)},y.map((e=>{let{value:t,label:a,attributes:l}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>T.push(e),onKeyDown:C,onFocus:q,onClick:q},l,{className:(0,o.Z)("tabs__item",c,l?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function m(e){const t=(0,l.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},26589:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var n=a(87462),r=(a(67294),a(3905)),o=a(65488),l=a(85162);const i={title:"Bind Parameters",sidebar_position:60},s=void 0,u={unversionedId:"queryworkers/bind-parameters",id:"queryworkers/bind-parameters",title:"Bind Parameters",description:"SQL and C8QL support the usage of bind parameters, thus allowing to separate the query text from literal values used in the query. It is good practice to separate the query text from the literal values because this will prevent (malicious) injection of keywords and other collection names into an existing query. This injection would be dangerous because it may change the meaning of an existing query.",source:"@site/docs/queryworkers/bind-parameters.md",sourceDirName:"queryworkers",slug:"/queryworkers/bind-parameters",permalink:"/docs/queryworkers/bind-parameters",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/bind-parameters.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{title:"Bind Parameters",sidebar_position:60},sidebar:"defaultSidebar",previous:{title:"API Endpoints",permalink:"/docs/queryworkers/api-endpoints"},next:{title:"Data Access Queries",permalink:"/docs/queryworkers/data-access-queries"}},p={},c=[],d={toc:c};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"SQL and C8QL support the usage of bind parameters, thus allowing to separate the query text from literal values used in the query. It is good practice to separate the query text from the literal values because this will prevent (malicious) injection of keywords and other collection names into an existing query. This injection would be dangerous because it may change the meaning of an existing query."),(0,r.kt)("p",null,"Using bind parameters, the meaning of an existing query cannot be changed. Bind parameters can be used everywhere in a query where literals can be used."),(0,r.kt)("p",null,"The syntax for bind parameters is ",(0,r.kt)("inlineCode",{parentName:"p"},"@name")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"@")," signifies that this is a bind parameter and ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," is the actual parameter name. Parameter names must start with any of the letters ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"z")," (upper or lower case) or a digit (",(0,r.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"9"),"), and can be followed by any letter, digit or the underscore symbol."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"If you are using SQL bind variables, variable name can only contain numbers. For example ",(0,r.kt)("inlineCode",{parentName:"p"},"$1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"$3")," etc.\nWhen using bind variables with SQL, collection name can't be one of bind variables. For example ",(0,r.kt)("inlineCode",{parentName:"p"},"SELECT * FROM $1")," is not supported.")),(0,r.kt)("p",null,"In the web interface, there is a pane next to the query editor where the bind parameters can be entered."),(0,r.kt)(o.Z,{groupId:"modify-single",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"c8ql",label:"C8QL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  FILTER u.id == @id && u.name == @name\n  RETURN u\n"))),(0,r.kt)(l.Z,{value:"sql",label:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users WHERE id = $1 AND name = $2\n")))),(0,r.kt)("p",null,"If you are using our API or SDK, the bind parameter values need to be passed along with the query when it is executed, but not as part of the query text itself. "),(0,r.kt)(o.Z,{groupId:"modify-single",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"c8ql",label:"C8QL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": "FOR u IN users FILTER u.id == @id && u.name == @name RETURN u",\n  "bindVars": {\n    "id": 123,\n    "name": "John Smith"\n  }\n}\n'))),(0,r.kt)(l.Z,{value:"sql",label:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "query": "SELECT * FROM users WHERE id = $1 AND name = $2",\n  "bindVars": {\n    "id": 123,\n    "name": "John Smith"\n  }\n}\n')))),(0,r.kt)("p",null,"Bind parameters that are declared in the query must also be passed a parameter value, or the query will fail. Specifying parameters that are not declared in the query will result in an error too."),(0,r.kt)("p",null,"Bind variables represent a value like a string, and must not be put in quotes in the C8QL code:"),(0,r.kt)(o.Z,{groupId:"modify-single",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"c8ql",label:"C8QL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FILTER u.name == "@name" // wrong\nFILTER u.name == @name   // correct\n'))),(0,r.kt)(l.Z,{value:"sql",label:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'SELECT * FROM users WHERE id = "$1" AND name = "$2" -- wrong\nSELECT * FROM users WHERE id = $id AND name = $name -- wrong\nSELECT * FROM users WHERE id = $1 AND name = $2 -- right\n')))),(0,r.kt)("p",null,"If you need to do string processing (concatenation, etc.) in the query, you need to use ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/string"},"C8QL string functions")," to do so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN users\n  FILTER u.id == CONCAT('prefix', @id, 'suffix') && u.name == @name\n  RETURN u\n")),(0,r.kt)("p",null,"Bind parameters can be used for both, the dot notation as well as the square bracket notation for sub-attribute access. They can also be chained:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LET doc = { foo: { bar: "baz" } }\n\nRETURN doc.@attr.@subattr\n// or\nRETURN doc[@attr][@subattr]\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "attr": "foo",\n  "subattr": "bar"\n}\n')),(0,r.kt)("p",null,"Both variants in above example return ",(0,r.kt)("inlineCode",{parentName:"p"},'[ "baz" ]')," as query result."),(0,r.kt)("p",null,"The whole attribute path, for highly nested data in particular, can also be specified using the dot notation and a single bind parameter, by passing an array of strings as parameter value. The elements of the array represent the attribute keys of the path:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"LET doc = { a: { b: { c: 1 } } }\nRETURN doc.@attr\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "attr": [ "a", "b", "c" ] }\n')),(0,r.kt)("p",null,"The example query returns ",(0,r.kt)("inlineCode",{parentName:"p"},"[ 1 ]")," as result. Note that ",(0,r.kt)("inlineCode",{parentName:"p"},'{ "attr": "a.b.c" }')," would return the value of an attribute called ",(0,r.kt)("em",{parentName:"p"},"a.b.c"),", not the value of attribute ",(0,r.kt)("em",{parentName:"p"},"c")," with the parents ",(0,r.kt)("em",{parentName:"p"},"a")," and ",(0,r.kt)("em",{parentName:"p"},"b")," as ",(0,r.kt)("inlineCode",{parentName:"p"},'[ "a", "b", "c" ]')," would."),(0,r.kt)("p",null,"A special type of bind parameter exists for injecting collection names. This type of bind parameter has a name prefixed with an additional ",(0,r.kt)("em",{parentName:"p"},"@")," symbol (thus when using the bind parameter in a query, two ",(0,r.kt)("em",{parentName:"p"},"@")," symbols must be used)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"FOR u IN @@collection\n  FILTER u.active == true\n  RETURN u\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "@collection": "myCollection" }\n')),(0,r.kt)("p",null,"Keywords can't be replaced by bind-values; i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"FOR"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FILTER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"IN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"INBOUND")," or function calls."))}m.isMDXComponent=!0}}]);