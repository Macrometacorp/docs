"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67750],{3905:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>p});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},s=Object.keys(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var i=a.createContext({}),d=function(n){var e=a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},m=function(n){var e=d(n.components);return a.createElement(i.Provider,{value:e},n.children)},y={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},l=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,s=n.originalType,i=n.parentName,m=c(n,["components","mdxType","originalType","parentName"]),l=d(t),p=r,x=l["".concat(i,".").concat(p)]||l[p]||y[p]||s;return t?a.createElement(x,o(o({ref:e},m),{},{components:t})):a.createElement(x,o({ref:e},m))}));function p(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=t.length,o=new Array(s);o[0]=l;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=n,c.mdxType="string"==typeof n?n:r,o[1]=c;for(var d=2;d<s;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}l.displayName="MDXCreateElement"},47921:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>o,default:()=>y,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=t(87462),r=(t(67294),t(3905));const s={sidebar_position:60,title:"Using mmDynamo Javascript SDK"},o=void 0,c={unversionedId:"collections/dynamo/using-mmdynamo-browser",id:"collections/dynamo/using-mmdynamo-browser",title:"Using mmDynamo Javascript SDK",description:"Browser(Javascript) NPM",source:"@site/docs/collections/dynamo/using-mmdynamo-browser.md",sourceDirName:"collections/dynamo",slug:"/collections/dynamo/using-mmdynamo-browser",permalink:"/docs/collections/dynamo/using-mmdynamo-browser",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/collections/dynamo/using-mmdynamo-browser.md",tags:[],version:"current",sidebarPosition:60,frontMatter:{sidebar_position:60,title:"Using mmDynamo Javascript SDK"},sidebar:"defaultSidebar",previous:{title:"Using AWS Boto3",permalink:"/docs/collections/dynamo/using-aws-boto3"},next:{title:"Connect to dynamodb C8",permalink:"/docs/collections/dynamo/reference/"}},i={},d=[{value:"Browser(Javascript) NPM",id:"browserjavascript-npm",level:2},{value:"Browser(Javascript) as Library",id:"browserjavascript-as-library",level:2},{value:"Create a Table",id:"create-a-table",level:2},{value:"Create an Item",id:"create-an-item",level:2},{value:"Read an Item",id:"read-an-item",level:2},{value:"Update an Item",id:"update-an-item",level:2},{value:"Query Data",id:"query-data",level:2},{value:"Scan Data",id:"scan-data",level:2},{value:"Delete Item",id:"delete-item",level:2},{value:"Delete Table",id:"delete-table",level:2}],m={toc:d};function y(n){let{components:e,...t}=n;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"browserjavascript-npm"},"Browser(Javascript) NPM"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Install ",(0,r.kt)("inlineCode",{parentName:"p"},"mmdynamo")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"npm install mmdynamo --save\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Import package"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { DynamoDB } from "mmdynamo";\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Initialize Dynamodb"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import { DynamoDB } from "mmdynamo";\n\nconst dcName = "test.macrometa.io";\nconst host = "https://api-" + dcName;\nconst apiKey = "xxxxxxxxxxxxxxxxxxxxxx";\n/*\nIf you have a JWT token\n\nconst JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n*/\n\nconst service = "dynamodb";\nconst region = "us-east-1";\nconst endpoint = host + "/_api/dynamo";\n// secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\nconst secretAccessKey = "c8";\nconst accessKeyId = "apikey " + apiKey;\n/*\nIf you are using JWT token use the below instead\n\nconst accessKeyId = "bearer " + JWT;\n*/\n\nconst client = new DynamoDB({\n  region,\n  endpoint,\n  accessKeyId,\n  secretAccessKey,\n});\n')))),(0,r.kt)("h2",{id:"browserjavascript-as-library"},"Browser(Javascript) as Library"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"mmdynamo")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Initialize Dynamodb with Macrometa DynamoMode"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script type="text/javascript">\nconst dcName = "play.paas.macrometa.io";\nconst host = "https://api-" + dcName;\nconst apiKey = "<your-api-key>";\n/*\nIf you have a JWT token\n\nconst JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n*/\n\nconst service = "dynamodb";\nconst region = "us-east-1";\nconst endpoint = host + "/_api/dynamo";\n// secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\nconst secretAccessKey = "c8";\nconst accessKeyId = "apikey " + apiKey;\n\n  /*\nIf you are using JWT token use the below instead\n\nconst accessKeyId = "bearer " + JWT;\n*/\n  const { DynamoDB } = window.mmdynamo;\n\n  const client = new DynamoDB({\n    region,\n    endpoint,\n    accessKeyId,\n    secretAccessKey,\n  });\n<\/script>\n')))),(0,r.kt)("h2",{id:"create-a-table"},"Create a Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\n<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "play.paas.macrometa.io";\n    const host = "https://api-" + dcName;\n    const apiKey = "<your-api-key>";\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n      const { DynamoDB } = window.mmdynamo;\n\n      const client = new DynamoDB({\n        region,\n        endpoint,\n        accessKeyId,\n        secretAccessKey,\n      });\n\n      function createMovies() {\n        var params = {\n          TableName: "Movies",\n          KeySchema: [\n            { AttributeName: "year", KeyType: "HASH" },\n            { AttributeName: "title", KeyType: "RANGE" },\n          ],\n          AttributeDefinitions: [\n            { AttributeName: "year", AttributeType: "N" },\n            { AttributeName: "title", AttributeType: "S" },\n          ],\n          ProvisionedThroughput: {\n            ReadCapacityUnits: 5,\n            WriteCapacityUnits: 5,\n          },\n        };\n\n        client.createTable(params, function (err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML =\n              "Unable to create table: " +\n              "\\n" +\n              JSON.stringify(err, undefined, 2);\n          } else {\n            document.getElementById("textarea").innerHTML =\n              "Created table: " + "\\n" + JSON.stringify(data, undefined, 2);\n          }\n        });\n      }\n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="createTableButton"\n      type="button"\n      value="Create Table"\n      onclick="createMovies();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n\n')),(0,r.kt)("h2",{id:"create-an-item"},"Create an Item"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\n<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "play.paas.macrometa.io";\n    const host = "https://api-" + dcName;\n    const apiKey = "<your-api-key>";\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n      const { DynamoDB } = window.mmdynamo;\n\n      const client = new DynamoDB({\n        region,\n        endpoint,\n        accessKeyId,\n        secretAccessKey,\n      });\n\n      function createItem() {\n        var params = {\n          TableName: "Movies",\n          Item: {\n            year: { N: "2015" },\n            title: { S: "The Big New Movie" },\n          },\n        };\n\n        client.putItem(params, function (err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML =\n              "Unable to add item: " + "\\n" + JSON.stringify(err, undefined, 2);\n          } else {\n            document.getElementById("textarea").innerHTML =\n              "PutItem succeeded: " + "\\n" + JSON.stringify(data, undefined, 2);\n          }\n        });\n      }\n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="createItem"\n      type="button"\n      value="Create Item"\n      onclick="createItem();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n')),(0,r.kt)("h2",{id:"read-an-item"},"Read an Item"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\n<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "play.paas.macrometa.io";\n    const host = "https://api-" + dcName;\n    const apiKey = "<your-api-key>";\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n      const { DynamoDB } = window.mmdynamo;\n\n      const client = new DynamoDB({\n        region,\n        endpoint,\n        accessKeyId,\n        secretAccessKey,\n      });\n\n      function readItem() {\n        var table = "Movies";\n        var year = 2015;\n        var title = "The Big New Movie";\n\n        var params = {\n          TableName: table,\n          Key: {\n            year: year,\n            title: title,\n          },\n        };\n\n        client.getItem(params, function (err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML =\n              "Unable to read item: " +\n              "\\n" +\n              JSON.stringify(err, undefined, 2);\n          } else {\n            document.getElementById("textarea").innerHTML =\n              "GetItem succeeded: " + "\\n" + JSON.stringify(data, undefined, 2);\n          }\n        });\n      }\n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="readItem"\n      type="button"\n      value="Read Item"\n      onclick="readItem();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n')),(0,r.kt)("h2",{id:"update-an-item"},"Update an Item"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\n<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "play.paas.macrometa.io";\n    const host = "https://api-" + dcName;\n    const apiKey = "<your-api-key>";\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n      const { DynamoDB } = window.mmdynamo;\n\n      const client = new DynamoDB({\n        region,\n        endpoint,\n        accessKeyId,\n        secretAccessKey,\n      });\n\n   const { DynamoDB } = window.mmdynamo;\n\nconst client = new DynamoDB({\n  region,\n  endpoint,\n  accessKeyId,\n  secretAccessKey,\n});\n    \n\n      function updateItem() {\n     \n        var table = "Movies";\n        var year = "2015";\n        var title = "The Big New Movie";\n\n        var params = {\n          TableName: table,\n          Key: {\n            year: { N: year },\n            title: { S: title },\n          },\n        };\n\n        client.updateItem(params, function (err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML =\n              "Unable to update item: " +\n              "\\n" +\n              JSON.stringify(err, undefined, 2);\n          } else {\n            document.getElementById("textarea").innerHTML =\n              "UpdateItem succeeded: " +\n              "\\n" +\n              JSON.stringify(data, undefined, 2);\n          }\n        });\n      }\n   \n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="updateItem"\n      type="button"\n      value="Update Item"\n      onclick="updateItem();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n')),(0,r.kt)("h2",{id:"query-data"},"Query Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\n<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "smoke1.eng3.macrometa.io"\n    const host = "https://api-" + dcName;\n    const apiKey = "guest.id1.CGYpbciDDhYK5cnyIjdSXQln2PUj1x7qO0cS4YgR9HBFzEm34cvhKa2Ge7kh00Zgce1af7"\n\n\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n   const { DynamoDB } = window.mmdynamo;\n\nconst client = new DynamoDB({\n  region,\n  endpoint,\n  accessKeyId,\n  secretAccessKey,\n});\n    \n\nfunction queryData() {\n        document.getElementById("textarea").innerHTML +=\n          "Querying for movies from 1985.";\n\n        var params = {\n          TableName: "Movies",\n          ProjectionExpression: "#yr, title, info.genres, info.actors[0]",\n          KeyConditionExpression:\n            "#yr = :yyyy and title between :letter1 and :letter2",\n          ExpressionAttributeNames: { "#yr": "year" },\n          ExpressionAttributeValues: {\n            ":yyyy": { N: "1992" },\n            ":letter1": { S: "A" },\n            ":letter2": { S: "L" },\n          },\n        };\n\n        client.query(params, function (err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML +=\n              "Unable to query. Error: " +\n              "\\n" +\n              JSON.stringify(err, undefined, 2);\n          } else {\n            document.getElementById("textarea").innerHTML +=\n              "Querying for movies from 1992 - titles A-L, with genres and lead actor: " +\n              "\\n" +\n              JSON.stringify(data, undefined, 2);\n          }\n        });\n      }\n\n\n   \n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="Query"\n      type="button"\n      value="Query Data"\n      onclick="queryData();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n')),(0,r.kt)("h2",{id:"scan-data"},"Scan Data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\n<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "smoke1.eng3.macrometa.io"\n    const host = "https://api-" + dcName;\n    const apiKey = "guest.id1.CGYpbciDDhYK5cnyIjdSXQln2PUj1x7qO0cS4YgR9HBFzEm34cvhKa2Ge7kh00Zgce1af7"\n\n\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n   const { DynamoDB } = window.mmdynamo;\n\nconst client = new DynamoDB({\n  region,\n  endpoint,\n  accessKeyId,\n  secretAccessKey,\n});\n    \nfunction scanData() {\n        document.getElementById("textarea").innerHTML +=\n          "Scanning Movies table." + "\\n";\n\n        var params = {\n          TableName: "Movies",\n          ProjectionExpression: "#yr, title, info.rating",\n          FilterExpression: "#yr between :start_yr and :end_yr",\n          ExpressionAttributeNames: { "#yr": "year" },\n          ExpressionAttributeValues: {\n            ":start_yr": { N: "1950" },\n            ":end_yr": { N: "1959" },\n          },\n        };\n\n        client.scan(params, onScan);\n\n        function onScan(err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML +=\n              "Unable to scan the table: " +\n              "\\n" +\n              JSON.stringify(err, undefined, 2);\n          } else {\n            // Print all the movies\n            document.getElementById("textarea").innerHTML +=\n              "Scan succeeded. " + "\\n";\n            data.Items.forEach(function (movie) {\n              document.getElementById("textarea").innerHTML +=\n                movie.year +\n                ": " +\n                movie.title +\n                " - rating: " +\n                movie.info.rating +\n                "\\n";\n            });\n\n            // Continue scanning if we have more movies (per scan 1MB limitation)\n            document.getElementById("textarea").innerHTML +=\n              "Scanning for more..." + "\\n";\n            params.ExclusiveStartKey = data.LastEvaluatedKey;\n            client.scan(params, onScan);\n          }\n        }\n      }\n\n\n   \n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="Scan"\n      type="button"\n      value="Scan Data"\n      onclick="scanData();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n')),(0,r.kt)("h2",{id:"delete-item"},"Delete Item"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "play.paas.macrometa.io";\n    const host = "https://api-" + dcName;\n    const apiKey = "<your-api-key>";\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n      const { DynamoDB } = window.mmdynamo;\n\n      const client = new DynamoDB({\n        region,\n        endpoint,\n        accessKeyId,\n        secretAccessKey,\n      });\n\n     \n      function conditionalDelete() {\n        var params = {\n          TableName: "Movies",\n          Key: { year: { N: "2015" }, title: { S: "The Big New Movie" } },\n          ConditionExpression: "info.rating <= :val",\n          ExpressionAttributeValues: { ":val": { N: "5" } },\n        };\n\n        client.deleteItem(params, function (err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML =\n              "The conditional delete failed: " +\n              "\\n" +\n              JSON.stringify(err, undefined, 2);\n          } else {\n            document.getElementById("textarea").innerHTML =\n              "The conditional delete succeeded: " +\n              "\\n" +\n              JSON.stringify(data, undefined, 2);\n          }\n        });\n      }\n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="deleteItem"\n      type="button"\n      value="Delete Item"\n      onclick="conditionalDelete();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n')),(0,r.kt)("h2",{id:"delete-table"},"Delete Table"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\n<html>\n  <head>\n    <script src="https://unpkg.com/mmdynamo@0.2.0/dist/mmdynamo.umd.js"><\/script>\n\n    <script>\n    const dcName = "play.paas.macrometa.io";\n    const host = "https://api-" + dcName;\n    const apiKey = "<your-api-key>";\n    /*\n    If you have a JWT token\n\n    const JWT = "xxxxxxxxxxxxxxxxxxxxxx";\n    */\n\n    const service = "dynamodb";\n    const region = "us-east-1";\n    const endpoint = host + "/_api/dynamo";\n    // secretAccessKey is a required parameter for aws-sdk we recommend you to pass "c8"\n    const secretAccessKey = "c8";\n    const accessKeyId = "apikey " + apiKey;\n      /*\n   If you are using JWT token use the below instead\n   \n   const accessKeyId = "bearer " + JWT;\n   */\n      const { DynamoDB } = window.mmdynamo;\n\n      const client = new DynamoDB({\n        region,\n        endpoint,\n        accessKeyId,\n        secretAccessKey,\n      });\n\n      function deleteMovies() {\n        var params = {\n          TableName: "Movies",\n        };\n\n        client.deleteTable(params, function (err, data) {\n          if (err) {\n            document.getElementById("textarea").innerHTML =\n              "Unable to delete table: " +\n              "\\n" +\n              JSON.stringify(err, undefined, 2);\n          } else {\n            document.getElementById("textarea").innerHTML = "Table deleted.";\n          }\n        });\n      }\n\n    <\/script>\n  </head>\n\n  <body>\n    <input\n      id="deleteTable"\n      type="button"\n      value="Delete Table"\n      onclick="deleteMovies();"\n    />\n    <br /><br />\n    <textarea\n      readonly\n      id="textarea"\n      style={{ width:400px; height:800px }}\n    ></textarea>\n  </body>\n</html>\n')))}y.isMDXComponent=!0}}]);