"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[82790],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var c=n.createContext({}),o=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,l=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),y=o(a),k=s,m=y["".concat(c,".").concat(k)]||y[k]||d[k]||l;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function k(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var l=a.length,i=new Array(l);i[0]=y;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:s,i[1]=r;for(var o=2;o<l;o++)i[o]=a[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},28138:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>o});var n=a(87462),s=(a(67294),a(3905));const l={title:"API Key Commands"},i="API Keys (gdnsl apikey)",r={unversionedId:"cli/api-key-cli",id:"cli/api-key-cli",title:"API Key Commands",description:"API key commands.",source:"@site/docs/cli/api-key-cli.md",sourceDirName:"cli",slug:"/cli/api-key-cli",permalink:"/docs/cli/api-key-cli",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cli/api-key-cli.md",tags:[],version:"current",frontMatter:{title:"API Key Commands"},sidebar:"defaultSidebar",previous:{title:"Account Details Commands",permalink:"/docs/cli/account-details-cli"},next:{title:"Autocomplete Commands",permalink:"/docs/cli/autocomplete-cli"}},c={},o=[{value:"gdnsl apikey get",id:"gdnsl-apikey-get",level:2},{value:"gdnsl apikey set",id:"gdnsl-apikey-set",level:2},{value:"gdnsl apikey clear",id:"gdnsl-apikey-clear",level:2}],p={toc:o};function d(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"api-keys-gdnsl-apikey"},"API Keys (gdnsl apikey)"),(0,s.kt)("p",null,"API key commands."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  gdnsl apikey [flags]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Examples:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'  # List api keys\n  gdnsl apikey --list\n\n  # Get an existing api key, identified by keyid.\n  gdnsl apikey --key-id testKey\n\n  # Validate an apikey.\n  gdnsl apikey --validate "anurag_macrometa.io.testKey.bpluElGqCbBIlkhDQrVsu4zBB2GxtPb3YCWcNsXSInmn"\n\n  # Create an api key.\n  gdnsl apikey --key-id testKey --create \n\n  # Delete api key.\n  gdnsl apikey --key-id testKey --delete   \n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                  Help for apikeys.\n      --key-id                The id of the api key.\n      --create                Create an apikey.\n      --delete                Delete an apikey.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options inherited:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string         gdnsl config file (default is ./gdnsl.yaml)\n \n")),(0,s.kt)("h2",{id:"gdnsl-apikey-get"},"gdnsl apikey get"),(0,s.kt)("p",null,"Gets the access levels for the API key with key ID."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  gdnsl apikey get [flags]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Examples:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"\n    # List the full  accessible fabrics, streams and collections for a keyId. \n    gdnsl apikey get --key-id testKey --full  \n\n    # List the  accessible fabrics for a keyId. \n    gdnsl apikey get --key-id testKey \n\n    # List the  accessible streams and collections in a fabric for a keyId. \n    gdnsl apikey get --key-id testKey --fabric geoCountry  \n\n    # List all the  accessible streams in a fabric for a keyId.\n    gdnsl apikey get --key-id  testKey --fabric geoCity --all-streams \n\n    # List all the full accessible streams in a fabric for a keyId.\n    gdnsl apikey get --key-id  testKey --fabric geoCity --all-streams --full \n\n    # Return the access level for a specific stream.\n    gdnsl apikey get --key-id testKey  --fabric geocountry --stream countryStream \n\n    # Return the access level for all collections.\n    gdnsl apikey  get --key-id testKey  --fabric geocountry --all-collections \n\n    # Return the full access level for all collections.\n    gdnsl apikey  get --key-id testKey  --fabric geocountry --all-collections --full \n\n    # Return the access level for a specific collection.\n    gdnsl apikey  get --key-id testKey  --fabric geocountry --collection country \n\n    # Get the billing access level.\n    gdnsl apikey get --key-id testKey --billing\n\n    # Get the list of attributes for the specified keyid.\n    gdnsl apikey  get --key-id testKey --attributes \n\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"   -h, --help             Help for apikeys.\n      --keyId             Set the stream access levels in the database dbname of api key with keyid.\n      --fabric            Name of the fabric(default is _system).\n      --all-stream        Get access level for all the streams.\n      --stream            Name of the stream.      \n      --all-collection    Get access level for all the collections.\n      --collection        Name of the collection.\n      --billing           Get billing access level.\n      --attributes        Flag for creating updating removing the attributes.\n      --full              Return the full set of access levels for all databases and all collections.\n      --param             key=value pair as equal separated string.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options inherited:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string     gdnsl config file (default is ./gdnsl.yaml)\n")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},'If access level for stream is not set then default("',(0,s.kt)("em",{parentName:"p"},'") access level will be use. If default("'),'") access level is also not set then database access level will be use.You need the Administrate server access level in order to execute this command.')),(0,s.kt)("h2",{id:"gdnsl-apikey-set"},"gdnsl apikey set"),(0,s.kt)("p",null,"Sets the access levels for the api key with keyid."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  gdnsl apikey set  [flags] \n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Examples:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Set the stream access level to publish and subscribe for a specific stream in the database.\n  gdnsl apikey set --key-id testKey --fabric geoCountry --stream countryStream --permissions rw\n\n  # Set the stream access level to subscribe for a specific stream in the database.\n  gdnsl apikey set --key-id testKey --fabric geoCity --stream cityStream --permissions ro\n\n  # Set the stream access level to publish for a specific stream in the database. \n  gdnsl apikey set --key-id testKey --fabiricName geoState --stream stateStream --permissions wo\n\n  # Set the stream access level to No access for a specific stream in the database. \n  gdnsl apikey set --key-id testKey --fabric geoRegion --stream regionStream --permissions none\n\n  # Set the database access level to Administrate for a specific database. \n  gdnsl apikey set --key-id testKey --fabric persons --permissions rw\n\n  # Set the database access level to Access for a specific database. \n  gdnsl apikey set --key-id testKey --fabric persons --permissions ro\n\n  # Set the database access level to No access for a specific database. \n  gdnsl apikey set --key-id testKey --fabric persons --permissions none\n\n  # Set the collection access level to Read/Write for a specific collection in the database.\n  gdnsl apikey set --key-id testKey --fabric geoCountry --collection country --permissions rw\n\n  # Set the collection access level to Read Only for a specific collection in the databas.\n  gdnsl apikey set --key-id testKey --fabric geoCity --collection city --permissions ro\n\n  # Set the collection access level to No access for a specific collection in the database. \n  gdnsl apikey set --key-id testKey --fabric geoRegion --collection region --permissions none\n\n  # Set the billing access level to Administrate.\n  gdnsl apikey set --billing --key-id testKey --permissions rw\n\n  # Set the billing access level to Access.\n  gdnsl apikey set --billing --key-id testKey --permissions ro\n\n  # Set the billing access level to No access. \n  gdnsl apikey set --billing --key-id testKey --permissions none\n\n  # Create/Update the attributes for api key with keyid \n  gdnsl apikey set --attributes --key-id testKey --param "key1=Value1" --param "key2=Value2"\n\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help              Help for apikeys.\n      --keyId             Set the stream access levels in the database dbname of api key with keyid.\n      --fabric            Name of the fabric. (default is _system).\n      --stream            Name of the stream.\n      --collection        Name of the collection.\n      --all-collection    Get access level for all the collections.\n      --all-stream        Get access level for all the streams.\n      --param             key=value pair as equal separated string.\n      --permissions       Permission flag for all the streams, collections, fabric and billing.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options inherited:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string     gdnsl config file (default is ./gdnsl.yaml)\n")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},'If access level for stream is not set then default("',(0,s.kt)("em",{parentName:"p"},'") access level will be use. If default("'),'") access level is also not set then database access level will be use. You need the Administrate server access level in order to execute this command.')),(0,s.kt)("h2",{id:"gdnsl-apikey-clear"},"gdnsl apikey clear"),(0,s.kt)("p",null,"Clear the access level of billing, collection, fabric, and streams for a specific API key ID."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  gdnsl apikey get [flags]\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Examples:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  # Clears the stream access level for given stream for api key with keyid.\n  gdnsl apikey clear  --key-id  testKey --fabric geoCountry --stream countryStream\n\n  # Clears the fabric access level on the persons fabric for the api key with keyid.\n  gdnsl apikey clear  --key-id  testKey --fabric persons\n\n  # Clears the collection access level for the country collection in fabric geoCountry for the api key with keyid.\n  gdnsl apikey clear  --key-id testKey --fabric  geoCountry --collection country\n\n  # Clears the billing access level of keyid.\n  gdnsl apikey clear  --key-id  testKey --billing\n\n  # Delete a specific attribute of keyid.\n  gdnsl apikey clear  --key-id  testKey --attributes name\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help              Help for apikeys.\n      --keyId             Set the stream access levels in the database dbname of api key with keyid.\n      --fabric            Name of the fabric(default is _system).\n      --stream            Name of the stream.      \n      --collection        Name of the collection.\n      --billing           Billing access level.\n      --attributes        Attributes for the key-id of an api key.\n      --attribute         Attribute key.\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Options inherited:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string     gdnsl config file (default is ./gdnsl.yaml) \n")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},'If access level for stream is not set then default("',(0,s.kt)("em",{parentName:"p"},'") access level will be use. If default("'),'") access level is also not set then database access level will be use.You need the Administrate server access level in order to execute this command.')))}d.isMDXComponent=!0}}]);