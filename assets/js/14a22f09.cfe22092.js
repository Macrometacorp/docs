"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52619],{3905:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>N});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var m=a.createContext({}),i=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},o=function(e){var n=i(e.components);return a.createElement(m.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,m=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),k=i(t),N=l,d=k["".concat(m,".").concat(N)]||k[N]||s[N]||r;return t?a.createElement(d,u(u({ref:n},o),{},{components:t})):a.createElement(d,u({ref:n},o))}));function N(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,u=new Array(r);u[0]=k;var p={};for(var m in n)hasOwnProperty.call(n,m)&&(p[m]=n[m]);p.originalType=e,p.mdxType="string"==typeof e?e:l,u[1]=p;for(var i=2;i<r;i++)u[i]=t[i];return a.createElement.apply(null,u)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},34428:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>u,default:()=>s,frontMatter:()=>r,metadata:()=>p,toc:()=>i});var a=t(87462),l=(t(67294),t(3905));const r={title:"Numeric Functions"},u=void 0,p={unversionedId:"queryworkers/c8ql/functions/numeric",id:"queryworkers/c8ql/functions/numeric",title:"Numeric Functions",description:"C8QL offers some numeric functions for calculations. The following functions are supported:",source:"@site/docs/queryworkers/c8ql/functions/numeric.md",sourceDirName:"queryworkers/c8ql/functions",slug:"/queryworkers/c8ql/functions/numeric",permalink:"/docs/queryworkers/c8ql/functions/numeric",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/functions/numeric.md",tags:[],version:"current",frontMatter:{title:"Numeric Functions"},sidebar:"defaultSidebar",previous:{title:"Hash Functions",permalink:"/docs/queryworkers/c8ql/functions/hash"},next:{title:"Search Functions",permalink:"/docs/queryworkers/c8ql/functions/search"}},m={},i=[{value:"ABS()",id:"abs",level:2},{value:"ACOS()",id:"acos",level:2},{value:"ASIN()",id:"asin",level:2},{value:"ATAN()",id:"atan",level:2},{value:"ATAN2()",id:"atan2",level:2},{value:"AVERAGE()",id:"average",level:2},{value:"AVG()",id:"avg",level:2},{value:"CEIL()",id:"ceil",level:2},{value:"COS()",id:"cos",level:2},{value:"DEGREES()",id:"degrees",level:2},{value:"EXP()",id:"exp",level:2},{value:"EXP2()",id:"exp2",level:2},{value:"FLOOR()",id:"floor",level:2},{value:"LOG()",id:"log",level:2},{value:"LOG2()",id:"log2",level:2},{value:"LOG10()",id:"log10",level:2},{value:"MAX()",id:"max",level:2},{value:"MEDIAN()",id:"median",level:2},{value:"MIN()",id:"min",level:2},{value:"PERCENTILE()",id:"percentile",level:2},{value:"PI()",id:"pi",level:2},{value:"POW()",id:"pow",level:2},{value:"RADIANS()",id:"radians",level:2},{value:"RAND()",id:"rand",level:2},{value:"RANGE()",id:"range",level:2},{value:"ROUND()",id:"round",level:2},{value:"SIN()",id:"sin",level:2},{value:"SQRT()",id:"sqrt",level:2},{value:"STDDEV_POPULATION()",id:"stddev_population",level:2},{value:"STDDEV_SAMPLE()",id:"stddev_sample",level:2},{value:"STDDEV()",id:"stddev",level:2},{value:"SUM()",id:"sum",level:2},{value:"TAN()",id:"tan",level:2},{value:"VARIANCE_POPULATION()",id:"variance_population",level:2},{value:"VARIANCE_SAMPLE()",id:"variance_sample",level:2},{value:"VARIANCE()",id:"variance",level:2}],o={toc:i};function s(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"C8QL offers some numeric functions for calculations. The following functions are supported:"),(0,l.kt)("h2",{id:"abs"},"ABS()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ABS(value) \u2192 unsignedValue")),(0,l.kt)("p",null,"Return the absolute part of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): any number, positive or negative"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"unsignedValue")," (number): the number without + or - sign")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ABS(-5) // 5\nABS(+5) // 5\nABS(3.5) // 3.5\n")),(0,l.kt)("h2",{id:"acos"},"ACOS()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ACOS(value) \u2192 num")),(0,l.kt)("p",null,"Return the arccosine of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the arccosine of ",(0,l.kt)("em",{parentName:"li"},"value"),", or ",(0,l.kt)("em",{parentName:"li"},"null")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is outside the valid range -1 and 1 (inclusive)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ACOS(-1) // 3.141592653589793\nACOS(0) // 1.5707963267948966\nACOS(1) // 0\nACOS(2) // null\n")),(0,l.kt)("h2",{id:"asin"},"ASIN()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ASIN(value) \u2192 num")),(0,l.kt)("p",null,"Return the arcsine of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the arcsine of ",(0,l.kt)("em",{parentName:"li"},"value"),", or ",(0,l.kt)("em",{parentName:"li"},"null")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is outside the valid range -1 and 1 (inclusive)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ASIN(1) // 1.5707963267948966\nASIN(0) // 0\nASIN(-1) // -1.5707963267948966\nASIN(2) // null\n")),(0,l.kt)("h2",{id:"atan"},"ATAN()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ATAN(value) \u2192 num")),(0,l.kt)("p",null,"Return the arctangent of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the arctangent of ",(0,l.kt)("em",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ATAN(-1) // -0.7853981633974483\nATAN(0) // 0\nATAN(10) // 1.4711276743037347\n")),(0,l.kt)("h2",{id:"atan2"},"ATAN2()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ATAN2(y, x) \u2192 num")),(0,l.kt)("p",null,"Return the arctangent of the quotient of ",(0,l.kt)("em",{parentName:"p"},"y")," and ",(0,l.kt)("em",{parentName:"p"},"x"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ATAN2(0, 0) // 0\nATAN2(1, 0) // 1.5707963267948966\nATAN2(1, 1) // 0.7853981633974483\nATAN2(-10, 20) // -0.4636476090008061\n")),(0,l.kt)("h2",{id:"average"},"AVERAGE()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AVERAGE(numArray) \u2192 mean")),(0,l.kt)("p",null,"Return the average (arithmetic mean) of the values in ",(0,l.kt)("em",{parentName:"p"},"array"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"mean")," (number","|","null): the average value of ",(0,l.kt)("em",{parentName:"li"},"numArray"),". If the array is\nempty or contains ",(0,l.kt)("em",{parentName:"li"},"null")," values only, ",(0,l.kt)("em",{parentName:"li"},"null")," will be returned.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"AVERAGE( [5, 2, 9, 2] ) // 4.5\nAVERAGE( [ -3, -5, 2 ] ) // -2\nAVERAGE( [ 999, 80, 4, 4, 4, 3, 3, 3 ] ) // 137.5\n")),(0,l.kt)("h2",{id:"avg"},"AVG()"),(0,l.kt)("p",null,"This is an alias for ",(0,l.kt)("a",{parentName:"p",href:"#average"},"AVERAGE()"),"."),(0,l.kt)("h2",{id:"ceil"},"CEIL()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"CEIL(value) \u2192 roundedValue")),(0,l.kt)("p",null,"Return the integer closest but not less than ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("p",null,"To round downward, see ",(0,l.kt)("a",{parentName:"p",href:"#floor"},"FLOOR()"),".",(0,l.kt)("br",null),"\nTo round to the nearest integer value, see ",(0,l.kt)("a",{parentName:"p",href:"#round"},"ROUND()"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): any number"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"roundedValue")," (number): the value rounded to the ceiling")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"CEIL(2.49) // 3\nCEIL(2.50) // 3\nCEIL(-2.50) // -2\nCEIL(-2.51) // -2\n")),(0,l.kt)("h2",{id:"cos"},"COS()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"COS(value) \u2192 num")),(0,l.kt)("p",null,"Return the cosine of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the cosine of ",(0,l.kt)("em",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"COS(1) // 0.5403023058681398 \nCOS(0) // 1\nCOS(-3.141592653589783) // -1\nCOS(RADIANS(45)) // 0.7071067811865476\n")),(0,l.kt)("h2",{id:"degrees"},"DEGREES()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"DEGREES(rad) \u2192 num")),(0,l.kt)("p",null,"Return the angle converted from radians to degrees."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rad")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the angle in degrees")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"DEGREES(0.7853981633974483) // 45\nDEGREES(0) // 0\nDEGREES(3.141592653589793) // 180\n")),(0,l.kt)("h2",{id:"exp"},"EXP()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"EXP(value) \u2192 num")),(0,l.kt)("p",null,"Return Euler's constant (2.71828...) raised to the power of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): Euler's constant raised to the power of ",(0,l.kt)("em",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"EXP(1) // 2.718281828459045\nEXP(10) // 22026.46579480671\nEXP(0) // 1\n")),(0,l.kt)("h2",{id:"exp2"},"EXP2()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"EXP2(value) \u2192 num")),(0,l.kt)("p",null,"Return 2 raised to the power of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): 2 raised to the power of ",(0,l.kt)("em",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"EXP2(16) // 65536\nEXP2(1) // 2\nEXP2(0) // 1\n")),(0,l.kt)("h2",{id:"floor"},"FLOOR()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"FLOOR(value) \u2192 roundedValue")),(0,l.kt)("p",null,"Return the integer closest but not greater than ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("p",null,"To round upward, see ",(0,l.kt)("a",{parentName:"p",href:"#ceil"},"CEIL()"),".",(0,l.kt)("br",null),"\nTo round to the nearest integer value, see ",(0,l.kt)("a",{parentName:"p",href:"#round"},"ROUND()"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): any number"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"roundedValue")," (number): the value rounded downward")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"FLOOR(2.49) // 2\nFLOOR(2.50) // 2\nFLOOR(-2.50) // -3\nFLOOR(-2.51) // -3\n")),(0,l.kt)("h2",{id:"log"},"LOG()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"LOG(value) \u2192 num")),(0,l.kt)("p",null,"Return the natural logarithm of ",(0,l.kt)("em",{parentName:"p"},"value"),". The base is Euler's constant (2.71828...)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the natural logarithm of ",(0,l.kt)("em",{parentName:"li"},"value"),", or ",(0,l.kt)("em",{parentName:"li"},"null")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is equal or less than 0")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"LOG(2.718281828459045) // 1\nLOG(10) // 2.302585092994046\nLOG(0) // null\n")),(0,l.kt)("h2",{id:"log2"},"LOG2()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"LOG2(value) \u2192 num")),(0,l.kt)("p",null,"Return the base 2 logarithm of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the base 2 logarithm of ",(0,l.kt)("em",{parentName:"li"},"value"),", or ",(0,l.kt)("em",{parentName:"li"},"null")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is equal or less than 0")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"LOG2(1024) // 10\nLOG2(8) // 3\nLOG2(0) // null\n")),(0,l.kt)("h2",{id:"log10"},"LOG10()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"LOG10(value) \u2192 num")),(0,l.kt)("p",null,"Return the base 10 logarithm of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the base 10 logarithm of ",(0,l.kt)("em",{parentName:"li"},"value"),", or ",(0,l.kt)("em",{parentName:"li"},"null")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is equal or less than 0")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"LOG10(10000) // 10\nLOG10(10) // 1\nLOG10(0) // null\n")),(0,l.kt)("h2",{id:"max"},"MAX()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MAX(anyArray) \u2192 max")),(0,l.kt)("p",null,"Return the greatest element of ",(0,l.kt)("em",{parentName:"p"},"anyArray"),". The array is not limited to numbers. Refer to ",(0,l.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/type-and-value-order"},"Type and Value Order"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"anyArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"max")," (any","|","null): the element with the greatest value. If the array is empty or contains ",(0,l.kt)("em",{parentName:"li"},"null")," values only, the function will return ",(0,l.kt)("em",{parentName:"li"},"null"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"MAX( [5, 9, -2, null, 1] ) // 9\nMAX( [ null, null ] ) // null\n")),(0,l.kt)("h2",{id:"median"},"MEDIAN()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MEDIAN(numArray) \u2192 median")),(0,l.kt)("p",null,"Return the median value of the values in ",(0,l.kt)("em",{parentName:"p"},"array"),"."),(0,l.kt)("p",null,"The array is sorted and the element in the middle is returned. If the array has an even length of elements, the two center-most elements are interpolated by calculating the average value (arithmetic mean)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"median")," (number","|","null): the median of ",(0,l.kt)("em",{parentName:"li"},"numArray"),". If the array is empty or contains ",(0,l.kt)("em",{parentName:"li"},"null")," values only, the function will return ",(0,l.kt)("em",{parentName:"li"},"null"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"MEDIAN( [ 1, 2, 3] ) // 2\nMEDIAN( [ 1, 2, 3, 4 ] ) // 2.5\nMEDIAN( [ 4, 2, 3, 1 ] ) // 2.5\nMEDIAN( [ 999, 80, 4, 4, 4, 3, 3, 3 ] ) // 4\n")),(0,l.kt)("h2",{id:"min"},"MIN()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"MIN(anyArray) \u2192 min")),(0,l.kt)("p",null,"Return the smallest element of ",(0,l.kt)("em",{parentName:"p"},"anyArray"),". The array is not limited to numbers. Refer to ",(0,l.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/type-and-value-order"},"Type and Value Order")," for more information."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"anyArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"min")," (any","|","null): the element with the smallest value. If the array is empty or contains ",(0,l.kt)("em",{parentName:"li"},"null")," values only, the function will return ",(0,l.kt)("em",{parentName:"li"},"null"),".")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"MIN( [5, 9, -2, null, 1] ) // -2\nMIN( [ null, null ] ) // null\n")),(0,l.kt)("h2",{id:"percentile"},"PERCENTILE()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PERCENTILE(numArray, n, method) \u2192 percentile")),(0,l.kt)("p",null,"Return the ",(0,l.kt)("em",{parentName:"p"},"n_th percentile of the values in_numArray"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"n")," (number): must be between 0 (excluded) and 100 (included)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"method")," (string, ",(0,l.kt)("em",{parentName:"li"},"optional"),'): "rank" (default) or "interpolation"'),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"percentile")," (number","|","null): the ",(0,l.kt)("em",{parentName:"li"},"n_th percentile, or_null")," if the array is empty or only ",(0,l.kt)("em",{parentName:"li"},"null")," values are contained in it or the percentile cannot be calculated")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'PERCENTILE( [1, 2, 3, 4], 50 ) // 2\nPERCENTILE( [1, 2, 3, 4], 50, "rank" ) // 2\nPERCENTILE( [1, 2, 3, 4], 50, "interpolation" ) // 2.5\n')),(0,l.kt)("h2",{id:"pi"},"PI()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"PI() \u2192 pi")),(0,l.kt)("p",null,"Return pi."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"pi")," (number): the first few significant digits of pi (3.141592653589793)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"PI() // 3.141592653589793\n")),(0,l.kt)("h2",{id:"pow"},"POW()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"POW(base, exp) \u2192 num")),(0,l.kt)("p",null,"Return the ",(0,l.kt)("em",{parentName:"p"},"base")," to the exponent ",(0,l.kt)("em",{parentName:"p"},"exp"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"base")," (number): the base value"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"exp")," (number): the exponent value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the exponentiated value")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"POW( 2, 4 ) // 16\nPOW( 5, -1 ) // 0.2\nPOW( 5, 0 ) // 1\n")),(0,l.kt)("h2",{id:"radians"},"RADIANS()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"RADIANS(deg) \u2192 num")),(0,l.kt)("p",null,"Return the angle converted from degrees to radians."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"deg")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the angle in radians")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"RADIANS(180) // 3.141592653589793\nRADIANS(90) // 1.5707963267948966\nRADIANS(0) // 0\n")),(0,l.kt)("h2",{id:"rand"},"RAND()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"RAND() \u2192 randomNumber")),(0,l.kt)("p",null,"Return a pseudo-random number between 0 and 1."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"randomNumber")," (number): a number greater than 0 and less than 1")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"RAND() // 0.3503170117504508\nRAND() // 0.6138226173882478\n")),(0,l.kt)("p",null,"Complex example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'LET coinFlips = (\n    FOR i IN 1..100000\n    RETURN RAND() > 0.5 ? "heads" : "tails"\n)\nRETURN MERGE(\n    FOR flip IN coinFlips\n        COLLECT f = flip WITH COUNT INTO count\n        RETURN { [f]: count }\n)\n')),(0,l.kt)("p",null,"Result:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "heads": 49902,\n    "tails": 50098\n  }\n]\n')),(0,l.kt)("h2",{id:"range"},"RANGE()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"RANGE(start, stop, step) \u2192 numArray")),(0,l.kt)("p",null,"Return an array of numbers in the specified range, optionally with increments other than 1. The ",(0,l.kt)("em",{parentName:"p"},"start")," and ",(0,l.kt)("em",{parentName:"p"},"stop")," arguments are truncated to integers unless a ",(0,l.kt)("em",{parentName:"p"},"step")," argument is provided."),(0,l.kt)("p",null,"Also see the ",(0,l.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operators#range-operator"},"range operator")," for ranges with integer bounds and a step size of 1."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"start")," (number): the value to start the range at (inclusive)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"stop")," (number): the value to end the range with (inclusive)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"step")," (number, ",(0,l.kt)("em",{parentName:"li"},"optional"),"): how much to increment in every step, the default is ",(0,l.kt)("em",{parentName:"li"},"1.0")),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): all numbers in the range as array")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"RANGE(1, 4) // [ 1, 2, 3, 4 ]\nRANGE(1, 4, 2) // [ 1, 3 ]\nRANGE(1, 4, 3) // [ 1, 4 ]\nRANGE(1.5, 2.5) // [ 1, 2 ]\nRANGE(1.5, 2.5, 1) // [ 1.5, 2.5 ]\nRANGE(1.5, 2.5, 0.5) // [ 1.5, 2, 2.5 ]\nRANGE(-0.75, 1.1, 0.5) // [ -0.75, -0.25, 0.25, 0.75 ]\n")),(0,l.kt)("h2",{id:"round"},"ROUND()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"ROUND(value) \u2192 roundedValue")),(0,l.kt)("p",null,"Return the integer closest to ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): any number"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"roundedValue")," (number): the value rounded to the closest integer")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"ROUND(2.49) // 2\nROUND(2.50) // 3\nROUND(-2.50) // -2\nROUND(-2.51) // -3\n")),(0,l.kt)("p",null,"Rounding towards zero, also known as ",(0,l.kt)("em",{parentName:"p"},"trunc()")," in C/C++, can be achieved with a combination of the ",(0,l.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operators#ternary-operator"},"ternary operator"),", ",(0,l.kt)("a",{parentName:"p",href:"#ceil"},"CEIL()")," and ",(0,l.kt)("a",{parentName:"p",href:"#floor"},"FLOOR()"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"value >= 0 ? FLOOR(value) : CEIL(value)\n")),(0,l.kt)("h2",{id:"sin"},"SIN()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SIN(value) \u2192 num")),(0,l.kt)("p",null,"Return the sine of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the sine of ",(0,l.kt)("em",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"SIN(3.141592653589783 / 2) // 1\nSIN(0) // 0\nSIN(-3.141592653589783 / 2) // -1\nSIN(RADIANS(270)) // -1\n")),(0,l.kt)("h2",{id:"sqrt"},"SQRT()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SQRT(value) \u2192 squareRoot")),(0,l.kt)("p",null,"Return the square root of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): a number"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"squareRoot")," (number): the square root of ",(0,l.kt)("em",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"SQRT(9) // 3\nSQRT(2) // 1.4142135623730951\n")),(0,l.kt)("p",null,"Other roots can be calculated with ",(0,l.kt)("a",{parentName:"p",href:"#pow"},"POW()")," like ",(0,l.kt)("inlineCode",{parentName:"p"},"POW(value, 1/n)"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// 4th root of 8*8*8*8 = 4096\nPOW(4096, 1/4) // 8\n\n// cube root of 3*3*3 = 27\nPOW(27, 1/3) // 3\n\n// square root of 3*3 = 9\nPOW(9, 1/2) // 3\n")),(0,l.kt)("h2",{id:"stddev_population"},"STDDEV_POPULATION()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"STDDEV_POPULATION(numArray) \u2192 num")),(0,l.kt)("p",null,"Return the population standard deviation of the values in ",(0,l.kt)("em",{parentName:"p"},"array"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the population standard deviation of ",(0,l.kt)("em",{parentName:"li"},"numArray"),". If the array is empty or only ",(0,l.kt)("em",{parentName:"li"},"null")," values are contained in the array, ",(0,l.kt)("em",{parentName:"li"},"null")," will be returned.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"STDDEV_POPULATION( [ 1, 3, 6, 5, 2 ] ) // 1.854723699099141\n")),(0,l.kt)("h2",{id:"stddev_sample"},"STDDEV_SAMPLE()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"STDDEV_SAMPLE(numArray) \u2192 num")),(0,l.kt)("p",null,"Return the sample standard deviation of the values in ",(0,l.kt)("em",{parentName:"p"},"array"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the sample standard deviation of ",(0,l.kt)("em",{parentName:"li"},"numArray"),". If the array is empty or only ",(0,l.kt)("em",{parentName:"li"},"null")," values are contained in the array, ",(0,l.kt)("em",{parentName:"li"},"null")," will be returned.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"STDDEV_SAMPLE( [ 1, 3, 6, 5, 2 ] ) // 2.0736441353327724\n")),(0,l.kt)("h2",{id:"stddev"},"STDDEV()"),(0,l.kt)("p",null,"This is an alias for ",(0,l.kt)("a",{parentName:"p",href:"#stddev_population"},"STDDEV_POPULATION()"),"."),(0,l.kt)("h2",{id:"sum"},"SUM()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SUM(numArray) \u2192 sum")),(0,l.kt)("p",null,"Return the sum of the values in ",(0,l.kt)("em",{parentName:"p"},"array"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"sum")," (number): the total of all values in ",(0,l.kt)("em",{parentName:"li"},"numArray"),". If the array is empty or only ",(0,l.kt)("em",{parentName:"li"},"null")," values are contained in the array, ",(0,l.kt)("em",{parentName:"li"},"0")," will be returned.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"SUM( [1, 2, 3, 4] ) // 10\nSUM( [null, -5, 6] ) // 1\nSUM( [ ] ) // 0\n")),(0,l.kt)("h2",{id:"tan"},"TAN()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TAN(value) \u2192 num")),(0,l.kt)("p",null,"Return the tangent of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (number): the input value"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number): the tangent of ",(0,l.kt)("em",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"TAN(10) // 0.6483608274590866\nTAN(5) // -3.380515006246586\nTAN(0) // 0\n")),(0,l.kt)("h2",{id:"variance_population"},"VARIANCE_POPULATION()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"VARIANCE_POPULATION(numArray) \u2192 num")),(0,l.kt)("p",null,"Return the population variance of the values in ",(0,l.kt)("em",{parentName:"p"},"array"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the population variance of ",(0,l.kt)("em",{parentName:"li"},"numArray"),". If the array is empty or only ",(0,l.kt)("em",{parentName:"li"},"null")," values are contained in the array, ",(0,l.kt)("em",{parentName:"li"},"null")," will be returned.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"VARIANCE_POPULATION( [ 1, 3, 6, 5, 2 ] ) // 3.4400000000000004\n")),(0,l.kt)("h2",{id:"variance_sample"},"VARIANCE_SAMPLE()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"VARIANCE_SAMPLE(array) \u2192 num")),(0,l.kt)("p",null,"Return the sample variance of the values in ",(0,l.kt)("em",{parentName:"p"},"array"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"numArray")," (array): an array of numbers, ",(0,l.kt)("em",{parentName:"li"},"null")," values are ignored"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"num")," (number","|","null): the sample variance of ",(0,l.kt)("em",{parentName:"li"},"numArray"),".\nIf the array is empty or only ",(0,l.kt)("em",{parentName:"li"},"null")," values are contained in the array,\n",(0,l.kt)("em",{parentName:"li"},"null")," will be returned.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"VARIANCE_SAMPLE( [ 1, 3, 6, 5, 2 ] ) // 4.300000000000001\n")),(0,l.kt)("h2",{id:"variance"},"VARIANCE()"),(0,l.kt)("p",null,"This is an alias for ",(0,l.kt)("a",{parentName:"p",href:"#variance_population"},"VARIANCE_POPULATION()"),"."))}s.isMDXComponent=!0}}]);