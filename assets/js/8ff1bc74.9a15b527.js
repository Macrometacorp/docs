"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[614],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=m(n),c=r,N=u["".concat(o,".").concat(c)]||u[c]||s[c]||l;return n?a.createElement(N,i(i({ref:t},d),{},{components:n})):a.createElement(N,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>s,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const l={title:"setElement (Function)"},i=void 0,p={unversionedId:"cep/query-guide/functions/json/setElement",id:"cep/query-guide/functions/json/setElement",title:"setElement (Function)",description:"Function sets JSON element into a given JSON at the specific path.",source:"@site/docs/cep/query-guide/functions/json/setElement.md",sourceDirName:"cep/query-guide/functions/json",slug:"/cep/query-guide/functions/json/setElement",permalink:"/docs/cep/query-guide/functions/json/setElement",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/json/setElement.md",tags:[],version:"current",frontMatter:{title:"setElement (Function)"},sidebar:"defaultSidebar",previous:{title:"isExists (Function)",permalink:"/docs/cep/query-guide/functions/json/isExists"},next:{title:"toObject (Function)",permalink:"/docs/cep/query-guide/functions/json/toObject"}},o={},m=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2},{value:"Example 5",id:"example-5",level:2},{value:"Example 6",id:"example-6",level:2}],d={toc:m};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Function sets JSON element into a given JSON at the specific path."),(0,r.kt)("h2",{id:"syntax"},"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> json:setElement(<STRING|OBJECT> json, <STRING> path, <STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT> json.element)\n<OBJECT> json:setElement(<STRING|OBJECT> json, <STRING> path, <STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT> json.element, <STRING> key)\n")),(0,r.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON to which a JSON element needs to be added/replaced."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path where the JSON element should be added/replaced."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json.element"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element being added."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING BOOL DOUBLE FLOAT INT LONG OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"The key to be used to refer the newly added element in the input JSON."),(0,r.kt)("td",{parentName:"tr",align:null},"Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated."),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("h2",{id:"example-1"},"Example 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$', \"{'country' : 'USA'}\", 'address')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),",the function updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}")," by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," element and returns the updated JSON."),(0,r.kt)("h2",{id:"example-2"},"Example 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$', 40, 'age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),",the function updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'age' : 40}")," by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," element and returns the updated JSON."),(0,r.kt)("h2",{id:"example-3"},"Example 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$', 45, 'age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'age' : 40}"),", the function updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'age' : 45}")," by replacing ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," element and returns the updated JSON."),(0,r.kt)("h2",{id:"example-4"},"Example 4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$.items', 'book')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'Stationary', 'items' : ['pen', 'pencil']}"),", the function updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'items' : ['pen', 'pencil', 'book']}")," by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"book")," in the items array and returns the updated JSON."),(0,r.kt)("h2",{id:"example-5"},"Example 5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$.item', 'book')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'Stationary', 'item' : 'pen'}"),", the function updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'item' : 'book'}")," by replacing ",(0,r.kt)("inlineCode",{parentName:"p"},"item")," element and returns the updated JSON."),(0,r.kt)("h2",{id:"example-6"},"Example 6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$.address', 'city', 'SF')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),",the function will not update, but returns the original JSON as there are no valid path for ",(0,r.kt)("inlineCode",{parentName:"p"},"$.address"),"."))}s.isMDXComponent=!0}}]);