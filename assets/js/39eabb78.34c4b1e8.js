"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[70113],{3905:(e,t,a)=>{a.d(t,{Zo:()=>o,kt:()=>N});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},o=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,o=s(e,["components","mdxType","originalType","parentName"]),k=m(a),N=r,c=k["".concat(p,".").concat(N)]||k[N]||u[N]||l;return a?n.createElement(c,i(i({ref:t},o),{},{components:a})):n.createElement(c,i({ref:t},o))}));function N(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},47634:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const l={title:"String Functions"},i=void 0,s={unversionedId:"queryworkers/c8ql/functions/string",id:"queryworkers/c8ql/functions/string",title:"String Functions",description:"For string processing, C8QL offers the following functions:",source:"@site/docs/queryworkers/c8ql/functions/string.md",sourceDirName:"queryworkers/c8ql/functions",slug:"/queryworkers/c8ql/functions/string",permalink:"/docs/queryworkers/c8ql/functions/string",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/functions/string.md",tags:[],version:"current",frontMatter:{title:"String Functions"},sidebar:"defaultSidebar",previous:{title:"Search Functions",permalink:"/docs/queryworkers/c8ql/functions/search"},next:{title:"Type Cast Functions",permalink:"/docs/queryworkers/c8ql/functions/type-cast"}},p={},m=[{value:"CHAR_LENGTH()",id:"char_length",level:2},{value:"CONCAT()",id:"concat",level:2},{value:"CONCAT_SEPARATOR()",id:"concat_separator",level:2},{value:"CONTAINS()",id:"contains",level:2},{value:"COUNT()",id:"count",level:2},{value:"CRC32()",id:"crc32",level:2},{value:"ENCODE_URI_COMPONENT()",id:"encode_uri_component",level:2},{value:"FIND_FIRST()",id:"find_first",level:2},{value:"FIND_LAST()",id:"find_last",level:2},{value:"FNV64()",id:"fnv64",level:2},{value:"JSON_PARSE()",id:"json_parse",level:2},{value:"JSON_STRINGIFY()",id:"json_stringify",level:2},{value:"LEFT()",id:"left",level:2},{value:"LENGTH()",id:"length",level:2},{value:"LEVENSHTEIN_DISTANCE()",id:"levenshtein_distance",level:2},{value:"LIKE()",id:"like",level:2},{value:"LOWER()",id:"lower",level:2},{value:"LTRIM()",id:"ltrim",level:2},{value:"MD5()",id:"md5",level:2},{value:"RANDOM_TOKEN()",id:"random_token",level:2},{value:"REGEX_MATCHES()",id:"regex_matches",level:2},{value:"REGEX_SPLIT()",id:"regex_split",level:2},{value:"REGEX_TEST()",id:"regex_test",level:2},{value:"REGEX_REPLACE()",id:"regex_replace",level:2},{value:"REVERSE()",id:"reverse",level:2},{value:"RIGHT()",id:"right",level:2},{value:"RTRIM()",id:"rtrim",level:2},{value:"SHA1()",id:"sha1",level:2},{value:"SHA512()",id:"sha512",level:2},{value:"SPLIT()",id:"split",level:2},{value:"SOUNDEX()",id:"soundex",level:2},{value:"SUBSTITUTE()",id:"substitute",level:2},{value:"SUBSTRING()",id:"substring",level:2},{value:"TOKENS()",id:"tokens",level:2},{value:"TO_BASE64()",id:"to_base64",level:2},{value:"TO_HEX()",id:"to_hex",level:2},{value:"TRIM()",id:"trim",level:2},{value:"UPPER()",id:"upper",level:2},{value:"UUID()",id:"uuid",level:2}],o={toc:m};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"For string processing, C8QL offers the following functions:"),(0,r.kt)("h2",{id:"char_length"},"CHAR_LENGTH()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CHAR_LENGTH(value) \u2192 length")),(0,r.kt)("p",null,"Return the number of characters in ",(0,r.kt)("em",{parentName:"p"},"value")," (not byte length)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Input"),(0,r.kt)("th",{parentName:"tr",align:null},"Length"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of Unicode characters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Number"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of Unicode characters that represent the number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Array"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of Unicode characters from the resulting stringification")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of Unicode characters from the resulting stringification")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"null"),(0,r.kt)("td",{parentName:"tr",align:null},"0")))),(0,r.kt)("h2",{id:"concat"},"CONCAT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CONCAT(value1, value2, ... valueN) \u2192 str")),(0,r.kt)("p",null,"Concatenate the values passed as ",(0,r.kt)("em",{parentName:"p"},"value1")," to ",(0,r.kt)("em",{parentName:"p"},"valueN"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"values")," (any, ",(0,r.kt)("em",{parentName:"li"},"repeatable"),"): elements of arbitrary type (at least 1)"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"str")," (string): a concatenation of the elements. ",(0,r.kt)("em",{parentName:"li"},"null")," values are ignored.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'CONCAT("foo", "bar", "baz") // "foobarbaz"\nCONCAT(1, 2, 3) // "123"\nCONCAT("foo", [5, 6], {bar: "baz"}) // "foo[5,6]{\\"bar\\":\\"baz\\"}"\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CONCAT(anyArray) \u2192 str")),(0,r.kt)("p",null,"If a single array is passed to ",(0,r.kt)("em",{parentName:"p"},"CONCAT()"),", its members are concatenated."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"anyArray")," (array): array with elements of arbitrary type"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"str")," (string): a concatenation of the array elements. ",(0,r.kt)("em",{parentName:"li"},"null")," values are ignored.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'CONCAT( [ "foo", "bar", "baz" ] ) // "foobarbaz"\nCONCAT( [1, 2, 3] ) // "123"\n')),(0,r.kt)("h2",{id:"concat_separator"},"CONCAT_SEPARATOR()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CONCAT_SEPARATOR(separator, value1, value2, ... valueN) \u2192 joinedString")),(0,r.kt)("p",null,"Concatenate the strings passed as arguments ",(0,r.kt)("em",{parentName:"p"},"value1")," to ",(0,r.kt)("em",{parentName:"p"},"valueN")," using the ",(0,r.kt)("em",{parentName:"p"},"separator")," string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"separator")," (string): an arbitrary separator string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"values")," (string","|","array, ",(0,r.kt)("em",{parentName:"li"},"repeatable"),"): strings or arrays of strings as multiple arguments (at least 1)"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"joinedString")," (string): a concatenated string of the elements, using ",(0,r.kt)("em",{parentName:"li"},"separator")," as separator string. ",(0,r.kt)("em",{parentName:"li"},"null")," values are ignored. Array value arguments are expanded automatically, and their individual members will be concatenated. Nested arrays will be expanded too, but with their elements separated by commas if they have more than a single element.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'CONCAT_SEPARATOR(", ", "foo", "bar", "baz")\n// "foo, bar, baz"\n\nCONCAT_SEPARATOR(", ", [ "foo", "bar", "baz" ])\n// "foo, bar, baz"\n\nCONCAT_SEPARATOR(", ", [ "foo", [ "b", "a", "r" ], "baz" ])\n// [ "foo, b,a,r, baz" ]\n\nCONCAT_SEPARATOR("-", [1, 2, 3, null], [4, null, 5])\n// "1-2-3-4-5"\n')),(0,r.kt)("h2",{id:"contains"},"CONTAINS()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CONTAINS(text, search, returnIndex) \u2192 match")),(0,r.kt)("p",null,"Check whether the string ",(0,r.kt)("em",{parentName:"p"},"search")," is contained in the string ",(0,r.kt)("em",{parentName:"p"},"text"),". The string matching performed by ",(0,r.kt)("em",{parentName:"p"},"CONTAINS")," is case-sensitive."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the haystack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"search")," (string): the needle"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returnIndex")," (bool, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): if set to ",(0,r.kt)("em",{parentName:"li"},"true"),", the character position of the match is returned instead of a boolean. The default is ",(0,r.kt)("em",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"match")," (bool","|","number): by default, ",(0,r.kt)("em",{parentName:"li"},"true")," is returned if ",(0,r.kt)("em",{parentName:"li"},"search")," is contained in ",(0,r.kt)("em",{parentName:"li"},"text"),", and ",(0,r.kt)("em",{parentName:"li"},"false")," otherwise. With ",(0,r.kt)("em",{parentName:"li"},"returnIndex")," set to ",(0,r.kt)("em",{parentName:"li"},"true"),", the position of the first occurrence of ",(0,r.kt)("em",{parentName:"li"},"search")," within ",(0,r.kt)("em",{parentName:"li"},"text")," is returned (starting at offset 0), or ",(0,r.kt)("em",{parentName:"li"},"-1")," if ",(0,r.kt)("em",{parentName:"li"},"search")," is not contained in ",(0,r.kt)("em",{parentName:"li"},"text"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'CONTAINS("foobarbaz", "bar") // true\nCONTAINS("foobarbaz", "horse") // false\nCONTAINS("foobarbaz", "ba", true) // 3\nCONTAINS("foobarbaz", "horse", true) // -1\n')),(0,r.kt)("p",null,"To determine if or at which position a value is included in an array, see the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/array#position"},"POSITION() array function"),"."),(0,r.kt)("h2",{id:"count"},"COUNT()"),(0,r.kt)("p",null,"This is an alias for ",(0,r.kt)("a",{parentName:"p",href:"#length"},"LENGTH()"),"."),(0,r.kt)("h2",{id:"crc32"},"CRC32()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CRC32(text) \u2192 hash")),(0,r.kt)("p",null,"Calculate the CRC32 checksum for ",(0,r.kt)("em",{parentName:"p"},"text")," and return it in a hexadecimal string representation. The polynomial used is 0x1EDC6F41. The initial value used is 0xFFFFFFFF, and the final xor value is also 0xFFFFFFFF."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"hash")," (string): CRC32 checksum as hex string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'CRC32("foobar") // "D5F5C7F"\n')),(0,r.kt)("h2",{id:"encode_uri_component"},"ENCODE_URI_COMPONENT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ENCODE_URI_COMPONENT(value) \u2192 encodedURIComponentString")),(0,r.kt)("p",null,"Return the encoded uri component of ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"encodedURIComponentString")," (string): an encoded uri component of ",(0,r.kt)("em",{parentName:"li"},"value"))),(0,r.kt)("h2",{id:"find_first"},"FIND_FIRST()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FIND_FIRST(text, search, start, end) \u2192 position")),(0,r.kt)("p",null,"Return the position of the first occurrence of the string ",(0,r.kt)("em",{parentName:"p"},"search")," inside the string ",(0,r.kt)("em",{parentName:"p"},"text"),". Positions start at 0."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the haystack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"search")," (string): the needle"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"start"))," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): limit the search to a subset of the text, beginning at ",(0,r.kt)("em",{parentName:"li"},"start")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"end"))," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): limit the search to a subset of the text, ending at ",(0,r.kt)("em",{parentName:"li"},"end")),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"position")," (number): the character position of the match. If ",(0,r.kt)("em",{parentName:"li"},"search")," is not contained in ",(0,r.kt)("em",{parentName:"li"},"text"),", -1 is returned. If ",(0,r.kt)("strong",{parentName:"li"},"search")," is empty, ",(0,r.kt)("strong",{parentName:"li"},"start")," is returned.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FIND_FIRST("foobarbaz", "ba") // 3\nFIND_FIRST("foobarbaz", "ba", 4) // 6\nFIND_FIRST("foobarbaz", "ba", 0, 3) // -1\n')),(0,r.kt)("h2",{id:"find_last"},"FIND_LAST()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FIND_LAST(text, search, start, end) \u2192 position")),(0,r.kt)("p",null,"Return the position of the last occurrence of the string ",(0,r.kt)("em",{parentName:"p"},"search")," inside the string ",(0,r.kt)("em",{parentName:"p"},"text"),". Positions start at 0."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the haystack"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"search")," (string): the needle"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"start"))," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): limit the search to a subset of the text, beginning at ",(0,r.kt)("em",{parentName:"li"},"start")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"end"))," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): limit the search to a subset of the text, ending at ",(0,r.kt)("em",{parentName:"li"},"end")),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"position")," (number): the character position of the match. If ",(0,r.kt)("em",{parentName:"li"},"search")," is not contained in ",(0,r.kt)("em",{parentName:"li"},"text"),", -1 is returned. If ",(0,r.kt)("em",{parentName:"li"},"search")," is empty, the string length is returned, or ",(0,r.kt)("em",{parentName:"li"},"end")," + 1.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FIND_LAST("foobarbaz", "ba") // 6\nFIND_LAST("foobarbaz", "ba", 7) // -1\nFIND_LAST("foobarbaz", "ba", 0, 4) // 3\n')),(0,r.kt)("h2",{id:"fnv64"},"FNV64()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FNV64(text) \u2192 hash")),(0,r.kt)("p",null,"Calculate the FNV-1A 64 bit hash for ",(0,r.kt)("em",{parentName:"p"},"text")," and return it in a hexadecimal string representation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"hash")," (string): FNV-1A hash as hex string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FNV64("foobar") // "85944171F73967E8"\n')),(0,r.kt)("h2",{id:"json_parse"},"JSON_PARSE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"JSON_PARSE(text) \u2192 value")),(0,r.kt)("p",null,"Return an C8QL value described by the JSON-encoded input string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the string to parse as JSON"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"value")," (mixed): the value corresponding to the given JSON text. For input values that are no valid JSON strings, the function will return ",(0,r.kt)("em",{parentName:"li"},"null"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'JSON_PARSE("123") // 123\nJSON_PARSE("[ true, false, 2 ]") // [ true, false, 2 ]\nJSON_PARSE("\\\\\\"abc\\\\\\"") // "abc"\nJSON_PARSE("{\\\\\\"a\\\\\\": 1}") // { a : 1 }\nJSON_PARSE("abc") // null\n')),(0,r.kt)("h2",{id:"json_stringify"},"JSON_STRINGIFY()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"JSON_STRINGIFY(value) \u2192 text")),(0,r.kt)("p",null,"Return a JSON string representation of the input value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (mixed): the value to convert to a JSON string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"text")," (string): the JSON string representing ",(0,r.kt)("em",{parentName:"li"},"value"),". For input values that cannot be converted to JSON, the function will return ",(0,r.kt)("em",{parentName:"li"},"null"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'JSON_STRINGIFY("1") // "1"\nJSON_STRINGIFY("abc") // "\\"abc\\""\nJSON_STRINGIFY("[1, 2, 3]") // "[1,2,3]"\n')),(0,r.kt)("h2",{id:"left"},"LEFT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LEFT(value, n) \u2192 substring")),(0,r.kt)("p",null,"Return the ",(0,r.kt)("em",{parentName:"p"},"n")," leftmost characters of the string ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("p",null,"To return the rightmost characters, see ",(0,r.kt)("a",{parentName:"p",href:"#right"},"RIGHT()"),".",(0,r.kt)("br",null)," To take a part from an arbitrary position off the string, see ",(0,r.kt)("a",{parentName:"p",href:"#substring"},"SUBSTRING()"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"n")," (number): how many characters to return"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"substring")," (string): at most ",(0,r.kt)("em",{parentName:"li"},"n")," characters of ",(0,r.kt)("em",{parentName:"li"},"value"),", starting on the left-hand side of the string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LEFT("foobar", 3) // "foo"\nLEFT("foobar", 10) // "foobar"\n')),(0,r.kt)("h2",{id:"length"},"LENGTH()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LENGTH(str) \u2192 length")),(0,r.kt)("p",null,"Determine the character length of a string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"str")," (string): a string. If a number is passed, it will be casted to string first."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"length")," (number): the character length of ",(0,r.kt)("em",{parentName:"li"},"str")," (not byte length)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LENGTH("foobar") // 6\nLENGTH("\u7535\u8111\u574f\u4e86") // 4\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"LENGTH()")," can also determine the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/array#length"},"number of elements")," in an array, the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/document#length"},"number of attribute keys")," of an object / document and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/database#length"},"amount of documents")," in a collection."),(0,r.kt)("h2",{id:"levenshtein_distance"},"LEVENSHTEIN_DISTANCE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LEVENSHTEIN_DISTANCE(value1, value2) \u2192 levenshteinDistance")),(0,r.kt)("p",null,"Calculate the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Levenshtein_distance"},"Levenshtein distance"),'{:target="_blank"} between two strings.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value1")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value2")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"levenshteinDistance")," (number): calculated Levenshtein distance between the input strings ",(0,r.kt)("em",{parentName:"li"},"value1")," and ",(0,r.kt)("em",{parentName:"li"},"value2"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LEVENSHTEIN_DISTANCE("foobar", "bar") // 3\nLEVENSHTEIN_DISTANCE(" ", "") // 1\nLEVENSHTEIN_DISTANCE("The quick brown fox jumps over the lazy dog", "The quick black dog jumps over the brown fox") // 13\nLEVENSHTEIN_DISTANCE("der m\xf6t\xf6r tr\xf6tet", "der tr\xf6tet") // 6\n')),(0,r.kt)("h2",{id:"like"},"LIKE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LIKE(text, search, caseInsensitive) \u2192 bool")),(0,r.kt)("p",null,"Check whether the pattern ",(0,r.kt)("em",{parentName:"p"},"search")," is contained in the string ",(0,r.kt)("em",{parentName:"p"},"text"),", using wildcard matching."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the string to search in"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"search"))," (string): a search pattern that can contain the wildcard characters ",(0,r.kt)("inlineCode",{parentName:"li"},"%")," (meaning any sequence of characters, including none) and ",(0,r.kt)("inlineCode",{parentName:"li"},"_")," (any single character). Literal ",(0,r.kt)("inlineCode",{parentName:"li"},"%")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"_")," must be escaped with two backslashes. ",(0,r.kt)("em",{parentName:"li"},"search")," cannot be a variable or a document attribute. The actual value must be present at query parse time already."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"caseInsensitive")," (bool, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): if set to ",(0,r.kt)("em",{parentName:"li"},"true"),", the matching will be case-insensitive. The default is ",(0,r.kt)("em",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"bool")," (bool): ",(0,r.kt)("em",{parentName:"li"},"true")," if the pattern is contained in ",(0,r.kt)("em",{parentName:"li"},"text"),", and ",(0,r.kt)("em",{parentName:"li"},"false")," otherwise")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LIKE("cart", "ca_t")   // true\nLIKE("carrot", "ca_t") // false\nLIKE("carrot", "ca%t") // true\n\nLIKE("foo bar baz", "bar")   // false\nLIKE("foo bar baz", "%bar%") // true\nLIKE("bar", "%bar%")         // true\n\nLIKE("FoO bAr BaZ", "fOo%bAz")       // false\nLIKE("FoO bAr BaZ", "fOo%bAz", true) // true\n')),(0,r.kt)("h2",{id:"lower"},"LOWER()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LOWER(value) \u2192 lowerCaseString")),(0,r.kt)("p",null,"Convert upper-case letters in ",(0,r.kt)("em",{parentName:"p"},"value")," to their lower-case counterparts. All other characters are returned unchanged."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"lowerCaseString")," (string): ",(0,r.kt)("em",{parentName:"li"},"value")," with upper-case characters converted to lower-case characters")),(0,r.kt)("h2",{id:"ltrim"},"LTRIM()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LTRIM(value, chars) \u2192 strippedString")),(0,r.kt)("p",null,"Return the string ",(0,r.kt)("em",{parentName:"p"},"value")," with whitespace stripped from the start only."),(0,r.kt)("p",null,"To strip from the end only, see ",(0,r.kt)("a",{parentName:"p",href:"#rtrim"},"RTRIM()"),".",(0,r.kt)("br",null),"\nTo strip both sides, see ",(0,r.kt)("a",{parentName:"p",href:"#trim"},"TRIM()"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chars")," (string, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): override the characters that should be removed from the string. It defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"\\r\\n \\t")," (i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"0x0d"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"0x0a"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"0x20")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"0x09"),")."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"strippedString")," (string): ",(0,r.kt)("em",{parentName:"li"},"value")," without ",(0,r.kt)("em",{parentName:"li"},"chars")," at the left-hand side")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LTRIM("foo bar") // "foo bar"\nLTRIM("  foo bar  ") // "foo bar  "\nLTRIM("--==[foo-bar]==--", "-=[]") // "foo-bar]==--"\n')),(0,r.kt)("h2",{id:"md5"},"MD5()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MD5(text) \u2192 hash")),(0,r.kt)("p",null,"Calculate the MD5 checksum for ",(0,r.kt)("em",{parentName:"p"},"text")," and return it in a hexadecimal string representation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"hash")," (string): MD5 checksum as hex string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'MD5("foobar") // "3858f62230ac3c915f300c664312c63f"\n')),(0,r.kt)("h2",{id:"random_token"},"RANDOM_TOKEN()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RANDOM_TOKEN(length) \u2192 randomString")),(0,r.kt)("p",null,"Generate a pseudo-random token string with the specified length. The algorithm for token generation should be treated as opaque."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"length")," (number): desired string length for the token. It must be greater or equal to 0 and at most 65536. A ",(0,r.kt)("em",{parentName:"li"},"lenght")," of 0 returns an empty string."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"randomString")," (string): a generated token consisting of lowercase letters, uppercase letters and numbers")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'RANDOM_TOKEN(8) // "zGl09z42"\nRANDOM_TOKEN(8) // "m9w50Ft9"\n')),(0,r.kt)("h2",{id:"regex_matches"},"REGEX_MATCHES()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"REGEX_MATCHES(text, regex, caseInsensitive) \u2192 stringArray")),(0,r.kt)("p",null,"Return the matches in the given string ",(0,r.kt)("em",{parentName:"p"},"text"),", using the ",(0,r.kt)("em",{parentName:"p"},"regex"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the string to search in"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"regex")," (string): a regular expression to use for matching the ",(0,r.kt)("em",{parentName:"li"},"text")," - returns ",(0,r.kt)("strong",{parentName:"li"},"stringArray")," (array): an array of strings containing the matches")),(0,r.kt)("p",null,"The regular expression may consist of literal characters and the following characters and sequences:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".")," \u2013 the dot matches any single character except line terminators.\nTo include line terminators, use ",(0,r.kt)("inlineCode",{parentName:"li"},"[\\s\\S]")," instead to simulate ",(0,r.kt)("inlineCode",{parentName:"li"},".")," with ",(0,r.kt)("em",{parentName:"li"},"DOTALL")," flag."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\d")," \u2013 matches a single digit, equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\s")," \u2013 matches a single whitespace character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\S")," \u2013 matches a single non-whitespace character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\t")," \u2013 matches a tab character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\r")," \u2013 matches a carriage return"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\n")," \u2013 matches a line-feed character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[xyz]")," \u2013 set of characters. Matches any of the enclosed characters (here: ",(0,r.kt)("em",{parentName:"li"},"x"),", ",(0,r.kt)("em",{parentName:"li"},"y")," or ",(0,r.kt)("em",{parentName:"li"},"z"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[^xyz]")," \u2013 negated set of characters. Matches any other character than the enclosed ones (i.e. anything but ",(0,r.kt)("em",{parentName:"li"},"x"),", ",(0,r.kt)("em",{parentName:"li"},"y")," or ",(0,r.kt)("em",{parentName:"li"},"z")," in this case)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[x-z]")," \u2013 range of characters. Matches any of the characters in the specified range, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9A-F]")," to match any character in ",(0,r.kt)("em",{parentName:"li"},"0123456789ABCDEF")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[^x-z]")," \u2013 negated range of characters. Matches any other character than the ones specified in the range"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(xyz)")," \u2013 defines and matches a pattern group"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(x|y)")," \u2013 matches either ",(0,r.kt)("em",{parentName:"li"},"x")," or ",(0,r.kt)("em",{parentName:"li"},"y")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"^")," \u2013 matches the beginning of the string (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"^xyz"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$")," \u2013 matches the end of the string (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"xyz$"),")")),(0,r.kt)("p",null,"Note that the characters ",(0,r.kt)("inlineCode",{parentName:"p"},"."),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"["),", ",(0,r.kt)("inlineCode",{parentName:"p"},"]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"("),", ",(0,r.kt)("inlineCode",{parentName:"p"},")"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"^"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," have a special meaning in regular expressions and may need to be escaped using a backslash, which requires escaping itself (",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\"),"). A literal backslash needs to be escaped using another escaped backslash, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\\\\\"),"."),(0,r.kt)("p",null,"Characters and sequences may optionally be repeated using the following quantifiers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x*")," \u2013 matches zero or more occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x+")," \u2013 matches one or more occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x?")," \u2013 matches one or zero occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y}")," \u2013 matches exactly ",(0,r.kt)("em",{parentName:"li"},"y")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y,z}")," \u2013 matches between ",(0,r.kt)("em",{parentName:"li"},"y")," and ",(0,r.kt)("em",{parentName:"li"},"z")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y,}")," \u2013 matches at least ",(0,r.kt)("em",{parentName:"li"},"y")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x"))),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"xyz+")," matches ",(0,r.kt)("em",{parentName:"p"},"xyzzz"),", but if you want to match ",(0,r.kt)("em",{parentName:"p"},"xyzxyz")," instead, you need to define a pattern group by wrapping the sub-expression in parentheses and place the quantifier right behind it: ",(0,r.kt)("inlineCode",{parentName:"p"},"(xyz)+"),"."),(0,r.kt)("p",null,"If the regular expression in ",(0,r.kt)("em",{parentName:"p"},"regex")," is invalid, a warning will be raised and the function will return ",(0,r.kt)("em",{parentName:"p"},"null"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'REGEX_MATCHES("My-us3r_n4m3", "^[a-z0-9_-]{3,16}$", true) // ["My-us3r_n4m3"]\nREGEX_MATCHES("#4d82h4", "^#?([a-f0-9]{6}|[a-f0-9]{3})$", true) // null\nREGEX_MATCHES("john@doe.com", "^([a-z0-9_\\.-]+)@([\\da-z-]+)\\.([a-z\\.]{2,6})$", false) // ["john@doe.com", "john", "doe", "com"]\n')),(0,r.kt)("h2",{id:"regex_split"},"REGEX_SPLIT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"REGEX_SPLIT(text, splitExpression, caseInsensitive, limit) \u2192 stringArray")),(0,r.kt)("p",null,"Split the given string ",(0,r.kt)("em",{parentName:"p"},"text")," into a list of strings, using the ",(0,r.kt)("em",{parentName:"p"},"separator"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the string to split"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"splitExpression")," (string): a regular expression to use for splitting the ",(0,r.kt)("em",{parentName:"li"},"text")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"limit")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): limit the number of split values in the result.\nIf no ",(0,r.kt)("em",{parentName:"li"},"limit")," is given, the number of splits returned is not bounded."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"stringArray")," (array): an array of strings")),(0,r.kt)("p",null,"The regular expression may consist of literal characters and the following\ncharacters and sequences:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".")," \u2013 the dot matches any single character except line terminators.\nTo include line terminators, use ",(0,r.kt)("inlineCode",{parentName:"li"},"[\\s\\S]")," instead to simulate ",(0,r.kt)("inlineCode",{parentName:"li"},".")," with ",(0,r.kt)("em",{parentName:"li"},"DOTALL")," flag."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\d")," \u2013 matches a single digit, equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\s")," \u2013 matches a single whitespace character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\S")," \u2013 matches a single non-whitespace character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\t")," \u2013 matches a tab character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\r")," \u2013 matches a carriage return"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\n")," \u2013 matches a line-feed character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[xyz]")," \u2013 set of characters. Matches any of the enclosed characters\n(here: ",(0,r.kt)("em",{parentName:"li"},"x"),", ",(0,r.kt)("em",{parentName:"li"},"y")," or ",(0,r.kt)("em",{parentName:"li"},"z"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[^xyz]")," \u2013 negated set of characters. Matches any other character than the\nenclosed ones (i.e. anything but ",(0,r.kt)("em",{parentName:"li"},"x"),", ",(0,r.kt)("em",{parentName:"li"},"y")," or ",(0,r.kt)("em",{parentName:"li"},"z")," in this case)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[x-z]")," \u2013 range of characters. Matches any of the characters in the\nspecified range, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9A-F]")," to match any character in\n",(0,r.kt)("em",{parentName:"li"},"0123456789ABCDEF")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[^x-z]")," \u2013 negated range of characters. Matches any other character than the\nones specified in the range"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(xyz)")," \u2013 defines and matches a pattern group"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(x|y)")," \u2013 matches either ",(0,r.kt)("em",{parentName:"li"},"x")," or ",(0,r.kt)("em",{parentName:"li"},"y")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"^")," \u2013 matches the beginning of the string (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"^xyz"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$")," \u2013 matches the end of the string (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"xyz$"),")")),(0,r.kt)("p",null,"Note that the characters ",(0,r.kt)("inlineCode",{parentName:"p"},"."),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"["),", ",(0,r.kt)("inlineCode",{parentName:"p"},"]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"("),", ",(0,r.kt)("inlineCode",{parentName:"p"},")"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"^"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," have a special meaning in regular expressions and may need to be\nescaped using a backslash, which requires escaping itself (",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\"),"). A literal\nbackslash needs to be escaped using another escaped backslash, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\\\\\"),"."),(0,r.kt)("p",null,"Characters and sequences may optionally be repeated using the following\nquantifiers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x*")," \u2013 matches zero or more occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x+")," \u2013 matches one or more occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x?")," \u2013 matches one or zero occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y}")," \u2013 matches exactly ",(0,r.kt)("em",{parentName:"li"},"y")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y,z}")," \u2013 matches between ",(0,r.kt)("em",{parentName:"li"},"y")," and ",(0,r.kt)("em",{parentName:"li"},"z")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y,}")," \u2013 matches at least ",(0,r.kt)("em",{parentName:"li"},"y")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x"))),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"xyz+")," matches ",(0,r.kt)("em",{parentName:"p"},"xyzzz"),", but if you want to match ",(0,r.kt)("em",{parentName:"p"},"xyzxyz")," instead,\nyou need to define a pattern group by wrapping the sub-expression in parentheses\nand place the quantifier right behind it: ",(0,r.kt)("inlineCode",{parentName:"p"},"(xyz)+"),"."),(0,r.kt)("p",null,"If the regular expression in ",(0,r.kt)("em",{parentName:"p"},"splitExpression")," is invalid, a warning will be raised\nand the function will return ",(0,r.kt)("em",{parentName:"p"},"null"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'REGEX_SPLIT("This is a line.\\n This is yet another line\\r\\n This again is a line.\\r Mac line ", "\\.?(\\n|\\r|\\r\\n)", true, 4) // ["This is a line", "\\n", " This is yet another lin", "\\r"]\nREGEX_SPLIT("hypertext language, programming", "[\\s, ]+") // ["hypertext", "language", "programming"]\nREGEX_SPLIT("ca,bc,a,bca,bca,bc", "a,b", true, 5) // ["c", "c,", "c", "c", "c"]\n')),(0,r.kt)("h2",{id:"regex_test"},"REGEX_TEST()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"REGEX_TEST(text, search, caseInsensitive) \u2192 bool")),(0,r.kt)("p",null,"Check whether the pattern ",(0,r.kt)("em",{parentName:"p"},"search")," is contained in the string ",(0,r.kt)("em",{parentName:"p"},"text"),",\nusing regular expression matching."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the string to search in"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"search")," (string): a regular expression search pattern"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"bool")," (bool): ",(0,r.kt)("em",{parentName:"li"},"true")," if the pattern is contained in ",(0,r.kt)("em",{parentName:"li"},"text"),",\nand ",(0,r.kt)("em",{parentName:"li"},"false")," otherwise"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"caseInsensitive")," (bool, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): if set to ",(0,r.kt)("em",{parentName:"li"},"true"),", the matching will be\ncase-insensitive. The default is ",(0,r.kt)("em",{parentName:"li"},"false"),".")),(0,r.kt)("p",null,"The regular expression may consist of literal characters and the following\ncharacters and sequences:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".")," \u2013 the dot matches any single character except line terminators.\nTo include line terminators, use ",(0,r.kt)("inlineCode",{parentName:"li"},"[\\s\\S]")," instead to simulate ",(0,r.kt)("inlineCode",{parentName:"li"},".")," with ",(0,r.kt)("em",{parentName:"li"},"DOTALL")," flag."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\d")," \u2013 matches a single digit, equivalent to ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\s")," \u2013 matches a single whitespace character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\S")," \u2013 matches a single non-whitespace character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\t")," \u2013 matches a tab character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\r")," \u2013 matches a carriage return"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"\\n")," \u2013 matches a line-feed character"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[xyz]")," \u2013 set of characters. Matches any of the enclosed characters\n(here: ",(0,r.kt)("em",{parentName:"li"},"x"),", ",(0,r.kt)("em",{parentName:"li"},"y")," or ",(0,r.kt)("em",{parentName:"li"},"z"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[^xyz]")," \u2013 negated set of characters. Matches any other character than the\nenclosed ones (i.e. anything but ",(0,r.kt)("em",{parentName:"li"},"x"),", ",(0,r.kt)("em",{parentName:"li"},"y")," or ",(0,r.kt)("em",{parentName:"li"},"z")," in this case)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[x-z]")," \u2013 range of characters. Matches any of the characters in the\nspecified range, e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"[0-9A-F]")," to match any character in\n",(0,r.kt)("em",{parentName:"li"},"0123456789ABCDEF")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[^x-z]")," \u2013 negated range of characters. Matches any other character than the\nones specified in the range"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(xyz)")," \u2013 defines and matches a pattern group"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(x|y)")," \u2013 matches either ",(0,r.kt)("em",{parentName:"li"},"x")," or ",(0,r.kt)("em",{parentName:"li"},"y")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"^")," \u2013 matches the beginning of the string (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"^xyz"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$")," \u2013 matches the end of the string (e.g. ",(0,r.kt)("inlineCode",{parentName:"li"},"xyz$"),")")),(0,r.kt)("p",null,"Note that the characters ",(0,r.kt)("inlineCode",{parentName:"p"},"."),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"["),", ",(0,r.kt)("inlineCode",{parentName:"p"},"]"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"("),", ",(0,r.kt)("inlineCode",{parentName:"p"},")"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"{"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"}"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"^"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"$")," have a special meaning in regular expressions and may need to be\nescaped using a backslash, which requires escaping itself (",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\"),"). A literal\nbackslash needs to be escaped using another escaped backslash, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"\\\\\\\\"),"."),(0,r.kt)("p",null,"Characters and sequences may optionally be repeated using the following\nquantifiers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x*")," \u2013 matches zero or more occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x+")," \u2013 matches one or more occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x?")," \u2013 matches one or zero occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y}")," \u2013 matches exactly ",(0,r.kt)("em",{parentName:"li"},"y")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y,z}")," \u2013 matches between ",(0,r.kt)("em",{parentName:"li"},"y")," and ",(0,r.kt)("em",{parentName:"li"},"z")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x{y,}")," \u2013 matches at least ",(0,r.kt)("em",{parentName:"li"},"y")," occurrences of ",(0,r.kt)("em",{parentName:"li"},"x"))),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"xyz+")," matches ",(0,r.kt)("em",{parentName:"p"},"xyzzz"),", but if you want to match ",(0,r.kt)("em",{parentName:"p"},"xyzxyz")," instead,\nyou need to define a pattern group by wrapping the sub-expression in parentheses\nand place the quantifier right behind it: ",(0,r.kt)("inlineCode",{parentName:"p"},"(xyz)+"),"."),(0,r.kt)("p",null,"If the regular expression in ",(0,r.kt)("em",{parentName:"p"},"search")," is invalid, a warning will be raised\nand the function will return ",(0,r.kt)("em",{parentName:"p"},"null"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'REGEX_TEST("the quick brown fox", "the.*fox") // true\nREGEX_TEST("the quick brown fox", "^(a|the)\\s+(quick|slow).*f.x$") // true\nREGEX_TEST("the\\nquick\\nbrown\\nfox", "^the(\\n[a-w]+)+\\nfox$") // true\n')),(0,r.kt)("h2",{id:"regex_replace"},"REGEX_REPLACE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"REGEX_REPLACE(text, search, replacement, caseInsensitive) \u2192 string")),(0,r.kt)("p",null,"Replace the pattern ",(0,r.kt)("em",{parentName:"p"},"search")," with the string ",(0,r.kt)("em",{parentName:"p"},"replacement")," in the string\n",(0,r.kt)("em",{parentName:"p"},"text"),", using regular expression matching."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): the string to search in"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"search")," (string): a regular expression search pattern"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"replacement")," (string): the string to replace the ",(0,r.kt)("em",{parentName:"li"},"search")," pattern with"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"string")," (string): the string ",(0,r.kt)("em",{parentName:"li"},"text")," with the ",(0,r.kt)("em",{parentName:"li"},"search")," regex\npattern replaced with the ",(0,r.kt)("em",{parentName:"li"},"replacement")," string wherever the pattern exists\nin ",(0,r.kt)("em",{parentName:"li"},"text")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"caseInsensitive")," (bool, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): if set to ",(0,r.kt)("em",{parentName:"li"},"true"),", the matching will be\ncase-insensitive. The default is ",(0,r.kt)("em",{parentName:"li"},"false"),".")),(0,r.kt)("p",null,"For more details about the rules for characters and sequences refer\n",(0,r.kt)("a",{parentName:"p",href:"#regex_test"},"REGEX_TEST()"),"."),(0,r.kt)("p",null,"If the regular expression in ",(0,r.kt)("em",{parentName:"p"},"search")," is invalid, a warning will be raised\nand the function will return ",(0,r.kt)("em",{parentName:"p"},"null"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'REGEX_REPLACE("the quick brown fox", "the.*fox", "jumped over") // jumped over\nREGEX_REPLACE("the quick brown fox", "o", "i") // the quick briwn fix\n')),(0,r.kt)("h2",{id:"reverse"},"REVERSE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"REVERSE(value) \u2192 reversedString")),(0,r.kt)("p",null,"Return the reverse of the string ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"reversedString")," (string): a new string with the characters in\nreverse order")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'REVERSE("foobar") // "raboof"\nREVERSE("\u7535\u8111\u574f\u4e86") // "\u4e86\u574f\u8111\u7535"\n')),(0,r.kt)("h2",{id:"right"},"RIGHT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RIGHT(value, length) \u2192 substring")),(0,r.kt)("p",null,"Return the ",(0,r.kt)("em",{parentName:"p"},"length")," rightmost characters of the string ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("p",null,"To return the leftmost characters, see ",(0,r.kt)("a",{parentName:"p",href:"#left"},"LEFT()"),".",(0,r.kt)("br",null),"\nTo take a part from an arbitrary position off the string,\nsee ",(0,r.kt)("a",{parentName:"p",href:"#substring"},"SUBSTRING()"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"length")," (number): how many characters to return"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"substring")," (string): at most ",(0,r.kt)("em",{parentName:"li"},"length")," characters of ",(0,r.kt)("em",{parentName:"li"},"value"),",\nstarting on the right-hand side of the string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'RIGHT("foobar", 3) // "bar"\nRIGHT("foobar", 10) // "foobar"\n')),(0,r.kt)("h2",{id:"rtrim"},"RTRIM()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"RTRIM(value, chars) \u2192 strippedString")),(0,r.kt)("p",null,"Return the string ",(0,r.kt)("em",{parentName:"p"},"value")," with whitespace stripped from the end only."),(0,r.kt)("p",null,"To strip from the start only, see ",(0,r.kt)("a",{parentName:"p",href:"#ltrim"},"LTRIM()"),".",(0,r.kt)("br",null),"\nTo strip both sides, see ",(0,r.kt)("a",{parentName:"p",href:"#trim"},"TRIM()"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chars")," (string, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): override the characters that should\nbe removed from the string. It defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"\\r\\n \\t")," (i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"0x0d"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"0x0a"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"0x20")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"0x09"),")."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"strippedString")," (string): ",(0,r.kt)("em",{parentName:"li"},"value")," without ",(0,r.kt)("em",{parentName:"li"},"chars")," at the\nright-hand side")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'RTRIM("foo bar") // "foo bar"\nRTRIM("  foo bar  ") // "  foo bar"\nRTRIM("--==[foo-bar]==--", "-=[]") // "--==[foo-bar"\n')),(0,r.kt)("h2",{id:"sha1"},"SHA1()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SHA1(text) \u2192 hash")),(0,r.kt)("p",null,"Calculate the SHA1 checksum for ",(0,r.kt)("em",{parentName:"p"},"text")," and returns it in a hexadecimal\nstring representation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"hash")," (string): SHA1 checksum as hex string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'SHA1("foobar") // "8843d7f92416211de9ebb963ff4ce28125932878"\n')),(0,r.kt)("h2",{id:"sha512"},"SHA512()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SHA512(text) \u2192 hash")),(0,r.kt)("p",null,"Calculate the SHA512 checksum for ",(0,r.kt)("em",{parentName:"p"},"text")," and returns it in a hexadecimal\nstring representation."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"text")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"hash")," (string): SHA512 checksum as hex string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'SHA512("foobar") // "0a50261ebd1a390fed2bf326f2673c145582a6342d523204973d0219337f81616a8069b012587cf5635f6925f1b56c360230c19b273500ee013e030601bf2425"\n')),(0,r.kt)("h2",{id:"split"},"SPLIT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SPLIT(value, separator, limit) \u2192 strArray")),(0,r.kt)("p",null,"Split the given string ",(0,r.kt)("em",{parentName:"p"},"value")," into a list of strings, using the ",(0,r.kt)("em",{parentName:"p"},"separator"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"separator"))," (string): either a string or a list of strings. If ",(0,r.kt)("em",{parentName:"li"},"separator")," is\nan empty string, ",(0,r.kt)("em",{parentName:"li"},"value")," will be split into a list of characters. If no ",(0,r.kt)("em",{parentName:"li"},"separator"),"\nis specified, ",(0,r.kt)("em",{parentName:"li"},"value")," will be returned as array."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"limit")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): limit the number of split values in the result.\nIf no ",(0,r.kt)("em",{parentName:"li"},"limit")," is given, the number of splits returned is not bounded."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"strArray")," (array): an array of strings")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'SPLIT( "foo-bar-baz", "-" ) // [ "foo", "bar", "baz" ]\nSPLIT( "foo-bar-baz", "-", 1 ) // [ "foo" ]\nSPLIT( "foo, bar & baz", [ ", ", " & " ] ) // [ "foo", "bar", "baz" ]\n')),(0,r.kt)("h2",{id:"soundex"},"SOUNDEX()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SOUNDEX(value) \u2192 soundexString")),(0,r.kt)("p",null,"Return the soundex fingerprint of ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"soundexString")," (string): a soundex fingerprint of ",(0,r.kt)("em",{parentName:"li"},"value"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'SOUNDEX( "example" ) // "E251"\nSOUNDEX( "ekzampul")  // "E251"\nSOUNDEX( "soundex" ) // "S532"\nSOUNDEX( "sounteks" ) // "S532"\n')),(0,r.kt)("h2",{id:"substitute"},"SUBSTITUTE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SUBSTITUTE(value, search, replace, limit) \u2192 substitutedString")),(0,r.kt)("p",null,"Replace search values in the string ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"search"))," (string","|","array): if ",(0,r.kt)("em",{parentName:"li"},"search")," is a string, all occurrences of\n",(0,r.kt)("em",{parentName:"li"},"search")," will be replaced in ",(0,r.kt)("em",{parentName:"li"},"value"),". If ",(0,r.kt)("em",{parentName:"li"},"search")," is an array of strings,\neach occurrence of a value contained in ",(0,r.kt)("em",{parentName:"li"},"search")," will be replaced by the\ncorresponding array element in ",(0,r.kt)("em",{parentName:"li"},"replace"),". If ",(0,r.kt)("em",{parentName:"li"},"replace")," has less list items\nthan ",(0,r.kt)("em",{parentName:"li"},"search"),", occurrences of unmapped ",(0,r.kt)("em",{parentName:"li"},"search")," items will be replaced by an\nempty string."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"replace")," (string","|","array, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): a replacement string, or an array of\nstrings to replace the corresponding elements of ",(0,r.kt)("em",{parentName:"li"},"search")," with. Can have less\nelements than ",(0,r.kt)("em",{parentName:"li"},"search")," or be left out to remove matches. If ",(0,r.kt)("em",{parentName:"li"},"search")," is an array\nbut ",(0,r.kt)("em",{parentName:"li"},"replace")," is a string, then all matches will be replaced with ",(0,r.kt)("em",{parentName:"li"},"replace"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"limit")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): cap the number of replacements to this value"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"substitutedString")," (string): a new string with matches replaced\n(or removed)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'SUBSTITUTE( "the quick brown foxx", "quick", "lazy" )\n// "the lazy brown foxx"\n\nSUBSTITUTE( "the quick brown foxx", [ "quick", "foxx" ], [ "slow", "dog" ] )\n// "the slow brown dog"\n\nSUBSTITUTE( "the quick brown foxx", [ "the", "foxx" ], [ "that", "dog" ], 1 )\n//  "that quick brown foxx"\n\nSUBSTITUTE( "the quick brown foxx", [ "the", "quick", "foxx" ], [ "A", "VOID!" ] )\n// "A VOID! brown "\n\nSUBSTITUTE( "the quick brown foxx", [ "quick", "foxx" ], "xx" )\n// "the xx brown xx"\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SUBSTITUTE(value, mapping, limit) \u2192 substitutedString")),(0,r.kt)("p",null,"Alternatively, ",(0,r.kt)("em",{parentName:"p"},"search")," and ",(0,r.kt)("em",{parentName:"p"},"replace")," can be specified in a combined value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"mapping")," (object): a lookup map with search strings as keys and replacement\nstrings as values. Empty strings and ",(0,r.kt)("em",{parentName:"li"},"null")," as values remove matches.\nPlease note that no sequence of search strings can be warrantied by this;\nMeans, if you have overlapping search results, one time the first may win,\nanother time the second. If you need to ensure the precedence of the sequence\nchoose the array based invocation method."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"limit")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): cap the number of replacements to this value"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"substitutedString")," (string): a new string with matches replaced\n(or removed)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'SUBSTITUTE("the quick brown foxx", {\n  "quick": "small",\n  "brown": "slow",\n  "foxx": "ant"\n})\n// "the small slow ant"\n\nSUBSTITUTE("the quick brown foxx", { \n  "quick": "",\n  "brown": null,\n  "foxx": "ant"\n})\n// "the   ant"\n\nSUBSTITUTE("the quick brown foxx", {\n  "quick": "small",\n  "brown": "slow",\n  "foxx": "ant"\n}, 2)\n// "the small slow foxx"\n')),(0,r.kt)("h2",{id:"substring"},"SUBSTRING()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SUBSTRING(value, offset, length) \u2192 substring")),(0,r.kt)("p",null,"Return a substring of ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("p",null,"To return the rightmost characters, see ",(0,r.kt)("a",{parentName:"p",href:"#right"},"RIGHT()"),".",(0,r.kt)("br",null),"\nTo return the leftmost characters, see ",(0,r.kt)("a",{parentName:"p",href:"#left"},"LEFT()"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"offset"))," (number): start at ",(0,r.kt)("em",{parentName:"li"},"offset"),", offsets start at position 0"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"length"))," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): at most ",(0,r.kt)("em",{parentName:"li"},"length")," characters, omit to get the\nsubstring from ",(0,r.kt)("em",{parentName:"li"},"offset")," to the end of the string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"substring")," (string): a substring of ",(0,r.kt)("em",{parentName:"li"},"value"))),(0,r.kt)("h2",{id:"tokens"},"TOKENS()"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"search#tokens"},"Search Functions"),"."),(0,r.kt)("h2",{id:"to_base64"},"TO_BASE64()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_BASE64(value) \u2192 toBase64String")),(0,r.kt)("p",null,"Return the base64 representation of ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"toBase64String")," (string): a base64 representation of ",(0,r.kt)("em",{parentName:"li"},"value"))),(0,r.kt)("h2",{id:"to_hex"},"TO_HEX()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TO_HEX(value) \u2192 toHexString")),(0,r.kt)("p",null,"Return the hex representation of ",(0,r.kt)("em",{parentName:"p"},"value"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"toHexString")," (string): a hex representation of ",(0,r.kt)("em",{parentName:"li"},"value"))),(0,r.kt)("h2",{id:"trim"},"TRIM()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TRIM(value, type) \u2192 strippedString")),(0,r.kt)("p",null,"Return the string ",(0,r.kt)("em",{parentName:"p"},"value")," with whitespace stripped from the start and/or end."),(0,r.kt)("p",null,"The optional ",(0,r.kt)("em",{parentName:"p"},"type")," parameter specifies from which parts of the string the\nwhitespace is stripped. ",(0,r.kt)("a",{parentName:"p",href:"#ltrim"},"LTRIM()"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"#rtrim"},"RTRIM()")," are preferred\nhowever."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"type")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): strip whitespace from the",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0")," \u2013 start and end of the string (default)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"1")," \u2013 start of the string only"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"2")," \u2013 end of the string only")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TRIM(value, chars) \u2192 strippedString")),(0,r.kt)("p",null,"Return the string ",(0,r.kt)("em",{parentName:"p"},"value")," with whitespace stripped from the start and end."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"chars")," (string, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): override the characters that should\nbe removed from the string. It defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"\\r\\n \\t")," (i.e. ",(0,r.kt)("inlineCode",{parentName:"li"},"0x0d"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"0x0a"),",\n",(0,r.kt)("inlineCode",{parentName:"li"},"0x20")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"0x09"),")."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"strippedString")," (string): ",(0,r.kt)("em",{parentName:"li"},"value")," without ",(0,r.kt)("em",{parentName:"li"},"chars")," on both sides")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'TRIM("foo bar") // "foo bar"\nTRIM("  foo bar  ") // "foo bar"\nTRIM("--==[foo-bar]==--", "-=[]") // "foo-bar"\nTRIM("  foobar\\t \\r\\n ") // "foobar"\nTRIM(";foo;bar;baz, ", ",; ") // "foo;bar;baz"\n')),(0,r.kt)("h2",{id:"upper"},"UPPER()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UPPER(value) \u2192 upperCaseString")),(0,r.kt)("p",null,"Convert lower-case letters in ",(0,r.kt)("em",{parentName:"p"},"value")," to their upper-case counterparts.\nAll other characters are returned unchanged."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): a string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"upperCaseString")," (string): ",(0,r.kt)("em",{parentName:"li"},"value")," with lower-case characters converted\nto upper-case characters")),(0,r.kt)("h2",{id:"uuid"},"UUID()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UUID() \u2192 UUIDString")),(0,r.kt)("p",null,"Return a universally unique identifier value."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"UUIDString")," (string): a universally unique identifier")))}u.isMDXComponent=!0}}]);