"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[52520],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var s=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=s.createContext({}),i=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=i(e.components);return s.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},p=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=i(t),d=a,b=p["".concat(l,".").concat(d)]||p[d]||u[d]||r;return t?s.createElement(b,o(o({ref:n},m),{},{components:t})):s.createElement(b,o({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var i=2;i<r;i++)o[i]=t[i];return s.createElement.apply(null,o)}return s.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>o});var s=t(67294),a=t(34334);const r="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return s.createElement("div",{role:"tabpanel",className:(0,a.Z)(r,o),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>d});var s=t(87462),a=t(67294),r=t(34334),o=t(72389),c=t(67392),l=t(7094),i=t(12466);const m="tabList__CuJ",u="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:o,values:p,groupId:d,className:b}=e,f=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=p??f.map((e=>{let{props:{value:n,label:t,attributes:s}}=e;return{value:n,label:t,attributes:s}})),g=(0,c.l)(y,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===o?o:o??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==h&&!y.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:k}=(0,l.U)(),[w,N]=(0,a.useState)(h),T=[],{blockElementScrollPositionUntilNextRender:_}=(0,i.o5)();if(null!=d){const e=v[d];null!=e&&e!==w&&y.some((n=>n.value===e))&&N(e)}const S=e=>{const n=e.currentTarget,t=T.indexOf(n),s=y[t].value;s!==w&&(_(n),N(s),null!=d&&k(d,String(s)))},E=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,r.Z)("tabs-container",m)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},b)},y.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,s.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>T.push(e),onKeyDown:E,onFocus:S,onClick:S},o,{className:(0,r.Z)("tabs__item",u,o?.className,{"tabs__item--active":w===n})}),t??n)}))),n?(0,a.cloneElement)(f.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function d(e){const n=(0,o.Z)();return a.createElement(p,(0,s.Z)({key:String(n)},e))}},74966:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var s=t(87462),a=(t(67294),t(3905)),r=t(65488),o=t(85162);const c={sidebar_position:70,title:"Subscribe to Streams"},l=void 0,i={unversionedId:"streams/stream-tasks/subscribe-streams",id:"streams/stream-tasks/subscribe-streams",title:"Subscribe to Streams",description:"This page explains how to subscribe to a stream in Macrometa.",source:"@site/docs/streams/stream-tasks/subscribe-streams.md",sourceDirName:"streams/stream-tasks",slug:"/streams/stream-tasks/subscribe-streams",permalink:"/docs/streams/stream-tasks/subscribe-streams",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-tasks/subscribe-streams.md",tags:[],version:"current",sidebarPosition:70,frontMatter:{sidebar_position:70,title:"Subscribe to Streams"},sidebar:"defaultSidebar",previous:{title:"Publish Messages to Streams",permalink:"/docs/streams/stream-tasks/publish-messages"},next:{title:"Unsubscribe from Streams",permalink:"/docs/streams/stream-tasks/unsubscribe-streams"}},m={},u=[],p={toc:u};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,s.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This page explains how to subscribe to a stream in Macrometa."),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,a.kt)("p",null,"You must ",(0,a.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the Python SDK")," before you can run this code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'import base64\nimport json\nfrom c8 import C8Client\n\n# Connect to GDN.\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "xxxxxx" # Change this to your API key\nis_local = False # For a global stream pass False and True for local stream\ndemo_stream = "streamQuickstart"\n\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n\n# Create the subscriber and receive data\nsubscriber = client.subscribe(stream=demo_stream, local=is_local,\n    subscription_name="test-subscription-1")\nfor i in range(10):\n    print("In ",i)\n    m1 = json.loads(subscriber.recv())  # Listen on stream for any receiving messages\n    msg1 = base64.b64decode(m1["payload"]).decode(\'utf-8\')\n    print(F"Received message \'{msg1}\' id=\'{m1[\'messageId\']}\'") # Print the received message\n    subscriber.send(json.dumps({\'messageId\': m1[\'messageId\']})) # Acknowledge the received message\n'))),(0,a.kt)(o.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,a.kt)("p",null,"You must ",(0,a.kt)("a",{parentName:"p",href:"/docs/sdks/install-sdks"},"Install the JavaScript SDK")," before you can run this code."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\nconst client = new jsc8({ url: "https://play.paas.macrometa.io", apiKey: "xxxxx", fabricName: "_system" });\n\nconst stream = "streamQuickstart";\n\n(async function () {\n  // Here the last boolean value tells if the stream is local or global. false means that it is global.\n  const consumer = await client.createStreamReader(stream, "my-subscription", false);\n  consumer.on("message", (msg) => {\n    const { payload, messageId } = JSON.parse(msg);\n\n    // Received message payload\n    console.log(Buffer.from(payload, "base64").toString("ascii"));\n    // Send message acknowledgement\n    consumer.send(JSON.stringify({ messageId }));\n  });\n})();\n'))),(0,a.kt)(o.Z,{value:"api-py",label:"REST API - Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'import base64\nimport json\nimport requests\nfrom websocket import create_connection\n\n# Constants\nURL = "api-play.paas.macrometa.io"\nHTTP_URL = f"https://{URL}"\nFABRIC = "_system"\nSTREAM_NAME = "streamQuickstart"\nAPI_KEY = "XXXXX" # Use your API key here\nAUTH_TOKEN = f"apikey {API_KEY}" # Append the key word for the API key\nTENANT_NAME = "XXXXX" # Add your tenant name here\nCONSUMER_NAME = "testconsumer"\nIS_GLOBAL = True # For a global stream pass True and False for local stream\n\nstream_type = ""\nif IS_GLOBAL:\n    stream_type = "c8global"\nelse:\n    stream_type = "c8local"\n\n# Create a HTTPS session\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Subscribe to stream\nconsumerurl = f"wss://{URL}/_ws/ws/v2/consumer/persistent/{TENANT_NAME}/{stream_type}.{FABRIC}/{stream_type}s.{STREAM_NAME}/{CONSUMER_NAME}"\ndef create_consumer(): \n    ws = create_connection(consumerurl, header=[f"Authorization: {AUTH_TOKEN}"])\n    while True:\n        msg = json.loads(ws.recv())\n        if msg:\n            print(f"Message received: {base64.b64decode(msg[\'payload\']).decode(\'utf-8\')}")\n            # Acknowledge successful processing\n            ws.send(json.dumps({\'messageId\': msg[\'messageId\']}))\n            break\n    ws.close()\ncreate_consumer()\n'))),(0,a.kt)(o.Z,{value:"api-js",label:"REST API - JavaScript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const WebSocket = require(\'ws\');\nclass APIRequest {\n  _headers = {\n    Accept: "application/json",\n    "Content-Type": "application/json"\n  };\n\n  constructor (url, apiKey) {\n    this._url = url;\n    this._headers.authorization = `apikey ${apiKey}`; // Append the key word for the API key\n  }\n\n  _handleResponse (response, resolve, reject) {\n    if (response.ok) {\n      resolve(response.json());\n    } else {\n      reject(response);\n    }\n  }\n\n  req (endpoint, { body, ...options } = {}) {\n    const self = this;\n    return new Promise(function (resolve, reject) {\n      fetch(self._url + endpoint, {\n        headers: self._headers,\n        body: body ? JSON.stringify(body) : undefined,\n        ...options\n      }).then((response) => self._handleResponse(response, resolve, reject));\n    });\n  }\n}\n\nconst apiKey = "xxxxx"; // Use your apikey here\nconst federationName = "api-play.paas.macrometa.io";\nconst federationUrl = `https://${federationName}`;\nconst fabric = "_system"\nconst stream = "streamQuickstart";\nconst isGlobal = true;\nconst tenant = "xxxxx" // Use your tenant name here\nconst consumerName = "testConsumer";\n\nconst run = async function () {\n  const connection = new APIRequest(federationUrl, apiKey);\n  const region = isGlobal ? "c8global" : "c8local";\n  const streamName = `${region}s.${stream}`;\n  // Fetching local URL in case the stream is local\n  const localDcDetails = await connection.req(`/datacenter/local`, {\n    method: "GET"\n  });\n  const dcUrl = localDcDetails.tags.url;\n  const url = isGlobal\n    ? federationName\n    : `api-${dcUrl}`;\n  const otpConsumer = await connection.req(`/apid/otp`, {\n    method: "POST"\n  });\n  const consumerUrl = `wss://${url}/_ws/ws/v2/consumer/persistent/${tenant}/${region}.${fabric}/${streamName}/${consumerName}?otp=${otpConsumer.otp}`;\n  let consumer;\n\n  // Subscribe to stream\n  const initConsumer = async function () {\n    consumer = new WebSocket(consumerUrl);\n    consumer.onopen = function () {\n      console.log("WebSocket:Consumer is open now for " + streamName);\n    };\n    consumer.onerror = function () {\n      console.log(\n        "Failed to establish WebSocket:Consumer connection for " +\n          streamName\n      );\n    };\n    consumer.onclose = function () {\n      console.log("Closed WebSocket:Consumer connection for " + streamName);\n    };\n    consumer.onmessage = function (message) {\n      const receivedMsg = message.data;\n      console.log(\n        `WebSocket:Consumer message received at ${new Date()}`,\n        receivedMsg\n      );\n      const { payload, messageId } = JSON.parse(receivedMsg);\n      console.log(Buffer.from(payload, "base64").toString("ascii"));\n      // Send message acknowledgement\n      consumer.send(JSON.stringify({ messageId }));\n    };\n  };\n\n  await initConsumer();\n  await new Promise((resolve) => setTimeout(resolve, 1 * 40 * 1000));\n  console.log("CONSUMER CLOSING...");\n  consumer.close();\n}\n\nrun();\n')))))}d.isMDXComponent=!0}}]);