"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[88157],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,d=u["".concat(l,".").concat(f)]||u[f]||m[f]||a;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},12448:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={sidebar_position:30,title:"Confluent Python client"},i=void 0,s={unversionedId:"streams/kafka_on_gdn/confluent-python-client",id:"streams/kafka_on_gdn/confluent-python-client",title:"Confluent Python client",description:"The confluent-kafka Python package is a binding on top of the C client librdkafka. It comes bundled with a pre-built version of librdkafka.",source:"@site/docs/streams/kafka_on_gdn/confluent-python-client.md",sourceDirName:"streams/kafka_on_gdn",slug:"/streams/kafka_on_gdn/confluent-python-client",permalink:"/docs/streams/kafka_on_gdn/confluent-python-client",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/kafka_on_gdn/confluent-python-client.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30,title:"Confluent Python client"},sidebar:"defaultSidebar",previous:{title:"Kafka Python Client",permalink:"/docs/streams/kafka_on_gdn/kafka-python-client"},next:{title:"KafkaJS Client",permalink:"/docs/streams/kafka_on_gdn/kafkajs-client"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Producer",id:"producer",level:2},{value:"Consumer",id:"consumer",level:2}],p={toc:c};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The confluent-kafka Python package is a binding on top of the C client librdkafka. It comes bundled with a pre-built version of librdkafka."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"The library needs Python 3.8+ installed. You can find installer ",(0,o.kt)("a",{parentName:"p",href:"https://www.python.org/downloads/"},"here"),".\nYou can install the Kafka-Python library either via PyPi, using pip, or by building the library from source. Installation ",(0,o.kt)("a",{parentName:"p",href:"https://pip.pypa.io/en/stable/installation/"},"documentation")," of pip."),(0,o.kt)("h2",{id:"producer"},"Producer"),(0,o.kt)("p",null,"You can instantiate a Producer object using a bunch of parameters."),(0,o.kt)("p",null,"The following example creates a Python producer for the ",(0,o.kt)("inlineCode",{parentName:"p"},"<c8globals or c8locals>.<my-topic>")," topic and sends message on that topic."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from confluent_kafka import Producer\n\nproducer = Producer({'bootstrap.servers': '<my-gdn>.<my-paas>.macrometa.io:9093',\n        'client.id': \"confluent-client-1.7\",\n        'sasl.username': '<my-tenant>/<my-fabric>'\n        'sasl.password': 'token:<my-api-key or my-JWT>',\n        'security.protocol': 'SASL_SSL',\n        'enable.ssl.certificate.verification': 'false',\n        'ssl.ca.location': '<path-to-ca.cet.pem-file>',\n        'sasl.mechanism': 'PLAIN'})\n\ndef acked(err, msg):\n    if err is not None:\n        print(\"Failed to deliver message: %s: %s\" % (str(msg), str(err)))\n    else:\n        print(\"Message produced: %s\" % (str(msg)))\n\nproducer.produce('<c8globals or c8locals>.<my-topic>', key=\"<my-key-1>\", value=\"<my-value-1>\", callback=acked)\n\n# Wait up to 1 second for events. Callbacks will be invoked during\n# this method call if the message is acknowledged.\nproducer.poll(1)\n")),(0,o.kt)("h2",{id:"consumer"},"Consumer"),(0,o.kt)("p",null,"The following example creates a consumer with the ",(0,o.kt)("inlineCode",{parentName:"p"},"<my-subscription>")," subscription name on the ",(0,o.kt)("inlineCode",{parentName:"p"},"<c8globals or c8locals>.<my-topic>")," topic or multiple topics with global either local distribution. For example: ",(0,o.kt)("inlineCode",{parentName:"p"},'consumer.subscribe(["c8globals.topic-1", "c8locals.topic-2"])'),". The listener receives incoming messages, prints the content and ID of messages that arrive."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from confluent_kafka import Consumer, KafkaException, KafkaError\n\nconsumer = Consumer({'bootstrap.servers': '<my-gdn>.<my-paas>.macrometa.io:9093',\n                     'group.id': config[\"group.id\"],\n                     'auto.offset.reset': 'earliest',\n                     'sasl.username': '<my-tenant>/<my-fabric>',\n                     'sasl.password': 'token:<my-api-key or my-JWT>',\n                     'security.protocol': 'SASL_SSL',\n                     'enable.ssl.certificate.verification': 'false',\n                     'ssl.ca.location': '<path-to-ca.cet.pem-file>',\n                     'sasl.mechanism': 'PLAIN'})\nconsumer.subscribe([<c8globals or c8locals>.<my-topic>])\n\nwhile True:\n    msg = consumer.poll(timeout=1.0)\n    if msg is None: continue\n\n    if msg.error():\n        if msg.error().code() == KafkaError._PARTITION_EOF:\n            # End of partition event\n            print('topic {} in partition {} reached end at offset {}'.format(msg.topic(), msg.partition(), msg.offset()))\n        elif msg.error():\n            raise KafkaException(msg.error())\n    else:\n        print(\"message.offset={}, message.key={}, message.value={}\".format(msg.offset(), msg.key(), msg.value()))\n")))}m.isMDXComponent=!0}}]);