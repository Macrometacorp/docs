"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53105],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>d});var s=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,s)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,s,o=function(n,e){if(null==n)return{};var t,s,o={},r=Object.keys(n);for(s=0;s<r.length;s++)t=r[s],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(s=0;s<r.length;s++)t=r[s],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=s.createContext({}),l=function(n){var e=s.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=l(n.components);return s.createElement(c.Provider,{value:e},n.children)},m={inlineCode:"code",wrapper:function(n){var e=n.children;return s.createElement(s.Fragment,{},e)}},p=s.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,c=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),p=l(t),d=o,b=p["".concat(c,".").concat(d)]||p[d]||m[d]||r;return t?s.createElement(b,a(a({ref:e},u),{},{components:t})):s.createElement(b,a({ref:e},u))}));function d(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,a=new Array(r);a[0]=p;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:o,a[1]=i;for(var l=2;l<r;l++)a[l]=t[l];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}p.displayName="MDXCreateElement"},78132:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=t(87462),o=(t(67294),t(3905));const r={sidebar_position:110,title:"Pub-Sub with Streams in Browser Example"},a=void 0,i={unversionedId:"streams/stream-examples/pub-sub-streams-browser",id:"streams/stream-examples/pub-sub-streams-browser",title:"Pub-Sub with Streams in Browser Example",description:"This example shows how to use the GDN console to publish messages on a stream and subscribe to receive messages.",source:"@site/docs/streams/stream-examples/pub-sub-streams-browser.md",sourceDirName:"streams/stream-examples",slug:"/streams/stream-examples/pub-sub-streams-browser",permalink:"/docs/streams/stream-examples/pub-sub-streams-browser",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-examples/pub-sub-streams-browser.md",tags:[],version:"current",sidebarPosition:110,frontMatter:{sidebar_position:110,title:"Pub-Sub with Streams in Browser Example"},sidebar:"defaultSidebar",previous:{title:"Pub-Sub with Streams Example",permalink:"/docs/streams/stream-examples/pub-sub-streams"},next:{title:"REST API Streams Example",permalink:"/docs/streams/stream-examples/rest-apis-stream-example"}},c={},l=[],u={toc:l};function m(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,s.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This example shows how to use the GDN console to publish messages on a stream and subscribe to receive messages."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Pub-Sub demo</title>\n    <link\n      href="https://fonts.googleapis.com/css2?family=Overpass+Mono&display=swap"\n      rel="stylesheet"\n    />\n    <link\n      rel="stylesheet"\n      href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.css"\n    />\n    <link\n      rel="stylesheet"\n      href="https://cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.css"\n    />\n    <style rel="stylesheet">\n      #console {\n        font-family: "Roboto Mono", monospace !important;\n      }\n    </style>\n  </head>\n\n  <body class="container" style="max-width: none;">\n    <div class="row">\n      <div class="column column-40" style="padding: 20px; height: 100vh;">\n        <h1>Pub Sub Demo</h1>\n\n        <textarea\n          rows="10"\n          style="resize: vertical; height: 200px;"\n          placeholder="Enter your message here..."\n          id="messageBox"\n          disabled\n        ></textarea>\n        <div style="display: flex;">\n          <div style="flex-grow: 1;">\n            <button onclick="init()" class="button-outline" id="startButton">\n              Start\n            </button>\n\n            <button\n              onclick="closeConnection()"\n              class="button-clear"\n              disabled\n              id="closeButton"\n            >\n              Close\n            </button>\n          </div>\n\n          <button onclick="publish()" id="publishButton" disabled>\n            Publish\n          </button>\n        </div>\n      </div>\n      <div\n        id="console"\n        class="column column-60"\n        style="padding: 20px; height: 100vh; background: black; overflow: auto;"\n      ></div>\n    </div>\n  </body>\n  <script type="text/javascript">\n    /* ------------------- API MIDDLEWARE TO MANAGE API CALLS ------------------- */\n\n    class APIRequest {\n      _headers = {\n        Accept: "application/json",\n        "Content-Type": "application/json",\n      };\n\n      constructor(url) {\n        this._url = url;\n      }\n\n      login(email, password) {\n        const endpoint = "/_open/auth";\n\n        const self = this;\n\n        return new Promise(function (resolve, reject) {\n          self\n            .req(endpoint, {\n              body: { email, password },\n              method: "POST",\n            })\n            .then(({ jwt, ...data }) => {\n              self._headers.authorization = `bearer ${jwt}`;\n              resolve(data);\n            })\n            .catch(reject);\n        });\n      }\n\n      _handleResponse(response, resolve, reject) {\n        if (response.ok) {\n          resolve(response.json());\n        } else {\n          reject(response);\n        }\n      }\n\n      req(endpoint, { body, ...options } = {}) {\n        const self = this;\n        return new Promise(function (resolve, reject) {\n          fetch(self._url + endpoint, {\n            headers: self._headers,\n            body: body ? JSON.stringify(body) : undefined,\n            ...options,\n          }).then((response) =>\n            self._handleResponse(response, resolve, reject)\n          );\n        });\n      }\n    }\n\n    /* ---------------------------- PUB-SUB TUTORIAL ---------------------------- */\n\n    const EMAIL = "your@email.com";\n    const PASSWORD = "password";\n\n    const URL_NAME = "api-play.paas.macrometa.io";\n    const HTTP_URL = `https://${URL_NAME}`;\n\n    const STREAM_NAME = "api_tutorial_streams";\n    const CONSUMER_NAME = "api_tutorial_streams_consumer";\n    const IS_GLOBAL = true;\n\n    /* ------------------------------ UI References ----------------------------- */\n\n    const consoleElement = document.getElementById("console");\n    const input = document.getElementById("messageBox");\n    const startButton = document.getElementById("startButton");\n    const closeButton = document.getElementById("closeButton");\n    const publishButton = document.getElementById("publishButton");\n\n    /* ---------------------------- Global Variables ---------------------------- */\n\n    var consumer;\n    var producer;\n\n    /* ---------------------------- Helpers Functions --------------------------- */\n\n    function checkTime(i) {\n      if (i < 10) {\n        i = "0" + i;\n      }\n      return i;\n    }\n\n    function getTime() {\n      var today = new Date();\n      var h = today.getHours();\n      var m = today.getMinutes();\n      var s = today.getSeconds();\n      // add a zero in front of numbers<10\n      m = checkTime(m);\n      s = checkTime(s);\n      return h + ":" + m + ":" + s;\n    }\n\n    function print(msg) {\n      var node = document.createElement("small");\n\n      node.style =\n        "display:block; font-weight:400;color:white;word-break:break-all;position:relative;padding-left:100px";\n      var span = document.createElement("span");\n      span.style = "position:absolute;left:0";\n\n      var time = document.createTextNode(`> ${getTime()} : `);\n\n      span.appendChild(time);\n\n      var textnode = document.createTextNode(`${msg}`);\n      node.appendChild(span);\n      node.appendChild(textnode);\n      consoleElement.appendChild(node);\n      consoleElement.scrollTop = consoleElement.scrollHeight;\n    }\n\n    function toggleUIButtons(\n      skip = { start: false, publish: false, close: false }\n    ) {\n      if (!skip.start) startButton.disabled = !startButton.disabled;\n      if (!skip.publish) publishButton.disabled = !publishButton.disabled;\n      if (!skip.close) closeButton.disabled = !closeButton.disabled;\n      if (!skip.publish) input.disabled = !input.disabled;\n    }\n\n    /* -------------------------------------------------------------------------- */\n\n    const connection = new APIRequest(HTTP_URL);\n\n    const init = async function () {\n      try {\n        toggleUIButtons({ publish: true, close: true });\n\n        /* -------------------- Login (your@email.com/password) -------------------- */\n\n        const { tenant } = await connection.login(EMAIL, PASSWORD);\n\n        print("Login Successfully using " + tenant);\n        /* ------------------------------ Create Stream ----------------------------- */\n\n        try {\n          const stream = await connection.req(\n            `/_fabric/_system/streams/${STREAM_NAME}?global=${IS_GLOBAL}`,\n            {\n              body: { name: STREAM_NAME },\n              method: "POST",\n            }\n          );\n          print("STREAM CREATED SUCCESSFULLY");\n        } catch (e) {\n          if (e.status == 409) {\n            print("Stream already exists, skipping creation of stream");\n          }\n          else {\n            print("Error while creating stream");\n            throw e;\n          }\n        }\n\n        /* ----------------- Publish and Subscribe message to stream ---------------- */\n\n        const region = IS_GLOBAL ? "c8global" : "c8local";\n        const streamName = `${region}s.${STREAM_NAME}`;\n\n        // Fetching local URL in case the stream is local\n        const localDcDetails = await connection.req(`/datacenter/local`, {\n          method: "GET",\n        });\n\n        const dcUrl = localDcDetails.tags.url;\n\n        const url = IS_GLOBAL\n          ? URL_NAME\n          : `api-${dcUrl}`;\n\n        const otpConsumer = await connection.req(`/apid/otp`, {\n          method: "POST",\n        });\n        const otpProducer = await connection.req(`/apid/otp`, {\n          method: "POST",\n        });\n\n        const consumerUrl = `wss://${url}/_ws/ws/v2/consumer/persistent/${tenant}/${region}._system/${streamName}/${CONSUMER_NAME}?otp=${otpConsumer.otp}`;\n\n        const producerUrl = `wss://${url}/_ws/ws/v2/producer/persistent/${tenant}/${region}._system/${streamName}?otp=${otpProducer.otp}`;\n\n        /* -------------------------- Initalizing Consumer -------------------------- */\n\n        const initConsumer = () => {\n          return new Promise((resolve) => {\n            consumer = new WebSocket(consumerUrl);\n\n            consumer.onopen = function () {\n              print("Consumer is open now for " + streamName);\n              resolve();\n            };\n\n            consumer.onerror = function () {\n              print(\n                "Failed to establish Consumer connection for " + streamName\n              );\n            };\n\n            consumer.onclose = function () {\n              print("Closed Consumer connection for " + streamName);\n            };\n\n            consumer.onmessage = function (message) {\n              var receivedMsg = message.data && JSON.parse(message.data);\n              print(\n                "------------------ Consumer Message Received -----------------"\n              );\n              print(atob(receivedMsg.payload));\n              print(\n                "--------------------------------------------------------------"\n              );\n\n              const ackMsg = { messageId: receivedMsg.messageId };\n              consumer.send(JSON.stringify(ackMsg));\n            };\n          });\n        };\n\n        /* -------------------------- Initalizing Producer -------------------------- */\n\n        const initProducer = () => {\n          producer = new WebSocket(producerUrl);\n\n          producer.onopen = function () {\n            print("Producer is open now for " + streamName);\n          };\n\n          producer.onclose = function (e) {\n            print("Closed Producer connection for " + streamName);\n          };\n\n          producer.onerror = function (e) {\n            print("Failed to establish Producer connection for " + streamName);\n          };\n        };\n\n        initConsumer().then(() => {\n          initProducer();\n          toggleUIButtons({ start: true });\n          print(\n            "--------------------------------------------------------------"\n          );\n          print(\n            "----------YOU CAN NOW START PUBLISHING YOUR MESSAGES----------"\n          );\n          print(\n            "--------------------------------------------------------------"\n          );\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    function publish() {\n      try {\n        const value = input.value.trim().replace(/(\\r\\n|\\n|\\r)/gm, "");\n        let msgToSend = value;\n\n        if (value[0] === "{" && value.slice(-1) === "}") {\n          msgToSend = JSON.stringify(JSON.parse(input.value));\n        }\n\n        producer.send(JSON.stringify({ payload: btoa(msgToSend) }));\n        print(`Sending message....  : ${msgToSend}`);\n        print(`Producer message sent`);\n      } catch (e) {\n        print(e);\n      }\n    }\n\n    async function closeConnection() {\n      toggleUIButtons();\n\n      consumer.close();\n      print("CONSUMER CLOSING...");\n      producer.close();\n      print("PRODUCER CLOSING...");\n\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n\n      /* ------------------------ Unsubscribe from stream. ------------------------ */\n\n      await connection.req(\n        `/_fabric/_system/_api/streams/unsubscribe/${CONSUMER_NAME}`,\n        {\n          method: "POST",\n        }\n      );\n\n      print(`${CONSUMER_NAME} UNSUBSCRIBED SUCCESSFULLY`);\n    }\n  <\/script>\n</html>\n')))}m.isMDXComponent=!0}}]);