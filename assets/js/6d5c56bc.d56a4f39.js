"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76327],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),m=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=m(n),d=r,k=c["".concat(u,".").concat(d)]||c[d]||p[d]||l;return n?a.createElement(k,o(o({ref:t},s),{},{components:n})):a.createElement(k,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var m=2;m<l;m++)o[m]=n[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},60145:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const l={title:"Document Functions"},o=void 0,i={unversionedId:"queryworkers/c8ql/functions/document",id:"queryworkers/c8ql/functions/document",title:"Document Functions",description:"C8QL provides below listed functions to operate on objects and document values.",source:"@site/docs/queryworkers/c8ql/functions/document.md",sourceDirName:"queryworkers/c8ql/functions",slug:"/queryworkers/c8ql/functions/document",permalink:"/docs/queryworkers/c8ql/functions/document",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/functions/document.md",tags:[],version:"current",frontMatter:{title:"Document Functions"},sidebar:"defaultSidebar",previous:{title:"Date Functions",permalink:"/docs/queryworkers/c8ql/functions/date"},next:{title:"Calling Functions",permalink:"/docs/queryworkers/c8ql/functions/fuction-calling"}},u={},m=[{value:"ATTRIBUTES()",id:"attributes",level:2},{value:"COUNT()",id:"count",level:2},{value:"HAS()",id:"has",level:2},{value:"IS_SAME_COLLECTION()",id:"is_same_collection",level:2},{value:"KEEP()",id:"keep",level:2},{value:"LENGTH()",id:"length",level:2},{value:"MATCHES()",id:"matches",level:2},{value:"MERGE()",id:"merge",level:2},{value:"MERGE_RECURSIVE()",id:"merge_recursive",level:2},{value:"PARSE_IDENTIFIER()",id:"parse_identifier",level:2},{value:"TRANSLATE()",id:"translate",level:2},{value:"UNSET()",id:"unset",level:2},{value:"UNSET_RECURSIVE()",id:"unset_recursive",level:2},{value:"VALUES()",id:"values",level:2},{value:"ZIP()",id:"zip",level:2}],s={toc:m};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"C8QL provides below listed functions to operate on objects and document values."),(0,r.kt)("h2",{id:"attributes"},"ATTRIBUTES()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ATTRIBUTES(document, removeInternal, sort) \u2192 strArray")),(0,r.kt)("p",null,"Return the top-level attribute keys of the ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," as an array. Optionally omit system attributes and sort the array."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"document"))," (object): an arbitrary document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"removeInternal")," (bool, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): whether all system attributes (",(0,r.kt)("em",{parentName:"li"},"_key"),", ",(0,r.kt)("em",{parentName:"li"},"_id")," etc., every attribute key that starts with an underscore) shall be omitted in the result. The default is ",(0,r.kt)("em",{parentName:"li"},"false"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"sort")," (bool, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): optionally sort the resulting array alphabetically. The default is ",(0,r.kt)("em",{parentName:"li"},"false")," and will return the attribute names in any order."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"strArray")," (array): the attribute keys of the input ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," as an array of strings")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ATTRIBUTES( { "foo": "bar", "_key": "123", "_custom": "yes" } )\n// [ "foo", "_key", "_custom" ]\n\nATTRIBUTES( { "foo": "bar", "_key": "123", "_custom": "yes" }, true )\n// [ "foo" ]\n\nATTRIBUTES( { "foo": "bar", "_key": "123", "_custom": "yes" }, false, true )\n// [ "_custom", "_key", "foo" ]\n')),(0,r.kt)("p",null,"Complex example to count how often every attribute key occurs in the documents of ",(0,r.kt)("inlineCode",{parentName:"p"},"collection")," (expensive on large collections):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"LET attributesPerDocument = (\n    FOR doc IN collection RETURN ATTRIBUTES(doc, true)\n)\nFOR attributeArray IN attributesPerDocument\n    FOR attribute IN attributeArray\n        COLLECT attr = attribute WITH COUNT INTO count\n        SORT count DESC\n        RETURN {attr, count}\n")),(0,r.kt)("h2",{id:"count"},"COUNT()"),(0,r.kt)("p",null,"This is an alias for ",(0,r.kt)("a",{parentName:"p",href:"#length"},"LENGTH()"),"."),(0,r.kt)("h2",{id:"has"},"HAS()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HAS(document, attributeName) \u2192 isPresent")),(0,r.kt)("p",null,"Test whether an attribute is present in the provided document."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"document"))," (object): an arbitrary document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attributeName")," (string): the attribute key to test for"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"isPresent")," (bool): ",(0,r.kt)("em",{parentName:"li"},"true")," if ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," has an attribute named ",(0,r.kt)("em",{parentName:"li"},"attributeName"),", and ",(0,r.kt)("em",{parentName:"li"},"false")," otherwise. An attribute with a falsy value (",(0,r.kt)("em",{parentName:"li"},"0"),", ",(0,r.kt)("em",{parentName:"li"},"false"),", empty string ",(0,r.kt)("inlineCode",{parentName:"li"},'""'),") or ",(0,r.kt)("em",{parentName:"li"},"null")," is also considered as present and returns ",(0,r.kt)("em",{parentName:"li"},"true"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HAS( { name: "Jane" }, "name" ) // true\nHAS( { name: "Jane" }, "age" ) // false\nHAS( { name: null }, "name" ) // true\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The function checks if the specified attribute exists. This is different from similar ways to test for the existance of an attribute, in case the attribute has a falsy value or is not present (implicitly ",(0,r.kt)("em",{parentName:"p"},"null")," on object access):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'!!{ name: "" }.name        // false\nHAS( { name: "" }, "name") // true\n\n{ name: null }.name == null   // true\n{ }.name == null              // true\nHAS( { name: null }, "name" ) // true\nHAS( { }, "name" )            // false\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"HAS()")," can not utilize indexes. If it's not necessary to distinguish between explicit and implicit ",(0,r.kt)("em",{parentName:"p"},"null")," values in your query, you may use an equality comparison to test for ",(0,r.kt)("em",{parentName:"p"},"null")," and create a non-sparse index on the attribute you want to test against:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FILTER !HAS(doc, "name")    // can not use indexes\nFILTER IS_NULL(doc, "name") // can not use indexes\nFILTER doc.name == null     // can utilize non-sparse indexes\n')),(0,r.kt)("h2",{id:"is_same_collection"},"IS_SAME_COLLECTION()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IS_SAME_COLLECTION(collectionName, documentHandle) \u2192 bool")),(0,r.kt)("p",null,"  collection id as the collection specified in ",(0,r.kt)("inlineCode",{parentName:"p"},"collection"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," can either be a document handle string, or a document with an ",(0,r.kt)("em",{parentName:"p"},"_id")," attribute. The function does not validate whether the collection actually contains the specified document, but only compares the name of the specified collection with the collection name part of the specified document. If ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," is neither an object with an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," attribute nor a ",(0,r.kt)("em",{parentName:"p"},"string")," value, the function will return ",(0,r.kt)("em",{parentName:"p"},"null")," and raise a warning."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"collectionName")," (string): the name of a collection as string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"documentHandle")," (string","|","object): a document identifier string (e.g. ",(0,r.kt)("em",{parentName:"li"},"_users/1234"),") or a regular document from a collection. Passing either a non-string or a non-document or a document without an ",(0,r.kt)("em",{parentName:"li"},"_id")," attribute will result in an error."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"bool")," (bool): return ",(0,r.kt)("em",{parentName:"li"},"true")," if the collection of ",(0,r.kt)("em",{parentName:"li"},"documentHandle")," is the same as ",(0,r.kt)("em",{parentName:"li"},"collectionName"),", otherwise ",(0,r.kt)("em",{parentName:"li"},"false"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// true\nIS_SAME_COLLECTION( "_users", "_users/my-user" )\nIS_SAME_COLLECTION( "_users", { _id: "_users/my-user" } )\n\n// false\nIS_SAME_COLLECTION( "_users", "foobar/baz")\nIS_SAME_COLLECTION( "_users", { _id: "something/else" } )\n')),(0,r.kt)("h2",{id:"keep"},"KEEP()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"KEEP(document, attributeName1, attributeName2, ... attributeNameN) \u2192 doc")),(0,r.kt)("p",null,"Keep only the attributes ",(0,r.kt)("em",{parentName:"p"},"attributeName")," to ",(0,r.kt)("em",{parentName:"p"},"attributeNameN")," of ",(0,r.kt)("inlineCode",{parentName:"p"},"document"),". All other attributes will be removed from the result."),(0,r.kt)("p",null,"To do the opposite, see ",(0,r.kt)("a",{parentName:"p",href:"#unset"},"UNSET()"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"document")," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attributeNames")," (string, ",(0,r.kt)("em",{parentName:"li"},"repeatable"),"): an arbitrary number of attribute names as multiple arguments"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"doc")," (object): a document with only the specified attributes on the top-level")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'KEEP(doc, "firstname", "name", "likes")\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"KEEP(document, attributeNameArray) \u2192 doc")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"document")," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attributeNameArray")," (array): an array of attribute names as strings"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"doc")," (object): a document with only the specified attributes on the top-level")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'KEEP(doc, [ "firstname", "name", "likes" ])\n')),(0,r.kt)("h2",{id:"length"},"LENGTH()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LENGTH(doc) \u2192 attrCount")),(0,r.kt)("p",null,"Determine the number of attribute keys of an object / document."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"doc")," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"attrCount")," (number): the number of attribute keys in ",(0,r.kt)("em",{parentName:"li"},"doc"),", regardless of their values")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"LENGTH()")," can also determine the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/array#length"},"number of elements")," in an array, the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/database#length"},"amount of documents")," in a collection and the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/string#length"},"character length")," of a string."),(0,r.kt)("h2",{id:"matches"},"MATCHES()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MATCHES(document, examples, returnIndex) \u2192 match")),(0,r.kt)("p",null,"Compare the given ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," against each example document provided. The comparisons will be started with the first example. All attributes of the example will be compared against the attributes of ",(0,r.kt)("inlineCode",{parentName:"p"},"document"),". If all attributes match, the comparison stops and the result is returned. If there is a mismatch, the function will continue the comparison with the next example until there are no more examples left."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"examples")," can be an array of 1..n example documents or a single document, with any number of attributes each."),(0,r.kt)("p",null,"An attribute value of ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," will match documents with an explicit attribute value of ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as well as documents with this attribute missing (implicitly ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),"). Only ",(0,r.kt)("a",{parentName:"p",href:"#has"},"HAS()")," can differentiate between an attribute being absent and having a stored ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," value."),(0,r.kt)("p",null,"An empty object ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," will match all documents. Be careful not to ask for all documents accidentally. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"MATCHES()")," can not utilize indexes. You may use plain ",(0,r.kt)("inlineCode",{parentName:"p"},"FILTER")," conditions instead to potentially benefit from existing indexes:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"```js\nFOR doc IN coll\nFILTER (cond1 AND cond2 AND cond3) OR (cond4 AND cond5) ...\n```\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"document")," (object): document to determine whether it matches any example"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"examples")," (object","|","array): a single document, or an array of documents to compare against. Specifying an empty array is not allowed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"returnIndex")," (bool): by setting this flag to ",(0,r.kt)("em",{parentName:"li"},"true"),", the index of the example that matched will be returned (starting at offset 0), or ",(0,r.kt)("em",{parentName:"li"},"-1")," if there was no match. The default is ",(0,r.kt)("em",{parentName:"li"},"false")," and makes the function return a boolean."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"match")," (bool","|","number): if ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," matches one of the examples, ",(0,r.kt)("em",{parentName:"li"},"true")," is returned, otherwise ",(0,r.kt)("em",{parentName:"li"},"false"),". A number is returned instead if ",(0,r.kt)("em",{parentName:"li"},"returnIndex")," is used.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LET doc = {\n    name: "jane",\n    age: 27,\n    active: true\n}\nRETURN MATCHES(doc, { age: 27, active: true } )\n')),(0,r.kt)("p",null,"This will return ",(0,r.kt)("em",{parentName:"p"},"true"),", because all attributes of the example are present in the document."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'RETURN MATCHES(\n    { "test": 1 },\n    [\n        { "test": 1, "foo": "bar" },\n        { "foo": 1 },\n        { "test": 1 }\n    ], true)\n')),(0,r.kt)("p",null,"This will return ",(0,r.kt)("em",{parentName:"p"},"2"),", because the third example matches, and because the ",(0,r.kt)("em",{parentName:"p"},"returnIndex")," flag is set to ",(0,r.kt)("em",{parentName:"p"},"true"),"."),(0,r.kt)("h2",{id:"merge"},"MERGE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MERGE(document1, document2, ... documentN) \u2192 mergedDocument")),(0,r.kt)("p",null,"Merge the documents ",(0,r.kt)("em",{parentName:"p"},"document1")," to ",(0,r.kt)("em",{parentName:"p"},"documentN")," into a single document. If document attribute keys are ambiguous, the merged result will contain the values of the documents contained later in the argument list."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"documents")," (object, ",(0,r.kt)("em",{parentName:"li"},"repeatable"),"): an arbitrary number of documents as multiple arguments (at least 2)"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"mergedDocument")," (object): a combined document")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Merging will only be done for top-level attributes. If you wish to merge sub-attributes, use ",(0,r.kt)("a",{parentName:"p",href:"#merge_recursive"},"MERGE_RECURSIVE()")," instead.")),(0,r.kt)("p",null,"Two documents with distinct attribute names can easily be merged into one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'MERGE(\n    { "user1": { "name": "Jane" } },\n    { "user2": { "name": "Tom" } }\n)\n// { "user1": { "name": "Jane" }, "user2": { "name": "Tom" } }\n')),(0,r.kt)("p",null,"When merging documents with identical attribute names, the attribute values of the latter documents will be used in the end result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'MERGE(\n    { "users": { "name": "Jane" } },\n    { "users": { "name": "Tom" } }\n)\n// { "users": { "name": "Tom" } }\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MERGE(docArray) \u2192 mergedDocument")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"MERGE")," works with a single array parameter, too. This variant allows combining the attributes of multiple objects in an array into a single object."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"docArray")," (array): an array of documents, as sole argument"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"mergedDocument")," (object): a combined document")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'MERGE(\n    [\n        { foo: "bar" },\n        { quux: "quetzalcoatl", ruled: true },\n        { bar: "baz", foo: "done" }\n    ]\n)\n')),(0,r.kt)("p",null,"This will now return:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n    "foo": "done",\n    "quux": "quetzalcoatl",\n    "ruled": true,\n    "bar": "baz"\n}\n')),(0,r.kt)("h2",{id:"merge_recursive"},"MERGE_RECURSIVE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MERGE_RECURSIVE(document1, document2, ... documentN) \u2192 mergedDocument")),(0,r.kt)("p",null,"Recursively merge the documents ",(0,r.kt)("em",{parentName:"p"},"document1")," to ",(0,r.kt)("em",{parentName:"p"},"documentN")," into a single document. If document attribute keys are ambiguous, the merged result will contain the values of the documents contained later in the argument list."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"documents")," (object, ",(0,r.kt)("em",{parentName:"li"},"repeatable"),"): an arbitrary number of documents as multiple arguments (at least 2)"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"mergedDocument")," (object): a combined document")),(0,r.kt)("p",null,"For example, two documents with distinct attribute names can easily be merged into one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'MERGE_RECURSIVE(\n    { "user-1": { "name": "Jane", "livesIn": { "city": "LA" } } },\n    { "user-1": { "age": 42, "livesIn": { "state": "CA" } } }\n)\n// { "user-1": { "name": "Jane", "livesIn": { "city": "LA", "state": "CA" }, "age": 42 } }\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"MERGE_RECURSIVE()")," does not support the single array parameter variant that ",(0,r.kt)("em",{parentName:"p"},"MERGE")," offers.")),(0,r.kt)("h2",{id:"parse_identifier"},"PARSE_IDENTIFIER()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PARSE_IDENTIFIER(documentHandle) \u2192 parts")),(0,r.kt)("p",null,"Parse a ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/document"},"document handle")," and return its individual parts as separate attributes."),(0,r.kt)("p",null,"This function can be used to easily determine the ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/functions/document"},"collection name")," and key of a given document."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"documentHandle")," (string","|","object): a document identifier string (e.g. ",(0,r.kt)("em",{parentName:"li"},"_users/1234"),") or a regular document from a collection. Passing either a non-string or a non-document or a document without an ",(0,r.kt)("em",{parentName:"li"},"_id")," attribute will result in an error."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"parts")," (object): an object with the attributes ",(0,r.kt)("inlineCode",{parentName:"li"},"collection")," and ",(0,r.kt)("em",{parentName:"li"},"key"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'PARSE_IDENTIFIER("_users/my-user")\n// { "collection": "_users", "key": "my-user" }\n\nPARSE_IDENTIFIER( { "_id": "mycollection/mykey", "value": "some value" } )\n// { "collection": "mycollection", "key": "mykey" }\n')),(0,r.kt)("h2",{id:"translate"},"TRANSLATE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TRANSLATE(value, lookupDocument, defaultValue) \u2192 mappedValue")),(0,r.kt)("p",null,"Look up the specified ",(0,r.kt)("em",{parentName:"p"},"value")," in the ",(0,r.kt)("em",{parentName:"p"},"lookupDocument"),". If ",(0,r.kt)("em",{parentName:"p"},"value")," is a key in ",(0,r.kt)("em",{parentName:"p"},"lookupDocument"),", then ",(0,r.kt)("em",{parentName:"p"},"value")," will be replaced with the lookup value found. If ",(0,r.kt)("em",{parentName:"p"},"value")," is not present in ",(0,r.kt)("em",{parentName:"p"},"lookupDocument"),", then ",(0,r.kt)("em",{parentName:"p"},"defaultValue")," will be returned if specified. If no ",(0,r.kt)("em",{parentName:"p"},"defaultValue")," is specified, ",(0,r.kt)("em",{parentName:"p"},"value")," will be returned unchanged."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): the value to encode according to the mapping"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"lookupDocument")," (object): a key/value mapping as document"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"defaultValue")," (any, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): a fallback value in case ",(0,r.kt)("em",{parentName:"li"},"value")," is not found"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"mappedValue")," (any): the encoded value, or the unaltered ",(0,r.kt)("em",{parentName:"li"},"value")," or ",(0,r.kt)("em",{parentName:"li"},"defaultValue")," (if supplied) in case it couldn't be mapped")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'TRANSLATE("FR", { US: "United States", UK: "United Kingdom", FR: "France" } )\n// "France"\n\nTRANSLATE(42, { foo: "bar", bar: "baz" } )\n// 42\n\nTRANSLATE(42, { foo: "bar", bar: "baz" }, "not found!")\n// "not found!"\n')),(0,r.kt)("h2",{id:"unset"},"UNSET()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UNSET(document, attributeName1, attributeName2, ... attributeNameN) \u2192 doc")),(0,r.kt)("p",null,"Remove the attributes ",(0,r.kt)("em",{parentName:"p"},"attributeName1")," to ",(0,r.kt)("em",{parentName:"p"},"attributeNameN")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"document"),". All other attributes will be preserved."),(0,r.kt)("p",null,"To do the opposite, see ",(0,r.kt)("a",{parentName:"p",href:"#keep"},"KEEP()"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"document")," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attributeNames")," (string, ",(0,r.kt)("em",{parentName:"li"},"repeatable"),"): an arbitrary number of attribute names as multiple arguments (at least 1)"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"doc")," (object): ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," without the specified attributes on the top-level")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'UNSET( doc, "_id", "_key", "foo", "bar" )\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UNSET(document, attributeNameArray) \u2192 doc")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"document"))," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attributeNameArray")," (array): an array of attribute names as strings"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"doc")," (object): ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," without the specified attributes on the top-level")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'UNSET( doc, [ "_id", "_key", "foo", "bar" ] )\n')),(0,r.kt)("h2",{id:"unset_recursive"},"UNSET_RECURSIVE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UNSET_RECURSIVE(document, attributeName1, attributeName2, ... attributeNameN) \u2192 doc")),(0,r.kt)("p",null,"Recursively remove the attributes ",(0,r.kt)("em",{parentName:"p"},"attributeName1")," to ",(0,r.kt)("em",{parentName:"p"},"attributeNameN")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," and its sub-documents. All other attributes will be preserved."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"document"))," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attributeNames")," (string, ",(0,r.kt)("em",{parentName:"li"},"repeatable"),"): an arbitrary number of attribute names as multiple arguments (at least 1)"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"doc")," (object): ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," without the specified attributes on all levels (top-level as well as nested objects)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'UNSET_RECURSIVE( doc, "_id", "_key", "foo", "bar" )\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UNSET_RECURSIVE(document, attributeNameArray) \u2192 doc")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"document"))," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attributeNameArray")," (array): an array of attribute names as strings"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"doc")," (object): ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," without the specified attributes on all levels (top-level as well as nested objects)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'UNSET_RECURSIVE( doc, [ "_id", "_key", "foo", "bar" ] )\n')),(0,r.kt)("h2",{id:"values"},"VALUES()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"VALUES(document, removeInternal) \u2192 anyArray")),(0,r.kt)("p",null,"Return the attribute values of the ",(0,r.kt)("inlineCode",{parentName:"p"},"document")," as an array. Optionally omit system attributes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"em"},"document"))," (object): a document / object"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"removeInternal")," (bool, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): if set to ",(0,r.kt)("em",{parentName:"li"},"true"),", then all internal attributes (such as ",(0,r.kt)("em",{parentName:"li"},"_id"),", ",(0,r.kt)("em",{parentName:"li"},"_key")," etc.) are removed from the result"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"anyArray")," (array): the values of ",(0,r.kt)("inlineCode",{parentName:"li"},"document")," returned in any order")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'VALUES( { "_key": "users/jane", "name": "Jane", "age": 35 } )\n// [ "Jane", 35, "users/jane" ]\n\nVALUES( { "_key": "users/jane", "name": "Jane", "age": 35 }, true )\n// [ "Jane", 35 ]\n')),(0,r.kt)("h2",{id:"zip"},"ZIP()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ZIP(keys, values) \u2192 doc")),(0,r.kt)("p",null,"Return a document object assembled from the separate parameters ",(0,r.kt)("em",{parentName:"p"},"keys")," and ",(0,r.kt)("em",{parentName:"p"},"values"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"keys")," and ",(0,r.kt)("em",{parentName:"p"},"values")," must be arrays and have the same length."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"keys")," (array): an array of strings, to be used as attribute names in the result"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"values")," (array): an array with elements of arbitrary types, to be used as attribute values"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"doc")," (object): a document with the keys and values assembled")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'ZIP( [ "name", "active", "hobbies" ], [ "some user", true, [ "swimming", "riding" ] ] )\n// { "name": "some user", "active": true, "hobbies": [ "swimming", "riding" ] }\n')))}p.isMDXComponent=!0}}]);