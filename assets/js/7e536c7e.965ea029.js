"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[19490],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return r?n.createElement(f,p(p({ref:t},m),{},{components:r})):n.createElement(f,p({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var l=2;l<o;l++)p[l]=r[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},74774:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:1,title:"Basic Stream Worker Example"},p=void 0,i={unversionedId:"cep/examples/basic-sw-example",id:"cep/examples/basic-sw-example",title:"Basic Stream Worker Example",description:"This example provides an introduction to the concept of a stream worker.",source:"@site/docs/cep/examples/basic-sw-example.md",sourceDirName:"cep/examples",slug:"/cep/examples/basic-sw-example",permalink:"/docs/cep/examples/basic-sw-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/basic-sw-example.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Basic Stream Worker Example"},sidebar:"defaultSidebar",previous:{title:"Stream Workers Examples",permalink:"/docs/cep/examples/"},next:{title:"Streams and Queries Example",permalink:"/docs/cep/examples/streams-and-queries-example"}},s={},l=[{value:"Example",id:"example",level:2},{value:"Input",id:"input",level:2},{value:"Output",id:"output",level:2}],m={toc:l};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This example provides an introduction to the concept of a stream worker."),(0,a.kt)("p",null,"A stream worker provides an isolated execution environment for processing the execution logic. It can be deployed and processed independently of other stream workers in the system. Stream workers can use ",(0,a.kt)("inlineCode",{parentName:"p"},"inMemory"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"c8db"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"c8stream")," sources and sinks to communicate between each other."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"This example creates a Macrometa data stream to consume events from stream workers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM TemperatureStream (sensorId string, temperature double);\n")),(0,a.kt)("p",null,"This example creates a sink to publish events from stream workers:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SINK TemperatureOnlyStream WITH (type='inMemory', topic='Temperature') (temperature double);\n\n@info(name = 'Simple-selection')\ninsert into TemperatureOnlyStream\nselect temperature\nfrom TemperatureStream;\n")),(0,a.kt)("h2",{id:"input"},"Input"),(0,a.kt)("p",null,"When an event ","[",(0,a.kt)("inlineCode",{parentName:"p"},"'aq-14'"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"35.4"),"]"," is pushed via the ",(0,a.kt)("inlineCode",{parentName:"p"},"SensorDetail")," topic of the ",(0,a.kt)("inlineCode",{parentName:"p"},"inMemory")," transport from another stream worker, the event is consumed and mapped to the ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureStream")," stream."),(0,a.kt)("h2",{id:"output"},"Output"),(0,a.kt)("p",null,"After processing, the event ","[",(0,a.kt)("inlineCode",{parentName:"p"},"35.4"),"]"," arriving at ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureOnlyStream")," is emitted via ",(0,a.kt)("inlineCode",{parentName:"p"},"Temperature")," topic of the ",(0,a.kt)("inlineCode",{parentName:"p"},"inMemory")," transport to other subscribed stream workers."))}c.isMDXComponent=!0}}]);