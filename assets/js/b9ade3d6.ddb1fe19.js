"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[11055],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(r),d=a,g=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return r?n.createElement(g,i(i({ref:t},u),{},{components:r})):n.createElement(g,i({ref:t},u))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},41100:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=r(87462),a=(r(67294),r(3905));const l={title:"csv (Source Mapper)"},i=void 0,o={unversionedId:"cep/query-guide/functions/sourcemapper/csv",id:"cep/query-guide/functions/sourcemapper/csv",title:"csv (Source Mapper)",description:"This extension is used to convert a CSV message to stream worker event input",source:"@site/docs/cep/query-guide/functions/sourcemapper/csv.md",sourceDirName:"cep/query-guide/functions/sourcemapper",slug:"/cep/query-guide/functions/sourcemapper/csv",permalink:"/docs/cep/query-guide/functions/sourcemapper/csv",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/sourcemapper/csv.md",tags:[],version:"current",frontMatter:{title:"csv (Source Mapper)"},sidebar:"defaultSidebar",previous:{title:"binary (Source Mapper)",permalink:"/docs/cep/query-guide/functions/sourcemapper/binary"},next:{title:"json (Source Mapper)",permalink:"/docs/cep/query-guide/functions/sourcemapper/json"}},p={},s=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],u={toc:s};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This extension is used to convert a CSV message to stream worker event input\nmapper. You can either receive a predefined CSV message where event\nconversion takes place without extra configurations or receive custom\nCSV message where a custom place order maps from a custom CSV message."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (map.type="csv", map.delimiter="<STRING>", map.header.present="<BOOL>", map.fail.on.unknown.attribute="<BOOL>", map.event.grouping.enabled="<BOOL>")\n')),(0,a.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"delimiter"),(0,a.kt)("td",{parentName:"tr",align:null},"When converting a CSV format message to a stream worker event, this parameter indicates input CSV message's data should be split by this parameter."),(0,a.kt)("td",{parentName:"tr",align:null},","),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"header.present"),(0,a.kt)("td",{parentName:"tr",align:null},"When converting a CSV format message to Stream App event, this parameter indicates whether CSV message has header or not. This can either have value ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"false"),". If it's set to ",(0,a.kt)("inlineCode",{parentName:"td"},"false"),", then it indicates that CSV message has no header."),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"fail.on.unknown.attribute"),(0,a.kt)("td",{parentName:"tr",align:null},"This parameter specifies how unknown attributes should be handled. If it's set to ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," and one or more attributes don't have values, then the stream processor will drop that message. If this parameter is set to ",(0,a.kt)("inlineCode",{parentName:"td"},"false"),", the stream processor adds the required attribute values to such events with a null value and the event is converted to a stream worker event."),(0,a.kt)("td",{parentName:"tr",align:null},"true"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"event.grouping.enabled"),(0,a.kt)("td",{parentName:"tr",align:null},"This parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to ",(0,a.kt)("inlineCode",{parentName:"td"},"true"),"."),(0,a.kt)("td",{parentName:"tr",align:null},"false"),(0,a.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")))),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='stream', topic='stock', map.type='csv') (symbol string, price float, volume int);\n")),(0,a.kt)("p",null,"Above configuration will do a default CSV input mapping. Expected input is:"),(0,a.kt)("p",null,'gdn ,55.6 , 100OR  "gdn,No10,Palam Groove Rd,Col-03" ,55.6 , 100'),(0,a.kt)("p",null,"If ",(0,a.kt)("inlineCode",{parentName:"p"},"header.present")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),' and delimiter is "-",\nthen the input is as follows: ',(0,a.kt)("inlineCode",{parentName:"p"},"symbol-price-volumegdn-55.6-100")),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='stream', topic='stock', map.type='csv', map.header='true', map.attributes.symbol = '2', map.attributes.price = '0', map.attributes.volume = '1') (symbol string, price float, volume long);\n")),(0,a.kt)("p",null,"Above configuration will perform a custom CSV mapping. Here, user can add place order of each attribute in the @attribute. The place order indicates where the attribute name's value has appeared in the input. Expected input is:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},'55.6,100,gdn OR55.6,100,"gdn,No10,Palm Groove Rd,Col-03"')),(0,a.kt)("p",null,'If header is true and delimiter is "-", then the output is: ',(0,a.kt)("inlineCode",{parentName:"p"},"price-volume-symbol 55.6-100-gdn")),(0,a.kt)("p",null,"If group events is enabled then input should be: ",(0,a.kt)("inlineCode",{parentName:"p"},"price-volume-symbol 55.6-100-gdnSystem.lineSeparator() 55.6-100-IBMSystem.lineSeparator() 55.6-100-IFSSystem.lineSeparator()")))}m.isMDXComponent=!0}}]);