"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57236],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>d});var s=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=s.createContext({}),c=function(e){var n=s.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=c(e.components);return s.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},p=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=r,b=p["".concat(i,".").concat(d)]||p[d]||u[d]||o;return t?s.createElement(b,a(a({ref:n},m),{},{components:t})):s.createElement(b,a({ref:n},m))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>a});var s=t(67294),r=t(34334);const o="tabItem_Ymn6";function a(e){let{children:n,hidden:t,className:a}=e;return s.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,a),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>d});var s=t(87462),r=t(67294),o=t(34334),a=t(72389),l=t(67392),i=t(7094),c=t(12466);const m="tabList__CuJ",u="tabItem_LNqP";function p(e){const{lazy:n,block:t,defaultValue:a,values:p,groupId:d,className:b}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=p??f.map((e=>{let{props:{value:n,label:t,attributes:s}}=e;return{value:n,label:t,attributes:s}})),y=(0,l.l)(h,((e,n)=>e.value===n.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===a?a:a??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==g&&!h.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,i.U)(),[_,T]=(0,r.useState)(g),k=[],{blockElementScrollPositionUntilNextRender:E}=(0,c.o5)();if(null!=d){const e=v[d];null!=e&&e!==_&&h.some((n=>n.value===e))&&T(e)}const N=e=>{const n=e.currentTarget,t=k.indexOf(n),s=h[t].value;s!==_&&(E(n),T(s),null!=d&&w(d,String(s)))},P=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=k.indexOf(e.currentTarget)+1;n=k[t]??k[0];break}case"ArrowLeft":{const t=k.indexOf(e.currentTarget)-1;n=k[t]??k[k.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},b)},h.map((e=>{let{value:n,label:t,attributes:a}=e;return r.createElement("li",(0,s.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:e=>k.push(e),onKeyDown:P,onFocus:N,onClick:N},a,{className:(0,o.Z)("tabs__item",u,a?.className,{"tabs__item--active":_===n})}),t??n)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==_})))))}function d(e){const n=(0,a.Z)();return r.createElement(p,(0,s.Z)({key:String(n)},e))}},39771:(e,n,t)=>{t.d(n,{ZP:()=>a});var s=t(87462),r=(t(67294),t(3905));const o={toc:[]};function a(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Copy and paste the code block below in your favorite IDE."),(0,r.kt)("li",{parentName:"ol"},"Update constants with your values, such as the ",(0,r.kt)("a",{parentName:"li",href:"/docs/account-management/api-keys/"},"API key"),"."),(0,r.kt)("li",{parentName:"ol"},"Run the code.")))}a.isMDXComponent=!0},79516:(e,n,t)=>{t.d(n,{ZP:()=>a});var s=t(87462),r=(t(67294),t(3905));const o={toc:[]};function a(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"https://auth-play.macrometa.io/"},"Macrometa account")," with admin permissions."),(0,r.kt)("li",{parentName:"ul"},"An API key with admin permissions. For more information, refer to ",(0,r.kt)("a",{parentName:"li",href:"/docs/account-management/api-keys/create-api-keys"},"Create API Keys"),".")))}a.isMDXComponent=!0},63904:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>m,default:()=>f,frontMatter:()=>c,metadata:()=>u,toc:()=>d});var s=t(87462),r=(t(67294),t(3905)),o=t(65488),a=t(85162),l=t(79516),i=t(39771);const c={sidebar_position:120,title:"REST API Streams Example"},m=void 0,u={unversionedId:"streams/stream-examples/rest-apis-stream-example",id:"streams/stream-examples/rest-apis-stream-example",title:"REST API Streams Example",description:"This page shows you how to perform a basic pub-sub streams workflow using the Macrometa API. For more information about using Macrometa APIs, refer to APIs.",source:"@site/docs/streams/stream-examples/rest-apis-stream-example.md",sourceDirName:"streams/stream-examples",slug:"/streams/stream-examples/rest-apis-stream-example",permalink:"/docs/streams/stream-examples/rest-apis-stream-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/streams/stream-examples/rest-apis-stream-example.md",tags:[],version:"current",sidebarPosition:120,frontMatter:{sidebar_position:120,title:"REST API Streams Example"},sidebar:"defaultSidebar",previous:{title:"Pub-Sub with Streams in Browser Example",permalink:"/docs/streams/stream-examples/pub-sub-streams-browser"},next:{title:"Realtime DB Updates Example",permalink:"/docs/streams/stream-examples/realtime-updates"}},p={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"REST API Streams Example",id:"rest-api-streams-example",level:2}],b={toc:d};function f(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,s.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page shows you how to perform a basic pub-sub streams workflow using the Macrometa API. For more information about using Macrometa APIs, refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-docs/"},"APIs"),"."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)(l.ZP,{mdxType:"Prerequisites"}),(0,r.kt)("h2",{id:"rest-api-streams-example"},"REST API Streams Example"),(0,r.kt)(i.ZP,{mdxType:"Steps"}),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(a.Z,{value:"js",label:"JavaScript",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const WebSocket = require(\'ws\');\nclass APIRequest {\n  _headers = {\n    Accept: "application/json",\n    "Content-Type": "application/json"\n  };\n\n  constructor (httpUrl, apiKey) {\n    this._url = httpUrl;\n    this._headers.authorization = `apikey ${apiKey}`; // apikey keyword is needed here\n  }\n\n  _handleResponse (response, resolve, reject) {\n    if (response.ok) {\n      resolve(response.json());\n    } else {\n      reject(response);\n    }\n  }\n\n  req (endpoint, { body, ...options } = {}) {\n    const self = this;\n    return new Promise(function (resolve, reject) {\n      fetch(self._url + endpoint, {\n        headers: self._headers,\n        body: body ? JSON.stringify(body) : undefined,\n        ...options\n      }).then((response) => self._handleResponse(response, resolve, reject));\n    });\n  }\n}\n\nconst apiKey = "XXXXX" // Use your API key here\nconst globalUrl = "api-play.paas.macrometa.io";\nconst httpUrl = `https://${globalUrl}`;\nconst tenant = "XXXXX" // Use your tenant name here\n\nconst stream = "api_tutorial_streams";\nconst consumerName = "api_tutorial_streams_consumer";\nconst isGlobal = true;\n\nconst run = async function () {\n  try {\n    const connection = new APIRequest(httpUrl, apiKey);\n\n    /* ------------------------------ Create stream ----------------------------- */\n\n    try {\n      await connection.req(\n        `/_fabric/_system/streams/${stream}?global=${isGlobal}`,\n        {\n          body: { name: stream },\n          method: "POST"\n        }\n      );\n      console.log("Stream created successfully");\n    } catch (e) {\n      if (e.status === 409) {\n        console.log("Stream already exists, skipping creation of stream");\n      } else {\n        console.log("Error while creating stream");\n        throw e;\n      }\n    }\n\n    /* ----------------- Publish and subscribe message to stream ---------------- */\n\n    const region = isGlobal ? "c8global" : "c8local";\n    const streamName = `${region}s.${stream}`;\n\n    // Fetching local URL in case the stream is local\n    const localDcDetails = await connection.req(`/datacenter/local`, {\n      method: "GET"\n    });\n\n    const dcUrl = localDcDetails.tags.url;\n\n    const url = isGlobal\n      ? globalUrl\n      : `api-${dcUrl}`;\n\n    const otpConsumer = await connection.req(`/apid/otp`, {\n      method: "POST"\n    });\n    const otpProducer = await connection.req(`/apid/otp`, {\n      method: "POST"\n    });\n\n    const consumerUrl = `wss://${url}/_ws/ws/v2/consumer/persistent/${tenant}/${region}._system/${streamName}/${consumerName}?otp=${otpConsumer.otp}`;\n\n    const producerUrl = `wss://${url}/_ws/ws/v2/producer/persistent/${tenant}/${region}._system/${streamName}?otp=${otpProducer.otp}`;\n\n    let consumer;\n    let producer;\n    let producerInterval;\n\n    /* -------------------------- Initialize consumer -------------------------- */\n\n    const initConsumer = () => {\n      return new Promise((resolve) => {\n        consumer = new WebSocket(consumerUrl);\n\n        consumer.onopen = function () {\n          console.log("WebSocket:Consumer is open now for " + streamName);\n          resolve();\n        };\n\n        consumer.onerror = function () {\n          console.log(\n            "Failed to establish WebSocket:Consumer connection for " +\n              streamName\n          );\n        };\n\n        consumer.onclose = function () {\n          console.log("Closed WebSocket:Consumer connection for " + streamName);\n        };\n\n        consumer.onmessage = function (message) {\n          const receivedMsg = message.data && JSON.parse(message.data);\n\n          console.log(\n            `WebSocket:Consumer message received at ${new Date()}`,\n            receivedMsg\n          );\n\n          const ackMsg = { messageId: receivedMsg.messageId };\n          consumer.send(JSON.stringify(ackMsg));\n        };\n      });\n    };\n\n    /* -------------------------- Initialize producer -------------------------- */\n\n    const initProducer = () => {\n      producer = new WebSocket(producerUrl);\n\n      producer.onopen = function () {\n        console.log("WebSocket:Producer is open now for " + streamName);\n        producerInterval = setInterval(function () {\n          console.log(`WebSocket:Producer message sent at ${new Date()}`);\n          producer.send(JSON.stringify({ payload: `test` }));\n        }, 10000);\n      };\n\n      producer.onclose = function (e) {\n        console.log("Closed WebSocket:Producer connection for " + streamName);\n        clearInterval(producerInterval);\n      };\n\n      producer.onerror = function (e) {\n        console.log(\n          "Failed to establish WebSocket:Producer connection for " + streamName\n        );\n      };\n    };\n\n    initConsumer().then(() => {\n      initProducer();\n    });\n\n    await new Promise((resolve) => setTimeout(resolve, 1 * 40 * 1000));\n    consumer.close();\n    console.log("CONSUMER CLOSING...");\n    producer.close();\n    console.log("PRODUCER CLOSING...");\n    await new Promise((resolve) => setTimeout(resolve, 5000));\n\n    /* ------------------------ Unsubscribe from stream ------------------------ */\n\n    const consumerUnsubscribe = await connection.req(\n      `/_fabric/_system/_api/streams/subscription/${consumerName}`,\n      {\n        method: "DELETE"\n      }\n    );\n    console.log(\n      `${consumerName} unsubscribed successfully`,\n      consumerUnsubscribe\n    );\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nrun();\n'))),(0,r.kt)(a.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'import base64\nimport json\nimport requests\nimport six\nimport threading\nimport time\nfrom websocket import create_connection\n\n# Constants\nURL = "api-play.paas.macrometa.io"\nHTTP_URL = f"https://{URL}"\nAPI_KEY = "XXXXX" # Use your API key here\nAUTH_TOKEN = f"apikey {API_KEY}"\nFABRIC = "_system"\nSTREAM_NAME = "teststream"\nTENANT_NAME = "XXXXX" # Add your tenant name here\nCONSUMER_NAME = "testconsumer"\nIS_GLOBAL = True # For a global stream pass True and False for local stream\n\nstream_type = ""\nif IS_GLOBAL:\n    stream_type = "c8global"\nelse:\n    stream_type = "c8local"\n\n# Create a HTTPS session\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Create a stream\nurl = f"{HTTP_URL}/_fabric/{FABRIC}/_api/streams/{STREAM_NAME}?global={IS_GLOBAL}"\nresp = session.post(url)\nprint("\\nStream Created: ", resp.text)\n\n# Publish messages\n# Send message in body\nproducerurl = f"wss://{URL}/_ws/ws/v2/producer/persistent/{TENANT_NAME}/{stream_type}.{FABRIC}/{stream_type}s.{STREAM_NAME}"\n\n# Enter your message here\nmsg = "Hello World"\ndef create_producer():\n    ws = create_connection(producerurl, header=[f"Authorization: {AUTH_TOKEN}"])\n    payload = {\n        "payload": base64.b64encode(\n            six.b(msg)\n        ).decode("utf-8")\n    }\n    ws.send(json.dumps(payload))\n    print(f"Message sent: {msg}")\n    time.sleep(3)\n    response = json.loads(ws.recv())\n    if response[\'result\'] == \'ok\':\n        print("Received acknowledgement that message was delivered successfully")\n    else:\n        print(f"Failed to publish message: {response}")\n    ws.close()\n\n# Or\n# Use publish message api to publish message\n#url = f"{HTTP_URL}/_fabric/{FABRIC}/_api/streams/{stream_type}s.{STREAM_NAME}/publish?global={IS_GLOBAL}"\n#resp = session.post(url, data="Hello")\n#print("\\nMessage Posted: ", resp.text)\n\n# Subscribe to stream\nconsumerurl = f"wss://{URL}/_ws/ws/v2/consumer/persistent/{TENANT_NAME}/{stream_type}.{FABRIC}/{stream_type}s.{STREAM_NAME}/{CONSUMER_NAME}"\n\ndef create_consumer(): \n    ws = create_connection(consumerurl, header=[f"Authorization: {AUTH_TOKEN}"])\n    while True:\n        msg = json.loads(ws.recv())\n        if msg:\n            print(f"Message received: {base64.b64decode(msg[\'payload\']).decode(\'utf-8\')}")\n            # Acknowledge successful processing\n            ws.send(json.dumps({\'messageId\': msg[\'messageId\']}))\n            break\n    ws.close()\n\n# Threading is added here to open both producer and consumer connections simultaneously (not needed when using publish api)\nt1 = threading.Thread(target=create_producer)\nt2 = threading.Thread(target=create_consumer)\nt1.start(), t2.start()\nt1.join(), t2.join()\n\n# Delete subscription\nurl = f"{HTTP_URL}/_fabric/{FABRIC}/_api/streams/{stream_type}s.{STREAM_NAME}/subscriptions/{CONSUMER_NAME}?global=true"\nresp = session.delete(url)\nprint("Subscription deleted: ", resp.text)\n')))))}f.isMDXComponent=!0}}]);