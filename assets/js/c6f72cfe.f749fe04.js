"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[40195],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},m=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=i(r),d=a,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return r?n.createElement(f,p(p({ref:t},m),{},{components:r})):n.createElement(f,p({ref:t},m))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,p=new Array(o);p[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,p[1]=s;for(var i=2;i<o;i++)p[i]=r[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},54520:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=r(87462),a=(r(67294),r(3905));const o={sidebar_position:4,title:"Source and Sink Example"},p=void 0,s={unversionedId:"cep/examples/source-and-sink-example",id:"cep/examples/source-and-sink-example",title:"Source and Sink Example",description:"Sources and sinks are used to consume and publish events to external systems.",source:"@site/docs/cep/examples/source-and-sink-example.md",sourceDirName:"cep/examples",slug:"/cep/examples/source-and-sink-example",permalink:"/docs/cep/examples/source-and-sink-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/source-and-sink-example.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Source and Sink Example"},sidebar:"defaultSidebar",previous:{title:"Streams and Queries Example",permalink:"/docs/cep/examples/streams-and-queries-example"},next:{title:"Table and Store Example",permalink:"/docs/cep/examples/table-and-store-example"}},l={},i=[{value:"Example",id:"example",level:2},{value:"Input",id:"input",level:2},{value:"Output",id:"output",level:2}],m={toc:i};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Sources and sinks are used to consume and publish events to external systems."),(0,a.kt)("p",null,"There are multiple source and sink types, but this example only explains Macrometa source with a stream sink. For more info refer to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/"},"Stream Worker Query Guide"),"."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"This example creates a source from which a stream consumes JSON messages:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"C8DB source to consume `JSON` messages from.\nCREATE SOURCE TemperatureStream WITH (type='database', collection='TemperatureStream', collection.type=\"doc\", replication.type=\"global\", map.type='json') (sensorId string, temperature double);\n")),(0,a.kt)("p",null,"This example creates a sink to log events that arrive from a stream called ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureOnlyStream")," with the ",(0,a.kt)("inlineCode",{parentName:"p"},"temperature")," attribute of type ",(0,a.kt)("inlineCode",{parentName:"p"},"double"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE SINK TemperatureOnlyStream WITH (type='stream', stream=\"TemperatureOnlyStream\", replication.type=\"local\", map.type='json') (temperature double);\n\n@info(name = 'Simple-selection')\ninsert into TemperatureOnlyStream\nselect temperature\nfrom TemperatureStream;\n")),(0,a.kt)("h2",{id:"input"},"Input"),(0,a.kt)("p",null,"When a JSON message is written to the collection ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureStream"),", it automatically gets mapped to an event in the ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureStream")," stream."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "sensorId":"aq-14",\n    "temperature":35.4\n}\n')),(0,a.kt)("p",null,"To process custom input messages, refer to Sinkmapper in ",(0,a.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/"},"Functions"),"."),(0,a.kt)("h2",{id:"output"},"Output"),(0,a.kt)("p",null,"After processing, the event arriving at ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureOnlyStream")," will be emitted via ",(0,a.kt)("inlineCode",{parentName:"p"},"c8stream")," sink."),(0,a.kt)("p",null,"The message is published to ",(0,a.kt)("inlineCode",{parentName:"p"},"TemperatureOnlyStream")," as"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{"temperature":"35.4"}\n')),(0,a.kt)("p",null,"To output messages using other message formats, refer to Sourcemapper in ",(0,a.kt)("a",{parentName:"p",href:"/docs/cep/query-guide/functions/"},"Functions"),"."))}u.isMDXComponent=!0}}]);