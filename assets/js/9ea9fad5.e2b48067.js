"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[37993],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=m(a),k=r,N=d["".concat(s,".").concat(k)]||d[k]||u[k]||i;return a?n.createElement(N,l(l({ref:t},p),{},{components:a})):n.createElement(N,l({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},32094:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={title:"Date Functions"},l=void 0,o={unversionedId:"queryworkers/c8ql/functions/date",id:"queryworkers/c8ql/functions/date",title:"Date Functions",description:"C8QL offers functionality to work with dates, but it does not have a special data type for dates (neither does JSON, which is usually used as format to ship data into and out of GDN). Instead, dates in C8QL are represented by either numbers or strings.",source:"@site/docs/queryworkers/c8ql/functions/date.md",sourceDirName:"queryworkers/c8ql/functions",slug:"/queryworkers/c8ql/functions/date",permalink:"/docs/queryworkers/c8ql/functions/date",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/functions/date.md",tags:[],version:"current",frontMatter:{title:"Date Functions"},sidebar:"defaultSidebar",previous:{title:"Database Functions",permalink:"/docs/queryworkers/c8ql/functions/database"},next:{title:"Document Functions",permalink:"/docs/queryworkers/c8ql/functions/document"}},s={},m=[{value:"Current date and time",id:"current-date-and-time",level:2},{value:"DATE_NOW()",id:"date_now",level:3},{value:"Conversion",id:"conversion",level:3},{value:"DATE_ISO8601()",id:"date_iso8601",level:3},{value:"DATE_TIMESTAMP()",id:"date_timestamp",level:3},{value:"IS_DATESTRING()",id:"is_datestring",level:3},{value:"Processing",id:"processing",level:2},{value:"DATE_DAYOFWEEK()",id:"date_dayofweek",level:3},{value:"DATE_YEAR()",id:"date_year",level:3},{value:"DATE_MONTH()",id:"date_month",level:3},{value:"DATE_DAY()",id:"date_day",level:3},{value:"DATE_HOUR()",id:"date_hour",level:3},{value:"DATE_MINUTE()",id:"date_minute",level:3},{value:"DATE_SECOND()",id:"date_second",level:3},{value:"DATE_MILLISECOND()",id:"date_millisecond",level:3},{value:"DATE_DAYOFYEAR()",id:"date_dayofyear",level:3},{value:"DATE_ISOWEEK()",id:"date_isoweek",level:3},{value:"DATE_LEAPYEAR()",id:"date_leapyear",level:3},{value:"DATE_QUARTER()",id:"date_quarter",level:3},{value:"DATE_DAYS_IN_MONTH()",id:"date_days_in_month",level:3},{value:"DATE_TRUNC()",id:"date_trunc",level:3},{value:"DATE_ROUND()",id:"date_round",level:3},{value:"DATE_FORMAT()",id:"date_format",level:3},{value:"Comparison and calculation",id:"comparison-and-calculation",level:2},{value:"DATE_ADD()",id:"date_add",level:3},{value:"DATE_SUBTRACT()",id:"date_subtract",level:3},{value:"DATE_DIFF()",id:"date_diff",level:3},{value:"DATE_COMPARE()",id:"date_compare",level:3},{value:"Working with dates and indices",id:"working-with-dates-and-indices",level:2},{value:"Limitations",id:"limitations",level:2}],p={toc:m};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"C8QL offers functionality to work with dates, but it does not have a special data type for dates (neither does JSON, which is usually used as format to ship data into and out of GDN). Instead, dates in C8QL are represented by either numbers or strings."),(0,r.kt)("p",null,"All date function operations are done in the ",(0,r.kt)("em",{parentName:"p"},"Unix time")," system. Unix time counts all non leap seconds beginning with January 1st 1970 00:00:00.000 UTC, also know as the Unix epoch. A point in time is called timestamp. A timestamp has the same value at every point on earth. The date functions use millisecond precision for timestamps."),(0,r.kt)("p",null,"Time unit definitions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"millisecond"),": 1/1000 of a second"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"second"),": one ",(0,r.kt)("a",{parentName:"li",href:"https://www.bipm.org/en/publications/si-brochure/second.html"},"SI second"),'{:target="_blank"}'),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"minute"),": one minute is defined as 60 seconds"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"hour"),": one hour is defined as 60 minutes"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"day"),": one day is defined as 24 hours"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"week"),": one week is defined as 7 days"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"month"),": one month is defined as 1/12 of a year"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"year"),": one year is defined as 365.2425 days")),(0,r.kt)("p",null,"All functions that require dates as arguments accept the following input values:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"numeric timestamps"),", millisecond precision."),(0,r.kt)("p",{parentName:"li"},"An example timestamp value is ",(0,r.kt)("inlineCode",{parentName:"p"},"1399472349522"),", which translates to ",(0,r.kt)("inlineCode",{parentName:"p"},"2014-05-07T14:19:09.522Z"),"."),(0,r.kt)("p",{parentName:"li"},"Valid range: ",(0,r.kt)("inlineCode",{parentName:"p"},"-62167219200000")," .. ",(0,r.kt)("inlineCode",{parentName:"p"},"253402300799999")," (inclusive)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"date time strings")," in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601"),'{:target="_blank"} format:'),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DDTHH:MM:SS.MMM")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD HH:MM:SS.MMM")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"YYYY-MM-DD"))),(0,r.kt)("p",{parentName:"li"},"Milliseconds (",(0,r.kt)("inlineCode",{parentName:"p"},".MMM"),") are always optional. Two digits for the hours (",(0,r.kt)("inlineCode",{parentName:"p"},"HH"),"), minutes (",(0,r.kt)("inlineCode",{parentName:"p"},"MM"),") and seconds (",(0,r.kt)("inlineCode",{parentName:"p"},"SS"),") are mandatory, i.e. zero-padding is required for the values 0 through 9 (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"05")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"5"),"). Leading zeroes for the year (",(0,r.kt)("inlineCode",{parentName:"p"},"YYYY"),"), month (",(0,r.kt)("inlineCode",{parentName:"p"},"MM"),") and day (",(0,r.kt)("inlineCode",{parentName:"p"},"DD"),") can be left out, but is discouraged."),(0,r.kt)("p",{parentName:"li"},"A time offset may optionally be added at the end of the string, with the hours and minutes that need to be added or subtracted to the date time value. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"2014-05-07T14:19:09+01:00")," can be used to specify a one hour offset, and ",(0,r.kt)("inlineCode",{parentName:"p"},"2014-05-07T14:19:09+07:30")," can be specified for seven and half hours offset. Negative offsets are also possible. Alternatively to an offset, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Z")," can be used to indicate UTC / Zulu time. An example value is ",(0,r.kt)("inlineCode",{parentName:"p"},"2014-05-07T14:19:09.522Z")," meaning May 7th 2014, 14:19:09 and 522 milliseconds, UTC / Zulu time. Another example value without time component is ",(0,r.kt)("inlineCode",{parentName:"p"},"2014-05-07Z"),"."),(0,r.kt)("p",{parentName:"li"},"Valid range: ",(0,r.kt)("inlineCode",{parentName:"p"},'"0000-01-01T00:00:00.000Z"')," .. ",(0,r.kt)("inlineCode",{parentName:"p"},'"9999-12-31T23:59:59.999Z"')," (inclusive)"))),(0,r.kt)("p",null,"Any date/time values outside the valid range that are passed into an C8QL date function will make the function return ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and trigger a warning for the query, which can optionally be escalated to an error and abort the query. This also applies to operations which produce an invalid value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'DATE_HOUR( 2 * 60 * 60 * 1000 ) // 2\nDATE_HOUR("1970-01-01T02:00:00") // 2\n')),(0,r.kt)("p",null,"You are free to store age determinations of specimens, incomplete or fuzzy dates and the like in different, more appropriate ways of course. C8QL's date functions will most certainly not be of any help for such dates, but you can still use language constructs like ",(0,r.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/sort"},"SORT")," (which also supports sorting of arrays) and indexes like skiplists."),(0,r.kt)("h2",{id:"current-date-and-time"},"Current date and time"),(0,r.kt)("h3",{id:"date_now"},"DATE_NOW()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_NOW() \u2192 timestamp")),(0,r.kt)("p",null,"Get the current unix time as numeric timestamp."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"timestamp")," (number): the current unix time as a timestamp. The return value has millisecond precision. To convert the return value to seconds, divide it by 1000.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This function is evaluated on every invocation and may return different values when invoked multiple times in the same query. Assign it to a variable to use the exact same timestamp multiple times.")),(0,r.kt)("h3",{id:"conversion"},"Conversion"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"DATE_TIMESTAMP()")," and ",(0,r.kt)("em",{parentName:"p"},"DATE_ISO8601()")," can be used to convert ISO 8601 date time strings to numeric timestamps and numeric timestamps to ISO 8601 date time strings."),(0,r.kt)("p",null,"Both also support individual date components as separate function arguments, in the following order:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"year"),(0,r.kt)("li",{parentName:"ul"},"month"),(0,r.kt)("li",{parentName:"ul"},"day"),(0,r.kt)("li",{parentName:"ul"},"hour"),(0,r.kt)("li",{parentName:"ul"},"minute"),(0,r.kt)("li",{parentName:"ul"},"second"),(0,r.kt)("li",{parentName:"ul"},"millisecond")),(0,r.kt)("p",null,"All components following ",(0,r.kt)("em",{parentName:"p"},"day")," are optional and can be omitted. Note that no time offset can be specified when using separate date components, and UTC / Zulu time will be used."),(0,r.kt)("p",null,"The following calls to ",(0,r.kt)("em",{parentName:"p"},"DATE_TIMESTAMP()")," are equivalent and will all return ",(0,r.kt)("em",{parentName:"p"},"1399472349522"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'DATE_TIMESTAMP("2014-05-07T14:19:09.522")\nDATE_TIMESTAMP("2014-05-07T14:19:09.522Z")\nDATE_TIMESTAMP("2014-05-07 14:19:09.522")\nDATE_TIMESTAMP("2014-05-07 14:19:09.522Z")\nDATE_TIMESTAMP(2014, 5, 7, 14, 19, 9, 522)\nDATE_TIMESTAMP(1399472349522)\n')),(0,r.kt)("p",null,"The same is true for calls to ",(0,r.kt)("em",{parentName:"p"},"DATE_ISO8601()")," that also accepts variable input formats:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'DATE_ISO8601("2014-05-07T14:19:09.522Z")\nDATE_ISO8601("2014-05-07 14:19:09.522Z")\nDATE_ISO8601(2014, 5, 7, 14, 19, 9, 522)\nDATE_ISO8601(1399472349522)\n')),(0,r.kt)("p",null,"The above functions are all equivalent and will return ",(0,r.kt)("em",{parentName:"p"},'"2014-05-07T14:19:09.522Z"'),"."),(0,r.kt)("h3",{id:"date_iso8601"},"DATE_ISO8601()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_ISO8601(date) \u2192 dateString")),(0,r.kt)("p",null,"Return an ISO 8601 date time string from ",(0,r.kt)("em",{parentName:"p"},"date"),". The date time string will always use UTC / Zulu time, indicated by the ",(0,r.kt)("em",{parentName:"p"},"Z")," at its end."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"dateString"),": date and time expressed according to ISO 8601, in Zulu time")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_ISO8601(year, month, day, hour, minute, second, millisecond) \u2192 dateString")),(0,r.kt)("p",null,"Return a ISO 8601 date time string from ",(0,r.kt)("em",{parentName:"p"},"date"),", but allows to specify the individual date components separately. All parameters after ",(0,r.kt)("em",{parentName:"p"},"day")," are optional."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"year")," (number): typically in the range 0..9999, e.g. ",(0,r.kt)("em",{parentName:"li"},"2017")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"month")," (number): 1..12 for January through December"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"day")," (number): 1..31 (upper bound depends on number of days in month)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"hour")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..23"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"minute")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..59"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"second")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..59"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"milliseconds")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..999"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"dateString"),": date and time expressed according to ISO 8601, in Zulu time")),(0,r.kt)("h3",{id:"date_timestamp"},"DATE_TIMESTAMP()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_TIMESTAMP(date) \u2192 timestamp")),(0,r.kt)("p",null,"Create a timestamp value from ",(0,r.kt)("em",{parentName:"p"},"date"),". The return value has millisecond precision. To convert the return value to seconds, divide it by 1000."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"timestamp")," (number): numeric timestamp")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_TIMESTAMP(year, month, day, hour, minute, second, millisecond) \u2192 timestamp")),(0,r.kt)("p",null,"Create a timestamp value, but allows to specify the individual date components separately. All parameters after ",(0,r.kt)("em",{parentName:"p"},"day")," are optional."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"year")," (number): typically in the range 0..9999, e.g. ",(0,r.kt)("em",{parentName:"li"},"2017")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"month")," (number): 1..12 for January through December"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"day")," (number): 1..31 (upper bound depends on number of days in month)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"hour")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..23"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"minute")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..59"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"second")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..59"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"milliseconds")," (number, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): 0..999"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"timestamp")," (number): numeric timestamp")),(0,r.kt)("p",null,"Negative values are not allowed, result in ",(0,r.kt)("em",{parentName:"p"},"null")," and cause a warning. Values greater than the upper range bound overflow to the larger components (e.g. an hour of 26 is automatically turned into an additional day and two hours):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"DATE_TIMESTAMP(2016, 12, -1) // returns null and issues a warning\nDATE_TIMESTAMP(2016, 2, 32) // returns 1456963200000, which is March 3rd, 2016\nDATE_TIMESTAMP(1970, 1, 1, 26) // returns 93600000, which is January 2nd, 1970, at 2 a.m.\n")),(0,r.kt)("h3",{id:"is_datestring"},"IS_DATESTRING()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IS_DATESTRING(value) \u2192 bool")),(0,r.kt)("p",null,"Check if an arbitrary string is suitable for interpretation as date time string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"value")," (string): an arbitrary string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"bool")," (bool): ",(0,r.kt)("em",{parentName:"li"},"true")," if ",(0,r.kt)("em",{parentName:"li"},"value")," is a string that can be used in a date function. This includes partial dates such as ",(0,r.kt)("em",{parentName:"li"},"2015")," or ",(0,r.kt)("em",{parentName:"li"},"2015-10")," and strings containing invalid dates such as ",(0,r.kt)("em",{parentName:"li"},"2015-02-31"),". The function will return ",(0,r.kt)("em",{parentName:"li"},"false")," for all non-string values, even if some of them may be usable in date functions.")),(0,r.kt)("h2",{id:"processing"},"Processing"),(0,r.kt)("h3",{id:"date_dayofweek"},"DATE_DAYOFWEEK()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_DAYOFWEEK(date) \u2192 weekdayNumber")),(0,r.kt)("p",null,"Return the weekday number of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"weekdayNumber")," (number): 0..6 as follows:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"0 \u2013 Sunday"),(0,r.kt)("li",{parentName:"ul"},"1 \u2013 Monday"),(0,r.kt)("li",{parentName:"ul"},"2 \u2013 Tuesday"),(0,r.kt)("li",{parentName:"ul"},"3 \u2013 Wednesday"),(0,r.kt)("li",{parentName:"ul"},"4 \u2013 Thursday"),(0,r.kt)("li",{parentName:"ul"},"5 \u2013 Friday"),(0,r.kt)("li",{parentName:"ul"},"6 \u2013 Saturday")))),(0,r.kt)("h3",{id:"date_year"},"DATE_YEAR()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_YEAR(date) \u2192 year")),(0,r.kt)("p",null,"Return the year of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"year")," (number): the year part of ",(0,r.kt)("em",{parentName:"li"},"date")," as a number")),(0,r.kt)("h3",{id:"date_month"},"DATE_MONTH()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_MONTH(date) \u2192 month")),(0,r.kt)("p",null,"Return the month of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"month")," (number): the month part of ",(0,r.kt)("em",{parentName:"li"},"date")," as a number")),(0,r.kt)("h3",{id:"date_day"},"DATE_DAY()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_DAY(date) \u2192 day")),(0,r.kt)("p",null,"Return the day of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"day")," (number): the day part of ",(0,r.kt)("em",{parentName:"li"},"date")," as a number")),(0,r.kt)("h3",{id:"date_hour"},"DATE_HOUR()"),(0,r.kt)("p",null,"Return the hour of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_HOUR(date) \u2192 hour")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"hour")," (number): the hour part of ",(0,r.kt)("em",{parentName:"li"},"date")," as a number")),(0,r.kt)("h3",{id:"date_minute"},"DATE_MINUTE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_MINUTE(date) \u2192 minute")),(0,r.kt)("p",null,"Return the minute of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"minute")," (number): the minute part of ",(0,r.kt)("em",{parentName:"li"},"date")," as a number")),(0,r.kt)("h3",{id:"date_second"},"DATE_SECOND()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_SECOND(date) \u2192 second")),(0,r.kt)("p",null,"Return the second of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"second")," (number): the seconds part of ",(0,r.kt)("em",{parentName:"li"},"date")," as a number")),(0,r.kt)("h3",{id:"date_millisecond"},"DATE_MILLISECOND()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_MILLISECOND(date) \u2192 millisecond")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"millisecond")," (number): the milliseconds part of ",(0,r.kt)("em",{parentName:"li"},"date")," as a number")),(0,r.kt)("h3",{id:"date_dayofyear"},"DATE_DAYOFYEAR()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_DAYOFYEAR(date) \u2192 dayOfYear")),(0,r.kt)("p",null,"Return the day of year of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"dayOfYear")," (number): the day of year number of ",(0,r.kt)("em",{parentName:"li"},"date"),".\nThe return values range from 1 to 365, or 366 in a leap year respectively.")),(0,r.kt)("h3",{id:"date_isoweek"},"DATE_ISOWEEK()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_ISOWEEK(date) \u2192 weekDate")),(0,r.kt)("p",null,"Return the week date of ",(0,r.kt)("em",{parentName:"p"},"date")," according to ISO 8601."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"weekDate")," (number): the ISO week date of ",(0,r.kt)("em",{parentName:"li"},"date"),". The return values range from 1 to 53. Monday is considered the first day of the week. There are no fractional weeks, thus the last days in December may belong to the first week of the next year, and the first days in January may be part of the previous year's last week.")),(0,r.kt)("h3",{id:"date_leapyear"},"DATE_LEAPYEAR()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_LEAPYEAR(date) \u2192 leapYear")),(0,r.kt)("p",null,"Return whether ",(0,r.kt)("em",{parentName:"p"},"date")," is in a leap year."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"leapYear")," (bool): ",(0,r.kt)("em",{parentName:"li"},"true")," if ",(0,r.kt)("em",{parentName:"li"},"date")," is in a leap year, ",(0,r.kt)("em",{parentName:"li"},"false")," otherwise")),(0,r.kt)("h3",{id:"date_quarter"},"DATE_QUARTER()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_QUARTER(date) \u2192 quarter")),(0,r.kt)("p",null,"Return which quarter ",(0,r.kt)("em",{parentName:"p"},"date")," belongs to."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"quarter")," (number): the quarter of the given date (1-based):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"1 \u2013 January, February, March"),(0,r.kt)("li",{parentName:"ul"},"2 \u2013 April, May, June"),(0,r.kt)("li",{parentName:"ul"},"3 \u2013 July, August, September"),(0,r.kt)("li",{parentName:"ul"},"4 \u2013 October, November, December")))),(0,r.kt)("h3",{id:"date_days_in_month"},"DATE_DAYS_IN_MONTH()"),(0,r.kt)("p",null,"Return the number of days in the month of ",(0,r.kt)("em",{parentName:"p"},"date"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_DAYS_IN_MONTH(date) \u2192 daysInMonth")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"daysInMonth")," (number): the number of days in ",(0,r.kt)("em",{parentName:"li"},"date"),"'s month (28..31)")),(0,r.kt)("h3",{id:"date_trunc"},"DATE_TRUNC()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_TRUNC(date, unit) \u2192 isoDate")),(0,r.kt)("p",null,"Truncates the given date after ",(0,r.kt)("em",{parentName:"p"},"unit")," and returns the modified date."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"unit")," (string): either of the following to specify the time unit (case-insensitive):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"y, year, years"),(0,r.kt)("li",{parentName:"ul"},"m, month, months"),(0,r.kt)("li",{parentName:"ul"},"d, day, days"),(0,r.kt)("li",{parentName:"ul"},"h, hour, hours"),(0,r.kt)("li",{parentName:"ul"},"i, minute, minutes"),(0,r.kt)("li",{parentName:"ul"},"s, second, seconds"),(0,r.kt)("li",{parentName:"ul"},"f, millisecond, milliseconds"))),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"isoDate")," (string): the truncated ISO 8601 date time string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"DATE_TRUNC('2017-02-03', 'month') // 2017-02-01T00:00:00.000Z\nDATE_TRUNC('2017-02-03 04:05:06', 'hours') // 2017-02-03 04:00:00.000Z\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'    RETURN MERGE(\n      FOR doc IN @data\n        COLLECT q = DATE_TRUNC(doc.date, "year") INTO bucket\n        RETURN { [DATE_YEAR(q)]: bucket[*].doc.value }\n    )\n    @BV {\n    "data": [\n      { "date": "2018-03-05", "value": "Spring" },\n      { "date": "2018-07-11", "value": "Summer" },\n      { "date": "2018-10-26", "value": "Autumn" },\n      { "date": "2019-01-09", "value": "Winter" },\n      { "date": "2019-04-02", "value": "Spring" }\n    ]\n    }\n')),(0,r.kt)("h3",{id:"date_round"},"DATE_ROUND()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_ROUND(date, amount, unit) \u2192 isoDate")),(0,r.kt)("p",null,"Bin a date/time into a set of equal-distance buckets, to be used for grouping."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (string","|","number): a date string or timestamp"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"amount")," (number): number of _unit_s. Must be a positive integer value."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"unit")," (string): either of the following to specify the time unit (case-insensitive):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"d, day, days"),(0,r.kt)("li",{parentName:"ul"},"h, hour, hours"),(0,r.kt)("li",{parentName:"ul"},"i, minute, minutes"),(0,r.kt)("li",{parentName:"ul"},"s, second, seconds"),(0,r.kt)("li",{parentName:"ul"},"f, millisecond, milliseconds"))),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"isoDate")," (string): the rounded ISO 8601 date time string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"DATE_ROUND('2000-04-28T11:11:11.111Z', 1, 'day') // 2000-04-28T00:00:00.000Z\nDATE_ROUND('2000-04-10T11:39:29Z', 15, 'minutes') // 2000-04-10T11:30:00.000Z\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'    FOR doc IN @sensorData\n      COLLECT\n        date = DATE_ROUND(doc.timestamp, 5, "minutes")\n      AGGREGATE\n        count = COUNT(1),\n        avg = AVG(doc.temp),\n        min = MIN(doc.temp),\n        max = MAX(doc.temp)\n      RETURN { date, count, avg, min, max }\n    @BV {\n    "sensorData": [\n      { "timestamp": "2019-12-04T21:17:52.583Z", "temp": 20.6 },\n      { "timestamp": "2019-12-04T21:19:53.516Z", "temp": 20.2 },\n      { "timestamp": "2019-12-04T21:21:53.610Z", "temp": 19.9 },\n      { "timestamp": "2019-12-04T21:23:52.522Z", "temp": 19.8 },\n      { "timestamp": "2019-12-04T21:25:52.988Z", "temp": 19.8 },\n      { "timestamp": "2019-12-04T21:27:54.005Z", "temp": 19.7 }\n    ]\n    }\n')),(0,r.kt)("h3",{id:"date_format"},"DATE_FORMAT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_FORMAT(date, format) \u2192 str")),(0,r.kt)("p",null,"Format a date according to the given format string."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (string","|","number): a date string or timestamp"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"format")," (string): a format string, see below"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"str")," (string): a formatted date string")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"format")," supports the following placeholders (case-insensitive):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"%t \u2013 timestamp, in milliseconds since midnight 1970-01-01"),(0,r.kt)("li",{parentName:"ul"},"%z \u2013 ISO date (0000-00-00T00:00:00.000Z)"),(0,r.kt)("li",{parentName:"ul"},"%w \u2013 day of week (0..6)"),(0,r.kt)("li",{parentName:"ul"},"%y \u2013 year (0..9999)"),(0,r.kt)("li",{parentName:"ul"},"%yy \u2013 year (00..99), abbreviated (last two digits)"),(0,r.kt)("li",{parentName:"ul"},"%yyyy \u2013 year (0000..9999), padded to length of 4"),(0,r.kt)("li",{parentName:"ul"},"%yyyyyy \u2013 year (-009999 .. +009999), with sign prefix and padded to length of 6"),(0,r.kt)("li",{parentName:"ul"},"%m \u2013 month (1..12)"),(0,r.kt)("li",{parentName:"ul"},"%mm \u2013 month (01..12), padded to length of 2"),(0,r.kt)("li",{parentName:"ul"},"%d \u2013 day (1..31)"),(0,r.kt)("li",{parentName:"ul"},"%dd \u2013 day (01..31), padded to length of 2"),(0,r.kt)("li",{parentName:"ul"},"%h \u2013 hour (0..23)"),(0,r.kt)("li",{parentName:"ul"},"%hh \u2013 hour (00..23), padded to length of 2"),(0,r.kt)("li",{parentName:"ul"},"%i \u2013 minute (0..59)"),(0,r.kt)("li",{parentName:"ul"},"%ii \u2013 minute (00..59), padded to length of 2"),(0,r.kt)("li",{parentName:"ul"},"%s \u2013 second (0..59)"),(0,r.kt)("li",{parentName:"ul"},"%ss \u2013 second (00..59), padded to length of 2"),(0,r.kt)("li",{parentName:"ul"},"%f \u2013 millisecond (0..999)"),(0,r.kt)("li",{parentName:"ul"},"%fff \u2013 millisecond (000..999), padded to length of 3"),(0,r.kt)("li",{parentName:"ul"},"%x \u2013 day of year (1..366)"),(0,r.kt)("li",{parentName:"ul"},"%xxx \u2013 day of year (001..366), padded to length of 3"),(0,r.kt)("li",{parentName:"ul"},"%k \u2013 ISO week date (1..53)"),(0,r.kt)("li",{parentName:"ul"},"%kk \u2013 ISO week date (01..53), padded to length of 2"),(0,r.kt)("li",{parentName:"ul"},"%l \u2013 leap year (0 or 1)"),(0,r.kt)("li",{parentName:"ul"},"%q \u2013 quarter (1..4)"),(0,r.kt)("li",{parentName:"ul"},"%a \u2013 days in month (28..31)"),(0,r.kt)("li",{parentName:"ul"},"%mmm \u2013 abbreviated English name of month (Jan..Dec)"),(0,r.kt)("li",{parentName:"ul"},"%mmmm \u2013 English name of month (January..December)"),(0,r.kt)("li",{parentName:"ul"},"%www \u2013 abbreviated English name of weekday (Sun..Sat)"),(0,r.kt)("li",{parentName:"ul"},"%wwww \u2013 English name of weekday (Sunday..Saturday)"),(0,r.kt)("li",{parentName:"ul"},"%& \u2013 special escape sequence for rare occasions"),(0,r.kt)("li",{parentName:"ul"},"%% \u2013 literal %"),(0,r.kt)("li",{parentName:"ul"},"% \u2013 ignored")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"%yyyy")," does not enforce a length of 4 for years before 0 and past 9999. The same format as for ",(0,r.kt)("inlineCode",{parentName:"p"},"%yyyyyy")," will be used instead. ",(0,r.kt)("inlineCode",{parentName:"p"},"%yy")," preserves the sign for negative years and may thus return 3 characters in total."),(0,r.kt)("p",null,"Single ",(0,r.kt)("inlineCode",{parentName:"p"},"%")," characters will be ignored. Use ",(0,r.kt)("inlineCode",{parentName:"p"},"%%")," for a literal ",(0,r.kt)("inlineCode",{parentName:"p"},"%"),". To resolve ambiguities like in ",(0,r.kt)("inlineCode",{parentName:"p"},"%mmonth"),' (unpadded month number + the string "month") between ',(0,r.kt)("inlineCode",{parentName:"p"},"%mm"),' + "onth" and ',(0,r.kt)("inlineCode",{parentName:"p"},"%m"),' + "month", use the escape sequence ',(0,r.kt)("inlineCode",{parentName:"p"},"%&"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"%m%&month"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("em",{parentName:"p"},"DATE_FORMAT()")," is a rather costly operation and may not be suitable for large datasets (like over 1 million dates). If possible, avoid formatting dates on server-side and leave it up to the client to do so. This function should only be used for special date comparisons or to store the formatted dates in the database. For better performance, use the primitive ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE_*()")," functions together with ",(0,r.kt)("inlineCode",{parentName:"p"},"CONCAT()")," if possible.")),(0,r.kt)("p",null,"Examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'DATE_FORMAT(DATE_NOW(), "%q/%yyyy") // quarter and year (e.g. "3/2015")\nDATE_FORMAT(DATE_NOW(), "%dd.%mm.%yyyy %hh:%ii:%ss,%fff") // e.g. "18.09.2015 15:30:49,374"\nDATE_FORMAT("1969", "Summer of \'%yy") // "Summer of \'69"\nDATE_FORMAT("2016", "%%l = %l") // "%l = 1" (2016 is a leap year)\nDATE_FORMAT("2016-03-01", "%xxx%") // "063", trailing % ignored\n')),(0,r.kt)("h2",{id:"comparison-and-calculation"},"Comparison and calculation"),(0,r.kt)("h3",{id:"date_add"},"DATE_ADD()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_ADD(date, amount, unit) \u2192 isoDate")),(0,r.kt)("p",null,"Add ",(0,r.kt)("em",{parentName:"p"},"amount")," given in ",(0,r.kt)("em",{parentName:"p"},"unit")," to ",(0,r.kt)("em",{parentName:"p"},"date")," and return the calculated date."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"amount")," (number","|","string): number of _unit_s to add (positive value) or subtract (negative value). It is recommended to use positive values only, and use ",(0,r.kt)("a",{parentName:"li",href:"#date_subtract"},"DATE_SUBTRACT()")," for subtractions instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"unit")," (string): either of the following to specify the time unit to add or subtract (case-insensitive):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"y, year, years"),(0,r.kt)("li",{parentName:"ul"},"m, month, months"),(0,r.kt)("li",{parentName:"ul"},"w, week, weeks"),(0,r.kt)("li",{parentName:"ul"},"d, day, days"),(0,r.kt)("li",{parentName:"ul"},"h, hour, hours"),(0,r.kt)("li",{parentName:"ul"},"i, minute, minutes"),(0,r.kt)("li",{parentName:"ul"},"s, second, seconds"),(0,r.kt)("li",{parentName:"ul"},"f, millisecond, milliseconds"))),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"isoDate")," (string): the calculated ISO 8601 date time string")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'DATE_ADD(DATE_NOW(), -1, "day") // yesterday; also see DATE_SUBTRACT()\nDATE_ADD(DATE_NOW(), 3, "months") // in three months\nDATE_ADD(DATE_ADD("2015-04-01", 5, "years"), 1, "month") // May 1st 2020\nDATE_ADD("2015-04-01", 12*5 + 1, "months") // also May 1st 2020\nDATE_ADD(DATE_TIMESTAMP(DATE_YEAR(DATE_NOW()), 12, 24), -4, "years") // Christmas four years ago\nDATE_ADD(DATE_ADD("2016-02", "month", 1), -1, "day") // last day of February (29th, because 2016 is a leap year!)\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_ADD(date, isoDuration) \u2192 isoDate")),(0,r.kt)("p",null,"You may also pass an ISO duration string as ",(0,r.kt)("em",{parentName:"p"},"amount")," and leave out ",(0,r.kt)("em",{parentName:"p"},"unit"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"isoDuration")," (string): an ISO 8601 duration string to add to ",(0,r.kt)("em",{parentName:"li"},"date"),", see below"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"isoDate")," (string):  the calculated ISO 8601 date time string")),(0,r.kt)("p",null,"The format is ",(0,r.kt)("inlineCode",{parentName:"p"},"P_Y_M_W_DT_H_M_._S"),", where underscores stand for digits and letters for time intervals - except for the separators ",(0,r.kt)("inlineCode",{parentName:"p"},"P")," (period) and ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," (time)."),(0,r.kt)("p",null,"The meaning of the other letters are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Y \u2013 years"),(0,r.kt)("li",{parentName:"ul"},"M \u2013 months (if before T)"),(0,r.kt)("li",{parentName:"ul"},"W \u2013 weeks"),(0,r.kt)("li",{parentName:"ul"},"D \u2013 days"),(0,r.kt)("li",{parentName:"ul"},"H \u2013 hours"),(0,r.kt)("li",{parentName:"ul"},"M \u2013 minutes (if after T)"),(0,r.kt)("li",{parentName:"ul"},"S \u2013 seconds (optionally with 3 decimal places for milliseconds)")),(0,r.kt)("p",null,"The string must be prefixed by a ",(0,r.kt)("inlineCode",{parentName:"p"},"P"),". A separating ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is only required if ",(0,r.kt)("inlineCode",{parentName:"p"},"H"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"M")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," are specified. You only need to specify the needed pairs of letters and numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'DATE_ADD(DATE_NOW(), "P1Y") // add 1 year\nDATE_ADD(DATE_NOW(), "P3M2W") // add 3 months and 2 weeks\nDATE_ADD(DATE_NOW(), "P5DT26H") // add 5 days and 26 hours (=6 days and 2 hours)\nDATE_ADD("2000-01-01", "PT4H") // add 4 hours\nDATE_ADD("2000-01-01", "PT30M44.4S" // add 30 minutes, 44 seconds and 400 ms\nDATE_ADD("2000-01-01", "P1Y2M3W4DT5H6M7.89S" // add a bit of everything\n')),(0,r.kt)("h3",{id:"date_subtract"},"DATE_SUBTRACT()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_SUBTRACT(date, amount, unit) \u2192 isoDate")),(0,r.kt)("p",null,"Subtract ",(0,r.kt)("em",{parentName:"p"},"amount")," given in ",(0,r.kt)("em",{parentName:"p"},"unit")," from ",(0,r.kt)("em",{parentName:"p"},"date")," and return the calculated date."),(0,r.kt)("p",null,"It works the same as ",(0,r.kt)("a",{parentName:"p",href:"#date_add"},"DATE_ADD()"),", except that it subtracts. It is equivalent to calling ",(0,r.kt)("em",{parentName:"p"},"DATE_ADD()")," with a negative amount, except that ",(0,r.kt)("em",{parentName:"p"},"DATE_SUBTRACT()")," can also subtract ISO durations. Note that negative ISO durations are not supported (i.e. starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"-P"),", like ",(0,r.kt)("inlineCode",{parentName:"p"},"-P1Y"),")."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"amount")," (number","|","string): number of _unit_s to subtract (positive value) or add (negative value). It is recommended to use positive values only, and use ",(0,r.kt)("a",{parentName:"li",href:"#date_add"},"DATE_ADD()")," for additions instead."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"unit")," (string): either of the following to specify the time unit to add or subtract (case-insensitive):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"y, year, years"),(0,r.kt)("li",{parentName:"ul"},"m, month, months"),(0,r.kt)("li",{parentName:"ul"},"w, week, weeks"),(0,r.kt)("li",{parentName:"ul"},"d, day, days"),(0,r.kt)("li",{parentName:"ul"},"h, hour, hours"),(0,r.kt)("li",{parentName:"ul"},"i, minute, minutes"),(0,r.kt)("li",{parentName:"ul"},"s, second, seconds"),(0,r.kt)("li",{parentName:"ul"},"f, millisecond, milliseconds"))),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"isoDate")," (string): the calculated ISO 8601 date time string")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_SUBTRACT(date, isoDuration) \u2192 isoDate")),(0,r.kt)("p",null,"You may also pass an ISO duration string as ",(0,r.kt)("em",{parentName:"p"},"amount")," and leave out ",(0,r.kt)("em",{parentName:"p"},"unit"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"isoDuration")," (string): an ISO 8601 duration string to subtract from ",(0,r.kt)("em",{parentName:"li"},"date"),", see below"),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"isoDate")," (string): the calculated ISO 8601 date time string")),(0,r.kt)("p",null,"The format is ",(0,r.kt)("inlineCode",{parentName:"p"},"P_Y_M_W_DT_H_M_._S"),", where underscores stand for digits and letters for time intervals - except for the separators ",(0,r.kt)("inlineCode",{parentName:"p"},"P")," (period) and ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," (time). The meaning of the other letters are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Y \u2013 years"),(0,r.kt)("li",{parentName:"ul"},"M \u2013 months (if before T)"),(0,r.kt)("li",{parentName:"ul"},"W \u2013 weeks"),(0,r.kt)("li",{parentName:"ul"},"D \u2013 days"),(0,r.kt)("li",{parentName:"ul"},"H \u2013 hours"),(0,r.kt)("li",{parentName:"ul"},"M \u2013 minutes (if after T)"),(0,r.kt)("li",{parentName:"ul"},"S \u2013 seconds (optionally with 3 decimal places for milliseconds)")),(0,r.kt)("p",null,"The string must be prefixed by a ",(0,r.kt)("inlineCode",{parentName:"p"},"P"),". A separating ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is only required if ",(0,r.kt)("inlineCode",{parentName:"p"},"H"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"M")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," are specified. You only need to specify the needed pairs of letters and numbers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'DATE_SUBTRACT(DATE_NOW(), 1, "day") // yesterday\nDATE_SUBTRACT(DATE_TIMESTAMP(DATE_YEAR(DATE_NOW()), 12, 24), 4, "years") // Christmas four years ago\nDATE_SUBTRACT(DATE_ADD("2016-02", "month", 1), 1, "day") // last day of February (29th, because 2016 is a leap year!)\nDATE_SUBTRACT(DATE_NOW(), "P4D") // four days ago\nDATE_SUBTRACT(DATE_NOW(), "PT1H3M") // 1 hour and 30 minutes ago\n')),(0,r.kt)("h3",{id:"date_diff"},"DATE_DIFF()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_DIFF(date1, date2, unit, asFloat) \u2192 diff")),(0,r.kt)("p",null,"Calculate the difference between two dates in given time ",(0,r.kt)("em",{parentName:"p"},"unit"),", optionally with decimal places."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date1")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date2")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"unit")," (string): either of the following to specify the time unit to return the difference in (case-insensitive):",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"y, year, years"),(0,r.kt)("li",{parentName:"ul"},"m, month, months"),(0,r.kt)("li",{parentName:"ul"},"w, week, weeks"),(0,r.kt)("li",{parentName:"ul"},"d, day, days"),(0,r.kt)("li",{parentName:"ul"},"h, hour, hours"),(0,r.kt)("li",{parentName:"ul"},"i, minute, minutes"),(0,r.kt)("li",{parentName:"ul"},"s, second, seconds"),(0,r.kt)("li",{parentName:"ul"},"f, millisecond, milliseconds"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"asFloat")," (boolean, ",(0,r.kt)("em",{parentName:"li"},"optional"),"): if set to ",(0,r.kt)("em",{parentName:"li"},"true"),", decimal places will be preserved in the result. The default is ",(0,r.kt)("em",{parentName:"li"},"false")," and an integer is returned. - returns ",(0,r.kt)("strong",{parentName:"li"},"diff")," (number): the calculated difference as number in ",(0,r.kt)("em",{parentName:"li"},"unit"),". The value will be negative if ",(0,r.kt)("em",{parentName:"li"},"date2")," is before ",(0,r.kt)("em",{parentName:"li"},"date1"),".")),(0,r.kt)("h3",{id:"date_compare"},"DATE_COMPARE()"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DATE_COMPARE(date1, date2, unitRangeStart, unitRangeEnd) \u2192 bool")),(0,r.kt)("p",null,"Check if two partial dates match."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date1")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"date2")," (number","|","string): numeric timestamp or ISO 8601 date time string"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"unitRangeStart")," (string): unit to start from, see below"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"unitRangeEnd"))," (string, ",(0,r.kt)("em",{parentName:"li"},"optional"),"):  unit to end with, leave out to only compare the component as specified by ",(0,r.kt)("em",{parentName:"li"},"unitRangeStart"),". An error is raised if ",(0,r.kt)("em",{parentName:"li"},"unitRangeEnd")," is a unit before ",(0,r.kt)("em",{parentName:"li"},"unitRangeStart"),"."),(0,r.kt)("li",{parentName:"ul"},"returns ",(0,r.kt)("strong",{parentName:"li"},"bool")," (bool): ",(0,r.kt)("em",{parentName:"li"},"true")," if the dates match, ",(0,r.kt)("em",{parentName:"li"},"false")," otherwise")),(0,r.kt)("p",null,"The parts to compare are defined by a range of time units. The full range is: years, months, days, hours, minutes, seconds, milliseconds (in this order)."),(0,r.kt)("p",null,"All components of ",(0,r.kt)("em",{parentName:"p"},"date1")," and ",(0,r.kt)("em",{parentName:"p"},"date2")," as specified by the range will be compared. You can refer to the units as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"y, year, years"),(0,r.kt)("li",{parentName:"ul"},"m, month, months"),(0,r.kt)("li",{parentName:"ul"},"d, day, days"),(0,r.kt)("li",{parentName:"ul"},"h, hour, hours"),(0,r.kt)("li",{parentName:"ul"},"i, minute, minutes"),(0,r.kt)("li",{parentName:"ul"},"s, second, seconds"),(0,r.kt)("li",{parentName:"ul"},"f, millisecond, milliseconds")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Compare months and days, true on birthdays if you\'re born on 4th of April\nDATE_COMPARE("1985-04-04", DATE_NOW(), "months", "days")\n\n// Will only match on one day if the current year is a leap year!\n// You may want to add or subtract one day from date1 to match every year.\nDATE_COMPARE("1984-02-29", DATE_NOW(), "months", "days")\n\n// compare years, months and days (true, because it\'s the same day)\nDATE_COMPARE("2001-01-01T15:30:45.678Z", "2001-01-01T08:08:08.008Z", "years", "days")\n')),(0,r.kt)("p",null,"You can directly compare ISO date ",(0,r.kt)("strong",{parentName:"p"},"strings")," if you want to find dates before or after a certain date, or in between two dates (",(0,r.kt)("inlineCode",{parentName:"p"},">="),", ",(0,r.kt)("inlineCode",{parentName:"p"},">"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<="),"). No special date function is required. Equality tests (",(0,r.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"!="),") will only match the exact same date and time however. You may use ",(0,r.kt)("inlineCode",{parentName:"p"},"SUBSTRING()")," to compare partial date strings, ",(0,r.kt)("inlineCode",{parentName:"p"},"DATE_COMPARE()")," is basically a convenience function for that. However, neither is really required to limit a search to a certain day as demonstrated here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'FOR doc IN coll\n    FILTER doc.date >= "2015-05-15" AND doc.date < "2015-05-16"\n    RETURN doc\n')),(0,r.kt)("p",null,"Every ISO date on that day is greater than or equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-15")," in a string comparison (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-15T11:30:00.000Z"),"). Dates before ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-15")," are smaller and therefore filtered out by the first condition. Every date past ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-15"),' is greater than this date in a string comparison, and therefore filtered out by the second condition. The result is that the time components in the dates you compare with are "ignored". The query will return every document with ',(0,r.kt)("em",{parentName:"p"},"date")," ranging from ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-15T00:00:00.000Z")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-15T23:99:99.999Z"),". It would also include ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-15T24:00:00.000Z"),", but that date is actually ",(0,r.kt)("inlineCode",{parentName:"p"},"2015-05-16T00:00:00.000Z")," and can only occur if inserted manually (you may want to pass dates through ",(0,r.kt)("a",{parentName:"p",href:"#date_iso8601"},"DATE_ISO8601()")," to ensure a correct date representation)."),(0,r.kt)("p",null,"Leap days in leap years (29th of February) must be always handled manually, if you require so (e.g. birthday checks):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'LET today = DATE_NOW()\nLET noLeapYear = NOT DATE_LEAPYEAR(today)\n\nFOR user IN users\n    LET birthday = noLeapYear AND\n                   DATE_MONTH(user.birthday) == 2 AND\n                   DATE_DAY(user.birthday) == 29\n                   ? DATE_SUBTRACT(user.birthday, 1, "day") /* treat like 28th in non-leap years */\n                   : user.birthday\n    FILTER DATE_COMPARE(today, birthday, "month", "day")\n    /* includes leaplings on the 28th of February in non-leap years,\n     * but excludes them in leap years which do have a 29th February.\n     * Replace DATE_SUBTRACT() by DATE_ADD() to include them on the 1st of March\n     * in non-leap years instead (depends on local jurisdiction).\n     */\n    RETURN user\n')),(0,r.kt)("h2",{id:"working-with-dates-and-indices"},"Working with dates and indices"),(0,r.kt)("p",null,"There are two recommended ways to store timestamps in GDN:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"string: UTC timestamp with ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601"),'{:target="_blank"}'),(0,r.kt)("li",{parentName:"ul"},"number: ",(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_time"},"unix timestamp"),'{:target="_blank"} with millisecond precision')),(0,r.kt)("p",null,"The sort order of both is identical due to the sort properties of ISO date strings. You can't mix both types, numbers and strings, in a single attribute however."),(0,r.kt)("p",null,"You can use ",(0,r.kt)("a",{parentName:"p",href:"/docs/collections/indexing/#skiplist-index"},"skiplist indices")," with both date types. When chosing string representations, you can work with string comparisons (less than, greater than etc.) to express time ranges in your queries while still utilizing skiplist indices:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'    db._create("exampleTime");\n    var timestamps = ["2014-05-07T14:19:09.522","2014-05-07T21:19:09.522","2014-05-08T04:19:09.522","2014-05-08T11:19:09.522","2014-05-08T18:19:09.522"];\n    for (i = 0; i < 5; i++) db.exampleTime.save({value:i, ts: timestamps[i]})\n    db._query("FOR d IN exampleTime FILTER d.ts > \'2014-05-07T14:19:09.522\' and d.ts < \'2014-05-08T18:19:09.522\' RETURN d").toArray()\n    ~addIgnoreCollection("example")\n    ~db._drop("exampleTime")\n')),(0,r.kt)("p",null,"The first and the last timestamp in the array are excluded from the result by the ",(0,r.kt)("inlineCode",{parentName:"p"},"FILTER"),"."),(0,r.kt)("h2",{id:"limitations"},"Limitations"),(0,r.kt)("p",null,"Note that dates before the year 1583 aren't allowed by the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/ISO_8601"},"ISO 8601"),'{:target="_blank"} standard by default, because they lie before the official introduction of the Gregorian calendar and may thus be incorrect or invalid. All C8QL date functions apply the same rules to every date according to the Gregorian calendar system, even if inappropriate. That does not constitute a problem, unless you deal with dates prior to 1583 and especially years before Christ. The standard allows negative years, but requires special treatment of positive years too, if negative years are used (e.g. ',(0,r.kt)("inlineCode",{parentName:"p"},"+002015-05-15")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"-000753-01-01"),"). This is rarely used however, and C8QL does not use the 7-character version for years between 0 and 9999 in ISO strings. Keep in mind that they can't be properly compared to dates outside that range. Sorting of negative dates does not result in a meaningful order, with years longer ago last, but months, days and the time components in otherwise correct order."),(0,r.kt)("p",null,"Leap seconds are ignored, just as they are in JavaScript as per ",(0,r.kt)("a",{parentName:"p",href:"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.1"},"ECMAScript Language Specifications"),'{:target="_blank"}.'))}u.isMDXComponent=!0}}]);