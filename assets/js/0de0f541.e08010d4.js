"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[84410],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),m=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},p=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),s=m(r),c=n,N=s["".concat(o,".").concat(c)]||s[c]||d[c]||l;return r?a.createElement(N,u(u({ref:t},p),{},{components:r})):a.createElement(N,u({ref:t},p))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,u=new Array(l);u[0]=s;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,u[1]=i;for(var m=2;m<l;m++)u[m]=r[m];return a.createElement.apply(null,u)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},71230:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>m});var a=r(87462),n=(r(67294),r(3905));const l={title:"cud (Stream Processor)"},u=void 0,i={unversionedId:"cep/query-guide/functions/rdbms/cud",id:"cep/query-guide/functions/rdbms/cud",title:"cud (Stream Processor)",description:"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources.",source:"@site/docs/cep/query-guide/functions/rdbms/cud.md",sourceDirName:"cep/query-guide/functions/rdbms",slug:"/cep/query-guide/functions/rdbms/cud",permalink:"/docs/cep/query-guide/functions/rdbms/cud",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/rdbms/cud.md",tags:[],version:"current",frontMatter:{title:"cud (Stream Processor)"},sidebar:"defaultSidebar",previous:{title:"toRadians (Function)",permalink:"/docs/cep/query-guide/functions/math/toRadians"},next:{title:"query (Stream Processor)",permalink:"/docs/cep/query-guide/functions/rdbms/query"}},o={},m=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],p={toc:m};function d(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This function performs SQL CUD (INSERT, UPDATE, DELETE) queries on data sources. "),(0,n.kt)("p",null,"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"rdbms:cud(<STRING> datasource.name, <STRING> query)\nrdbms:cud(<STRING> datasource.name, <STRING> query, <STRING|BOOL|INT|DOUBLE|FLOAT|LONG> parameter)\nrdbms:cud(<STRING> datasource.name, <STRING> query, <STRING|BOOL|INT|DOUBLE|FLOAT|LONG> parameter, <STRING|BOOL|INT|DOUBLE|FLOAT|LONG> ...)\n")),(0,n.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,n.kt)("th",{parentName:"tr",align:null},"Optional"),(0,n.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"datasource.name"),(0,n.kt)("td",{parentName:"tr",align:null},"The name of the datasource for which the query should be performed."),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"No"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"query"),(0,n.kt)("td",{parentName:"tr",align:null},"The update, delete, or insert query(formatted according to the relevant database type) that needs to be performed."),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"No"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"parameter"),(0,n.kt)("td",{parentName:"tr",align:null},"If the second parameter is a parametrised SQL query, then stream processor attributes can be passed to set the values of the parameters"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"STRING BOOL INT DOUBLE FLOAT LONG"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,n.kt)("p",null,"System Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Parameters"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"perform.CUD.operations"),(0,n.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,n.kt)("inlineCode",{parentName:"td"},"true"),", the RDBMS CUD function is enabled to perform CUD operations."),(0,n.kt)("td",{parentName:"tr",align:null},"false"),(0,n.kt)("td",{parentName:"tr",align:null},"true false")))),(0,n.kt)("p",null,"Extra Return Attributes"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Types"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"numRecords"),(0,n.kt)("td",{parentName:"tr",align:null},"The number of records manipulated by the query."),(0,n.kt)("td",{parentName:"tr",align:null},"INT")))),(0,n.kt)("h2",{id:"example-1"},"Example 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"insert into  RecordStream\nselect numRecords\nfrom TriggerStream#rdbms:cud(\"SAMPLE_DB\", \"UPDATE Customers_Table SET customerName='abc' where customerName='xyz'\");\n")),(0,n.kt)("p",null,"This query updates the events from the input stream named\n",(0,n.kt)("inlineCode",{parentName:"p"},"TriggerStream")," with an additional attribute named ",(0,n.kt)("inlineCode",{parentName:"p"},"numRecords"),", of\nwhich the value indicates the number of records manipulated. The updated\nevents are inserted into an output stream named ",(0,n.kt)("inlineCode",{parentName:"p"},"RecordStream"),"."),(0,n.kt)("h2",{id:"example-2"},"Example 2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'insert into  RecordStream\nselect numRecords\nfrom TriggerStream#rdbms:cud("SAMPLE_DB", "UPDATE Customers_Table SET customerName=? where customerName=?", changedName, previousName);\n')),(0,n.kt)("p",null,"This query updates the events from the input stream named ",(0,n.kt)("inlineCode",{parentName:"p"},"TriggerStream")," with an additional attribute named ",(0,n.kt)("inlineCode",{parentName:"p"},"numRecords"),", of which the value indicates the number of records manipulated. The updated events are inserted into an output stream named ",(0,n.kt)("inlineCode",{parentName:"p"},"RecordStream"),". Here the values of attributes changedName and previousName in the event will be set to the query."))}d.isMDXComponent=!0}}]);