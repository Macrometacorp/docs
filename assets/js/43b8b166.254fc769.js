"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[42292],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(r),g=n,y=m["".concat(p,".").concat(g)]||m[g]||c[g]||o;return r?a.createElement(y,s(s({ref:t},d),{},{components:r})):a.createElement(y,s({ref:t},d))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},32828:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=r(87462),n=(r(67294),r(3905));const o={sidebar_position:2,title:"Crypto Trading Bot"},s=void 0,i={unversionedId:"apps/crypto-trading",id:"apps/crypto-trading",title:"Crypto Trading Bot",description:"Crypto App details",source:"@site/docs/apps/crypto-trading.md",sourceDirName:"apps",slug:"/apps/crypto-trading",permalink:"/docs/apps/crypto-trading",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/apps/crypto-trading.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Crypto Trading Bot"},sidebar:"defaultSidebar",previous:{title:"Global Address Book",permalink:"/docs/apps/address-book"},next:{title:"OTT App",permalink:"/docs/apps/ott-app"}},p={},l=[{value:"Crypto App details",id:"crypto-app-details",level:2},{value:"Configure the Crypto App",id:"configure-the-crypto-app",level:2},{value:"Crypto App Stream Worker Code",id:"crypto-app-stream-worker-code",level:2}],d={toc:l};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"crypto-app-details"},"Crypto App details"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Tenant")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Fabric")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Stream App")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"GUI")),(0,n.kt)("th",{parentName:"tr",align:null},(0,n.kt)("strong",{parentName:"th"},"Source Code")))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"demo@macrometa.io")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"crypto_trading_bot")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("inlineCode",{parentName:"td"},"Crypto-Trading-App")),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://macrometacorp.github.io/tutorial-cryptotrading/"},(0,n.kt)("strong",{parentName:"a"},"Crypto Trading GUI"))),(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("a",{parentName:"td",href:"https://github.com/Macrometacorp/tutorial-cryptotrading"},"github"))))),(0,n.kt)("p",null,"Read our blog post ",(0,n.kt)("a",{parentName:"p",href:"https://www.macrometa.com/blog/cryptocurrency-trading-building-a-multi-exchange-global-trading-bot"},"How To Build A Crypto Arbitrage Trading Bot")," to learn more about exchange arbitrage and how the app works."),(0,n.kt)("h2",{id:"configure-the-crypto-app"},"Configure the Crypto App"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Log in to the ",(0,n.kt)("a",{parentName:"li",href:"https://auth-play.macrometa.io/"},"Macrometa Console")," "),(0,n.kt)("li",{parentName:"ol"},"Go to the Collections tab and create a new document collection named ",(0,n.kt)("inlineCode",{parentName:"li"},"trades")," with ",(0,n.kt)("inlineCode",{parentName:"li"},"collection stream enabled")," checked. For more information about creating document collections, refer to ",(0,n.kt)("a",{parentName:"li",href:"https://macrometa.com/docs/collections/documents/create-document-store"},"Create a Document Collection"),"."),(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("strong",{parentName:"li"},"Compute > Stream Workers"),"."),(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("strong",{parentName:"li"},"New Stream Worker")," named ",(0,n.kt)("inlineCode",{parentName:"li"},"Crypto-Trading-App"),"."),(0,n.kt)("li",{parentName:"ol"},"Copy and past the ",(0,n.kt)("a",{parentName:"li",href:"#crypto-app-stream-worker-code"},"code example")," into the editor."),(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("strong",{parentName:"li"},"Save"),". Macrometa validates your code."),(0,n.kt)("li",{parentName:"ol"},"Select one or more locations to deploy your stream worker. Choose the location that is closest to where you are located, and then click ",(0,n.kt)("strong",{parentName:"li"},"Save"),"."),(0,n.kt)("li",{parentName:"ol"},"Click ",(0,n.kt)("strong",{parentName:"li"},"Publish"),".")),(0,n.kt)("p",null,"After you the publish the stream worker, navigate to the ",(0,n.kt)("a",{parentName:"p",href:"https://macrometacorp.github.io/tutorial-cryptotrading/"},"live frontend")," and use your Macrometa account credentials to log in to your account. Select the location you deployed the stream worker to, and you will see the app come to life!"),(0,n.kt)("h2",{id:"crypto-app-stream-worker-code"},"Crypto App Stream Worker Code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"@App:name(\"Crypto-Trading-App\")\n@App:description(\"Crypto Trading demo\")\n@App:qlVersion('2')\n\n-- The trigger\nCREATE TRIGGER CryptoTraderEventsTrigger WITH ( interval = 5 sec );\n\n/*\nThis app reads every 5 seconds the close prices from Coinbase, Bitstamp and Bitflyer exchanges APIs.\nThen it calculates the average prices within 10 events window and creates a \"BUY/SELL\" trading strategy.\nThe close and average prices are stored in CryptoTraderQuotesAvgXXX streams.\nThe strategy is kept in the trades collection.\n*/\n\n-- Streams for the HTTP call requests\n-------------------------------------------------------------------------------------------------------------------------------------\n\nCREATE SINK UsdCryptoTraderRequestStream WITH (type='http-call', publisher.url='https://api.pro.coinbase.com/products/btc-usd/ticker', method='GET', headers=\"'User-Agent:c8cep'\", sink.id='coinbase-ticker', map.type='json') (triggered_time string);\n\nCREATE SINK EurCryptoTraderRequestStream WITH (type='http-call', publisher.url='https://www.bitstamp.net/api/v2/ticker/btceur', method='GET', sink.id='bitstamp-ticker', map.type='json') (triggered_time string);\n\nCREATE SINK JpyCryptoTraderRequestStream WITH (type='http-call', publisher.url='https://api.bitflyer.com/v1/ticker', method='GET', sink.id='bitflyer-ticker', map.type='json') (triggered_time string);\n\n-- Streams for the HTTP call responses\n-------------------------------------------------------------------------------------------------------------------------------------\n\nCREATE SOURCE UsdCryptoTraderTickerResponseStream WITH (type='http-call-response', sink.id='coinbase-ticker', http.status.code='200', map.type='json', map.enclosing.element='$.*') (time string, price string);\n\nCREATE SOURCE EurCryptoTraderTickerResponseStream WITH (type='http-call-response', sink.id='bitstamp-ticker', http.status.code='200', map.type='json') (timestamp string, last string);\n\nCREATE SOURCE JpyCryptoTraderTickerResponseStream WITH (type='http-call-response', sink.id='bitflyer-ticker', http.status.code='200', map.type='json') (timestamp string, ltp double);\n\n-- Streams for the close and average prices\n-------------------------------------------------------------------------------------------------------------------------------------\nCREATE SINK STREAM GLOBAL CryptoTraderQuotesAvgUSDNew(exchange string, quote_region string, symbol string, ma double, close double, timestamp long);\n\nCREATE SINK STREAM GLOBAL CryptoTraderQuotesAvgEURNew(exchange string, quote_region string, symbol string, ma double, close double, timestamp long);\n\nCREATE SINK STREAM GLOBAL CryptoTraderQuotesAvgJPYNew(exchange string, quote_region string, symbol string, ma double, close double, timestamp long);\n\nCREATE SINK TradesBuy WITH (type=\"logger\", prefix='BUY') (exchange string, quote_region string, symbol string, timestamp long, trade_location string,\n                          trade_price double, trade_strategy string, trade_type string);\n\nCREATE SINK TradesSell WITH (type=\"logger\", prefix='SELL') (exchange string, quote_region string, symbol string, timestamp long, trade_location string,\n                          trade_price double, trade_strategy string, trade_type string);                      \n\n-- Common trades store\nCREATE TABLE GLOBAL trades(exchange string, quote_region string, symbol string, timestamp long, trade_location string,\n                          trade_price double, trade_strategy string, trade_type string);\n                          \n-- Common trades store inserts\n-------------------------------------------------------------------------------\nINSERT INTO trades\nSELECT exchange, quote_region, symbol, timestamp, trade_location,\n          trade_price, trade_strategy, trade_type\nFROM TradesBuy;\n\nINSERT INTO trades\nSELECT exchange, quote_region, symbol, timestamp, trade_location,\n          trade_price, trade_strategy, trade_type\nFROM TradesSell;\n                          \n-- Fire Coinbase Pro BTC/USD requests initiated by a trigger\n-------------------------------------------------------------------------------\nINSERT INTO UsdCryptoTraderRequestStream\nSELECT time:currentTimestamp() as triggered_time \nFROM CryptoTraderEventsTrigger;\n\n-- Fire Bitstamp BTC/EUR requests initiated by a trigger\n-------------------------------------------------------------------------------\nINSERT INTO EurCryptoTraderRequestStream\nSELECT time:currentTimestamp() as triggered_time \nFROM CryptoTraderEventsTrigger;\n\n-- Fire Bitflyer BTC/JPY requests initiated by a trigger\n-------------------------------------------------------------------------------\nINSERT INTO JpyCryptoTraderRequestStream\nSELECT time:currentTimestamp() as triggered_time \nFROM CryptoTraderEventsTrigger;\n\n-- Coinbase Pro BTC/USD strategy generation\n-------------------------------------------------------------------------------------------------\n@info(name='Query for BTC/USD close and average prices within moving 10 events windows')\nINSERT INTO CryptoTraderQuotesAvgUSDNew\nSELECT \"Coinbase Pro\" as exchange, \"USA\" as quote_region,\n        \"BTC/USD\" as symbol, avg(convert(price, 'double')) as ma, convert(price, 'double') as close, \n        time:timestampInMilliseconds()/1000 as timestamp\nFROM UsdCryptoTraderTickerResponseStream[context:getVar('region') == 'play-us-west'] WINDOW SLIDING_LENGTH(10);\n\n@info(name='Query for BTC/USD trading strategy BUY')\nINSERT INTO TradesBuy\nSELECT e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       context:getVar('region') as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n          'BUY' as trade_type\nFROM every e1=CryptoTraderQuotesAvgUSDNew[e1.close < e1.ma], e2=CryptoTraderQuotesAvgUSDNew[e2.close > e2.ma];\n\n@info(name='Query for BTC/USD trading strategy SELL')\nINSERT INTO TradesSell\nSELECT e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       context:getVar('region') as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n          'SELL' as trade_type\nFROM every e1=CryptoTraderQuotesAvgUSDNew[e1.close > e1.ma], e2=CryptoTraderQuotesAvgUSDNew[e2.close < e2.ma];\n\nDELETE trades for expired events \n       ON trades.trade_location == trade_location and trades.symbol == symbol and trades.timestamp < timestamp \nSELECT context:getVar('region') as trade_location, symbol, timestamp\nFROM CryptoTraderQuotesAvgUSDNew WINDOW SLIDING_TIME(10);\n\n-- Bitstamp BTC/EUR trading strategy generation\n-----------------------------------------------------------------------------------------\n@info(name='Query for BTC/EUR close and average prices within moving 10 events windows')\nINSERT INTO CryptoTraderQuotesAvgEURNew\nSELECT \"Bitstamp\" as exchange, \"Europe\" as quote_region,\n        \"BTC/EUR\" as symbol, avg(convert(last, 'double')) as ma, convert(last, 'double') as close, \n        time:timestampInMilliseconds()/1000 as timestamp\nFROM EurCryptoTraderTickerResponseStream[context:getVar('region') == 'play-us-west'] WINDOW SLIDING_LENGTH(10);\n\n@info(name='Query for BTC/EUR trading strategy BUY')\nINSERT INTO TradesBuy\nSELECT e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       context:getVar('region') as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n          'BUY' as trade_type\nFROM every e1=CryptoTraderQuotesAvgEURNew[e1.close < e1.ma], e2=CryptoTraderQuotesAvgEURNew[e2.close > e2.ma];\n\n@info(name='Query for BTC/EUR trading strategy SELL')\nINSERT INTO TradesSell\nSELECT e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       context:getVar('region') as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n          'SELL' as trade_type\nFROM every e1=CryptoTraderQuotesAvgEURNew[e1.close > e1.ma], e2=CryptoTraderQuotesAvgEURNew[e2.close < e2.ma];\n\nDELETE trades for expired events \n       ON trades.trade_location == trade_location and trades.symbol == symbol and trades.timestamp < timestamp \nSELECT context:getVar('region') as trade_location, symbol, timestamp\nFROM CryptoTraderQuotesAvgEURNew WINDOW SLIDING_TIME(10);\n\n-- Bitflyer BTC/JPY strategy generation\n----------------------------------------------------------------------------------------------\n@info(name='Query for BTC/JPY close and average prices within moving 10 events windows')\nINSERT INTO CryptoTraderQuotesAvgJPYNew\nSELECT \"Bitflyer\" as exchange, \"Asia-Pacific\" as quote_region,\n        \"BTC/JPY\" as symbol, avg(ltp) as ma, ltp as close, \n        time:timestampInMilliseconds()/1000 as timestamp\nFROM JpyCryptoTraderTickerResponseStream[context:getVar('region') == 'play-us-west'] WINDOW SLIDING_LENGTH(10);\n\n@info(name='Query for BTC/JPY trading strategy BUY')\nINSERT INTO TradesBuy\nSELECT e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       context:getVar('region') as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n          'BUY' as trade_type\nFROM every e1=CryptoTraderQuotesAvgJPYNew[e1.close < e1.ma], e2=CryptoTraderQuotesAvgJPYNew[e2.close > e2.ma];\n\n@info(name='Query for BTC/JPY trading strategy SELL')\nINSERT INTO TradesSell\nSELECT e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       context:getVar('region') as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n          'SELL' as trade_type\nFROM every e1=CryptoTraderQuotesAvgJPYNew[e1.close > e1.ma], e2=CryptoTraderQuotesAvgJPYNew[e2.close < e2.ma];\n \nDELETE trades for expired events \n       ON trades.trade_location == trade_location and trades.symbol == symbol and trades.timestamp < timestamp \nSELECT context:getVar('region') as trade_location, symbol, timestamp\nFROM CryptoTraderQuotesAvgJPYNew WINDOW SLIDING_TIME(10);\n")))}c.isMDXComponent=!0}}]);