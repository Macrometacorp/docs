"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[29740],{3905:(e,r,n)=>{n.d(r,{Zo:()=>i,kt:()=>k});var t=n(67294);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=t.createContext({}),p=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):s(s({},r),e)),n},i=function(e){var r=p(e.components);return t.createElement(u.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},c=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),c=p(n),k=a,g=c["".concat(u,".").concat(k)]||c[k]||d[k]||l;return n?t.createElement(g,s(s({ref:r},i),{},{components:n})):t.createElement(g,s({ref:r},i))}));function k(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var l=n.length,s=new Array(l);s[0]=c;var o={};for(var u in r)hasOwnProperty.call(r,u)&&(o[u]=r[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},79321:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var t=n(87462),a=(n(67294),n(3905));const l={title:"Query Worker Commands"},s="Query Workers (gdnsl query-worker )",o={unversionedId:"cli/query-workers-cli",id:"cli/query-workers-cli",title:"Query Worker Commands",description:"Get commands related to query workers.",source:"@site/docs/cli/query-workers-cli.md",sourceDirName:"cli",slug:"/cli/query-workers-cli",permalink:"/docs/cli/query-workers-cli",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cli/query-workers-cli.md",tags:[],version:"current",frontMatter:{title:"Query Worker Commands"},sidebar:"defaultSidebar",previous:{title:"Query Commands",permalink:"/docs/cli/queries-cli"},next:{title:"Revision Commands",permalink:"/docs/cli/revision-cli"}},u={},p=[{value:"gdnsl query-worker create",id:"gdnsl-query-worker-create",level:2},{value:"gdnsl query-worker list",id:"gdnsl-query-worker-list",level:2},{value:"gdnsl query-worker delete",id:"gdnsl-query-worker-delete",level:2},{value:"gdnsl query-worker describe",id:"gdnsl-query-worker-describe",level:2},{value:"gdnsl query-worker update",id:"gdnsl-query-worker-update",level:2},{value:"gdnsl query-worker run",id:"gdnsl-query-worker-run",level:2},{value:"gdnsl query-worker next",id:"gdnsl-query-worker-next",level:2}],i={toc:p};function d(e){let{components:r,...n}=e;return(0,a.kt)("wrapper",(0,t.Z)({},i,n,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"query-workers-gdnsl-query-worker-"},"Query Workers (gdnsl query-worker )"),(0,a.kt)("p",null,"Get commands related to query workers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl query-worker [flags]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\n  # Help for query worker command group\n  gdnsl query-worker -h\n\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to manage query-workers.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-query-worker-create"},"gdnsl query-worker create"),(0,a.kt)("p",null,"Create a query worker."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl query-worker create NAME [flags]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'  # Update a query-worker with the name "allAddresses"\n  gdnsl query-worker update allAddresses --value "FOR doc IN addresses RETURN doc"\n\n  # Create a query-worker with filter based on bindvar of the query\n  gdnsl query-worker create getCountryAddresses --value "FOR x IN addresses FILTER x.country == @country RETURN x" --param "country=USA"\n\n  # Update a query worker by reading it from a file on the specified path\n  gdnsl query-worker update --file "path_to_file"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to create a query-worker.\n      --param string        key/value pairs representing the bind parameters. Can be given multiple times. \n      --file string         Read query and the query options from a file. File should be in a JSON format. \n                            The name of the file will become query-worker's name if the `name` option is not specified.\n      --fabric              Name of the fabric to use.\n      --value string        Query string. \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-query-worker-list"},"gdnsl query-worker list"),(0,a.kt)("p",null,"List query workers associated with current user."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl query-worker list\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  # List all query-workers\n  gdnsl query-worker list\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to list query-workers.\n  --fabric                  Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-query-worker-delete"},"gdnsl query-worker delete"),(0,a.kt)("p",null,"Delete a query worker."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl query-worker delete NAME\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\n  # Delete a query-worker with the name "allAddresses"\n  gdnsl query-worker delete allAddresses\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to delete a query-worker.\n  --fabric                  Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-query-worker-describe"},"gdnsl query-worker describe"),(0,a.kt)("p",null,"Describe a query worker."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  gdnsl query-worker describe NAME\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  # Describe a query worker.\n  gdnsl query-worker describe TestStreamWorker\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help            Help to a describe query worker.\n  --fabric              Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string   gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-query-worker-update"},"gdnsl query-worker update"),(0,a.kt)("p",null,"Update a query worker."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl query-worker update NAME [flags]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'  # Update a query-worker with the name "allAddresses"\n  gdnsl query-worker update allAddresses --value "FOR doc IN addresses RETURN doc"\n\n  # Update a query worker  with filter based on bindvar of the query\n  gdnsl query-worker update getCountryAddresses --value "FOR x IN addresses FILTER x.country == @country RETURN x" --param "country=USA"\n\n  # Update a query worker by reading it from a file on the specified path\n  gdnsl query-worker update --file "path_to_file"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to update a query-worker.\n      --param string        Key/value pairs representing the bind parameters. Can be given multiple times. \n      --file  string        Read query and the query options from a file. File should be in a JSON format. \n                            The name of the file will become query-worker's name if the `name` option is not specified.\n\n      --fabric              Name of the fabric to use.\n      --value string        Query string. \n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-query-worker-run"},"gdnsl query-worker run"),(0,a.kt)("p",null,"Run a query worker."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl query-worker run NAME [flags]\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'  # Execute a query-worker with the name "allAddresses"\n  gdnsl query-worker run allAddresses \n\n  # Execute a query-worker with filter based on bindvar\n  gdnsl query-worker run getCountryAddresses --param "country=USA"\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help to run a query-worker.\n      --param string        key/value pairs representing the bind parameters. Can be given multiple times.\n      --fabric              Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")),(0,a.kt)("h2",{id:"gdnsl-query-worker-next"},"gdnsl query-worker next"),(0,a.kt)("p",null,"Read next batch from cursor."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"gdnsl query-worker next CURSOR-IDENTIFIER\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Examples:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  # Read next batch from cursor\n  gdnsl query-worker next 66706\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                Help for query next command.\n  --fabric                  Name of the fabric to use.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Options inherited:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"      --config string       gdnsl config file (default is ./gdnsl.yaml)\n")))}d.isMDXComponent=!0}}]);