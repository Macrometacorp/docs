"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76337],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),s=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,g=d["".concat(l,".").concat(u)]||d[u]||c[u]||o;return a?n.createElement(g,p(p({ref:t},m),{},{components:a})):n.createElement(g,p({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,p=new Array(o);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var s=2;s<o;s++)p[s]=a[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(67294),r=a(34334);const o="tabItem_Ymn6";function p(e){let{children:t,hidden:a,className:p}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,p),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(87462),r=a(67294),o=a(34334),p=a(72389),i=a(67392),l=a(7094),s=a(12466);const m="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:a,defaultValue:p,values:d,groupId:u,className:g}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=d??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),S=(0,i.l)(w,((e,t)=>e.value===t.value));if(S.length>0)throw new Error(`Docusaurus error: Duplicate values "${S.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===p?p:p??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==y&&!w.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:T,setTabGroupChoices:C}=(0,l.U)(),[k,A]=(0,r.useState)(y),b=[],{blockElementScrollPositionUntilNextRender:f}=(0,s.o5)();if(null!=u){const e=T[u];null!=e&&e!==k&&w.some((t=>t.value===e))&&A(e)}const v=e=>{const t=e.currentTarget,a=b.indexOf(t),n=w[a].value;n!==k&&(f(t),A(n),null!=u&&C(u,String(n)))},D=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=b.indexOf(e.currentTarget)+1;t=b[a]??b[0];break}case"ArrowLeft":{const a=b.indexOf(e.currentTarget)-1;t=b[a]??b[b.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},g)},w.map((e=>{let{value:t,label:a,attributes:p}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>b.push(e),onKeyDown:D,onFocus:v,onClick:v},p,{className:(0,o.Z)("tabs__item",c,p?.className,{"tabs__item--active":k===t})}),a??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function u(e){const t=(0,p.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},31839:(e,t,a)=>{a.d(t,{ZP:()=>l});var n=a(87462),r=(a(67294),a(3905)),o=a(65488),p=a(85162);const i={toc:[]};function l(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},i,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"When this code runs, it initializes the server connection to the specified region URL. For more information about connecting to GDN, refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/account-management/auth/"},"Authentication"),"."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Import libraries\nfrom c8 import C8Client\n\n# Define constants\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "my API key" # Change this to your API key\n\nprint("--- Connecting to GDN")\n\n# Choose one of the following methods to access the GDN. API key is recommended.\n\n# Authenticate with API key\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n\n# Authenticate with JWT\n# client = C8Client(protocol=\'https\', host=URL, port=443, token=<your token>, geofabric=GEO_FABRIC))\n\n# Authenticate with email and password\n# client = C8Client(protocol=\'https\', host=URL, port=443, email=<your email id>, password=<your password>, geofabric=GEO_FABRIC)\n'))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Choose one of the following methods to access the GDN. API key is recommended.\n// API key\nconst client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n\n// JSON Web Token\n// const client = new jsc8({url: "https://play.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n\n// Or use email and password to authenticate client instance\n// const client = new jsc8("https://play.paas.macrometa.io");\n// Replace values with your email and password (use it inside an async function).\n// await client.login("nemo@nautilus.com", "xxxxxx"); \n')))))}l.isMDXComponent=!0},25635:(e,t,a)=>{a.d(t,{ZP:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={toc:[]};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create a new JavaScript (.js) or Python (.py) file in your favorite IDE."),(0,r.kt)("li",{parentName:"ol"},"Copy the code block below and paste it into your JavaScript or Python file."),(0,r.kt)("li",{parentName:"ol"},"With each subsequent step, append the code block to the existing file and then run it.")))}p.isMDXComponent=!0},60296:(e,t,a)=>{a.d(t,{ZP:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={toc:[{value:"Prerequisites",id:"prerequisites",level:2}]};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"https://auth-play.macrometa.io/"},"Macrometa account")," with admin permissions."),(0,r.kt)("li",{parentName:"ul"},"An API key with admin permissions. For more information, refer to ",(0,r.kt)("a",{parentName:"li",href:"/docs/account-management/api-keys/create-api-keys"},"Create API Keys"),"."),(0,r.kt)("li",{parentName:"ul"},"The appropriate SDK installed. For more information, refer to ",(0,r.kt)("a",{parentName:"li",href:"/docs/sdks/install-sdks"},"Install SDKs"),".")))}p.isMDXComponent=!0},28225:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>w,frontMatter:()=>m,metadata:()=>d,toc:()=>g});var n=a(87462),r=(a(67294),a(3905)),o=a(65488),p=a(85162),i=a(60296),l=a(25635),s=a(31839);const m={sidebar_position:20,title:"Stream Workers SDK Example"},c=void 0,d={unversionedId:"cep/examples/stream-workers-sdk-example",id:"cep/examples/stream-workers-sdk-example",title:"Stream Workers SDK Example",description:"This article is an introduction to using stream workers (sometimes called stream apps) with Macrometa SDKs.",source:"@site/docs/cep/examples/stream-workers-sdk-example.md",sourceDirName:"cep/examples",slug:"/cep/examples/stream-workers-sdk-example",permalink:"/docs/cep/examples/stream-workers-sdk-example",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/examples/stream-workers-sdk-example.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Stream Workers SDK Example"},sidebar:"defaultSidebar",previous:{title:"REST APIs Stream Worker Example",permalink:"/docs/cep/examples/rest-apis-cep-example"},next:{title:"Basic Types Example",permalink:"/docs/cep/examples/basic-types-example"}},u={},g=[{value:"Get Started with Stream Workers",id:"get-started-with-stream-workers",level:2},{value:"Step 1. Connect to GDN",id:"step-1-connect-to-gdn",level:3},{value:"Step 2. Validate Stream Worker",id:"step-2-validate-stream-worker",level:3},{value:"Step 3. Create Stream Worker",id:"step-3-create-stream-worker",level:3},{value:"Step 4. Activate and Deactivate Stream Worker",id:"step-4-activate-and-deactivate-stream-worker",level:3},{value:"Step 4. Update Stream Worker",id:"step-4-update-stream-worker",level:3},{value:"Step 5. Insert data and run an Ad Hoc Query",id:"step-5-insert-data-and-run-an-ad-hoc-query",level:3},{value:"Step 6. Delete Stream Worker",id:"step-6-delete-stream-worker",level:3},{value:"Full Demo File",id:"full-demo-file",level:2}],h={toc:g};function w(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This article is an introduction to using stream workers (sometimes called stream apps) with ",(0,r.kt)("a",{parentName:"p",href:"/docs/sdks/"},"Macrometa SDKs"),"."),(0,r.kt)(i.ZP,{mdxType:"Prerequisites"}),(0,r.kt)("h2",{id:"get-started-with-stream-workers"},"Get Started with Stream Workers"),(0,r.kt)("p",null,"This page guides you through creating a stream worker, updating it, and running an ad hoc query on it using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Macrometacorp/pyC8"},"pyC8")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Macrometacorp/jsC8"},"jsC8")," SDKs."),(0,r.kt)(l.ZP,{mdxType:"Steps"}),(0,r.kt)("p",null,"If you want to skip the explanation and just run the code, then go directly to the ",(0,r.kt)("a",{parentName:"p",href:"#full-demo-file"},"Full Demo File"),"."),(0,r.kt)("h3",{id:"step-1-connect-to-gdn"},"Step 1. Connect to GDN"),(0,r.kt)("p",null,"To use stream workers with Macrometa Global Data Network (GDN), you must first establish a connection to a local region."),(0,r.kt)(s.ZP,{mdxType:"ConnectToGDN"}),(0,r.kt)("h3",{id:"step-2-validate-stream-worker"},"Step 2. Validate Stream Worker"),(0,r.kt)("p",null,"Validate the stream worker for syntax errors before saving. If valid, then the system returns ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,r.kt)("p",null,"The stream worker shown below reads data from a collection and publishes it to a stream."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Import libraries you\'ll need later\nimport time\n\n# Define the stream app to validate.\nstream_app_definition = """\n@App:name(\'Sample-Cargo-App\')\n@App:qlVersion("2")\n@App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in the collection. The stream and collections are automatically created if they do not already exist.\')\n/**\nTest the stream worker:\n    1. Open Stream SampleCargoAppDestStream in console. The output can be monitored here.\n    2. Upload following data into SampleCargoAppInputTable collection:\n        {"weight": 1}\n        {"weight": 2}\n        {"weight": 3}\n        {"weight": 4}\n        {"weight": 5}\n    3. Following messages are shown on the SampleCargoAppDestStream Stream Console:\n        [2021-08-27T14:12:15.795Z] {"weight":1}\n        [2021-08-27T14:12:15.799Z] {"weight":2}\n        [2021-08-27T14:12:15.805Z] {"weight":3}\n        [2021-08-27T14:12:15.809Z] {"weight":4}\n        [2021-08-27T14:12:15.814Z] {"weight":5}\n*/\n\n-- Create Table SampleCargoAppInputTable to process events.\nCREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection ="SampleCargoAppInputTable", collection.type="doc", replication.type="global", maptype=\'json\') (weight int);\n\n-- Create Stream SampleCargoAppDestStream\nCREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream ="SampleCargoAppDestStream", replication.type="local") (weight int);\n\n-- Data Processing\n@info(name=\'Query\')\nINSERT INTO SampleCargoAppDestStream\nSELECT weight\nFROM SampleCargoAppInputTable;\n"""\n\n# Validate the stream worker code.\nprint("--- Validating stream worker definition")\nprint(client.validate_stream_app(data=stream_app_definition))\n'))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// This is a supporting function\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\n\n// This is the main function\nasync function main () {\n  try {\n    // Define the stream app to validate.\n    const appDefinition = `\n      @App:name(\'Sample-Cargo-App\')\n      @App:qlVersion("2")\n      @App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in the collection. The stream and collections are automatically created if they do not already exist.\')\n      /**\n      Test the stream worker:\n          1. Open Stream SampleCargoAppDestStream in console. The output can be monitored here.\n          2. Upload following data into SampleCargoAppInputTable collection:\n              {"weight": 1}\n              {"weight": 2}\n              {"weight": 3}\n              {"weight": 4}\n              {"weight": 5}\n          3. Following messages are shown on the SampleCargoAppDestStream Stream Console:\n              [2021-08-27T14:12:15.795Z] {"weight":1}\n              [2021-08-27T14:12:15.799Z] {"weight":2}\n              [2021-08-27T14:12:15.805Z] {"weight":3}\n              [2021-08-27T14:12:15.809Z] {"weight":4}\n              [2021-08-27T14:12:15.814Z] {"weight":5}\n      */\n\n      -- Create Table SampleCargoAppInputTable to process events.\n      CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection ="SampleCargoAppInputTable", collection.type="doc", replication.type="global", maptype=\'json\') (weight int);\n\n      -- Create Stream SampleCargoAppDestStream\n      CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream ="SampleCargoAppDestStream", replication.type="local") (weight int);\n\n      -- Data Processing\n      @info(name=\'Query\')\n      INSERT INTO SampleCargoAppDestStream\n      SELECT weight\n      FROM SampleCargoAppInputTable;`\n\n    // Validate the stream worker code.\n    console.log("--- Validating stream worker definition");\n    let result;\n    result = await client.validateStreamApp(appDefinition);\n    console.log(!result.error)\n\n    // Add subsequent code blocks above this line.\n  } catch (e) {\n    console.log(messageHandler(e));\n  }\n}\nmain();\n')))),(0,r.kt)("h3",{id:"step-3-create-stream-worker"},"Step 3. Create Stream Worker"),(0,r.kt)("p",null,"By default, the stream worker is created in the local region. You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"dclist")," (domain component list) to deploy the stream application in other specified regions, or in all regions."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Create the stream worker.\ndclist = []\nprint("--- Creating stream worker")\nprint(client.create_stream_app(data=stream_app_definition, dclist=dclist))\n'))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("p",null,"Append the following lines of code inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," block of main function. Look for the code comment that says, ",(0,r.kt)("inlineCode",{parentName:"p"},"Add subsequent code blocks above this line."),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'    // The stream app will be created by default in the local region. Optionally, you can use dclist to deploy stream\n    // app in all / selected regions\n    const dclist = []\n    console.log("--- Creating stream worker");\n    try {\n      result = await client.createStreamApp(dclist, appDefinition);\n      console.log(!result.error);\n    } catch (e) {\n      if (e.statusCode === 409) {\n        console.log("Stream worker already exists");\n      } else {\n        throw e;\n      }\n    }\n')))),(0,r.kt)("h3",{id:"step-4-activate-and-deactivate-stream-worker"},"Step 4. Activate and Deactivate Stream Worker"),(0,r.kt)("p",null,"Sometimes you need to turn a stream worker on or off. The commands below demonstrate how to do that programmatically. Make sure that the stream worker is activated (published) before continuing to the next step!"),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Activate the stream worker.\n# Check if already active\nresult = client.get_stream_app('Sample-Cargo-App')\nif result[0]['isActive'] is False:\n    print(\"Activate\", client.activate_stream_app('Sample-Cargo-App', True))\nelse:\n    print(\"Stream worker already active\")\n\n# You can also deactivate the stream worker.\n# print(\"Deactivate\", client.activate_stream_app('Sample-Cargo-App', False))\n"))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("p",null,"Append the following lines of code inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," block of main function. Look for the code comment that says, ",(0,r.kt)("inlineCode",{parentName:"p"},"Add subsequent code blocks above this line."),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'    // Activate the stream worker if not already active.\n    console.log("--- Activating `Sample-Cargo-App`");\n    result = await client.getStreamApp("Sample-Cargo-App");\n    const isActive = result.streamApps.at(0).isActive;\n    if (!isActive) {\n      result = await client.activateStreamApp("Sample-Cargo-App", true);\n      console.log(!result.error)\n    } else {\n      console.log("Stream worker already active")\n    }\n\n    // You can also deactivate the stream worker.\n    // console.log("--- Deactivating `Sample-Cargo-App`");\n    // const result = await client.activateStreamApp("Sample-Cargo-App", false);\n')))),(0,r.kt)("h3",{id:"step-4-update-stream-worker"},"Step 4. Update Stream Worker"),(0,r.kt)("p",null,"The code below adds a second data processing step. It updates the stream worker to store the input data into itself and another collection called ",(0,r.kt)("inlineCode",{parentName:"p"},"SampleCargoAppDestTable"),"."),(0,r.kt)("p",null,"After you run this command, you can view the changes in the Macrometa console Stream Workers page."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Code with which the stream worker will be updated.\ndata = """\n@App:name(\'Sample-Cargo-App\')\n@App:qlVersion("2")\n@App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in a collection. The stream and collections are automatically created if they do not already exist.\')\n/**\n    Test the stream worker:\n    1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n    2. Upload following data into SampleCargoAppInputTable collection:\n        {"weight": 1}\n        {"weight": 2}\n        {"weight": 3}\n        {"weight": 4}\n        {"weight": 5}\n    3. Following messages are shown on the `SampleCargoAppDestStream` Stream Console:\n        [2021-08-27T14:12:15.795Z] {"weight":1}\n        [2021-08-27T14:12:15.799Z] {"weight":2}\n        [2021-08-27T14:12:15.805Z] {"weight":3}\n        [2021-08-27T14:12:15.809Z] {"weight":4}\n        [2021-08-27T14:12:15.814Z] {"weight":5}\n    4. Following messages are stored into SampleCargoAppDestTable\n        {"weight":1}\n        {"weight":2}\n        {"weight":3}\n        {"weight":4}\n        {"weight":5}\n*/\n\n-- Defines Table SampleCargoAppInputTable\nCREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n\n-- Define Stream SampleCargoAppDestStream\nCREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n\n-- Defining a Destination table to dump the data from the stream\nCREATE STORE SampleCargoAppDestTable WITH (type = \'database\', replication.type="global", stream = "SampleCargoAppDestTable") (weight int);\n\n-- Data Processing\n@info(name=\'Query\')\nINSERT INTO SampleCargoAppDestStream\nSELECT weight\nFROM SampleCargoAppInputTable;\n\n-- Data Processing\n@info(name=\'Dump\')\nINSERT INTO SampleCargoAppDestTable\nSELECT weight\nFROM SampleCargoAppInputTable;\n"""\n\n# Create an instance of a stream worker and deactivate it before you update it.\nclient.activate_stream_app(\'Sample-Cargo-App\', False)\napp = client._fabric.stream_app("Sample-Cargo-App")\n\n# Update the stream worker.\nprint("--- Updating stream worker `Sample-Cargo-App`")\napp.update(data)\n# Wait time is needed after updating a stream worker to initialize resources\ntime.sleep(10)\napp.change_state(True)\n\n'))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("p",null,"Append the following lines of code inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," block of main function. Look for the code comment that says, ",(0,r.kt)("inlineCode",{parentName:"p"},"Add subsequent code blocks above this line."),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'    // Code with which the stream worker will be updated.\n    const updatedAppDefinition = `\n    @App:name(\'Sample-Cargo-App\')\n    @App:qlVersion("2")\n    @App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n  \n    /**\n    Testing the Stream Application:\n    1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n  \n    2. Upload following data into SampleCargoAppInputTable collection\n        {"weight": 1}\n        {"weight": 2}\n        {"weight": 3}\n        {"weight": 4}\n        {"weight": 5}\n  \n    3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n        [2021-08-27T14:12:15.795Z] {"weight":1}\n        [2021-08-27T14:12:15.799Z] {"weight":2}\n        [2021-08-27T14:12:15.805Z] {"weight":3}\n        [2021-08-27T14:12:15.809Z] {"weight":4}\n        [2021-08-27T14:12:15.814Z] {"weight":5}\n  \n    4. Following messages would be stored into SampleCargoAppDestTable\n        {"weight":1}\n        {"weight":2}\n        {"weight":3}\n        {"weight":4}\n        {"weight":5}\n    */\n  \n    -- Defines Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n    CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n  \n    -- Define Stream SampleCargoAppDestStream\n    CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n  \n    CREATE STORE SampleCargoAppDestTable WITH (type = \'database\', replication.type="global", stream = "SampleCargoAppDestTable") (weight int);\n  \n    -- Data Processing\n    @info(name=\'Query\')\n    INSERT INTO SampleCargoAppDestStream\n    SELECT weight\n    FROM SampleCargoAppInputTable;\n  \n    -- Data Processing\n    @info(name=\'Dump\')\n    INSERT INTO SampleCargoAppDestTable\n    SELECT weight\n    FROM SampleCargoAppInputTable;`\n\n    // Create an instance of a stream worker and deactivate it before you update it.\n    await client.activateStreamApp("Sample-Cargo-App", false);\n    const app = await client.streamApp("Sample-Cargo-App");\n\n    // Update the stream worker.\n    console.log("--- Updating stream worker `Sample-Cargo-App`");\n    result = await app.updateApplication([], updatedAppDefinition);\n    console.log(!result.error)\n    console.log("--- Waiting 10 seconds for all the resources to be ready");\n    await new Promise(resolve => setTimeout(resolve, 10000));\n    await app.activateStreamApplication(true);\n')))),(0,r.kt)("h3",{id:"step-5-insert-data-and-run-an-ad-hoc-query"},"Step 5. Insert data and run an Ad Hoc Query"),(0,r.kt)("p",null,"In this example, we use a query worker ",(0,r.kt)("inlineCode",{parentName:"p"},"insertWeight")," to insert data into ",(0,r.kt)("inlineCode",{parentName:"p"},"SampleCargoAppInputTable")," and then we run an ad hoc query on the store ",(0,r.kt)("inlineCode",{parentName:"p"},"SampleCargoAppDestTable")," used in the stream worker. It gets the records that you inserted into ",(0,r.kt)("inlineCode",{parentName:"p"},"SampleCargoAppInputTable"),"."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'\n# Inserting data into SampleCargoAppInputTable using a query worker.\ninsert_data_value = \'INSERT { "weight": @weight } IN SampleCargoAppInputTable\'\ninsert_data_query = {\n    "query": {\n        "name": "insertWeight",\n        "value": insert_data_value,\n    }\n}\n\nclient.create_restql(insert_data_query)\ntime.sleep(2)\nfor i in range(5):\n    client.execute_restql("insertWeight", {"bindVars": {"weight": i}})\n# Deleting the query worker.\nclient.delete_restql("insertWeight")\n\n# Run ad hoc query against the store.\nprint("--- Running an ad hoc query against the store `SampleCargoAppDestTable`")\nq = "select * from SampleCargoAppDestTable limit 3"\nresult = app.query(q)\nprint(result)\n\n'))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("p",null,"Append the following lines of code inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," block of main function. Look for the code comment that says, ",(0,r.kt)("inlineCode",{parentName:"p"},"Add subsequent code blocks above this line."),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'\n    // Insert data into the collection via query worker.\n    console.log("--- Inserting data to `SampleCargoAppInputTable` collection");\n\n    const queryName = "insertWeight";\n    const queryValue = `INSERT { weight:@weight } IN SampleCargoAppInputTable`;\n    await client.createRestql(queryName, queryValue);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    for (let i = 1; i <= 5; i++) {\n      await client.executeRestql(queryName, { weight: i });\n      console.log(i)\n    }\n    await client.deleteRestql(queryName);\n\n    // Run query against the store.\n    console.log("--- Running an Ad Hoc query against the store `SampleCargoAppDestTable`");\n    const q = "select * from SampleCargoAppDestTable limit 3";\n    result = await app.query(q);\n    console.log(result);\n\n')))),(0,r.kt)("h3",{id:"step-6-delete-stream-worker"},"Step 6. Delete Stream Worker"),(0,r.kt)("p",null,"You're done with this stream worker, so time to delete it."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},"# Delete the stream worker.\n\nprint(\"--- Deleting stream worker `Sample-Cargo-App`\")\nresult = client.delete_stream_app('Sample-Cargo-App')\n"))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("p",null,"Append the following lines of code inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"try")," block of main function. Look for the code comment that says, ",(0,r.kt)("inlineCode",{parentName:"p"},"Add subsequent code blocks above this line."),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'    // Delete the stream worker.\n    console.log("--- Deleting stream worker `Sample-Cargo-App`");\n    result = await client.deleteStreamApp("Sample-Cargo-App");\n    console.log(!result.error)\n')))),(0,r.kt)("h2",{id:"full-demo-file"},"Full Demo File"),(0,r.kt)("p",null,"The following example uses the code snippets provided in this tutorial."),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(p.Z,{value:"py",label:"Python SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'# Import libraries\nfrom c8 import C8Client\nimport time\n\n# Define constants\nURL = "play.paas.macrometa.io"\nGEO_FABRIC = "_system"\nAPI_KEY = "my API key" # Change this to your API key\n\nprint("--- Connecting to GDN")\n# Choose one of the following methods to access the GDN. API key is recommended.\n\n# Authenticate with API key\nclient = C8Client(protocol=\'https\', host=URL, port=443, apikey=API_KEY, geofabric=GEO_FABRIC)\n\n# Authenticate with JWT\n# client = C8Client(protocol=\'https\', host=URL, port=443, token=<your token>, geofabric=GEO_FABRIC)\n\n# Authenticate with email and password\n# client = C8Client(protocol=\'https\', host=URL, port=443, email=<your email id>, password=<your password>, geofabric=GEO_FABRIC)\n\n# Define the stream app to validate.\nstream_app_definition = """\n@App:name(\'Sample-Cargo-App\')\n@App:qlVersion("2")\n@App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in the collection. The stream and collections are automatically created if they do not already exist.\')\n/**\nTest the stream worker:\n    1. Open Stream SampleCargoAppDestStream in console. The output can be monitored here.\n    2. Upload following data into SampleCargoAppInputTable collection:\n        {"weight": 1}\n        {"weight": 2}\n        {"weight": 3}\n        {"weight": 4}\n        {"weight": 5}\n    3. Following messages are shown on the SampleCargoAppDestStream Stream Console:\n        [2021-08-27T14:12:15.795Z] {"weight":1}\n        [2021-08-27T14:12:15.799Z] {"weight":2}\n        [2021-08-27T14:12:15.805Z] {"weight":3}\n        [2021-08-27T14:12:15.809Z] {"weight":4}\n        [2021-08-27T14:12:15.814Z] {"weight":5}\n*/\n\n-- Create Table SampleCargoAppInputTable to process events.\nCREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection ="SampleCargoAppInputTable", collection.type="doc", replication.type="global", maptype=\'json\') (weight int);\n\n-- Create Stream SampleCargoAppDestStream\nCREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream ="SampleCargoAppDestStream", replication.type="local") (weight int);\n\n-- Data Processing\n@info(name=\'Query\')\nINSERT INTO SampleCargoAppDestStream\nSELECT weight\nFROM SampleCargoAppInputTable;\n"""\n\n# Validate the stream worker code.\nprint("--- Validating stream worker definition")\nprint(client.validate_stream_app(data=stream_app_definition))\n\n# Create the stream worker.\ndclist = []\nprint("--- Creating stream worker")\nprint(client.create_stream_app(data=stream_app_definition, dclist=dclist))\n\n# Activate the stream worker.\n# Check if already active\nresult = client.get_stream_app(\'Sample-Cargo-App\')\nif result[0][\'isActive\'] is False:\n    print("Activate", client.activate_stream_app(\'Sample-Cargo-App\', True))\nelse:\n    print("Stream worker already active")\n\n# You can also deactivate the stream worker.\n# print("Deactivate", client.activate_stream_app(\'Sample-Cargo-App\', False))\n\n# Code with which the stream worker will be updated.\ndata = """\n@App:name(\'Sample-Cargo-App\')\n@App:qlVersion("2")\n@App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in a collection. The stream and collections are automatically created if they do not already exist.\')\n/**\n    Test the stream worker:\n    1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n    2. Upload following data into SampleCargoAppInputTable collection:\n        {"weight": 1}\n        {"weight": 2}\n        {"weight": 3}\n        {"weight": 4}\n        {"weight": 5}\n    3. Following messages are shown on the `SampleCargoAppDestStream` Stream Console:\n        [2021-08-27T14:12:15.795Z] {"weight":1}\n        [2021-08-27T14:12:15.799Z] {"weight":2}\n        [2021-08-27T14:12:15.805Z] {"weight":3}\n        [2021-08-27T14:12:15.809Z] {"weight":4}\n        [2021-08-27T14:12:15.814Z] {"weight":5}\n    4. Following messages are stored into SampleCargoAppDestTable\n        {"weight":1}\n        {"weight":2}\n        {"weight":3}\n        {"weight":4}\n        {"weight":5}\n*/\n\n-- Defines Table SampleCargoAppInputTable\nCREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n\n-- Define Stream SampleCargoAppDestStream\nCREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n\n-- Defining a Destination table to dump the data from the stream\nCREATE STORE SampleCargoAppDestTable WITH (type = \'database\', replication.type="global", stream = "SampleCargoAppDestTable") (weight int);\n\n-- Data Processing\n@info(name=\'Query\')\nINSERT INTO SampleCargoAppDestStream\nSELECT weight\nFROM SampleCargoAppInputTable;\n\n-- Data Processing\n@info(name=\'Dump\')\nINSERT INTO SampleCargoAppDestTable\nSELECT weight\nFROM SampleCargoAppInputTable;\n"""\n\n# Create an instance of a stream worker and deactivate it before you update it.\nclient.activate_stream_app(\'Sample-Cargo-App\', False)\napp = client._fabric.stream_app("Sample-Cargo-App")\n\n# Update the stream worker.\nprint("--- Updating stream worker `Sample-Cargo-App`")\napp.update(data)\n# Wait time is needed after updating a stream worker to initialize resources\ntime.sleep(10)\napp.change_state(True)\n\n# Inserting data into SampleCargoAppInputTable using a query worker.\ninsert_data_value = \'INSERT { "weight": @weight } IN SampleCargoAppInputTable\'\ninsert_data_query = {\n    "query": {\n        "name": "insertWeight",\n        "value": insert_data_value,\n    }\n}\n\nclient.create_restql(insert_data_query)\ntime.sleep(2)\nfor i in range(5):\n    client.execute_restql("insertWeight", {"bindVars": {"weight": i}})\n# Deleting the query worker.\nclient.delete_restql("insertWeight")\n\n# Run ad hoc query against the store.\nprint("--- Running an ad hoc query against the store `SampleCargoAppDestTable`")\nq = "select * from SampleCargoAppDestTable limit 3"\nresult = app.query(q)\nprint(result)\n\n# Delete the stream worker.\nprint("--- Deleting stream worker `Sample-Cargo-App`")\nresult = client.delete_stream_app(\'Sample-Cargo-App\')\n'))),(0,r.kt)(p.Z,{value:"js",label:"JavaScript SDK",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\n\n// Choose one of the following methods to access the GDN. API key is recommended.\n// API key\nconst client = new jsc8({url: "https://play.paas.macrometa.io", apiKey: "XXXXX", fabricName: \'_system\'});\n// JSON Web Token\n// const client = new jsc8({url: "https://play.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n// Or use email and password to authenticate client instance\n// const client = new jsc8("https://play.paas.macrometa.io");\n// Replace values with your email and password (use it inside an async function).\n// await client.login("nemo@nautilus.com", "xxxxxx");\n\n// This is a supporting function\nfunction messageHandler (error) {\n  const message = {\n    "StatusCode ": error.statusCode,\n    "ErrorMessage ": error.message,\n    "ErrorNum ": error.errorNum\n  };\n  console.log(message);\n}\n\nasync function main () {\n  try {\n    // Define the stream app to validate.\n    const appDefinition = `\n      @App:name(\'Sample-Cargo-App\')\n      @App:qlVersion("2")\n      @App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in the collection. The stream and collections are automatically created if they do not already exist.\')\n      /**\n      Test the stream worker:\n          1. Open Stream SampleCargoAppDestStream in console. The output can be monitored here.\n          2. Upload following data into SampleCargoAppInputTable collection:\n              {"weight": 1}\n              {"weight": 2}\n              {"weight": 3}\n              {"weight": 4}\n              {"weight": 5}\n          3. Following messages are shown on the SampleCargoAppDestStream Stream Console:\n              [2021-08-27T14:12:15.795Z] {"weight":1}\n              [2021-08-27T14:12:15.799Z] {"weight":2}\n              [2021-08-27T14:12:15.805Z] {"weight":3}\n              [2021-08-27T14:12:15.809Z] {"weight":4}\n              [2021-08-27T14:12:15.814Z] {"weight":5}\n      */\n\n      -- Create Table SampleCargoAppInputTable to process events.\n      CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection ="SampleCargoAppInputTable", collection.type="doc", replication.type="global", maptype=\'json\') (weight int);\n\n      -- Create Stream SampleCargoAppDestStream\n      CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream ="SampleCargoAppDestStream", replication.type="local") (weight int);\n\n      -- Data Processing\n      @info(name=\'Query\')\n      INSERT INTO SampleCargoAppDestStream\n      SELECT weight\n      FROM SampleCargoAppInputTable;`\n\n    // Validate the stream worker code.\n    console.log("--- Validating stream worker definition");\n    let result;\n    result = await client.validateStreamApp(appDefinition);\n    console.log(!result.error)\n\n    // The stream app will be created by default in the local region. Optionally, you can use dclist to deploy stream\n    // app in all / selected regions\n    const dclist = []\n    console.log("--- Creating stream worker");\n    try {\n      result = await client.createStreamApp(dclist, appDefinition);\n      console.log(!result.error);\n    } catch (e) {\n      if (e.statusCode === 409) {\n        console.log("Stream worker already exists");\n      } else {\n        throw e;\n      }\n    }\n\n    // Activate the stream worker if not already active.\n    console.log("--- Activating `Sample-Cargo-App`");\n    result = await client.getStreamApp("Sample-Cargo-App");\n    const isActive = result.streamApps.at(0).isActive;\n    if (!isActive) {\n      result = await client.activateStreamApp("Sample-Cargo-App", true);\n      console.log(!result.error)\n    } else {\n      console.log("Stream worker already active")\n    }\n\n    // You can also deactivate the stream worker.\n    // console.log("--- Deactivating `Sample-Cargo-App`");\n    // const result = await client.activateStreamApp("Sample-Cargo-App", false);\n\n    // Code with which the stream worker will be updated.\n    const updatedAppDefinition = `\n    @App:name(\'Sample-Cargo-App\')\n    @App:qlVersion("2")\n    @App:description(\'Basic stream worker to demonstrate reading data from input stream and store it in the collection. The stream and collections will be created automatically if they do not already exist.\')\n  \n    /**\n    Testing the Stream Application:\n    1. Open Stream SampleCargoAppDestStream in Console. The output can be monitored here.\n  \n    2. Upload following data into SampleCargoAppInputTable collection\n        {"weight": 1}\n        {"weight": 2}\n        {"weight": 3}\n        {"weight": 4}\n        {"weight": 5}\n  \n    3. Following messages would be shown on the SampleCargoAppDestStream Stream Console\n        [2021-08-27T14:12:15.795Z] {"weight":1}\n        [2021-08-27T14:12:15.799Z] {"weight":2}\n        [2021-08-27T14:12:15.805Z] {"weight":3}\n        [2021-08-27T14:12:15.809Z] {"weight":4}\n        [2021-08-27T14:12:15.814Z] {"weight":5}\n  \n    4. Following messages would be stored into SampleCargoAppDestTable\n        {"weight":1}\n        {"weight":2}\n        {"weight":3}\n        {"weight":4}\n        {"weight":5}\n    */\n  \n    -- Defines Table SampleCargoAppInputTable to process events having sensorId and temperature(F).\n    CREATE SOURCE SampleCargoAppInputTable WITH (type = \'database\', collection = "SampleCargoAppInputTable", collection.type="doc", replication.type="global", map.type=\'json\') (weight int);\n  \n    -- Define Stream SampleCargoAppDestStream\n    CREATE SINK SampleCargoAppDestStream WITH (type = \'stream\', stream = "SampleCargoAppDestStream", replication.type="local") (weight int);\n  \n    CREATE STORE SampleCargoAppDestTable WITH (type = \'database\', replication.type="global", stream = "SampleCargoAppDestTable") (weight int);\n  \n    -- Data Processing\n    @info(name=\'Query\')\n    INSERT INTO SampleCargoAppDestStream\n    SELECT weight\n    FROM SampleCargoAppInputTable;\n  \n    -- Data Processing\n    @info(name=\'Dump\')\n    INSERT INTO SampleCargoAppDestTable\n    SELECT weight\n    FROM SampleCargoAppInputTable;`\n\n    // Create an instance of a stream worker and deactivate it before you update it.\n    await client.activateStreamApp("Sample-Cargo-App", false);\n    const app = await client.streamApp("Sample-Cargo-App");\n\n    // Update the stream worker.\n    console.log("--- Updating stream worker `Sample-Cargo-App`");\n    result = await app.updateApplication([], updatedAppDefinition);\n    console.log(!result.error)\n    console.log("--- Waiting 10 seconds for all the resources to be ready");\n    await new Promise(resolve => setTimeout(resolve, 10000));\n    await app.activateStreamApplication(true);\n\n    // Insert data into the collection via query worker.\n    console.log("--- Inserting data to `SampleCargoAppInputTable` collection");\n    const queryName = "insertWeight";\n    const queryValue = `INSERT { weight:@weight } IN SampleCargoAppInputTable`;\n    await client.createRestql(queryName, queryValue);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    for (let i = 1; i <= 5; i++) {\n      await client.executeRestql(queryName, { weight: i });\n      console.log(i)\n    }\n    await client.deleteRestql(queryName);\n\n    // Run ad hoc query against the store.\n    console.log("--- Running an ad hoc query against the store `SampleCargoAppDestTable`");\n    const q = "select * from SampleCargoAppDestTable limit 3";\n    result = await app.query(q);\n    console.log(result);\n\n    // Delete the stream worker.\n    console.log("--- Deleting stream worker `Sample-Cargo-App`");\n    result = await client.deleteStreamApp("Sample-Cargo-App");\n    console.log(!result.error)\n  } catch (e) {\n    console.log(messageHandler(e));\n  }\n}\nmain();\n')))))}w.isMDXComponent=!0}}]);