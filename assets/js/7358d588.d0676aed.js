"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[67243],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,h=m["".concat(s,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},43030:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:20,title:"Part 2 - Filter Results"},l=void 0,i={unversionedId:"queryworkers/c8ql/got-tutorial/filter-results",id:"queryworkers/c8ql/got-tutorial/filter-results",title:"Part 2 - Filter Results",description:"This section explains how to query for documents based on certain conditions.",source:"@site/docs/queryworkers/c8ql/got-tutorial/filter-results.md",sourceDirName:"queryworkers/c8ql/got-tutorial",slug:"/queryworkers/c8ql/got-tutorial/filter-results",permalink:"/docs/queryworkers/c8ql/got-tutorial/filter-results",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/queryworkers/c8ql/got-tutorial/filter-results.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20,title:"Part 2 - Filter Results"},sidebar:"defaultSidebar",previous:{title:"Part 1 - Basic Document Tasks",permalink:"/docs/queryworkers/c8ql/got-tutorial/c8ql-crud"},next:{title:"Part 3 - Sort and Limit",permalink:"/docs/queryworkers/c8ql/got-tutorial/sort-and-limit"}},s={},u=[{value:"Filter by Equality Condition",id:"filter-by-equality-condition",level:3},{value:"Filter by Range Conditions",id:"filter-by-range-conditions",level:3},{value:"Filter by Multiple Conditions",id:"filter-by-multiple-conditions",level:3},{value:"Filter Alternative Conditions",id:"filter-alternative-conditions",level:3},{value:"Next Steps",id:"next-steps",level:2}],c={toc:u};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This section explains how to query for documents based on certain conditions."),(0,a.kt)("p",null,"So far, we either looked up a single document, or returned the entire character collection. For the lookup, we used the ",(0,a.kt)("inlineCode",{parentName:"p"},"DOCUMENT()")," function, which means we can only find documents by their key or ID."),(0,a.kt)("p",null,"To find documents that fulfill certain criteria more complex than key equality, there is the ",(0,a.kt)("inlineCode",{parentName:"p"},"FILTER")," operation in C8QL, which enables us to formulate arbitrary conditions for documents to match."),(0,a.kt)("p",null,"For more information, refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/filter"},"FILTER")," operation documentation."),(0,a.kt)("p",null,"In the previous section, we provided step-by-step instructions for every query. In this section, we provide code blocks that you can experiment with. You can paste them in your query editor as-is, but we encourage you to experiment with them. You will learn more if you play around and try your own queries based on our examples."),(0,a.kt)("h3",{id:"filter-by-equality-condition"},"Filter by Equality Condition"),(0,a.kt)("p",null,"The first condition we will explore is equality. You can write a query to return documents that exactly match criteria."),(0,a.kt)("p",null,'In the example below, the filter condition reads like: "the attribute ',(0,a.kt)("em",{parentName:"p"},"name")," of a character document must be equal to the string ",(0,a.kt)("em",{parentName:"p"},"Ned"),'". If the condition applies, then the character document gets returned.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'FOR c IN Characters\n    FILTER c.name == "Ned"\n    RETURN c\n')),(0,a.kt)("p",null,"This works with any attribute. This example returns all characters with the surname Stark:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'FOR c IN Characters\n    FILTER c.surname == "Stark"\n    RETURN c\n')),(0,a.kt)("p",null,"There are six characters that meet that criteria, which is a lot of lines to scroll through. You can shoose to return only part of the document, such as the ",(0,a.kt)("inlineCode",{parentName:"p"},"name")," attribute."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'FOR c IN Characters\n    FILTER c.surname == "Stark"\n    RETURN c.name\n')),(0,a.kt)("p",null,"This query returns a much more manageable list:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'[\n    "Catelyn",\n    "Sansa",\n    "Arya",\n    "Robb",\n    "Bran",\n    "Ned"\n]\n')),(0,a.kt)("p",null,"For fun, run the above query again, but return ",(0,a.kt)("inlineCode",{parentName:"p"},"{ name: c.name, age: c.age }")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"c.name"),"."),(0,a.kt)("h3",{id:"filter-by-range-conditions"},"Filter by Range Conditions"),(0,a.kt)("p",null,"You can also search for documents with attributes that fall within a range of values. For example, you could ask for all older characters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR c IN Characters\n    FILTER c.age >= 13\n    RETURN c.name\n")),(0,a.kt)("p",null,"The operator ",(0,a.kt)("inlineCode",{parentName:"p"},">=")," stands for ",(0,a.kt)("em",{parentName:"p"},"greater-or-equal"),", so every character of age 13 or older is returned (only their name in the example). That query returns a list similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  "Joffrey",\n  "Tyrion",\n  "Samwell",\n  "Ned",\n  "Catelyn",\n  "Cersei",\n  "Jon",\n  "Sansa",\n  "Brienne",\n  "Theon",\n  "Davos",\n  "Jaime",\n  "Daenerys"\n]\n')),(0,a.kt)("p",null,"You can return names and age of all characters younger than 13 by changing the operator to ",(0,a.kt)("em",{parentName:"p"},"less-than")," and using the object syntax to define a subset of attributes to return:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR c IN Characters\n    FILTER c.age < 13\n    RETURN { name: c.name, age: c.age }\n")),(0,a.kt)("p",null,"That query result looks similar to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "name": "Tommen", "age": null },\n  { "name": "Arya", "age": 11 },\n  { "name": "Roose", "age": null },\n  ...\n]\n')),(0,a.kt)("p",null,"You might notice that it returns name and age of 30 characters, most with an age of ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," is the fallback value if an attribute is requested by the query, but no such attribute exists in the document."),(0,a.kt)("p",null,"Because ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," compares to numbers as lower, it accidentally fulfills the age criterion ",(0,a.kt)("inlineCode",{parentName:"p"},"c.age < 13")," (",(0,a.kt)("inlineCode",{parentName:"p"},"null < 13"),"). For more information, refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/type-and-value-order"},"Type and Value Order"),"."),(0,a.kt)("h3",{id:"filter-by-multiple-conditions"},"Filter by Multiple Conditions"),(0,a.kt)("p",null,"Those null values are really messing up the query. You can filter out documents without an age attribute if you add a second criterion:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR c IN Characters\n    FILTER c.age < 13\n    FILTER c.age != null\n    RETURN { name: c.name, age: c.age }\n")),(0,a.kt)("p",null,"The results of this query do not contain any null ages."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "name": "Arya", "age": 11 },\n  { "name": "Bran", "age": 10 }\n]\n')),(0,a.kt)("p",null,"You can get the same results with a boolean ",(0,a.kt)("inlineCode",{parentName:"p"},"AND")," operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR c IN Characters\n    FILTER c.age < 13 AND c.age != null\n    RETURN { name: c.name, age: c.age }\n")),(0,a.kt)("p",null,"Or you could write it as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"FOR c IN Characters\n    FILTER c.age < 13 AND c.age > null\n    RETURN { name: c.name, age: c.age }\n")),(0,a.kt)("p",null,"Try this out! Maybe write a query with a lower age limit and an upper age limit?"),(0,a.kt)("h3",{id:"filter-alternative-conditions"},"Filter Alternative Conditions"),(0,a.kt)("p",null,"If you want documents to fulfill one or another condition, possibly for different attributes as well, use ",(0,a.kt)("inlineCode",{parentName:"p"},"OR"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'FOR c IN Characters\n    FILTER c.name == "Jon" OR c.name == "Joffrey"\n    RETURN { name: c.name, surname: c.surname }\n')),(0,a.kt)("p",null,"This returns characters named Jon or named Joffrey."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  { "name": "Joffrey", "surname": "Baratheon" },\n  { "name": "Jon", "surname": "Snow" }\n]\n')),(0,a.kt)("p",null,"For more informations, refer to ",(0,a.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/operations/filter"},"Filter operations"),"."),(0,a.kt)("h2",{id:"next-steps"},"Next Steps"),(0,a.kt)("p",null,"Great job! You can now query your collection for documents based on conditions. When you're ready, continue the tutorial in ",(0,a.kt)("a",{parentName:"p",href:"/docs/queryworkers/c8ql/got-tutorial/sort-and-limit"},"Part 3 - Sort and Limit"),"."))}p.isMDXComponent=!0}}]);