"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[14660],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),l=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},u=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=n,h=m["".concat(i,".").concat(d)]||m[d]||c[d]||o;return r?a.createElement(h,p(p({ref:t},u),{},{components:r})):a.createElement(h,p({ref:t},u))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,p=new Array(o);p[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,p[1]=s;for(var l=2;l<o;l++)p[l]=r[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},59992:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=r(87462),n=(r(67294),r(3905));const o={title:"passThrough (Source Mapper)"},p=void 0,s={unversionedId:"cep/query-guide/functions/sourcemapper/passThrough",id:"cep/query-guide/functions/sourcemapper/passThrough",title:"passThrough (Source Mapper)",description:"This input mapper allows you to convert protobuf messages into Events.",source:"@site/docs/cep/query-guide/functions/sourcemapper/passThrough.md",sourceDirName:"cep/query-guide/functions/sourcemapper",slug:"/cep/query-guide/functions/sourcemapper/passThrough",permalink:"/docs/cep/query-guide/functions/sourcemapper/passThrough",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/sourcemapper/passThrough.md",tags:[],version:"current",frontMatter:{title:"passThrough (Source Mapper)"},sidebar:"defaultSidebar",previous:{title:"keyvalue (Source Mapper)",permalink:"/docs/cep/query-guide/functions/sourcemapper/keyvalue"},next:{title:"text (Source Mapper)",permalink:"/docs/cep/query-guide/functions/sourcemapper/text"}},i={},l=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2}],u={toc:l};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This input mapper allows you to convert protobuf messages into Events.\nTo work with this input mapper you have to add auto-generated protobuf\nclasses to the project classpath. When you use this input mapper, you\ncan either define stream attributes as the same names as the protobuf\nmessage attributes or you can use custom mapping to map stream\ndefinition attributes with the protobuf attributes.\nWhen you use this mapper with ",(0,n.kt)("inlineCode",{parentName:"p"},"streamprocessor-io-grpc")," you don't have to\nprovide the protobuf message class in the ",(0,n.kt)("inlineCode",{parentName:"p"},"class")," parameter."),(0,n.kt)("p",null,"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (map.type="protobuf", class="<STRING>")\n')),(0,n.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,n.kt)("th",{parentName:"tr",align:null},"Optional"),(0,n.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"class"),(0,n.kt)("td",{parentName:"tr",align:null},"This specifies the class name of the protobuf message class, If sink type is grpc then it's not necessary to provide this field."),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")))),(0,n.kt)("h2",{id:"example-1"},"Example 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='stream', topic='test01', map.type='protobuf', map.class='io.streamprocessor.extension.map.protobuf.autogenerated.Request') (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double);\n")),(0,n.kt)("p",null,"This will convert the\n",(0,n.kt)("inlineCode",{parentName:"p"},"io.streamprocessor.extension.map.protobuf.autogenerated.Request")," protobuf\nmessages into stream processor events."),(0,n.kt)("h2",{id:"example-2"},"Example 2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='grpc', receiver.url = 'grpc://localhost:8084/org.gdn.grpc.test.MyService/process', map.type='protobuf') (stringValue string, intValue int,longValue long,booleanValue bool,floatValue float,doubleValue double);\n")),(0,n.kt)("p",null,"This will convert the protobuf messages that are received to this source\ninto stream processor events. Since this is ",(0,n.kt)("inlineCode",{parentName:"p"},"grpc")," source we don't need to\nprovide the ",(0,n.kt)("inlineCode",{parentName:"p"},"class")," parameter"),(0,n.kt)("h2",{id:"example-3"},"Example 3"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='grpc', receiver.url = 'grpc://localhost:8084/org.gdn.grpc.test.MyService/process', map.type='protobuf', map.attributes=\"a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue',' e = floatValue', f ='doubleValue'\") (a string ,c long,b int, d bool,e float,f double);\n")),(0,n.kt)("p",null,"This will convert the protobuf messages that are received to this source\ninto stream processor events. since there's a mapping available for the stream,\nprotobuf message object will be map like this, - ",(0,n.kt)("inlineCode",{parentName:"p"},"stringValue")," of the\nprotobuf message will be assign to the ",(0,n.kt)("inlineCode",{parentName:"p"},"a")," attribute of the stream -\n",(0,n.kt)("inlineCode",{parentName:"p"},"intValue")," of the protobuf message will be assign to the ",(0,n.kt)("inlineCode",{parentName:"p"},"b")," attribute\nof the stream - ",(0,n.kt)("inlineCode",{parentName:"p"},"longValue")," of the protobuf message will be assign to\nthe ",(0,n.kt)("inlineCode",{parentName:"p"},"c")," attribute of the stream - ",(0,n.kt)("inlineCode",{parentName:"p"},"booleanValue")," of the protobuf message\nwill be assign to the ",(0,n.kt)("inlineCode",{parentName:"p"},"d")," attribute of the stream - ",(0,n.kt)("inlineCode",{parentName:"p"},"floatValue")," of the\nprotobuf message will be assign to the ",(0,n.kt)("inlineCode",{parentName:"p"},"e")," attribute of the stream -\n",(0,n.kt)("inlineCode",{parentName:"p"},"doubleValue")," of the protobuf message will be assign to the ",(0,n.kt)("inlineCode",{parentName:"p"},"f"),"\nattribute of the stream"),(0,n.kt)("h2",{id:"example-4"},"Example 4"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='stream', topic='test01', map.type='protobuf', map.class='io.streamprocessor.extension.map.protobuf.autogenerated.RequestWithList) (stringValue string ,intValue int,stringList object, intList object););\n")),(0,n.kt)("p",null,"This will convert the\n",(0,n.kt)("inlineCode",{parentName:"p"},"io.streamprocessor.extension.map.protobuf.autogenerated.RequestWithList"),"\nprotobuf messages that are received to this source into stream processor events.\nIf you want to map data types other than the scalar data types, you have\nto use ",(0,n.kt)("inlineCode",{parentName:"p"},"object")," as the data type as shown in above(",(0,n.kt)("inlineCode",{parentName:"p"},"stringList object"),")"))}c.isMDXComponent=!0}}]);