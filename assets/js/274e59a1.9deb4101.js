"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3725],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),o=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),s=o(n),m=a,g=s["".concat(p,".").concat(m)]||s[m]||c[m]||i;return n?r.createElement(g,l(l({ref:t},d),{},{components:n})):r.createElement(g,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=s;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var o=2;o<i;o++)l[o]=n[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},47080:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>o});var r=n(87462),a=(n(67294),n(3905));const i={title:"find (Function)"},l=void 0,u={unversionedId:"cep/query-guide/functions/regex/find",id:"cep/query-guide/functions/regex/find",title:"find (Function)",description:"Finds the subsequence that matches the given regex pattern.",source:"@site/docs/cep/query-guide/functions/regex/find.md",sourceDirName:"cep/query-guide/functions/regex",slug:"/cep/query-guide/functions/regex/find",permalink:"/docs/cep/query-guide/functions/regex/find",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/query-guide/functions/regex/find.md",tags:[],version:"current",frontMatter:{title:"find (Function)"},sidebar:"defaultSidebar",previous:{title:"query (Stream Processor)",permalink:"/docs/cep/query-guide/functions/rdbms/query"},next:{title:"group (Function)",permalink:"/docs/cep/query-guide/functions/regex/group"}},p={},o=[{value:"Syntax",id:"syntax",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2}],d={toc:o};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Finds the subsequence that matches the given regex pattern."),(0,a.kt)("h2",{id:"syntax"},"Syntax"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"<BOOL> regex:find(<STRING> regex, <STRING> input.sequence)\n<BOOL> regex:find(<STRING> regex, <STRING> input.sequence, <INT> starting.index)\n")),(0,a.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,a.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,a.kt)("th",{parentName:"tr",align:null},"Optional"),(0,a.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"regex"),(0,a.kt)("td",{parentName:"tr",align:null},"A regular expression that is matched to a sequence in order to find the subsequence of the same. For example, ",(0,a.kt)("inlineCode",{parentName:"td"},"\\d\\d(.*)gdn"),"."),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"input.sequence"),(0,a.kt)("td",{parentName:"tr",align:null},"The input sequence to be matched with the regular expression. For example, ",(0,a.kt)("inlineCode",{parentName:"td"},"21 products are produced by gdn"),"."),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"STRING"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"starting.index"),(0,a.kt)("td",{parentName:"tr",align:null},"The starting index of the input sequence from where the input sequence is matched with the given regex pattern.For example, ",(0,a.kt)("inlineCode",{parentName:"td"},"10"),"."),(0,a.kt)("td",{parentName:"tr",align:null},"0"),(0,a.kt)("td",{parentName:"tr",align:null},"INT"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,a.kt)("h2",{id:"example-1"},"Example 1"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    regex:find('\\d\\d(.*)gdn', '21 products are produced by gdn currently')\n")),(0,a.kt)("p",null,"This method attempts to find the subsequence of the input.sequence that matches the regex pattern, ",(0,a.kt)("inlineCode",{parentName:"p"},"\\d\\d(.*)gdn"),". It returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," as a subsequence exists."),(0,a.kt)("h2",{id:"example-2"},"Example 2"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"    regex:find('\\d\\d(.*)gdn', '21 products are produced by gdn.', 4)\n")),(0,a.kt)("p",null,"This method attempts to find the subsequence of the input.sequence that matches the regex pattern, ",(0,a.kt)("inlineCode",{parentName:"p"},"\\d\\d(.*)gdn")," starting from index ",(0,a.kt)("inlineCode",{parentName:"p"},"4"),". It returns ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," as subsequence does not exists."))}c.isMDXComponent=!0}}]);