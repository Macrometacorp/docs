"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[34157],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>c});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var o=a.createContext({}),p=function(e){var t=a.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),c=n,g=d["".concat(o,".").concat(c)]||d[c]||m[c]||l;return r?a.createElement(g,i(i({ref:t},u),{},{components:r})):a.createElement(g,i({ref:t},u))}));function c(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var p=2;p<l;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},17708:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=r(87462),n=(r(67294),r(3905));const l={title:"grpc-service (Source)"},i=void 0,s={unversionedId:"cep/source/grpc-service",id:"cep/source/grpc-service",title:"grpc-service (Source)",description:"This extension implements a grpc server for receiving and responding to",source:"@site/docs/cep/source/grpc-service.md",sourceDirName:"cep/source",slug:"/cep/source/grpc-service",permalink:"/docs/cep/source/grpc-service",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/main/docs/cep/source/grpc-service.md",tags:[],version:"current",frontMatter:{title:"grpc-service (Source)"},sidebar:"defaultSidebar",previous:{title:"grpc-call-response (Source)",permalink:"/docs/cep/source/grpc-call-response"},next:{title:"grpc (Source)",permalink:"/docs/cep/source/grpc"}},o={},p=[{value:"Query Parameters",id:"query-parameters",level:2},{value:"Example 1",id:"example-1",level:2},{value:"Example 2",id:"example-2",level:2},{value:"Example 3",id:"example-3",level:2},{value:"Example 4",id:"example-4",level:2}],u={toc:p};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This extension implements a grpc server for receiving and responding to\nrequests. During initialization time a grpc server is started on the\nuser specified port exposing the required service as given in the url.\nThis source also has a default mode and a user defined grpc service\nmode. By default this uses EventService.\nIn the default mode this will use the EventService process method. If we\nwant to use our custom gRPC services, we have to pack auto-generated\ngRPC service classes and protobuf classes into a jar file and add it\ninto the project classpath (or to the ",(0,n.kt)("inlineCode",{parentName:"p"},"jars")," folder in the\n",(0,n.kt)("inlineCode",{parentName:"p"},"streamprocessor-tooling")," folder if we use it with ",(0,n.kt)("inlineCode",{parentName:"p"},"streamprocessor-tooling"),").\nThis accepts grpc message class Event as defined in the EventService\nproto. This uses GrpcServiceResponse sink to send reponses back in the\nsame Event message format."),(0,n.kt)("p",null,"Syntax"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'CREATE SOURCE <NAME> WITH (type="grpc-service", map.type="<STRING>", receiver.url="<STRING>", max.inbound.message.size="<INT>", max.inbound.metadata.size="<INT>", service.timeout="<INT>", server.shutdown.waiting.time="<LONG>", truststore.file="<STRING>", truststore.password="<STRING>", truststore.algorithm="<STRING>", tls.store.type="<STRING>", keystore.file="<STRING>", keystore.password="<STRING>", keystore.algorithm="<STRING>", enable.ssl="<BOOL>", mutual.auth.enabled="<BOOL>", threadpool.size="<INT>", threadpool.buffer.size="<INT>")\n')),(0,n.kt)("h2",{id:"query-parameters"},"Query Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,n.kt)("th",{parentName:"tr",align:null},"Optional"),(0,n.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"receiver.url"),(0,n.kt)("td",{parentName:"tr",align:null},"The url which can be used by a client to access the grpc server in this extension. This url should consist the host hostPort, port, fully qualified service name, method name in the following format. ",(0,n.kt)("inlineCode",{parentName:"td"},"grpc://0.0.0.0:9763/<serviceName>/<methodName>")," For example: grpc://0.0.0.0:9763/org.gdn.grpc.EventService/consume"),(0,n.kt)("td",{parentName:"tr",align:null}),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"No"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"max.inbound.message.size"),(0,n.kt)("td",{parentName:"tr",align:null},"Sets the maximum message size in bytes allowed to be received on the server."),(0,n.kt)("td",{parentName:"tr",align:null},"4194304"),(0,n.kt)("td",{parentName:"tr",align:null},"INT"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"max.inbound.metadata.size"),(0,n.kt)("td",{parentName:"tr",align:null},"Sets the maximum size of metadata in bytes allowed to be received."),(0,n.kt)("td",{parentName:"tr",align:null},"8192"),(0,n.kt)("td",{parentName:"tr",align:null},"INT"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"service.timeout"),(0,n.kt)("td",{parentName:"tr",align:null},"The period of time in milliseconds to wait for stream processor to respond to a request received. After this time period of receiving a request it will be closed with an error message."),(0,n.kt)("td",{parentName:"tr",align:null},"10000"),(0,n.kt)("td",{parentName:"tr",align:null},"INT"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"server.shutdown.waiting.time"),(0,n.kt)("td",{parentName:"tr",align:null},"The time in seconds to wait for the server to shutdown, giving up if the timeout is reached."),(0,n.kt)("td",{parentName:"tr",align:null},"5"),(0,n.kt)("td",{parentName:"tr",align:null},"LONG"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"truststore.file"),(0,n.kt)("td",{parentName:"tr",align:null},"the file path of truststore. If this is provided then server authentication is enabled"),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"truststore.password"),(0,n.kt)("td",{parentName:"tr",align:null},"the password of truststore. If this is provided then the integrity of the keystore is checked"),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"truststore.algorithm"),(0,n.kt)("td",{parentName:"tr",align:null},"the encryption algorithm to be used for server authentication"),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"tls.store.type"),(0,n.kt)("td",{parentName:"tr",align:null},"TLS store type"),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"keystore.file"),(0,n.kt)("td",{parentName:"tr",align:null},"the file path of keystore. If this is provided then client authentication is enabled"),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"keystore.password"),(0,n.kt)("td",{parentName:"tr",align:null},"the password of keystore"),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"keystore.algorithm"),(0,n.kt)("td",{parentName:"tr",align:null},"the encryption algorithm to be used for client authentication"),(0,n.kt)("td",{parentName:"tr",align:null},"-"),(0,n.kt)("td",{parentName:"tr",align:null},"STRING"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"enable.ssl"),(0,n.kt)("td",{parentName:"tr",align:null},"to enable ssl. If set to true and keystore.file is not given then it will be set to default carbon jks by default"),(0,n.kt)("td",{parentName:"tr",align:null},"FALSE"),(0,n.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"mutual.auth.enabled"),(0,n.kt)("td",{parentName:"tr",align:null},"to enable mutual authentication. If set to true and truststore.file or keystore.file is not given then it will be set to default carbon jks by default"),(0,n.kt)("td",{parentName:"tr",align:null},"FALSE"),(0,n.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"threadpool.size"),(0,n.kt)("td",{parentName:"tr",align:null},"Sets the maximum size of threadpool dedicated to serve requests at the gRPC server"),(0,n.kt)("td",{parentName:"tr",align:null},"100"),(0,n.kt)("td",{parentName:"tr",align:null},"INT"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"threadpool.buffer.size"),(0,n.kt)("td",{parentName:"tr",align:null},"Sets the maximum size of threadpool buffer server"),(0,n.kt)("td",{parentName:"tr",align:null},"100"),(0,n.kt)("td",{parentName:"tr",align:null},"INT"),(0,n.kt)("td",{parentName:"tr",align:null},"Yes"),(0,n.kt)("td",{parentName:"tr",align:null},"No")))),(0,n.kt)("p",null,"System Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Name"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,n.kt)("th",{parentName:"tr",align:null},"Possible Parameters"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"keyStoreFile"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the key store file with the path"),(0,n.kt)("td",{parentName:"tr",align:null},"\\${carbon.home}/resources/security/gdncarbon.jks"),(0,n.kt)("td",{parentName:"tr",align:null},"valid path for a key store file")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"keyStorePassword"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the password used with key store file"),(0,n.kt)("td",{parentName:"tr",align:null},"gdncarbon"),(0,n.kt)("td",{parentName:"tr",align:null},"valid password for the key store file")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"keyStoreAlgorithm"),(0,n.kt)("td",{parentName:"tr",align:null},"The encryption algorithm to be used for client authentication"),(0,n.kt)("td",{parentName:"tr",align:null},"SunX509"),(0,n.kt)("td",{parentName:"tr",align:null},"-")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"trustStoreFile"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the trust store file with the path"),(0,n.kt)("td",{parentName:"tr",align:null},"\\${carbon.home}/resources/security/client-truststore.jks"),(0,n.kt)("td",{parentName:"tr",align:null},"-")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"trustStorePassword"),(0,n.kt)("td",{parentName:"tr",align:null},"This is the password used with trust store file"),(0,n.kt)("td",{parentName:"tr",align:null},"gdncarbon"),(0,n.kt)("td",{parentName:"tr",align:null},"valid password for the trust store file")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"trustStoreAlgorithm"),(0,n.kt)("td",{parentName:"tr",align:null},"the encryption algorithm to be used for server authentication"),(0,n.kt)("td",{parentName:"tr",align:null},"SunX509"),(0,n.kt)("td",{parentName:"tr",align:null},"-")))),(0,n.kt)("h2",{id:"example-1"},"Example 1"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='grpc-service', receiver.url='grpc://localhost:8888/org.gdn.grpc.EventService/process', source.id='1', map.type='json', map.attributes=\"messageId='trp:messageId', message='message'\") (messageId String, message String);\n")),(0,n.kt)("p",null,"Here a grpc server will be started at port 8888. The process method of\nEventService will be exposed for clients. source.id is set as 1. So a\ngrpc-service-response sink with source.id = 1 will send responses back\nfor requests received to this source. Note that it is required to\nspecify the transport property messageId since we need to correlate the\nrequest message with the response."),(0,n.kt)("h2",{id:"example-2"},"Example 2"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SINK BarStream WITH (type='grpc-service-response', source.id='1', map.type='json') (messageId String, message String);\n\nCREATE SOURCE FooStream WITH (type='grpc-service', receiver.url='grpc://134.23.43.35:8080/org.gdn.grpc.EventService/process', source.id='1', map.type='json', map.attributes=\"messageId='trp:messageId', message='message'\") (messageId String, message String);\n\ninsert into BarStream\nselect *\nfrom FooStream;\n")),(0,n.kt)("p",null,"The grpc requests are received through the grpc-service sink. Each\nreceived event is sent back through grpc-service-source. This is just a\npassthrough through Stream App as we are selecting everything from FooStream\nand inserting into BarStream."),(0,n.kt)("h2",{id:"example-3"},"Example 3"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SOURCE BarStream WITH (type='grpc-service', source.id='1', receiver.url='grpc://locanhost:8888/org.gdn.grpc.EventService/consume', map.type='json', map.attributes=\"name='trp:name', age='trp:age', message='message'\") (message String, name String, age int);\n")),(0,n.kt)("p",null,"Here we are getting headers sent with the request as transport\nproperties and injecting them into the stream. With each request a\nheader will be sent in MetaData in the following format: ",(0,n.kt)("inlineCode",{parentName:"p"},"Name:John"),",\n",(0,n.kt)("inlineCode",{parentName:"p"},"Age:23")),(0,n.kt)("h2",{id:"example-4"},"Example 4"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"CREATE SINK BarStream WITH (type='grpc-service-response', source.id='1', message.id='{{messageId}}', map.type='protobuf', map.payload=\"stringValue='a',intValue='b',longValue='c',booleanValue='d',floatValue = 'e', doubleValue ='f'\") (a string,messageId string, b int,c long,d bool,e float,f double);\n\nCREATE SOURCE FooStream WITH (type='grpc-service', receiver.url='grpc://134.23.43.35:8888/org.gdn.grpc.test.MyService/process', source.id='1', map.type='protobuf', map.attributes=\"messageId='trp:message.id', a = 'stringValue', b = 'intValue', c = 'longValue',d = 'booleanValue', e = 'floatValue', f ='doubleValue'\") (a string,messageId string, b int,c long,d bool,e float,f double);\n\ninsert into BarStream\nselect *\nfrom FooStream;\n")),(0,n.kt)("p",null,"Here a grpc server will be started at port 8888. The process method of\nthe MyService will be exposed to the clients. ",(0,n.kt)("inlineCode",{parentName:"p"},"source.id")," is set as 1.\nSo a grpc-service-response sink with source.id = 1 will send responses\nback for requests received to this source. Note that it is required to\nspecify the transport property messageId since we need to correlate the\nrequest message with the response and also we should map stream\nattributes with correct protobuf message attributes even they define\nusing the same name as protobuf message attributes."))}m.isMDXComponent=!0}}]);