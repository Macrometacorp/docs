{  
    "host": "api-gdn.paas.macrometa.io",
    "basePath": "/",
    "schemes": [
      "https"
    ],
    "servers": [
      {
        "url": "api-gdn.paas.macrometa.io",
        "description": "Production server"
      }
    ],
    "securityDefinitions": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "security": [
      {
        "ApiKeyAuth": []
      }
    ],
    "definitions": {
      "example_operation_success_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "result": {
            "description": "Return true flag if operation is successfully completed.\n\n",
            "format": "",
            "type": "boolean",
            "example": true
          }
        }
      },
      "error_example_rc_400": {
        "properties": {
          "code": {
            "description": "The response code for the error.\n\n",
            "format": "",
            "type": "integer",
            "example": 400
          },
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "format": "",
            "type": "string"
          },
          "errorNum": {
            "description": "Error number returned from the database.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "error_example_rc_401": {
        "properties": {
          "code": {
            "description": "The response code for the error.\n\n",
            "format": "",
            "type": "integer",
            "example": 401
          },
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "format": "",
            "type": "string"
          },
          "errorNum": {
            "description": "Error number returned from the database.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "error_example_rc_403": {
        "properties": {
          "code": {
            "description": "The response code for the error.\n\n",
            "format": "",
            "type": "integer",
            "example": 403
          },
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "format": "",
            "type": "string"
          },
          "errorNum": {
            "description": "Error number returned from the database.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "error_example_rc_404": {
        "properties": {
          "code": {
            "description": "The response code for the error.\n\n",
            "format": "",
            "type": "integer",
            "example": 404
          },
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "format": "",
            "type": "string"
          },
          "errorNum": {
            "description": "Error number returned from the database.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "error_example_rc_409": {
        "properties": {
          "code": {
            "description": "The response code for the error.\n\n",
            "format": "",
            "type": "integer",
            "example": 409
          },
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "format": "",
            "type": "string"
          },
          "errorNum": {
            "description": "Error number returned from the database.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "error_example_rc_429": {
        "properties": {
          "code": {
            "description": "The response code for the error.\n\n",
            "format": "",
            "type": "integer",
            "example": 429
          },
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "format": "",
            "type": "string"
          },
          "errorNum": {
            "description": "Error number returned from the database.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_key_http_examples_rc_200": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "description": "An array of api keys with details as keyid, user name and tenant name.\n\n",
            "items": {
              "$ref": "#/definitions/apikey200_help"
            },
            "type": "array"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "apikey200_help": {
        "properties": {
          "keyid": {
            "description": "Keyid of the api key.\n\n",
            "format": "",
            "type": "string"
          },
          "user": {
            "description": "Name of the user.\n\n",
            "format": "",
            "type": "string"
          },
          "tenant": {
            "description": "Name of the tenant.\n\n",
            "format": "",
            "type": "string"
          }
        }
      },
      "api_key_dbname_examples_rc_200": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_key_http_examples_rc_200_2": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_key_http_examples_rc_200_billing": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "description": "Billing tag with billing access level present.",
            "items": {
              "properties": {
                "billing": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_key_http_examples_rc_201": {
        "properties": {
          "key": {
            "description": "The generated key.\n\n",
            "format": "",
            "type": "string"
          },
          "keyid": {
            "description": "keyid of the key.\n\n",
            "format": "",
            "type": "string"
          },
          "tenant": {
            "description": "Name of the tenant.\n\n",
            "format": "",
            "type": "string"
          },
          "user": {
            "description": "Name of the user.\n\n",
            "format": "",
            "type": "string"
          },
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "Generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 201
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_key_http_examples_rc_200_1": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "items": {
              "properties": {
                "_system": {
                  "description": "Access level of system is described.\n\n",
                  "format": "",
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_key_http_examples_rc_202": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 202
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "authentication_examples_rc_200": {
        "properties": {
          "jwt": {
            "description": "It shows the generated jwt authentication token.\n\n",
            "format": "",
            "type": "string"
          },
          "tenant": {
            "description": "The name of the tenant.\n\n",
            "format": "",
            "type": "string"
          },
          "username": {
            "description": "The username of the tenant.\n\n",
            "format": "",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "kv_examples_rc_200": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "name": {
            "description": "It shows name of the collection.\n\n",
            "format": "",
            "type": "string"
          },
          "count": {
            "description": "It gives kv count.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "kv_collection_examples_rc_200": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "name": {
            "description": "It shows name of the collection.\n\n",
            "format": "",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "kv_key_examples_rc_200": {
        "properties": {
          "_id": {
            "description": "ID of the collection.\n\n",
            "format": "",
            "type": "string"
          },
          "_key": {
            "description": "_key details of collection.\n\n",
            "format": "",
            "type": "string"
          },
          "_rev": {
            "description": "_rev details of collection.\n\n",
            "format": "",
            "type": "string"
          },
          "expireAt": {
            "description": "Expiration details of collection.\n\n",
            "format": "",
            "type": "integer"
          },
          "value": {
            "description": "Value of the collection.\n\n",
            "format": "",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "kv_key_examples_rc_202": {
        "properties": {
          "_id": {
            "description": "ID of the collection.\n\n",
            "format": "",
            "type": "string"
          },
          "_key": {
            "description": "_key details of collection.\n\n",
            "format": "",
            "type": "string"
          },
          "_rev": {
            "description": "_rev details of collection.\n\n",
            "format": "",
            "type": "string"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "kv_get_values_examples_rc_200": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "description": "An array of collection values. If there are no results, the array is returned as empty.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "kv_collection_post_body_example": {
        "properties": {
          "stream": {
            "description": "Flag for on-demand stream collection\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          }
        }
      },
      "plan_201_billing": {
        "properties": {
          "active": {
            "description": "Active status of the plan.",
            "type": "boolean"
          },
          "attribution": {
            "description": "Attribution name of the plan.",
            "type": "string"
          },
          "demo": {
            "description": "Flag about demo status of the plan.",
            "type": "boolean"
          },
          "description": {
            "description": "Information of the plan.",
            "type": "string"
          },
          "featureGates": {
            "description": "List of featureGates associated with plan.",
            "items": {
              "type": "string"
            }
          },
          "isBundle": {
            "type": "boolean"
          },
          "label": {
            "description": "Label of the plan.",
            "type": "string"
          },
          "metadata": {
            "description": "Metadata about the plan.",
            "properties": {}
          },
          "metrics": {
            "description": "Metric values displayed along with name.",
            "items": {
              "properties": {
                "name": {
                  "type": "string"
                },
                "value": {
                  "type": "string"
                },
                "metricType": {
                  "type": "string"
                }
              }
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the plan.",
            "type": "string"
          },
          "planID": {
            "description": "ID associated with the plan.",
            "type": "string"
          },
          "pricing": {
            "description": "Pricing details of the plan.",
            "type": "string"
          }
        }
      },
      "datacenter_rc_200_array": {
        "items": {
          "properties": {
            "tenant": {
              "description": "Tenant name",
              "type": "string"
            },
            "dcInfo": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/datacenter_rc_200"
              }
            }
          }
        },
        "type": "array"
      },
      "datacenter_rc_200": {
        "properties": {
          "_id": {
            "description": "ID of the datacenter.",
            "type": "string"
          },
          "_key": {
            "description": "_key associated with datacenter.",
            "type": "string"
          },
          "_rev": {
            "description": "_rev value of the datacenter.",
            "type": "string"
          },
          "host": {
            "description": "Datacenter cluster IP.",
            "type": "string"
          },
          "local": {
            "description": "Flag about datacenter is local or not.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the datacenter.",
            "type": "string"
          },
          "spot_region": {
            "type": "boolean"
          },
          "status": {
            "type": "integer"
          },
          "tags": {
            "description": "Tag values associated with datacenter such as URL.",
            "properties": {
              "api": {
                "type": "string"
              },
              "role": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "locationInfo": {
            "description": "Complete information about the location of datacenter.",
            "properties": {
              "_id": {
                "type": "string"
              },
              "_key": {
                "type": "string"
              },
              "_rev": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "countrycode": {
                "type": "string"
              },
              "countryname": {
                "type": "string"
              },
              "latitude": {
                "type": "string"
              },
              "longitude": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "get_datacenter_response_200": {
        "properties": {
          "_key": {
            "description": "_key associated with datacenter.",
            "type": "string"
          },
          "host": {
            "description": "Datacenter cluster IP.",
            "type": "string"
          },
          "local": {
            "description": "Flag about datacenter is local or not.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the datacenter.",
            "type": "string"
          },
          "spot_region": {
            "type": "boolean"
          },
          "status": {
            "type": "integer"
          },
          "tags": {
            "description": "Tag values associated with datacenter such as URL.",
            "properties": {
              "api": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          },
          "locationInfo": {
            "description": "Complete information about the location of datacenter.",
            "properties": {
              "city": {
                "type": "string"
              },
              "countrycode": {
                "type": "string"
              },
              "countryname": {
                "type": "string"
              },
              "latitude": {
                "type": "string"
              },
              "longitude": {
                "type": "string"
              },
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "tenant_limits_value": {
        "properties": {
          "database": {
            "$ref": "#/definitions/database_limits_example"
          },
          "streamsLocal": {
            "$ref": "#/definitions/streams_limits_example"
          },
          "streamsGlobal": {
            "$ref": "#/definitions/streams_limits_example"
          },
          "compute": {
            "$ref": "#/definitions/compute_limits_example"
          },
          "eventhub": {
            "$ref": "#/definitions/eventhub_limits_example"
          }
        }
      },
      "database_limits_example": {
        "properties": {
          "maxDocumentSize": {
            "description": "The maximum document size in bytes.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 409600
          },
          "maxDocumentsReturnedByQuery": {
            "description": "The maximum documents returned by a query, or 0 to disable this limit.\nThe page size for the query will be equal to this value (if set), preventing c8db from creating a persistent cursor for queries.\n",
            "format": "int64",
            "type": "integer",
            "example": 1000
          },
          "maxQueryExecutionTimeInMs": {
            "description": "The maximum time allowed for a query to complete processing.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10000
          },
          "maxQueryMemoryBytes": {
            "description": "The maximum bytes of memory allowed to be used by a query during processing.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 268435456
          },
          "maxGeoFabricsPerTenant": {
            "description": "The maximum number of fabric a tenant can create. Use 0 to disable.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 2
          },
          "maxCollectionsPerFabric": {
            "description": "The maximum number of collections per fabric a tenant can create. Use 0 to disable.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxGraphsPerFabric": {
            "description": "The maximum number of graph collections per fabric a tenant can create. Use 0 to disable.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxIndexes": {
            "description": "The maximum number of indexes per fabric a tenant can create. Use 0 to disable.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxViewsPerFabric": {
            "description": "The maximum number of views per fabric a tenant can create. Use 0 to disable.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxRequestsPerDay": {
            "description": "The maximum number of API requests per day for a tenant, including UI requests to the APIs. Use 0 to disable. This only applies for tenants with the 'tenant.trial' property in _tenants set to 'true'. \n\n",
            "format": "int64",
            "type": "integer",
            "example": 5000
          },
          "maxRequestPerMinute": {
            "description": "Rate Limiting at the gateway proxy. The maximum number of requests per per minute for a tenant. This includes all http/https requests, for any component, coming from a regions LoadBalancer. If the value is 0, the rate limiting is disabled.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 60
          },
          "maxStoragePerRegion": {
            "description": "The maximum storage (in bytes) allowed to be used by a tenant in a region. Use 0 to disable. Note that RocksDB may have a significant overhead, causing the disk usage to be much larger than the size of the documents owned by the tenant.\nThis only applies for tenants with the 'tenant.trial' property in _tenants set to 'true'.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 104857600
          },
          "maxRestQLUsagePerFabric": {
            "description": "The maximum number of RestQL queries per fabric a tenant can execute in a day. Use 0 to disable.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 25
          },
          "maxRestQLUsagePerDay": {
            "description": "The maximum number of RestQL requests can be executed by a tenant in a day. Use 0 to disable. This only applies for tenants with the 'tenant.trial' property in _tenants set to 'true'. \n\n",
            "format": "int64",
            "type": "integer",
            "example": 100
          },
          "maxDocumentsImportedPerAPICall": {
            "description": "The maximum number of documents a tenant can import in a single API call. Use 0 to disable.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10000
          }
        }
      },
      "streams_limits_example": {
        "properties": {
          "maxStreamsCount": {
            "description": "Max streams count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxProducersCount": {
            "description": "Max streams producer count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxConsumersCount": {
            "description": "Max streams consumer count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxSubscriptionsCount": {
            "description": "Max streams subscriptions count. \n\n",
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "maxBacklogMessageTTLMin": {
            "description": "Max streams backlog messagaes TTL in minute.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 1440
          },
          "maxBacklogStorageSizeMB": {
            "description": "Max streams backlog storage size in MB.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 100
          },
          "maxDispatchThrottlingRateInByte": {
            "description": "Max streams byte dispatch rate per minute.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 4096
          }
        }
      },
      "compute_limits_example": {
        "description": "The limits values for compute feature",
        "format": "object",
        "properties": {
          "maxConfigmapsCount": {
            "description": "Max compute namespace configuration maps count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 5
          },
          "maxEphimeralStorageMB": {
            "description": "Max compute namespace ephimeral storage size in MB\n\n",
            "format": "int64",
            "type": "integer",
            "example": 50
          },
          "maxLimitsCpuMi": {
            "description": "Max compute namespace limits CPU millicores.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 50
          },
          "maxLimitsMemoryMB": {
            "description": "Max compute namespace limits memory size in MB.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 100
          },
          "maxPodsCount": {
            "description": "Max compute namespace PODS count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 5
          },
          "maxRequestsCpuMi": {
            "description": "Max compute namespace request CPU millicores.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 300
          },
          "maxRequestsMemoryMB": {
            "description": "Max compute namespace requests memory MB.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 300
          },
          "maxSecretsCount": {
            "description": "Max compute namespace secrets count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 5
          },
          "maxServicesCount": {
            "description": "Max compute namespace services count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 5
          }
        }
      },
      "eventhub_limits_example": {
        "description": "The limits values for eventhub feature",
        "format": "object",
        "properties": {
          "maxEventhubProducersCount": {
            "description": "Max eventhub producers count.\n\n",
            "format": "int64",
            "type": "integer",
            "example": 50
          },
          "maxEventhubConsumersCount": {
            "description": "Max eventhub consumers count\n\n",
            "format": "int64",
            "type": "integer",
            "example": 100
          }
        }
      },
      "set_enable_limits_flag": {
        "properties": {
          "value": {
            "description": "The flag value for enable limits. This value will be applicable for all tenants. This is a boolean field. Set this value to true, if limits need to be enabled, else set it to false to disable limits.",
            "format": "",
            "type": "boolean",
            "example": true
          }
        }
      },
      "rename_view": {
        "properties": {
          "name": {
            "description": "The new name of the view.\n\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "post_api_view": {
        "properties": {
          "name": {
            "description": "The name of the view.\n\n",
            "type": "string"
          },
          "properties": {
            "$ref": "#/definitions/post_api_view_props"
          },
          "type": {
            "description": "The type of the view. must be equal to one of the supported C8DB view\ntypes.\n\n",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "post_api_view_fields": {
        "description": "The field properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe field properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe field properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\n",
        "properties": {
          "field-name": {
            "description": "This is a recursive structure for the specific attribute path, potentially\ncontaining any of the following attributes:\n*analyzers*, *includeAllFields*, *trackListPositions*, *storeValues*\nAny attributes not specified are inherited from the parent.\n\n\n",
            "format": "object",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "post_api_view_iresearch": {
        "properties": {
          "name": {
            "description": "The name of the view.\n\n",
            "type": "string"
          },
          "primarySort": {
            "description": "Specify default sorting order. This field is immutable.\n\n",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "links": {
            "$ref": "#/definitions/post_api_view_links"
          },
          "type": {
            "description": "The type of the view. must be equal to *\"search\"*.\n\n",
            "type": "string",
            "default": "search"
          }
        },
        "required": [
          "name",
          "type"
        ],
        "type": "object"
      },
      "post_api_view_link_props": {
        "description": "The link properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe link properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe link properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\n",
        "properties": {
          "analyzers": {
            "description": "The list of analyzers to be used for indexing of string values\n(default: [\"identity\"]).\n\n\n",
            "format": "string",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fields": {
            "$ref": "#/definitions/post_api_view_fields"
          },
          "includeAllFields": {
            "description": "The flag determines whether or not to index all fields on a particular level of\ndepth (default: false).\n\n",
            "type": "boolean"
          },
          "storeValues": {
            "description": "How should the view track the attribute values, this setting allows for\nadditional value retrieval optimizations, one of:\n- *none*: Do not store values by the view\n- *id*: Store only information about value presence, to allow use of the EXISTS() function\n(default \"none\").\n\n\n",
            "type": "string"
          },
          "trackListPositions": {
            "description": "The flag determines whether or not values in a lists should be treated separate\n(default: false).\n\n",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "post_api_view_links": {
        "description": "The set of collection names associated with the properties.\n\n\nThe set of collection names associated with the properties.\n\n\nThe set of collection names associated with the properties.\n\n",
        "properties": {
          "[collection-name]": {
            "$ref": "#/definitions/post_api_view_link_props"
          }
        },
        "type": "object"
      },
      "post_api_view_props": {
        "description": "The view properties. If specified, then *properties* should be a JSON object\ncontaining the attributes supported by the specific view type.\n\nThe view properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe view properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe view properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\n",
        "properties": {
          "links": {
            "$ref": "#/definitions/post_api_view_links"
          }
        },
        "type": "object"
      },
      "post_api_analyzer": {
        "properties": {
          "features": {
            "description": "The set of features to set on the analyzer generated fields.\nThe default value is an empty array.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The analyzer name.\n\n",
            "type": "string"
          },
          "properties": {
            "description": "The properties used to configure the specified type.\nValue may be a string, an object or null.\nThe default value is *null*.\n\n",
            "type": "string"
          },
          "type": {
            "description": "The analyzer type.\n\n",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "auth_token": {
        "properties": {
          "email": {
            "description": "The email of the user for whom we want the auth token.\n\n",
            "type": "string"
          },
          "password": {
            "description": "The user password as a string.\n\n",
            "type": "string"
          },
          "tenant": {
            "description": "The name of the tenant for whose user we want the auth token.\n\n",
            "type": "string"
          },
          "username": {
            "description": "The name of the user for whom we want the auth token.\n\n",
            "type": "string"
          }
        },
        "required": [
          "password"
        ],
        "type": "object"
      },
      "keys_array": {
        "items": {
          "type": "string",
          "format": "string"
        },
        "type": "array"
      },
      "key_value": {
        "properties": {
          "_key": {
            "description": "Key",
            "type": "string"
          },
          "value": {
            "description": "Value",
            "type": "string"
          },
          "expireAt": {
            "description": "Expiry time in UTC timestamp format.",
            "type": "integer",
            "default": -1
          }
        },
        "required": [
          "_key",
          "value"
        ],
        "type": "object"
      },
      "key_value_array": {
        "items": {
          "$ref": "#/definitions/key_value"
        },
        "type": "array"
      },
      "kv_array_rc_200": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "description": "An array of keys. If there are no results, the array is returned as empty.\n\n",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "keys_array_rc_200_1": {
        "properties": {
          "error": {
            "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "code": {
            "description": "The generated response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "result": {
            "description": "An array of keys. If there are no results, the array is returned as empty.\n\n",
            "items": {
              "properties": {
                "name": {
                  "description": "Name of the collection.\n\n",
                  "format": "",
                  "type": "string"
                },
                "expiration": {
                  "description": "Expiration details of a collection.\n\n",
                  "format": "",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "GeoFabric_add_locations": {
        "properties": {
          "dc": {
            "description": "The datacenter to be added to the GeoFabric, as a string.\n\n",
            "type": "string"
          }
        },
        "required": [
          "dc"
        ],
        "type": "object"
      },
      "graph_traversal": {
        "properties": {
          "direction": {
            "description": "Direction for traversal\n- *if set*, must be either *\"outbound\"*, *\"inbound\"*, or *\"any\"*\n- *if not set*, the *expander* attribute must be specified.\n\n",
            "type": "string"
          },
          "edgeCollection": {
            "description": "Name of the collection that contains the edges.\n\n",
            "type": "string"
          },
          "expander": {
            "description": "Body (JavaScript) code of custom expander function *must* be set if *direction* attribute is **not** set function signature: *(config, vertex, path) -> array* expander must return an array of the connections for *vertex* each connection is an object with the attributes *edge* and *vertex*.\n\n",
            "type": "string"
          },
          "filter": {
            "description": "Default is to include all nodes: body (JavaScript code) of custom filter function function signature: *(config, vertex, path) -> mixed* can return four different string values:\n- *\"exclude\"* -> this vertex will not be visited.\n- *\"prune\"* -> the edges of this vertex will not be followed.\n- *\"\"* or *undefined* -> visit the vertex and follow its edges.\n- *Array* -> containing any combination of the above.\n  If there is at least one *\"exclude\"* or *\"prune\"* respectively is contained, it's effect will occur.\n\n",
            "type": "string"
          },
          "graphName": {
            "description": "Name of the graph that contains the edges. Either *edgeCollection* or *graphName* has to be given. In case both values are set the *graphName* is preferred.\n\n",
            "type": "string"
          },
          "init": {
            "description": "Body (JavaScript) code of custom result initialization function function signature: *(config, result) -> void* initialize any values in result with what is required.\n\n",
            "type": "string"
          },
          "itemOrder": {
            "description": "Item iteration order can be *\"forward\"* or *\"backward\"*.\n\n",
            "type": "string"
          },
          "maxDepth": {
            "description": "ANDed with any existing filters visits only nodes in at most the given depth.\n\n",
            "type": "string"
          },
          "maxIterations": {
            "description": "Maximum number of iterations in each traversal. This number can be set to prevent endless loops in traversal of cyclic graphs. When a traversal performs as many iterations as the *maxIterations* value, the traversal will abort with an error. If *maxIterations* is not set, a server-defined value may be used.\n\n",
            "type": "string"
          },
          "minDepth": {
            "description": "ANDed with any existing filters):\nvisits only nodes in at least the given depth.\n\n",
            "type": "string"
          },
          "order": {
            "description": "Traversal order can be *\"preorder\"*, *\"postorder\"* or *\"preorder-expander\"*.\n\n",
            "type": "string"
          },
          "sort": {
            "description": "Body (JavaScript) code of a custom comparison function for the edges. The signature of this function is *(l, r) -> integer* (where l and r are edges) and must return -1 if l is smaller than, +1 if l is greater than, and 0 if l and r are equal. The reason for this is the following: The order of edges returned for a certain vertex is undefined. This is because there is no natural order of edges for a vertex with multiple connected edges. To explicitly define the order in which edges on the vertex are followed, you can specify an edge comparator function with this attribute. Note that the value here has to be a string to conform to the JSON standard, which in turn is parsed as function body on the server side. Furthermore note that this attribute is only used for the standard expanders. If you use your custom expander you have to do the sorting yourself within the expander code.\n\n",
            "type": "string"
          },
          "startVertex": {
            "description": "Id of the startVertex, e.g. *\"users/foo\"*.\n\n",
            "type": "string"
          },
          "strategy": {
            "description": "Traversal strategy can be *\"depth-first\"* or *\"breadth-first\"*.\n\n",
            "type": "string"
          },
          "uniqueness": {
            "description": "Specifies uniqueness for vertices and edges visited. If set, must be an object like this:\n`\"uniqueness\": {\"vertices\": \"none\"|\"global\"|\"path\", \"edges\": \"none\"|\"global\"|\"path\"}`.\n\n",
            "type": "string"
          },
          "visitor": {
            "description": "Body (JavaScript) code of custom visitor function function signature: *(config, result, vertex, path, connected) -> void* The visitor function can do anything, but its return value is ignored. To populate a result, use the *result* variable by reference. Note that the *connected* argument is only populated when the *order* attribute is set to *\"preorder-expander\"*.\n\n",
            "type": "string"
          }
        },
        "required": [
          "startVertex"
        ],
        "type": "object"
      },
      "event_attributes": {
        "description": "Additional event attributes. If specified, then *attributes* should be a JSON array containing key-value attributes:\n\n",
        "type": "object"
      },
      "create_database": {
        "properties": {
          "name": {
            "description": "Has to contain a valid GeoFabric name.\n\n",
            "type": "string"
          },
          "tenant": {
            "description": "Name of the tenant to associate with GeoFabric. This option is applicable and optional when system tenant *_mm* invokes the API. Other tenants should not specify this option as the tenant invoking API shall be associated with GeoFabric.\n\n",
            "type": "string"
          },
          "options": {
            "$ref": "#/definitions/create_database_options"
          },
          "users": {
            "description": "Enter an array of usernames that will have admin access to the new GeoFabric. If this field is left blank, the default user *root* will have admin access.\n\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_environment_database": {
        "properties": {
          "name": {
            "description": "Has to contain a valid Environment name.\n\n",
            "type": "string"
          },
          "tenant": {
            "description": "Name of the tenant to associate with Environment. This option is applicable and optional when system tenant *_mm* invokes the API. Other tenants should not specify this option as the tenant invoking API shall be associated with Environment.\n\n",
            "type": "string"
          },
          "options": {
            "$ref": "#/definitions/create_environment_database_options"
          },
          "users": {
            "description": "Enter an array of usernames that will have admin access to the new Environment. If this field is left blank, the default user *root* will have admin access.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "create_database_options": {
        "description": "Has to be a dictionary of Database options used when creating the GeoFabric. If this is not specified, default options are used. If one of the dict members is not specified, then defaults will be used for that dict member.\nThe members of the *options* dictionary are as follows:\n\n",
        "properties": {
          "dcList": {
            "description": "The list of Edge Locations (datacenters) as a comma-separated string. The individual elements for this parameter are your Edge Location URL prefixes up to the first *.* character. For instance if one of your Edge Location URLs is *http://myfederation-us-east-1.dev.aws.macrometa.io*, then the corresponding value of one the items for this parameter would be *myfederation-us-east-1*. You can use the */datacenter/all* REST API call to get a list of all available Edge Locations and then pick and choose from this list. It is a mandatory field, but if not specified (due to user error), it defaults to the local Edge Location.\n\n",
            "type": "string"
          },
          "spotDc": {
            "description": "The Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed. By default a random datacenter is chosen from those which are capable.\n\n",
            "type": "string"
          },
          "metadata": {
            "description": "Object with user defined key-value pairs.",
            "type": "object",
            "example": {
              "key": "value"
            }
          }
        },
        "required": [
          "options"
        ],
        "type": "object"
      },
      "create_environment_database_options": {
        "description": "Has to be a dictionary of Database options used when creating the Environment. If this is not specified, default options are used. If one of the dict members is not specified, then defaults will be used for that dict member.\nThe members of the *options* dictionary are as follows:\n\n",
        "properties": {
          "spotDc": {
            "description": "The Edge Location (Datacenter) where on-spot operations for the given Environment will be performed. By default a random datacenter is chosen from those which are capable.\n\n",
            "type": "string"
          },
          "metadata": {
            "description": "Object with user defined key-value pairs.",
            "type": "object",
            "example": {
              "key": "value"
            }
          }
        },
        "required": [
          "options"
        ],
        "type": "object"
      },
      "database_metadata": {
        "properties": {
          "metadata": {
            "description": "Object with user defined key-value pairs.",
            "type": "object",
            "example": {
              "key": "value"
            }
          }
        }
      },
      "create_database_users": {
        "description": "",
        "properties": {
          "active": {
            "description": "A flag indicating whether the user account should be activated or not. The default value is *true*. If set to *false*, the user won't be able to log into the GeoFabric.\n\n",
            "type": "boolean"
          },
          "extra": {
            "description": "A JSON object with extra user information. The data contained in *extra* will be stored for the user but not be interpreted further by database.\n\n",
            "format": "",
            "type": "object"
          },
          "passwd": {
            "description": "The user password as a string. If not specified, it will default to an empty string.\n\n",
            "type": "string"
          },
          "username": {
            "description": "Login name of the user to be created.\n\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "api_query_properties": {
        "properties": {
          "query": {
            "description": "To validate a query string without executing it, the query string can be passed to the server via an HTTP POST request.\n\n",
            "type": "string"
          }
        },
        "required": [
          "query"
        ],
        "type": "object"
      },
      "track_query_properties": {
        "properties": {
          "enabled": {
            "description": "If set to *true*, then queries will be tracked. If set to *false*, neither queries nor slow queries will be tracked.\n\n",
            "format": "",
            "type": "boolean"
          },
          "maxQueryStringLength": {
            "description": "The maximum query string length to keep in the list of queries. Query strings can have arbitrary lengths, and this property can be used to save memory in case very long query strings are used. The value is specified in bytes.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "maxSlowQueries": {
            "description": "The maximum number of slow queries to keep in the list of slow queries. If the list of slow queries is full, the oldest entry in it will be discarded when additional slow queries occur.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "slowQueryThreshold": {
            "description": "The threshold value for treating a query as slow. A query with a runtime greater or equal to this threshold value will be put into the list of slow queries when slow query tracking is enabled. The value for *slowQueryThreshold* is specified in seconds.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "trackBindVars": {
            "description": "If set to *true*, then the bind variables used in queries will be tracked along with queries.\n\n",
            "format": "",
            "type": "boolean"
          },
          "trackSlowQueries": {
            "description": "If set to *true*, then slow queries will be tracked in the list of slow queries if their runtime exceeds the value set in *slowQueryThreshold*. In order for slow queries to be tracked, the *enabled* property must also be set to *true*.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "tenant_create": {
        "properties": {
          "email": {
            "description": "Email address of tenant. This is non mandatory.\n\n",
            "type": "string"
          },
          "name": {
            "description": "The name of the tenant as a string. This is mandatory.\n\n",
            "type": "string"
          },
          "passwd": {
            "description": "The user password as a string. If no password is specified, the empty string will be used.\n\n",
            "type": "string"
          },
          "plan": {
            "description": "The plan name as a string. If no plan is specified, the empty string will be used.\n\n",
            "type": "string"
          },
          "attribution": {
            "description": "The attribution as a string. If no attribution is specified, the empty string will be used.\n\n",
            "type": "string"
          },
          "dcList": {
            "description": "A comma-separated string containing the datacenter names on which this tenant is to be created. If an empty string is passed in, the tenant is assumed to be global to the federation and will be created on all current datacenters in the federation.\n\n",
            "type": "string"
          },
          "metadata": {
            "description": "The metadata as a JSON object. This Object has a metadata key-value pairs. If no metadata is specified, the empty object will be used.\n\n",
            "$ref": "#/definitions/get_tenant_metadata_object_example"
          },
          "contact": {
            "description": "The details about contact tenant information.\n\n",
            "$ref": "#/definitions/create_tenant_contact_object_example"
          }
        },
        "required": [
          "name",
          "email",
          "dcList"
        ],
        "type": "object"
      },
      "get_tenant_example_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "result": {
            "$ref": "#/definitions/get_tenant_result_value"
          }
        }
      },
      "get_tenant_result_value": {
        "properties": {
          "limits": {
            "description": "Limits for tenants.\n",
            "type": "object",
            "items": {
              "$ref": "#/definitions/tenant_limits_value"
            }
          },
          "tenant": {
            "description": "Name of the tenant.",
            "format": "string",
            "type": "string"
          },
          "status": {
            "description": "Availability of tenant.",
            "format": "string",
            "type": "string",
            "example": "available"
          },
          "spotDc": {
            "description": "The Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed. By default a random datacenter is chosen from those which are capable.\n\n",
            "format": "string",
            "type": "string"
          },
          "realTime": {
            "description": "For this tenant, whether the changes are published in a real time streams.",
            "format": "boolean",
            "type": "boolean",
            "example": true
          },
          "name": {
            "description": "Name of the tenant with fabric name as a suffix.",
            "format": "string",
            "type": "string"
          },
          "clusters": {
            "description": "List of datacenters in tenant.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "dc-region1",
              "dc-region2"
            ]
          },
          "dynamo_local_tables": {
            "description": "Flag indicator for dynamo_local_tables.",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "attribution": {
            "description": "Attribution of the tenant.",
            "format": "string",
            "type": "string"
          },
          "features": {
            "description": "List of features with boolean value indicating that those features are enabled or not.",
            "items": {
              "$ref": "#/definitions/features_list_with_availability_flag_example"
            }
          },
          "plan": {
            "description": "Name of the plan.",
            "format": "string",
            "type": "string"
          },
          "metadata": {
            "description": "Object with metadata key-value pairs.",
            "type": "object",
            "example": {
              "key": "value"
            }
          },
          "dnsInfo": {
            "description": "Populates the DNS related information like global and regional URLs.",
            "$ref": "#/definitions/dns_info_response"
          }
        }
      },
      "tenant_update_plan_example_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer",
            "example": "200"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean",
            "example": false
          },
          "result": {
            "description": "The information about what are the new attribution, plan and features attributes for tenant after plan is updated.\n",
            "type": "object",
            "properties": {
              "attribution": {
                "description": "Attribution of the tenant.",
                "format": "string",
                "type": "string"
              },
              "plan": {
                "description": "Name of the plan.",
                "format": "string",
                "type": "string"
              },
              "features": {
                "description": "List of features with boolean value indicating that those features are enabled or not.",
                "items": {
                  "$ref": "#/definitions/features_list_with_availability_flag_example"
                }
              }
            }
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "features_list_with_availability_flag_example": {
        "properties": {
          "CEP": {
            "description": "Name of the CEP feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "DOCS": {
            "description": "Name of the Docs feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "DYNAMO": {
            "description": "Name of the Dynamo feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "GEO_FABRICS": {
            "description": "Name of the Geo Fabrics feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "GRAPHS": {
            "description": "Name of the Graphs feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "KV": {
            "description": "Name of the KV feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": true
          },
          "LOCAL_COLLECTIONS": {
            "description": "Name of the Local Collections feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "STREAMS": {
            "description": "Name of the streams feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "USERS": {
            "description": "Name of the Users feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          },
          "COMPUTE": {
            "description": "Name of the Compute feature.\n\n",
            "format": "boolean",
            "type": "boolean",
            "example": false
          }
        }
      },
      "get_tenant_metadata_object_example": {
        "properties": {
          "key1": {
            "description": "Name of metadata key 1.\n\n",
            "format": "string",
            "type": "string",
            "example": "value1"
          },
          "key2": {
            "description": "Name of metadata key 2.\n\n",
            "format": "string",
            "type": "string",
            "example": "value2"
          }
        }
      },
      "create_tenant_contact_object_example": {
        "properties": {
          "firstname": {
            "description": "First name of user.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "lastname": {
            "description": "Last name of user.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "email": {
            "description": "Email address of user.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "phone": {
            "description": "Phone number of user.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "line1": {
            "description": "First line of address of user.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "line2": {
            "description": "Second line of address of user.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "city": {
            "description": "Name of the city.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "state": {
            "description": "Name of state.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "country": {
            "description": "Name of country.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          },
          "zipcode": {
            "description": "Zip code of user.\n\n",
            "format": "string",
            "type": "string",
            "example": "string"
          }
        }
      },
      "tenant_modify": {
        "properties": {
          "active": {
            "description": "Active status of the tenant. Possible values: **true | false**.\n\n",
            "type": "boolean"
          },
          "status": {
            "description": "Status of the tenant. Possible values: **active | expired | delinquent | inactive** \n\n",
            "type": "string"
          },
          "metadata": {
            "description": "Object with metadata key-value pairs.",
            "type": "object",
            "example": {
              "key": "value"
            }
          }
        }
      },
      "tenant_modify_example_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer",
            "example": 200
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "result": {
            "description": "Attributes of tenant after patch operation.",
            "items": {
              "$ref": "#/definitions/tenant_modify_result_value"
            }
          }
        },
        "type": "object"
      },
      "tenant_modify_result_value": {
        "properties": {
          "tenant": {
            "description": "Name of the tenant.",
            "format": "string",
            "type": "string"
          },
          "active": {
            "description": "Active state of tenant.",
            "format": "boolean",
            "type": "boolean",
            "example": true
          },
          "status": {
            "description": "Availability of tenant.",
            "format": "string",
            "type": "string",
            "example": "available"
          },
          "metadata": {
            "description": "Object with metadata key-value pairs.",
            "type": "object",
            "example": {
              "key": "value"
            }
          }
        },
        "type": "object"
      },
      "plan_create": {
        "properties": {
          "name": {
            "description": "Full name of the plan.\n\n",
            "type": "string"
          },
          "planId": {
            "description": "Id of the plan.\n\n",
            "type": "string"
          },
          "description": {
            "description": "Description of the plan.\n\n",
            "type": "string"
          },
          "featureGates": {
            "description": "List of the plan feature gates.\n\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attribution": {
            "description": "Attribution of the plan.\n\n",
            "type": "string"
          },
          "label": {
            "description": "Display label of the plan.\n\n",
            "type": "string"
          },
          "pricing": {
            "description": "Pricing details of the plan.\n\n",
            "type": "string"
          },
          "isBundle": {
            "description": "Bundle.\n\n",
            "type": "boolean"
          },
          "metadata": {
            "description": "Metadata of the plan, having set of key-value pairs.\n\n",
            "type": "object",
            "example": {
              "key": "value"
            }
          },
          "metrics": {
            "description": "List of metrics applicable for plan.",
            "type": "array",
            "items": {
              "$ref": "#/definitions/plan_metrics_example"
            }
          },
          "active": {
            "description": "A mandatory flag that specifies whether the plan is active.\n\n",
            "type": "boolean"
          },
          "demo": {
            "description": "An optional flag that specifies whether the plan is demo or not. Default value is false.\n\n",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "plan_metrics_example": {
        "properties": {
          "name": {
            "description": "Name of the metrics. e.g. reads, writes etc.",
            "type": "string"
          },
          "value": {
            "description": "Value of the metrics. e.g. c8db_service_read_requests_count, c8db_service_write_requests_count etc.",
            "type": "string"
          },
          "metricType": {
            "description": "Name of the metrics. e.g. counter, gauge, histogram.",
            "type": "string"
          }
        }
      },
      "update_tenant_plan": {
        "properties": {
          "attribution": {
            "description": "Attribution of the plan.\n",
            "type": "string"
          },
          "plan": {
            "description": "Name of the plan.\n",
            "type": "string"
          },
          "tenant": {
            "description": "Name of the tenant.\n",
            "type": "string"
          },
          "payment_method_id": {
            "description": "ID of Stripe payment method..\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "apikey_create": {
        "properties": {
          "keyid": {
            "description": "The id of the api key as a string.\n\n",
            "type": "string"
          }
        },
        "required": [
          "keyid"
        ],
        "type": "object"
      },
      "apikey_validate": {
        "properties": {
          "apikey": {
            "description": "The api key as a string.\n\n",
            "type": "string"
          }
        },
        "required": [
          "apikey"
        ],
        "type": "object"
      },
      "user_create": {
        "properties": {
          "active": {
            "description": "An optional flag that specifies whether the user is active.  If not specified, this will default to true.\n\n",
            "format": "boolean",
            "type": "boolean"
          },
          "email": {
            "description": "The email of the user as a string.\n\n",
            "type": "string"
          },
          "extra": {
            "description": "An optional JSON object with arbitrary extra data about the user.\n\n",
            "type": "object"
          },
          "passwd": {
            "description": "The user password as a string.\n\n",
            "type": "string"
          },
          "user": {
            "description": "The name of the user as a string.\n\n",
            "type": "string"
          }
        },
        "required": [
          "user"
        ],
        "type": "object"
      },
      "user_grant_collection": {
        "properties": {
          "grant": {
            "description": "Use \"rw\" to set the collection level access to *Read/Write*.\n\nUse \"ro\" to set the collection level access to  *Read Only*.\n\nUse \"none\" to set the collection level access to *No access*.\n\n",
            "type": "string"
          }
        },
        "required": [
          "grant"
        ],
        "type": "object"
      },
      "user_grant_database": {
        "properties": {
          "grant": {
            "description": "Use \"rw\" to set the database access level to *Administrate* .\n\nUse \"ro\" to set the database access level to *Access*.\n\nUse \"none\" to set the database access level to *No access*.\n\n",
            "type": "string"
          }
        },
        "required": [
          "grant"
        ],
        "type": "object"
      },
      "user_modify": {
        "properties": {
          "active": {
            "description": "An optional flag that specifies whether the user is active.  If not specified, this will default to true.\n\n",
            "format": "boolean",
            "type": "boolean"
          },
          "extra": {
            "description": "An optional JSON object with arbitrary extra data about the user.\n\n",
            "type": "object"
          },
          "passwd": {
            "description": "The user password as a string. Specifying a password is mandatory, but the empty string is allowed for passwords.\n\n",
            "type": "string"
          }
        },
        "required": [
          "passwd"
        ],
        "type": "object"
      },
      "user_replace": {
        "properties": {
          "active": {
            "description": "An optional flag that specifies whether the user is active.  If not specified, this will default to true.\n\n",
            "format": "boolean",
            "type": "boolean"
          },
          "extra": {
            "description": "An optional JSON object with arbitrary extra data about the user.\n\n",
            "type": "object"
          },
          "passwd": {
            "description": "The user password as a string. Specifying a password is mandatory.\n\n",
            "type": "string"
          }
        },
        "required": [
          "passwd"
        ],
        "type": "object"
      },
      "user_queries_create_data_format": {
        "description": "Specify the query parameters.\n\n",
        "properties": {
          "name": {
            "description": "Name for the query.\n\n",
            "type": "string"
          },
          "parameter": {
            "additionalProperties": {},
            "description": "bindVars for the query.\n\n",
            "type": "object"
          },
          "value": {
            "description": "Value of the query.\n\n",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "user_queries_create_user_queries": {
        "properties": {
          "query": {
            "$ref": "#/definitions/user_queries_create_data_format"
          }
        },
        "type": "object"
      },
      "user_queries_execute_saved_queries": {
        "properties": {
          "bindVars": {
            "additionalProperties": {},
            "description": "Specify the bindVars of the query.\n\n",
            "type": "object"
          }
        },
        "type": "object"
      },
      "user_queries_execute_user_query": {
        "properties": {
          "bindVars": {
            "additionalProperties": {},
            "description": "Specify the bindVars of the query.\n\n",
            "type": "object"
          }
        },
        "type": "object"
      },
      "user_queries_update_data_format": {
        "description": "Specify the query parameters.\n\n",
        "properties": {
          "parameter": {
            "additionalProperties": {},
            "description": "bindVars for the query.\n\n",
            "type": "object"
          },
          "value": {
            "description": "Value for the query.\n\n",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "user_queries_update_user_queries": {
        "properties": {
          "query": {
            "$ref": "#/definitions/user_queries_update_data_format"
          }
        },
        "type": "object"
      },
      "collection_info": {
        "description": "\n",
        "properties": {
          "globallyUniqueId": {
            "description": "Unique identifier of the collection.\n",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the collection; *deprecated*.\n\n",
            "type": "string"
          },
          "isSystem": {
            "description": "True if this is a system collection; usually *name* will start with an underscore.\n\n",
            "type": "boolean"
          },
          "keyOptions": {
            "$ref": "#/definitions/key_generator_type"
          },
          "name": {
            "description": "Literal name of this collection.\n\n",
            "type": "string"
          },
          "numberOfShards": {
            "description": "The number of shards of the collection.\n\n",
            "format": "",
            "type": "integer"
          },
          "shardKeys": {
            "description": "Contains the names of document attributes that are used to determine the target shard for documents.\n\n",
            "format": "string",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "shardingStrategy": {
            "description": "The sharding strategy selected for the collection.\n\n",
            "type": "string"
          },
          "status": {
            "description": "Corresponds to **statusString**; *Only relevant for the MMFiles storage engine*\n  - 0: \"unknown\" - may be corrupted\n  - 1: (deprecated, maps to \"unknown\")\n  - 2: \"unloaded\"\n  - 3: \"loaded\"\n  - 4: \"unloading\"\n  - 5: \"deleted\"\n  - 6: \"loading\".\n\n\n\n",
            "type": "string"
          },
          "type": {
            "description": "The type of the collection:\n  - 0: \"unknown\"\n  - 2: regular document collection\n  - 3: edge collection.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "keyOptions"
        ],
        "type": "object"
      },
      "edge_representation": {
        "description": "The complete deleted edge document. Includes all attributes stored before this operation. Will only be present if returnOld is true.\n\n",
        "properties": {
          "_from": {
            "description": "The _from value of the stored data.\n\n",
            "type": "string"
          },
          "_id": {
            "description": "The _id value of the stored data.\n\n",
            "type": "string"
          },
          "_key": {
            "description": "The _key value of the stored data.\n\n",
            "type": "string"
          },
          "_rev": {
            "description": "The _rev value of the stored data.\n\n",
            "type": "string"
          },
          "_to": {
            "description": "The _to value of the stored data.\n\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "event_create": {
        "properties": {
          "action": {
            "description": "The activity of the event (CREATE/UPDATE/DELETE/EXECUTE/LOGIN).\n\n",
            "type": "string"
          },
          "attributes": {
            "$ref": "#/definitions/event_attributes"
          },
          "description": {
            "description": "Event description.\n\n",
            "type": "string"
          },
          "details": {
            "description": "Additional activity info. e.g. error message.\n\n",
            "type": "string"
          },
          "entityName": {
            "description": "The entity name of the event. e.g. name of collection; name of user etc.\n\n",
            "type": "string"
          },
          "entityType": {
            "description": "The entity type of the event (COLLECTION/GRAPH/CEP/AUTH/STREAM/GEOFABRIC).\n\n",
            "type": "string"
          },
          "status": {
            "description": "The activity status (OK/WARN/ERROR).\n\n",
            "type": "string"
          }
        },
        "required": [
          "entityName"
        ],
        "type": "object"
      },
      "explain_options": {
        "description": "Options for the query.\n\n",
        "properties": {
          "allPlans": {
            "description": "If set to *true*, all possible execution plans will be returned. The default is *false*, meaning only the optimal plan will be returned.\n\n",
            "type": "boolean"
          },
          "maxNumberOfPlans": {
            "description": "An optional maximum number of plans that the optimizer is allowed to generate. Setting this attribute to a low value allows to put a cap on the amount of work the optimizer does.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "optimizer.rules": {
            "description": "An array of to-be-included or to-be-excluded optimizer rules can be put into this attribute, telling the optimizer to include or exclude specific rules. To disable a rule, prefix its name with a `-`, to enable a rule, prefix it with a `+`. There is also a pseudo-rule `all`, which will match all optimizer rules.\n\n",
            "format": "string",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "graph_create_http_examples": {
        "properties": {
          "edgedefinitions": {
            "description": "An array of definitions for the relations of the graph.\nEach has the following type:\n\n",
            "items": {
              "$ref": "#/definitions/graph_edge_definition"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the graph.\n\n",
            "type": "string"
          },
          "options": {
            "$ref": "#/definitions/api_gharial_create_opts"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "graph_create_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the newly created graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_create_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the newly created graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_create_http_examples_rc_400": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_create_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_create_http_examples_rc_409": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_drop_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_drop_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false). It is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_create_http_examples": {
        "properties": {
          "_from": {
            "description": "The source vertex of this edge. Has to be valid within\nthe used edge definition.\n\n",
            "type": "string"
          },
          "_to": {
            "description": "The target vertex of this edge. Has to be valid within\nthe used edge definition.\n\n",
            "type": "string"
          }
        },
        "required": [
          "_from"
        ],
        "type": "object"
      },
      "graph_edge_create_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "edge": {
            "$ref": "#/definitions/edge_representation",
            "description": "The internal attributes for the edge.\n\n"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_create_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "edge": {
            "$ref": "#/definitions/edge_representation",
            "description": "The internal attributes for the edge.\n\n"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false). It is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_create_http_examples_rc_400": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_create_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_create_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_add_http_examples": {
        "properties": {
          "collection": {
            "description": "The name of the edge collection to be used.\n\n",
            "type": "string"
          },
          "from": {
            "description": "One or many vertex collections that can contain source vertices.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "to": {
            "description": "One or many vertex collections that can contain target vertices.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "collection"
        ],
        "type": "object"
      },
      "graph_edge_definition_add_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the modified graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_add_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the modified graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_add_http_examples_rc_400": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_add_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_add_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_modify_http_examples": {
        "properties": {
          "collection": {
            "description": "The name of the edge collection to be used.\n\n",
            "type": "string"
          },
          "from": {
            "description": "One or many vertex collections that can contain source vertices.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "to": {
            "description": "One or many vertex collections that can contain target vertices.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "collection"
        ],
        "type": "object"
      },
      "graph_edge_definition_modify_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the modified graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_modify_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the modified graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_modify_http_examples_rc_400": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_modify_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_modify_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_remove_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the modified graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_remove_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the modified graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_remove_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_definition_remove_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_delete_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "old": {
            "$ref": "#/definitions/edge_representation"
          },
          "removed": {
            "description": "Is set to true if the remove was successful.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_delete_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "old": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete deleted edge document. Includes all attributes stored before this operation. Will only be present if returnOld is true.\n\n"
          },
          "removed": {
            "description": "Is set to true if the remove was successful.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_delete_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_delete_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_delete_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_get_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "edge": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete edge.\n\n"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_get_http_examples_rc_304": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_get_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_get_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_get_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_modify_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "edge": {
            "$ref": "#/definitions/edge_representation",
            "description": "The internal attributes for the edge.\n\n"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete overwritten edge document.\nIncludes all attributes stored before this operation.\nWill only be present if returnOld is true.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_modify_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "edge": {
            "$ref": "#/definitions/edge_representation",
            "description": "The internal attributes for the edge.\n\n"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete overwritten edge document. Includes all attributes stored before this operation. Will only be present if returnOld is true.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_modify_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_modify_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_modify_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_replace_http_examples": {
        "properties": {
          "_from": {
            "description": "The source vertex of this edge. Has to be valid within\nthe used edge definition.\n\n",
            "type": "string"
          },
          "_to": {
            "description": "The target vertex of this edge. Has to be valid within\nthe used edge definition.\n\n",
            "type": "string"
          }
        },
        "required": [
          "_from"
        ],
        "type": "object"
      },
      "graph_edge_replace_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "edge": {
            "$ref": "#/definitions/edge_representation",
            "description": "The internal attributes for the edge.\n\n"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete overwritten edge document. Includes all attributes stored before this operation. Will only be present if returnOld is true.\n\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_replace_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "edge": {
            "$ref": "#/definitions/edge_representation",
            "description": "The internal attributes for the edge.\n\n"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/edge_representation",
            "description": "The complete overwritten edge document. Includes all attributes stored before this operation. Will only be present if returnOld is true.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_replace_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_replace_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_edge_replace_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_get_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_get_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_list_edge_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "collections": {
            "description": "The list of all vertex collections within this graph. Includes collections in edge definitions as well as orphans.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_list_edge_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_list_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graphs": {
            "description": "\n",
            "items": {
              "$ref": "#/definitions/graph_list"
            },
            "type": "array"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_list_vertex_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "collections": {
            "description": "The list of all vertex collections within this graph.\nIncludes collections in edge definitions as well as orphans.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_list_vertex_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_add_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the modified graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_add_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the newly created graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_add_http_examples_rc_400": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_add_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_add_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_remove_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the newly created graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_remove_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "graph": {
            "$ref": "#/definitions/graph_representation",
            "description": "The information about the newly created graph.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_remove_http_examples_rc_400": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_remove_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_collection_remove_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_create_http_examples_rc_201": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete newly written vertex document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          },
          "vertex": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The internal attributes for the vertex.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_create_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete newly written vertex document. Includes all written attributes in the Request Body and all internal attributes generated by database. Will only be present if returnNew is true.\n\n"
          },
          "vertex": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The internal attributes generated while storing the vertex. Does not include any attribute given in Request Body.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_create_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_create_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_delete_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "old": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete deleted vertex document. Includes all attributes stored before this operation. Will only be present if returnOld is true.\n\n"
          },
          "removed": {
            "description": "Is set to true if the remove was successful.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_delete_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "old": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete deleted vertex document. Includes all attributes stored before this operation. Will only be present if returnOld is true.\n\n"
          },
          "removed": {
            "description": "Is set to true if the remove was successful.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_delete_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_delete_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_delete_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_get_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "vertex": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete vertex.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_get_http_examples_rc_304": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_get_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_get_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_get_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_modify_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete newly written vertex document.\nIncludes all written attributes in the Request Body\nand all internal attributes generated by database.\nWill only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete overwritten vertex document.\nIncludes all attributes stored before this operation.\nWill only be present if returnOld is true.\n\n"
          },
          "vertex": {
            "$ref": "#/definitions/vertex_representation"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_modify_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete newly written vertex document.\nIncludes all written attributes in the Request Body\nand all internal attributes generated by database.\nWill only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete overwritten vertex document.\nIncludes all attributes stored before this operation.\nWill only be present if returnOld is true.\n\n"
          },
          "vertex": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The internal attributes for the vertex.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_modify_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_modify_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_modify_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_replace_http_examples_rc_200": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete newly written vertex document.\nIncludes all written attributes in the Request Body\nand all internal attributes generated by database.\nWill only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete overwritten vertex document.\nIncludes all attributes stored before this operation.\nWill only be present if returnOld is true.\n\n"
          },
          "vertex": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The internal attributes for the vertex.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_replace_http_examples_rc_202": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "new": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete newly written vertex document.\nIncludes all written attributes in the Request Body\nand all internal attributes generated by database.\nWill only be present if returnNew is true.\n\n"
          },
          "old": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The complete overwritten vertex document.\nIncludes all attributes stored before this operation.\nWill only be present if returnOld is true.\n\n"
          },
          "vertex": {
            "$ref": "#/definitions/vertex_representation",
            "description": "The internal attributes for the vertex.\n\n"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_replace_http_examples_rc_403": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_replace_http_examples_rc_404": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "graph_vertex_replace_http_examples_rc_412": {
        "properties": {
          "code": {
            "description": "The response code.\n\n",
            "format": "",
            "type": "integer"
          },
          "error": {
            "description": "Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A message created for this error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "Database error number for the error that occurred.\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "get_api_return_rc_200": {
        "properties": {
          "details": {
            "$ref": "#/definitions/version_details_struct"
          },
          "server": {
            "description": "Will always contain *database*\n\n",
            "type": "string"
          },
          "version": {
            "description": "The server version string. The string has the format \"*major*.*minor*.*sub*\". *major* and *minor* will be numeric, and *sub* may contain a number or a textual version.\n\n",
            "type": "string"
          }
        },
        "required": [
          "server"
        ],
        "type": "object"
      },
      "graph_edge_definition": {
        "description": "",
        "properties": {
          "collection": {
            "description": "Name of the edge collection, where the edge are stored in.\n\n",
            "type": "string"
          },
          "from": {
            "description": "List of vertex collection names.\nEdges in collection can only be inserted if their _from is in any of the collections here.\n\n",
            "format": "string",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "to": {
            "description": "List of vertex collection names.\nEdges in collection can only be inserted if their _to is in any of the collections here.\n",
            "format": "string",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "graph_list": {
        "description": "",
        "properties": {
          "graph": {
            "$ref": "#/definitions/graph_representation"
          }
        },
        "type": "object"
      },
      "graph_representation": {
        "description": "The information about the newly created graph\n\nThe information about the newly created graph.\n\n",
        "properties": {
          "_id": {
            "description": "The internal id value of this graph. \n\n",
            "type": "string"
          },
          "_rev": {
            "description": "The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n\n",
            "type": "string"
          },
          "edgedefinitions": {
            "description": "An array of definitions for the relations of the graph.\nEach has the following type:\n\n",
            "format": "graph_edge_definition",
            "items": {
              "$ref": "#/definitions/graph_edge_definition"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the graph.\n\n",
            "type": "string"
          },
          "orphanCollections": {
            "description": "An array of additional vertex collections.\nDocuments within these collections do not have edges within this graph.\n\n",
            "format": "string",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "graph"
        ],
        "type": "object"
      },
      "key_generator_type": {
        "description": "A object which contains key generation options.\n\n",
        "properties": {
          "allowUserKeys": {
            "description": "If set to *true*, then it is allowed to supply own key values in the *_key* attribute of a document. If set to *false*, then the key generator is solely responsible for generating keys and supplying own key values in the *_key* attribute of documents is considered an error.\n\n",
            "type": "boolean"
          },
          "lastValue": {
            "description": "\n\n",
            "format": "",
            "type": "integer"
          },
          "type": {
            "description": "Specifies the type of the key generator. The currently available generators are *traditional*, *autoincrement*, *uuid* and *padded*.\n\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "api_analyzer": {
        "properties": {
          "features": {
            "description": "The set of features to set on the analyzer generated fields.\nThe default value is an empty array.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The analyzer name.\n\n",
            "type": "string"
          },
          "properties": {
            "description": "The properties used to configure the specified type.\nValue may be a string, an object or null.\nThe default value is *null*.\n\n",
            "type": "string"
          },
          "type": {
            "description": "The analyzer type.\n\n",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "collection_stream": {
        "properties": {
          "hasStream": {
            "description": "If *true*, create a local stream associated with collection.\nLocal stream associated with collection cannot be deleted.\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "hasStream"
        ],
        "type": "object"
      },
      "api_collection": {
        "properties": {
          "isSystem": {
            "description": "If *true*, create a  system collection. In this case *collection-name* should start with an underscore. End users should normally create non-system collections only. API implementors may be required to create system collections in very special occasions, but normally a regular collection will do.\n(The default is *false*)\n\n",
            "format": "",
            "type": "boolean"
          },
          "keyOptions": {
            "$ref": "#/definitions/api_collection_opts"
          },
          "name": {
            "description": "The name of the collection.\n\n",
            "type": "string"
          },
          "shardKeys": {
            "description": "(The default is *[ \"_key\" ]*): in a cluster, this attribute determines which document attributes are used to determine the target shard for documents. Documents are sent to shards based on the values of their shard key attributes. The values of all shard key attributes in a document are hashed, and the hash value is used to determine the target shard.\n\n**Note**: Values of shard key attributes cannot be changed once set.\n\n",
            "type": "string"
          },
          "type": {
            "description": "(The default is *2*): the type of the collection to create.\nThe following values for *type* are valid:\n\n- *2*: document collection\n- *3*: edge collection.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "stream": {
            "description": "If *true*, create a local stream for collection. (The default is *false*)",
            "format": "",
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "api_collection_opts": {
        "description": "Additional options for key generation. If specified, then *keyOptions* should be a JSON array containing the following attributes:\n\n",
        "properties": {
          "allowUserKeys": {
            "description": "If set to *true*, then it is allowed to supply own key values in the *_key* attribute of a document. If set to *false*, then the key generator will solely be responsible for generating keys and supplying own key values in the *_key* attribute of documents is considered an error.\n\n",
            "type": "boolean"
          },
          "increment": {
            "description": "Increment value for *autoincrement* key generator. Not used for other key generator types.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "offset": {
            "description": "Initial offset value for *autoincrement* key generator. Not used for other key generator types.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "Specifies the type of the key generator. The currently available generators are *traditional*, *autoincrement*, *uuid* and *padded*.\n\nThe *traditional* key generator generates numerical keys in ascending order.\n\nThe *autoincrement* key generator generates numerical keys in ascending order, the initial offset and the spacing can be configured\n\nThe *padded* key generator generates keys of a fixed length (16 bytes) in ascending lexicographical sort order. \n\nThe *uuid* key generator generates universally unique 128 bit keys, which are stored in hexadecimal human-readable format. This key generator can be used in a single-server or cluster to generate \"seemingly random\" keys. The keys produced by this key generator are not lexicographically sorted.\n\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "api_cursor": {
        "properties": {
          "batchSize": {
            "description": "Maximum number of result documents to be transferred from the server to the client in one roundtrip. If this attribute is not set, a server-controlled default value will be used. A *batchSize* value of *0* is disallowed.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "bindVars": {
            "additionalProperties": {},
            "description": "Key/value pairs representing the bind parameters.\n\n",
            "type": "object"
          },
          "count": {
            "description": "Indicates whether the number of documents in the result set should be returned in the \"count\" attribute of the result. Calculating the \"count\" attribute might have a performance impact for some queries in the future so this option is turned off by default, and \"count\" is only returned when requested.\n\n",
            "format": "",
            "type": "boolean"
          },
          "options": {
            "$ref": "#/definitions/api_cursor_opts"
          },
          "query": {
            "description": "Contains the query string to be executed.\n\n",
            "type": "string"
          },
          "ttl": {
            "description": "The time-to-live for the cursor (in seconds). The cursor will be removed on the server automatically after the specified amount of time. This is useful to ensure garbage collection of cursors that are not fully fetched by clients. If not set, a server-defined value will be used (default: 30 seconds).\n\n",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "query"
        ],
        "type": "object"
      },
      "api_cursor_opts": {
        "description": "Key/value object with extra options for the query.\n\n",
        "properties": {
          "failOnWarning": {
            "description": "When set to *true*, the query will throw an exception and abort instead of producing a warning. This option should be used during development to catch potential issues early. When the attribute is set to *false*, warnings will not be propagated to exceptions and will be returned with the query result.\n\n",
            "type": "boolean"
          },
          "fullCount": {
            "description": "If set to *true* and the query contains a *LIMIT* clause, then the result will have an *extra* attribute with the sub-attributes *stats* and *fullCount*, `{ ... , \"extra\": { \"stats\": { \"fullCount\": 123 } } }`.\nThe *fullCount* attribute will contain the number of documents in the result before the last top-level LIMIT in the query was applied. It can be used to count the number of documents that match certain filter criteria, but only return a subset of them, in one go.\nIt is thus similar to MySQL's *SQL_CALC_FOUND_ROWS* hint. Note that setting the option will disable a few LIMIT optimizations and may lead to more documents being processed, and thus make queries run longer. Note that the *fullCount* attribute may only be present in the result if the query has a top-level LIMIT clause and the LIMIT clause is actually used in the query.\n\n",
            "type": "boolean"
          },
          "intermediateCommitCount": {
            "description": "Maximum number of operations after which an intermediate commit is performed automatically.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "intermediateCommitSize": {
            "description": "Maximum total size of operations after which an intermediate commit is performed automatically.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "maxTransactionSize": {
            "description": "Transaction size limit in bytes.\n",
            "format": "int64",
            "type": "integer"
          },
          "maxWarningCount": {
            "description": "Limits the maximum number of warnings a query will return. The number of warnings a query will return is limited to 10 by default, but that number can be increased or decreased by setting this attribute.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "profile": {
            "description": "If set to *true* or *1*, then the additional query profiling information will be returned in the sub-attribute *profile* of the *extra* return attribute, if the query result is not served from the query cache. Set to *2* the query will include execution stats per query plan node in sub-attribute *stats.nodes* of the *extra* return attribute. Additionally the query plan is returned in the sub-attribute *extra.plan*.\n\n",
            "format": "",
            "type": "integer"
          },
          "skipInaccessibleCollections": {
            "description": "C8QL queries (especially graph traversals) will treat collection to which a user has no access rights as if these collections were empty. Instead of returning a forbidden access error, your queries will execute normally.\n\n",
            "type": "boolean"
          },
          "stream": {
            "description": "Specify *true* and the query will be executed in a **streaming** fashion. The query result is not stored on the server, but calculated on the fly. *Beware*: long-running queries will need to hold the collection locks for as long as the query cursor exists. \n\nWhen set to *false* a query will be executed right away in its entirety. \n\nIn that case query results are either returned right away (if the result set is small enough), or stored on the database instance and accessible via the cursor API (with respect to the `ttl`). \n\nIt is advisable to *only* use this option on short-running queries or without exclusive locks.\n\nAdditionally query statistics, warnings and profiling data will only be available after the query is finished.\n\nThe default value is *false*\n\n",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "api_cursor_rc_201": {
        "properties": {
          "code": {
            "description": "The HTTP status code.\n\n",
            "format": "integer",
            "type": "integer"
          },
          "count": {
            "description": "The total number of result documents available (only available if the query was executed with the *count* attribute set).\n\n",
            "format": "int64",
            "type": "integer"
          },
          "error": {
            "description": "A flag to indicate that an error occurred (*false* in this case).\n\n",
            "format": "",
            "type": "boolean"
          },
          "extra": {
            "description": "An optional JSON object with extra information about the query result contained in its *stats* sub-attribute. For data-modification queries, the *extra.stats* sub-attribute will contain the number of modified documents and the number of documents that could not be modified due to an error (if *ignoreErrors* query option is specified).\n\n",
            "type": "object"
          },
          "hasMore": {
            "description": "A boolean indicator whether there are more results\navailable for the cursor on the server.\n\n",
            "format": "",
            "type": "boolean"
          },
          "id": {
            "description": "Id of temporary cursor created on the server (optional, see above).\n\n",
            "type": "string"
          },
          "result": {
            "description": "An array of result documents (might be empty if query has no results).\n\n",
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_cursor_rc_400": {
        "properties": {
          "code": {
            "description": "The HTTP status code.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "error": {
            "description": "Boolean flag to indicate that an error occurred (*true* in this case)\n\n",
            "format": "",
            "type": "boolean"
          },
          "errorMessage": {
            "description": "A descriptive error message\nIf the query specification is complete, the server will process the query. If an error occurs during query processing, the server will respond with *HTTP 400*. Again, the body of the response will contain details about the error.\n\n",
            "type": "string"
          },
          "errorNum": {
            "description": "The server error number.\n\n",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "api_explain": {
        "properties": {
          "bindVars": {
            "description": "Key/value pairs representing the bind parameters.\n\n",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "options": {
            "$ref": "#/definitions/explain_options"
          },
          "query": {
            "description": "The query which you want explained; If the query references any bind variables, these must also be passed in the attribute *bindVars*. Additional options for the query can be passed in the *options* attribute.\n\n",
            "type": "string"
          }
        },
        "required": [
          "query"
        ],
        "type": "object"
      },
      "api_export": {
        "properties": {
          "bindVars": {
            "additionalProperties": {},
            "description": "Key-value pairs representing the bind parameters.\n\n",
            "type": "object"
          },
          "query": {
            "description": "C8QL query. Default: returns all documents.",
            "format": "string",
            "type": "string",
            "default": ""
          }
        },
        "type": "object"
      },
      "api_import": {
        "properties": {
          "data": {
            "description": "Array of documents that will be created in the specified collection.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "details": {
            "description": "If *true* extra information for errors and unprocessed documents will be returned in the result.",
            "format": "boolean",
            "type": "boolean",
            "default": false
          },
          "primaryKey": {
            "description": "If used, this attribute becomes the *_key* for the new document. If the values in the attribute are not strings, we convert them to strings before import. Any existing *_key* value is renamed to *old_key*. You must use the following naming convention: https://macrometa.dev/documents/naming-conventions/#document-keys",
            "format": "string",
            "type": "string",
            "default": ""
          },
          "replace": {
            "description": "If *true*, existing document having same *_key* in the colletion, shall be replaced.",
            "format": "boolean",
            "type": "boolean",
            "default": false
          }
        },
        "type": "object"
      },
      "api_gharial_create_opts": {
        "description": "A JSON object to define options for creating collections within this graph.\nIt can contain the following attributes:\n\n",
        "type": "object"
      },
      "api_index_fulltext": {
        "properties": {
          "fields": {
            "description": "An array of attribute names. Currently, the array is limited\nto exactly one attribute.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "minLength": {
            "description": "Minimum character length of words to index. Will default to a server-defined value if unspecified. It is thus recommended to set this value explicitly when creating the index.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "type": {
            "description": "Must be equal to *\"fulltext\"*.\n\n",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "api_index_geo": {
        "properties": {
          "fields": {
            "description": "An array with one or two attribute paths.\n\nIf it is an array with one attribute path *location*, then a geo-spatial index on all documents is created using *location* as path to the coordinates. The value of the attribute must be an array with at least two double values. The array must contain the latitude (first value) and the longitude (second value). All documents, which do not have the attribute path or with value that are not suitable, are ignored.\n\nIf it is an array with two attribute paths *latitude* and *longitude*, then a geo-spatial index on all documents is created using *latitude* and *longitude* as paths the latitude and the longitude. The value of the attribute *latitude* and of the attribute *longitude* must a double. All documents, which do not have the attribute paths or which values are not suitable, are ignored.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "geoJson": {
            "description": "If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions.\n\n",
            "type": "string"
          },
          "type": {
            "description": "Must be equal to *\"geo\"*.\n\n",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "api_index_hash": {
        "properties": {
          "deduplicate": {
            "description": "If *false*, the deduplication of array values is turned off.\n\n",
            "format": "boolean",
            "type": "boolean"
          },
          "fields": {
            "description": "An array of attribute paths.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sparse": {
            "description": "If *true*, then create a sparse index.\n\n",
            "format": "",
            "type": "boolean"
          },
          "type": {
            "description": "Must be equal to *\"hash\"*.\n\n",
            "type": "string"
          },
          "unique": {
            "description": "If *true*, then create a unique index.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "api_index_persistent": {
        "properties": {
          "fields": {
            "description": "An array of attribute paths.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sparse": {
            "description": "If *true*, then create a sparse index.\n\n",
            "format": "",
            "type": "boolean"
          },
          "type": {
            "description": "Must be equal to *\"persistent\"*.\n\n",
            "type": "string"
          },
          "unique": {
            "description": "If *true*, then create a unique index.\n\n",
            "format": "",
            "type": "boolean"
          },
          "deduplicate": {
            "description": "It controls whether inserting duplicate index values from the same document into a unique array index will lead to a unique constraint error or not. The default value is *true*.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "api_index_skiplist": {
        "properties": {
          "deduplicate": {
            "description": "If *false*, the deduplication of array values is turned off.\n\n",
            "format": "boolean",
            "type": "boolean"
          },
          "fields": {
            "description": "An array of attribute paths.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sparse": {
            "description": "If *true*, then create a sparse index.\n\n",
            "format": "",
            "type": "boolean"
          },
          "type": {
            "description": "Must be equal to *\"skiplist\"*.\n\n",
            "type": "string"
          },
          "unique": {
            "description": "If *true*, then create a unique index.\n\n",
            "format": "",
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "api_index_ttl": {
        "properties": {
          "expireAfter": {
            "description": "The time (in seconds) after a document's creation after which the\ndocuments count as \"expired\".\n\n",
            "format": "",
            "type": "number"
          },
          "fields": {
            "description": "An array with exactly one attribute path.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Must be equal to *\"ttl\"*.\n\n",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "api_transaction": {
        "properties": {
          "action": {
            "description": "The actual transaction operations to be executed, in the form of stringified JavaScript code. The code will be executed on server side, with late binding. It is thus critical that the code specified in *action* properly sets up all the variables it needs.\nIf the code specified in *action* ends with a return statement, the value returned will also be returned by the REST API in the *result* attribute if the transaction committed successfully.\n\n",
            "type": "string"
          },
          "allowImplicit": {
            "description": "Allow reading from undeclared collections.\n\n",
            "format": "boolean",
            "type": "boolean"
          },
          "collections": {
            "description": "*collections* must be a JSON object that can have one or all sub-attributes *read*, *write* or *exclusive*, each being an array of collection names or a single collection name as string. Collections that will be written to in the transaction must be declared with the *write* or *exclusive* attribute or it will fail, whereas non-declared collections from which is solely read will be added lazily. The optional sub-attribute *allowImplicit* can be set to *false* to let transactions fail in case of undeclared collections for reading. Collections for reading should be fully declared if possible, to avoid deadlocks.\n\n",
            "type": "string"
          },
          "lockTimeout": {
            "description": "An optional numeric value that can be used to set a timeout for waiting on collection locks. If not specified, a default value will be used. Setting *lockTimeout* to *0* will make database not time out waiting for a lock.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "maxTransactionSize": {
            "description": "Transaction size limit in bytes. \n\n",
            "format": "int64",
            "type": "integer"
          },
          "params": {
            "description": "Optional arguments passed to *action*.\n\n",
            "type": "string"
          }
        },
        "required": [
          "collections"
        ],
        "type": "object"
      },
      "api_transaction_begin": {
        "properties": {
          "allowImplicit": {
            "description": "Allow reading from undeclared collections.\n\n",
            "format": "boolean",
            "type": "boolean"
          },
          "collections": {
            "description": "*collections* must be a JSON object that can have one or all sub-attributes *read*, *write* or *exclusive*, each being an array of collection names or a single collection name as string. Collections that will be written to in the transaction must be declared with the *write* or *exclusive* attribute or it will fail, whereas non-declared collections from which is solely read will be added lazily. The optional sub-attribute *allowImplicit* can be set to *false* to let transactions fail in case of undeclared collections for reading. Collections for reading should be fully declared if possible, to avoid deadlocks.\n\n",
            "type": "string"
          },
          "lockTimeout": {
            "description": "An optional numeric value that can be used to set a timeout for waiting on collection locks. If not specified, a default value will be used. Setting *lockTimeout* to *0* will make database not time out waiting for a lock.\n\n",
            "format": "int64",
            "type": "integer"
          },
          "maxTransactionSize": {
            "description": "Transaction size limit in bytes. \n\n",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "collections"
        ],
        "type": "object"
      },
      "post_metrics_query": {
        "properties": {
          "GeoFabric": {
            "description": "GeoFabric name\n\n",
            "type": "string"
          },
          "limit": {
            "description": "Number of results we want to receive.\n\n",
            "format": "integer",
            "type": "integer"
          },
          "metrics": {
            "description": "Array of strings containing the metric names we want to receive.\n\n",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "querytype": {
            "description": "\"list\" returns a list of all available metrics, \"get\" returns all the requested metrics, \"sum\" returns sum of all records for each of the requested metrics.\n\n",
            "type": "string"
          },
          "since": {
            "description": "Unix timestamp in milliseconds of oldest entry we want to receive.\n\n",
            "format": "int64",
            "type": "integer"
          }
        },
        "required": [
          "querytype"
        ],
        "type": "object"
      },
      "setof_statistics_struct": {
        "description": "Total connection times\n\nthe system time \n\nthe request times\n\nthe time requests were queued waiting for processing\n\nIO Time\n\nnumber of bytes sent to the clients\n\nnumber of bytes received from the clients.\n\n",
        "properties": {
          "count": {
            "description": "Number of values summarized.\n\n",
            "format": "",
            "type": "integer"
          },
          "counts": {
            "description": "Array containing the values.\n\n",
            "format": "integer",
            "items": {
              "type": "integer"
            },
            "type": "array"
          },
          "sum": {
            "description": "Summarized value of all counts.\n\n",
            "format": "",
            "type": "number"
          }
        },
        "type": "object"
      },
      "system_statistics_struct": {
        "description": "Metrics gathered from the system about this process; may depend on the host OS.\n\n",
        "properties": {
          "majorPageFaults": {
            "description": "Page faults\n\n",
            "format": "",
            "type": "integer"
          },
          "minorPageFaults": {
            "description": "Page faults\n\n",
            "format": "",
            "type": "integer"
          },
          "numberOfThreads": {
            "description": "The number of threads in the server.\n\n",
            "format": "",
            "type": "integer"
          },
          "residentSize": {
            "description": "RSS of process\n\n",
            "format": "",
            "type": "integer"
          },
          "residentSizePercent": {
            "description": "RSS of process as a percentage\n\n",
            "format": "float",
            "type": "number"
          },
          "systemTime": {
            "description": "The system CPU time used by the server process.\n\n",
            "format": "float",
            "type": "number"
          },
          "userTime": {
            "description": "The user CPU time used by the server process.\n\n",
            "format": "float",
            "type": "number"
          },
          "virtualSize": {
            "description": "VSS of the process.\n\n\n",
            "format": "",
            "type": "integer"
          }
        },
        "required": [
          "system"
        ],
        "type": "object"
      },
      "v8_context_struct": {
        "description": "Statistics about the V8 javascript contexts.\n\n",
        "properties": {
          "available": {
            "description": "The number of currently spawned V8 contexts.\n\n",
            "format": "",
            "type": "integer"
          },
          "busy": {
            "description": "The number of currently active V8 contexts.\n\n",
            "format": "",
            "type": "integer"
          },
          "dirty": {
            "description": "The number of contexts that were previously used, and should now be garbage collected before being re-used.\n\n",
            "format": "",
            "type": "integer"
          },
          "free": {
            "description": "The number of V8 contexts that are free to use.\n\n",
            "format": "",
            "type": "integer"
          },
          "max": {
            "description": "The total number of V8 contexts we may spawn as configured by --javascript.v8-contexts.\n\n\n",
            "format": "",
            "type": "integer"
          },
          "memory": {
            "description": "A list of V8 memory / garbage collection watermarks; Refreshed on every garbage collection run;\nPreserves min/max memory used at that time for 10 seconds.\n\n",
            "format": "v8_isolate_memory",
            "items": {
              "$ref": "#/definitions/v8_isolate_memory"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v8_isolate_memory": {
        "description": "",
        "properties": {
          "contextId": {
            "description": "ID of the context this set of memory statistics is from.\n\n",
            "format": "",
            "type": "integer"
          },
          "countOfTimes": {
            "description": "How many times was the garbage collection run in these 10 seconds.\n\n",
            "format": "",
            "type": "integer"
          },
          "heapMax": {
            "description": "High watermark of all garbage collection runs in 10 seconds.\n\n",
            "format": "",
            "type": "integer"
          },
          "heapMin": {
            "description": "Low watermark of all garbage collection runs in these 10 seconds.\n\n\n",
            "format": "",
            "type": "integer"
          },
          "tMax": {
            "description": "The timestamp where the 10 seconds interval started.\n\n",
            "format": "",
            "type": "number"
          }
        },
        "type": "object"
      },
      "version_details_struct": {
        "description": "An optional JSON object with additional details. This is returned only if the *details* query parameter is set to *true* in the request.\n\n",
        "properties": {
          "build-date": {
            "description": "The date when this binary was created.\n\n",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vertex_representation": {
        "description": "The internal attributes for the vertex.\n\n",
        "properties": {
          "_id": {
            "description": "The _id value of the stored data.\n\n",
            "type": "string"
          },
          "_key": {
            "description": "The _key value of the stored data.\n\n",
            "type": "string"
          },
          "_rev": {
            "description": "The _rev value of the stored data.\n\n",
            "type": "string"
          }
        },
        "required": [
          "vertex"
        ],
        "type": "object"
      },
      "error_response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "stream_app_validate_request": {
        "type": "object",
        "properties": {
          "definition": {
            "type": "string"
          }
        }
      },
      "stream_app_response": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "definition": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "stream_app_response_container": {
        "type": "object",
        "properties": {
          "streamApps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/stream_app_response"
            }
          }
        }
      },
      "get_all_sample_stream_apps_response": {
        "type": "object",
        "properties": {
          "streamAppSamples": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/sample_stream_app_information"
            }
          }
        }
      },
      "sample_stream_app_information": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "definition": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "get_all_stream_apps_response": {
        "type": "object",
        "properties": {
          "streamApps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/stream_app_information"
            }
          }
        }
      },
      "stream_app_information": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "definition": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "stream_app_request": {
        "type": "object",
        "properties": {
          "definition": {
            "type": "string"
          },
          "regions": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "stream_app_query_response": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      },
      "stream_app_query_request": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          }
        }
      },
      "Account_Create": {
        "properties": {
          "tenant": {
            "description": "Tenant",
            "format": "string",
            "type": "string"
          },
          "plan": {
            "description": "Plan types.",
            "format": "string",
            "type": "object",
            "properties": {
              "name": {
                "description": "Plan name.",
                "format": "string",
                "type": "string"
              },
              "demo": {
                "description": "If plan is demo, set `true`. Else set `false`.",
                "format": "boolean",
                "type": "boolean"
              }
            }
          },
          "contact": {
            "properties": {
              "firstname": {
                "description": "First Name",
                "format": "string",
                "type": "string"
              },
              "lastname": {
                "description": "Last Name",
                "format": "string",
                "type": "string"
              },
              "email": {
                "description": "Email id",
                "format": "string",
                "type": "string"
              },
              "phone": {
                "description": "Phone number",
                "format": "string",
                "type": "string"
              },
              "line1": {
                "description": "Address line 1",
                "format": "string",
                "type": "string"
              },
              "line2": {
                "description": "Address line 2",
                "format": "string",
                "type": "string"
              },
              "city": {
                "description": "City",
                "format": "string",
                "type": "string"
              },
              "state": {
                "description": "State",
                "format": "string",
                "type": "string"
              },
              "country": {
                "description": "Two-letter country code (ISO 3166-1 alpha-2).",
                "format": "string",
                "type": "string"
              },
              "zipcode": {
                "description": "Zip code",
                "format": "string",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "tenant"
        ],
        "type": "object"
      },
      "Contact_Update": {
        "properties": {
          "firstname": {
            "description": "First Name",
            "format": "string",
            "type": "string"
          },
          "lastname": {
            "description": "Last Name",
            "format": "string",
            "type": "string"
          },
          "email": {
            "description": "Email id",
            "format": "string",
            "type": "string"
          },
          "phone": {
            "description": "Phone number",
            "format": "string",
            "type": "string"
          },
          "line1": {
            "description": "Address line 1",
            "format": "string",
            "type": "string"
          },
          "line2": {
            "description": "Address line 2",
            "format": "string",
            "type": "string"
          },
          "city": {
            "description": "City",
            "format": "string",
            "type": "string"
          },
          "state": {
            "description": "State",
            "format": "string",
            "type": "string"
          },
          "country": {
            "description": "Two-letter country code (ISO 3166-1 alpha-2).",
            "format": "string",
            "type": "string"
          },
          "zipcode": {
            "description": "Zip code",
            "format": "string",
            "type": "string"
          }
        },
        "required": [
          "tenant"
        ],
        "type": "object"
      },
      "Plan_Update": {
        "properties": {
          "name": {
            "description": "Plan name",
            "format": "string",
            "type": "string"
          }
        },
        "required": [
          "tenant"
        ],
        "type": "object"
      },
      "Payment_Update": {
        "properties": {
          "payment_method_id": {
            "description": "Payment Method ID",
            "format": "string",
            "type": "string"
          }
        }
      },
      "Response_Billing_Code_200": {
        "properties": {
          "code": {
            "description": "Request status",
            "type": "integer",
            "example": 200
          },
          "error": {
            "description": "If there is any error, this will be true",
            "type": "boolean",
            "example": false
          },
          "message": {
            "description": "Message from server",
            "type": "string"
          }
        }
      },
      "Response_Billing_Code_400": {
        "properties": {
          "code": {
            "description": "Request status",
            "type": "integer",
            "example": 400
          },
          "error": {
            "description": "If there is any error, this will be true",
            "type": "boolean"
          },
          "message": {
            "description": "Message from server",
            "type": "string"
          }
        }
      },
      "Response_Billing_Code_500": {
        "properties": {
          "code": {
            "description": "Request status",
            "type": "integer",
            "example": 500
          },
          "error": {
            "description": "If there is any error, this will be true",
            "type": "boolean"
          },
          "message": {
            "description": "Message from server",
            "type": "string"
          }
        }
      },
      "Response_Billing_Code_502": {
        "properties": {
          "code": {
            "description": "Request status",
            "type": "integer",
            "example": 502
          },
          "error": {
            "description": "If there is any error, this will be true",
            "type": "boolean"
          },
          "message": {
            "description": "Message from server",
            "type": "string"
          }
        }
      },
      "Response_Billing_Account_Get": {
        "properties": {
          "code": {
            "type": "number",
            "example": "200"
          },
          "error": {
            "type": "boolean",
            "example": false
          },
          "data": {
            "type": "object",
            "properties": {
              "created_at": {
                "type": "string",
                "example": "Timestamp when account was created."
              },
              "plan": {
                "type": "object",
                "properties": {
                  "attribution": {
                    "description": "Attribution of the plan",
                    "type": "string",
                    "example": "Macrometa"
                  },
                  "name": {
                    "description": "Name of the plan",
                    "type": "string",
                    "example": "PlanName"
                  },
                  "subscription": {
                    "description": "List of the subscription ID of the plan",
                    "type": "object"
                  },
                  "target": {
                    "description": "Target where billing data is uploaded. E.g. Stripe, AWS S3.",
                    "type": "string",
                    "example": "Macrometa"
                  }
                }
              },
              "subscription_id": {
                "description": "If target is Stripe, subscription ID is returned by Stripe. If not, it's empty",
                "type": "string",
                "example": "sub_<subscription_id>"
              },
              "customer_id": {
                "description": "If target is Stripe, customer ID is returned by Stripe. If not, it's empty",
                "type": "string",
                "example": "cus_<customer_id>"
              },
              "contact": {
                "type": "object",
                "properties": {
                  "firstname": {
                    "type": "string",
                    "example": "First name of the user."
                  },
                  "lastname": {
                    "type": "string",
                    "example": "Last name of the user."
                  },
                  "email": {
                    "type": "string",
                    "example": "Email address of the user."
                  },
                  "phone": {
                    "type": "string",
                    "example": "Phone number of the user."
                  },
                  "line1": {
                    "type": "string",
                    "example": "Address line 1."
                  },
                  "line2": {
                    "type": "string",
                    "example": "Address line 2."
                  },
                  "city": {
                    "type": "string",
                    "example": "Address city."
                  },
                  "state": {
                    "type": "string",
                    "example": "Address state."
                  },
                  "country": {
                    "type": "string",
                    "example": "Address country."
                  },
                  "zipcode": {
                    "type": "string",
                    "example": "Address zip code."
                  }
                }
              }
            }
          }
        }
      },
      "Response_Usage_Get": {
        "properties": {
          "code": {
            "description": "Request status",
            "type": "integer"
          },
          "error": {
            "description": "If there is any error, this will be true",
            "type": "boolean",
            "example": false
          },
          "data": {
            "description": "Message from server",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_key": {
                  "type": "string"
                },
                "tenant": {
                  "type": "string"
                },
                "from": {
                  "type": "integer"
                },
                "to": {
                  "type": "integer"
                },
                "region": {
                  "type": "string"
                },
                "records": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "integer"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "federation_member_peerip": {
        "properties": {
          "peer": {
            "description": "Hostname of the peer cluster that needs to be added to the federation.",
            "type": "string"
          }
        }
      },
      "search_get_view_rc_200_example": {
        "properties": {
          "code": {
            "description": "Request status",
            "type": "integer",
            "example": 200
          },
          "error": {
            "description": "If there is any error, this will be true",
            "type": "boolean",
            "example": false
          },
          "result": {
            "description": "View information",
            "type": "object",
            "properties": {
              "globallyUniqueId": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "example": "search"
              }
            }
          }
        }
      },
      "search_get_view_properties_rc_200_example": {
        "properties": {
          "code": {
            "description": "Request status",
            "type": "integer",
            "example": 200
          },
          "error": {
            "description": "If there is any error, this will be true",
            "type": "boolean",
            "example": false
          },
          "result": {
            "description": "View information",
            "type": "object",
            "properties": {
              "globallyUniqueId": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "links": {
                "type": "object",
                "properties": {}
              },
              "name": {
                "type": "string"
              },
              "primarySort": {
                "type": "array",
                "items": {}
              },
              "type": {
                "type": "string",
                "example": "search"
              }
            }
          }
        }
      },
      "Concurrency": {
        "properties": {
          "limit": {
            "minimum": 0,
            "type": "number"
          },
          "target": {
            "minimum": 0,
            "type": "number"
          },
          "utilization": {
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "limit",
          "target",
          "utilization"
        ],
        "type": "object"
      },
      "CreateConfigmapDto": {
        "properties": {
          "fromEnvFile": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fromFile": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fromLiteral": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "regions"
        ],
        "type": "object"
      },
      "CreateNamespaceDto": {
        "properties": {
          "annotations": {
            "type": "object"
          },
          "labels": {
            "type": "object"
          },
          "limits": {
            "$ref": "#/definitions/Limits"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requests": {
            "$ref": "#/definitions/Limits"
          },
          "tenant": {
            "type": "string"
          }
        },
        "required": [
          "tenant",
          "regions",
          "annotations",
          "labels",
          "limits",
          "requests"
        ],
        "type": "object"
      },
      "CreateRegistrySecretDto": {
        "properties": {
          "email": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "server": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "required": [
          "regions",
          "name",
          "server",
          "email",
          "username",
          "password"
        ],
        "type": "object"
      },
      "CreateServiceDto": {
        "properties": {
          "annotationRevision": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "annotationService": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "annotations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "args": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "autoscaleWindow": {
            "type": "string"
          },
          "cmd": {
            "type": "string"
          },
          "concurrency": {
            "$ref": "#/definitions/Concurrency"
          },
          "env": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "envFrom": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "force": {
            "type": "boolean"
          },
          "image": {
            "type": "string"
          },
          "labelRevision": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labelService": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "limits": {
            "$ref": "#/definitions/Limits"
          },
          "lockToDigest": {
            "type": "boolean"
          },
          "mount": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "port": {
            "maximum": 65535,
            "type": "number"
          },
          "pullSecret": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requests": {
            "$ref": "#/definitions/Limits"
          },
          "revision": {
            "type": "string"
          },
          "scale": {
            "$ref": "#/definitions/Scale"
          },
          "service": {
            "type": "string"
          }
        },
        "required": [
          "service",
          "image"
        ],
        "type": "object"
      },
      "Limits": {
        "properties": {
          "cpu": {
            "type": "number"
          },
          "memory": {
            "type": "number"
          }
        },
        "required": [
          "cpu",
          "memory"
        ],
        "type": "object"
      },
      "Scale": {
        "properties": {
          "init": {
            "minimum": 0,
            "type": "number"
          },
          "max": {
            "minimum": 0,
            "type": "number"
          },
          "min": {
            "minimum": 0,
            "type": "number"
          }
        },
        "required": [
          "init",
          "min",
          "max"
        ],
        "type": "object"
      },
      "UpdateConfigmapDto": {
        "properties": {
          "fromEnvFile": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fromFile": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fromLiteral": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpdateNamespaceDto": {
        "properties": {
          "annotations": {
            "type": "object"
          },
          "labels": {
            "type": "object"
          },
          "limits": {
            "$ref": "#/definitions/Limits"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requests": {
            "$ref": "#/definitions/Limits"
          }
        },
        "type": "object"
      },
      "UpdateServiceDto": {
        "properties": {
          "annotationRevision": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "annotationService": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "annotations": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "args": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "autoscaleWindow": {
            "type": "string"
          },
          "cmd": {
            "type": "string"
          },
          "concurrency": {
            "$ref": "#/definitions/Concurrency"
          },
          "env": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "envFrom": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "force": {
            "type": "boolean"
          },
          "image": {
            "type": "string"
          },
          "labelRevision": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labelService": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "limits": {
            "$ref": "#/definitions/Limits"
          },
          "lockToDigest": {
            "type": "boolean"
          },
          "mount": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "port": {
            "maximum": 65535,
            "type": "number"
          },
          "pullSecret": {
            "type": "string"
          },
          "regions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requests": {
            "$ref": "#/definitions/Limits"
          },
          "revision": {
            "type": "string"
          },
          "scale": {
            "$ref": "#/definitions/Scale"
          },
          "tag": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "traffic": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "untag": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StreamSourceRequestBody": {
        "type": "object",
        "description": "Body of the Stream Source creation/update request.",
        "properties": {
          "region": {
            "type": "string",
            "description": "Name of the region in which this connector will run. The default value is the local region where the request is executed.",
            "example": "gdn-us-east"
          },
          "sourceType": {
            "type": "string",
            "description": "Type of the connector.",
            "example": "POSTGRESQL"
          },
          "database": {
            "type": "object",
            "description": "Information of the database connection.",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "Name of the host. Is this the same as the region name. We don't have a concept of a hostname.",
                "example": "www.mydomain.com"
              },
              "port": {
                "type": "string",
                "description": "Port the database service is running on.",
                "example": "5432"
              },
              "user": {
                "type": "string",
                "description": "Database user.",
                "example": "postgres"
              },
              "password": {
                "type": "string",
                "description": "Database password.",
                "example": "changeme"
              },
              "dbname": {
                "type": "string",
                "description": "Name of the database to connect.",
                "example": "postgres"
              },
              "serverId": {
                "type": "string",
                "description": "Unique id for this database server. This will be automatically assigned if left unset."
              },
              "serverName": {
                "type": "string",
                "description": "Name for this database server.",
                "example": "dbserver1"
              },
              "tableWhitelist": {
                "type": "string",
                "description": "Comma seperated table list to listen changes. If left unset, all non-system table changes will be captured. Every item should be of <schemaName>.<tableName> format.",
                "example": "public.person,public.order"
              }
            },
            "required": [
              "hostname",
              "port",
              "user",
              "password",
              "dbname",
              "serverName"
            ]
          }
        },
        "required": [
          "sourceType",
          "database"
        ]
      },
      "StreamSinkRequestBody": {
        "type": "object",
        "description": "Body of the Stream Sink creation/update request.",
        "properties": {
          "region": {
            "type": "string",
            "description": "Name of the region in which this connector will run. The default value is the local region where the request is executed.",
            "example": "test-us-east"
          },
          "sinkType": {
            "type": "string",
            "description": "Type of the connector.",
            "example": "POSTGRESQL"
          },
          "database": {
            "type": "object",
            "description": "Information of the database connection.",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "Host the database is deployed at.",
                "example": "www.mydomain.com"
              },
              "port": {
                "type": "string",
                "description": "Port the database service is running on.",
                "example": "5432"
              },
              "user": {
                "type": "string",
                "description": "Database user.",
                "example": "postgres"
              },
              "password": {
                "type": "string",
                "description": "Database password.",
                "example": "changeme"
              },
              "dbname": {
                "type": "string",
                "description": "Name of the database to connect.",
                "example": "postgres"
              },
              "tableName": {
                "type": "string",
                "description": "Table the Sink connector will connect to.",
                "example": "person"
              },
              "columns": {
                "type": "array",
                "description": "Column definitions of the Sink table.",
                "items": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the column",
                      "example": "id"
                    },
                    "type": {
                      "type": "string",
                      "description": "Data type of the column",
                      "example": "int"
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              }
            },
            "required": [
              "hostname",
              "port",
              "user",
              "password",
              "dbname",
              "tableName",
              "columns"
            ]
          }
        },
        "required": [
          "sinkType",
          "database"
        ]
      },
      "StreamConnectorSupportedPlatform": {
        "type": "object",
        "description": "Information of a supported Stream-IO-Connector Platform.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the connector.",
            "example": "POSTGRESQL"
          },
          "description": {
            "type": "string",
            "description": "Description of the connector.",
            "example": "PostgreSQL Connector"
          },
          "sourceSupported": {
            "type": "boolean",
            "description": "Whether this connector supports sources.",
            "example": true
          },
          "sinkSupported": {
            "type": "boolean",
            "description": "Whether this connector supports sinks.",
            "example": true
          }
        }
      },
      "StreamConnectorDefinition": {
        "type": "object",
        "description": "Definition of an IO Connector.",
        "properties": {
          "region": {
            "type": "string",
            "description": "Region the connector runs on.",
            "example": "gdn-us-east"
          },
          "tenant": {
            "type": "string",
            "description": "Tenant the connector runs on.",
            "example": "PostgreSQL Connector"
          },
          "global": {
            "type": "boolean",
            "description": "Whether the connector supports accross regions.",
            "example": false
          },
          "fabric": {
            "type": "string",
            "description": "Fabric the connector runs on.",
            "example": "_system"
          },
          "name": {
            "type": "string",
            "description": "Name of the connector.",
            "example": "c8locals.postgres-connector"
          },
          "direction": {
            "type": "string",
            "description": "Whether the connector is a SOURCE or SINK. One of these values will be available."
          },
          "type": {
            "type": "string",
            "description": "Type of the connector.",
            "example": "POSTGRESQL"
          },
          "database": {
            "type": "object",
            "description": "Information of the database connection.",
            "properties": {
              "hostname": {
                "type": "string",
                "description": "Host the database is deployed at.",
                "example": "www.mydomain.com"
              },
              "port": {
                "type": "string",
                "description": "Port the database service is running on.",
                "example": "5432"
              },
              "user": {
                "type": "string",
                "description": "Database user.",
                "example": "postgres"
              },
              "password": {
                "type": "string",
                "description": "Database password.",
                "example": "changeme"
              },
              "dbname": {
                "type": "string",
                "description": "Name of the database to connect.",
                "example": "postgres"
              },
              "serverId": {
                "type": "string",
                "description": "Unique id for this database server. This will be automatically assigned if left unset. Specific for Source connectors."
              },
              "serverName": {
                "type": "string",
                "description": "Name for this database server. Specific for Source connectors.",
                "example": "dbserver1"
              },
              "tableWhitelist": {
                "type": "string",
                "description": "Comma seperated table list to listen changes. Specific for Source connectors.",
                "example": "public.person,public.order"
              },
              "tableName": {
                "type": "string",
                "description": "Table the Sink connector will connect to. Specific for Sink connectors.",
                "example": "person"
              },
              "columns": {
                "type": "array",
                "description": "Column definitions of a Sink table. Specific to Sink connectors.",
                "items": {
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the column",
                      "example": "id"
                    },
                    "type": {
                      "type": "string",
                      "description": "Data type of the column",
                      "example": "int"
                    }
                  }
                }
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "Whether the connector is started or not.",
            "example": true
          },
          "lastError": {
            "type": "string",
            "description": "If there was an error at the last action of creating/updating/deleting the connector, it will be available.",
            "example": "Could not create the connector due to unsupported connector type."
          }
        }
      },
      "dns_info_response": {
        "properties": {
          "global_url": {
            "type": "string",
            "description": "The global URL for the tenant and fabric pair.",
            "example": "global-url.mydomain.io"
          },
          "regional_urls": {
            "type": "object",
            "description": "Populates the regional URLs.",
            "properties": {
              "region-name-1": {
                "type": "string",
                "description": "The regional URL for the tenant and fabric pair for datacenter 1.",
                "example": "regional-url-1.mydomain.io"
              },
              "region-name-2": {
                "type": "string",
                "description": "The regional URL for the tenant and fabric pair for datacenter 2.",
                "example": "regional-url-2.mydomain.io"
              }
            }
          },
          "status": {
            "type": "object",
            "description": "Status of the regional URLs.",
            "properties": {
              "region-name-1": {
                "type": "string",
                "description": "Status of the regional URL for datacenter 1. Available status - enabled, disabled, pending, error",
                "example": "enabled"
              },
              "region-name-2": {
                "type": "string",
                "description": "Status of the regional URL for datacenter 2. Available status - enabled, disabled, pending, error",
                "example": "enabled"
              }
            }
          },
          "err_msg": {
            "type": "string",
            "description": "The error message for the failure during the DNS record CRUD operations.",
            "example": "Error message string"
          }
        }
      },
      "post_zendesk_api": {
        "properties": {
          "operation": {
            "type": "string",
            "description": "The operation for which the user wants to create the Zendesk support ticket.",
            "example": "Generic"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the support ticket.",
            "example": "Ticket Subject"
          },
          "body": {
            "type": "string",
            "description": "The body of the support ticket.",
            "example": "Ticket Body"
          },
          "parameters": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the tenant.",
                "example": "tenant-name"
              },
              "email": {
                "type": "string",
                "description": "The email ID of the tenant.",
                "example": "tenant@email.com"
              },
              "datacenter": {
                "type": "string",
                "description": "The datacenter name for the tenant and fabric.",
                "example": "region"
              },
              "fabric": {
                "type": "string",
                "description": "The name of the fabric associated with the tenant",
                "example": "_system"
              }
            }
          }
        }
      }
    },
    "info": {
      "description": "Macrometa Global Data Network API.",
      "license": {
        "name": "Macrometa License, Version 2.0"
      },
      "title": "Macrometa GDN API",
      "version": ""
    },
    "paths": {
      "/_api/key/validate": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **apikey**: The api key as a string.\n  You can validate api keys only if you have admin permissions.\n\n  - **jwt**: The JWT token as a string.\n  You can validate jwt token only if you have admin permissions.\n\n",
          "operationId": "ValidateApiKey",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/apikey_validate"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the api key can be added by the server.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing from the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "409": {
              "description": "Returned if a api key with the same id already exists.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_409"
              }
            }
          },
          "summary": "Validate Api Key",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **keyid**: The id of the api key as a string.\n  You can create api keys only for yourself.\n\n",
          "operationId": "CreateApiKey",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/apikey_create"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the api key can be added by the server.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_201"
              }
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing from the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "409": {
              "description": "Returned if a api key with the same id already exists.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_409"
              }
            }
          },
          "summary": "Create Api Key",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "get": {
          "description": "\n\nFetches data about all api keys.  You can list only yours api keys.\n\nThe call will return a JSON object with at least the following attributes on success:\n\n- *keyid*: The id of the api key as a string.\n- *parent*: The user to who this api key belongs.\n- *tenant*: The api key tenant.\n\n\n",
          "operationId": "ListAvailableApiKeys",
          "parameters": [],
          "responses": {
            "200": {
              "description": "The api keys that were found.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_200"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            }
          },
          "summary": "List available api keys",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}": {
        "get": {
          "description": "\n\nFetches an existing api key, identified by *keyid*.  You can get only yours api keys.\n\nThe call will return a JSON object with at least the following attributes on success:\n\n- *keyid*: The id of the api key as a string.\n- *parent*: The user to who this api key belongs.\n- *tenant*: The api key tenant.\n\n\n",
          "operationId": "GetAvailableApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "API key fetched successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_200"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Get available api key.",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nRemoves an existing api key, identified by *keyid*.  You can remove only yours api keys.\n\n",
          "operationId": "RemoveApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the api key was removed by the server.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_202"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Remove Api Key.",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}/database": {
        "get": {
          "description": "\nFetch the list of databases available to the specified *keyid*. You need *Administrate* for the server access level in order to execute this REST call.\n\nThe call will return a JSON object with the per-database access privileges for the specified keyid . The *result* object will contain the databases names as object keys, and the associated privileges for the database as values.\n\nIn case you specified *full*, the result will contain the permissions for the databases as well as the permissions for the collections and streams.\n\n\n",
          "operationId": "ListTheAccessibleDatabasesForApiKey",
          "parameters": [
            {
              "description": "The id of the api key for which you want to query the databases.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return the full set of access levels for all databases and all collections.\n\n",
              "in": "query",
              "name": "full",
              "default": false,
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned the list of available databases for specified key.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_200_1"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "List the accessible databases for a keyid",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}/database/{dbname}": {
        "get": {
          "description": "\nFetch the database access level for a specific database.\n\n",
          "operationId": "GetTheDatabaseAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database to query.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_dbname_examples_rc_200"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Get the database access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nClears the database access level for the database *dbname* of api key with *keyid*. As consequence the default database access level is used. If there is no defined default database access level, it defaults to *No access*. You need permission to the *_system* database in order to execute this REST call.\n\n",
          "operationId": "ClearTheDatabaseAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_202"
              }
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Clear the database access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"rw\" to set the database access level to *Administrate* .\n   Use \"ro\" to set the database access level to *Access*.\n   Use \"none\" to set the database access level to *No access*.\n\nSets the database access levels for the database *dbname* of api key with *keyid*. You need the *Administrate* server access level in order to execute this REST call.\n\n\n",
          "operationId": "SetTheDatabaseAccessLevelForApiKey",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_database"
              },
              "x-description-offset": 54
            },
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access permissions were changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_dbname_examples_rc_200"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Set the database access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}/database/{dbname}/collection": {
        "get": {
          "description": "\nFetch the list of collections access level for a specific *user*\n\n If access level for collection is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\n\n",
          "operationId": "GetTheApiKeyCollectionsAccessLevel",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database to query.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return the full set of access levels for all collections.\n\n",
              "in": "query",
              "name": "full",
              "default": false,
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_200_2"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Get the specific collection access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}/database/{dbname}/collection/{collection}": {
        "get": {
          "description": "\nReturns the collection access level for a specific collection\n\n If access level for collection is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\n\n",
          "operationId": "GetTheSpecificCollectionAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database to query.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_dbname_examples_rc_200"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Get the specific collection access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\n\nClears the collection access level for the collection *collection* in the database *dbname* of api key with *keyid*.  As consequence the default collection access level is used. If there is no defined default collection access level, it defaults to *No access*.  You need permissions to the *_system* database in order to execute this REST call.\n\n",
          "operationId": "ClearTheCollectionAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_202"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Clear the collection access level.",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"rw\" to set the collection level access to *Read/Write*. Use \"ro\" to set the collection level access to  *Read Only*. Use \"none\" to set the collection level access to *No access*.\n\n - **collection**: Use \"&#42;\" to set default access level for all collections.\n\nIf access level for collection is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\nSets the collection access level for the *collection* in the database *dbname* for api key with *keyid*. You need the *Administrate* server access level in order to execute this REST call.\n\n",
          "operationId": "SetTheCollectionAccessLevelForApiKey",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_collection"
              },
              "x-description-offset": 54
            },
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "default": "*",
              "name": "collection",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access permissions were changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_dbname_examples_rc_200"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Set the collection access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}/database/{dbname}/stream": {
        "get": {
          "description": "\nFetch the list of streams available to the specified *keyid*. You need *Administrate* for the server access level in order to execute this REST call.\nThe call will return a JSON object with the per-stream access privileges for the specified keyid. The *result* object will contain the stream names as object keys, and the associated privileges for the stream as values.\n\n If access level for stream is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\n\n",
          "operationId": "ListTheAccessibleStreamsForApiKey",
          "parameters": [
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The id of the api key for which you want to query the streams.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return the full set of access levels for all streams.\n\n",
              "in": "query",
              "name": "full",
              "default": false,
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the list of available streams can be returned.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_200_2"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "List the accessible streams",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}/database/{dbname}/stream/{stream}": {
        "get": {
          "description": "\nFetch the stream access level for a specific stream.\n\n",
          "operationId": "GetTheStreamAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key for which you want to query the streams.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the stream to query.\n\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_dbname_examples_rc_200"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            }
          },
          "summary": "Get the stream access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nClears the stream access level for the *stream* of api key with *keyid*. As consequence the default stream access level is used. If there is no defined default stream access level, it defaults to *No access*.\n\n\n\n",
          "operationId": "ClearTheStreamAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the stream.\n\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_202"
              }
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Clear the stream access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"ro\" to set the stream access level to Subscribe.\n   Use \"wo\" to set the stream access level to Publish.\n Use \"rw\" to set the stream access level to Publish and Subscribe.\n  Use \"none\" to set the stream access level to *No access*.\n\n - **stream**: Use \"&#42;\" to set default access level for all streams.\n\nIf access level for stream is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\n Sets the stream access levels for the *stream* of api key with *keyid*. You need the *Administrate* server access level in order to execute this REST call.\n\n\n\n",
          "operationId": "SetTheStreamAccessLevelForApiKey",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_database"
              },
              "x-description-offset": 54
            },
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the stream.\n\n",
              "format": "string",
              "in": "path",
              "default": "*",
              "name": "stream",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level was changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_dbname_examples_rc_200"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Set the stream access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_api/key/{keyid}/billing": {
        "get": {
          "description": "\nFetch the billing access level.\n\n",
          "operationId": "GetTheBillingAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key for which you want to query the billing.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Billing access level fetched successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_200_billing"
              }
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Get the billing access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nClears the billing access level of *keyid*.\n\n",
          "operationId": "ClearTheBillingAccessLevelForApiKey",
          "parameters": [
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_http_examples_rc_202"
              }
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "404": {
              "description": "Returned if invalid api key provided.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Clear the billing access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"rw\" to set the billing access level to *Administrate*.\n   Use \"ro\" to set the billing access level to *Access*.\n   Use \"none\" to set the billing access level to *No access*.\n\nSets the billing access levels for api key with *keyid*. You need the *Administrate* server access level in order to execute this REST call.\n\n\n",
          "operationId": "SetTheBillingAccessLevelForApiKey",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_database"
              },
              "x-description-offset": 54
            },
            {
              "description": "The id of the api key.\n\n",
              "format": "string",
              "in": "path",
              "name": "keyid",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level was changed successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/api_key_dbname_examples_rc_200"
              }
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "Returned if API key with a given name doesn't exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Set the billing access level",
          "tags": [
            "API Keys"
          ],
          "x-examples": []
        }
      },
      "/_open/auth": {
        "post": {
          "description": "\n\nObtain a JWT Authentication for a user. After obtaining the token, REST API\ncalls may be invoked by passing the obtained token in the REST header.\nEither email or both tenant and username must be specified.\nAdd the following to your header when you make REST calls:\n*\"Authorization: bearer TOKEN\"*\n\n\nA JSON object with these properties is required:\n\n  - **username**: The name of the user for whom we want the auth token.\n  - **password**: The user password as a string. \n  - **email**: The email of the user for whom we want the auth token.\n  - **tenant**: The name of the tenant for whose user we want the auth token.\n\n",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/auth_token"
              },
              "x-description-offset": 355
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/auth_token"
                }
              }
            }
          },

          "responses": {
            "200": {
              "description": "Returned if token is successfully created for user.\n",
              "schema": {
                "$ref": "#/definitions/authentication_examples_rc_200"
              }
            },
            "401": {
              "description": "Returned if a user is not authorized to execute the request.\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "429": {
              "description": "Returned if the requests count from this IP exceeds the rate limit.\n\n\n"
            }
          },
          "summary": "Obtain JWT Authentication token for user.",
          "tags": [
            "Authentication"
          ],
          "security": {
            "ApiKeyAuth": false
          }
        }
      },
      "/_fabric/{fabric}/_api/kv/{collection}/count": {
        "get": {
          "description": "Gets kv count in given collection.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the KV count of given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_examples_rc_200"
              }
            },
            "404": {
              "description": "Returned if fabric or collection name does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Gets kv count in given collection.",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_fabric/{fabric}/_api/kv/{collection}/keys": {
        "get": {
          "description": "Gets keys from given collection.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "description": "This option can be used to simulate paging. **Default: 0**.\n\n",
              "in": "query",
              "name": "offset",
              "required": false,
              "default": 0,
              "type": "string"
            },
            {
              "description": "This option can be used to simulate paging. Limit the result. **Default: 20**, **Max: 100**.\n\n",
              "in": "query",
              "name": "limit",
              "required": false,
              "default": 20,
              "type": "string"
            },
            {
              "description": "Order the results asc or desc. **Default: asc**.\n\n",
              "in": "query",
              "name": "order",
              "required": false,
              "default": "asc",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns KV documents in a given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_array_rc_200"
              }
            },
            "404": {
              "description": "Returned if fabric or collection name does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Gets keys from given collection.",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_fabric/{fabric}/_api/kv": {
        "get": {
          "description": "\nLists all collections.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned list of all collection in a given fabric with expiration details.\n\n",
              "schema": {
                "$ref": "#/definitions/keys_array_rc_200_1"
              }
            },
            "404": {
              "description": "Returned if fabric name does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Lists all collections.",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_fabric/{fabric}/_api/kv/{collection}": {
        "post": {
          "description": "Creates collection.\n",
          "operationId": "CreateNamespace",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "description": "If it is set then this namespace supports TTL.\n\n",
              "in": "query",
              "name": "expiration",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "description": "Properties of the collection.\n",
              "schema": {
                "$ref": "#/definitions/kv_collection_post_body_example"
              }
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned after successful collection creation.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_collection_examples_rc_200"
              }
            },
            "404": {
              "description": "Returned if fabric or collection name does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            },
            "409": {
              "description": "Returned if collection with the same name already exists.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_409"
              }
            },
            "429": {
              "description": "Returned if collection count reached the maximum number of collections per fabric.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_429"
              }
            }
          },
          "summary": "Create collection",
          "tags": [
            "Key Value"
          ]
        },
        "delete": {
          "description": "Delete collection.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if collection deleted successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_collection_examples_rc_200"
              }
            },
            "404": {
              "description": "Returned if collection name does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Delete collection",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_fabric/{fabric}/_api/kv/{collection}/value/{key}": {
        "get": {
          "description": "Get value.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n",
              "default": "_system"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "in": "path",
              "name": "key",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The key.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns the KV pairs from the collection.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_key_examples_rc_200"
              }
            },
            "404": {
              "description": "Returned if KV pair does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Get value",
          "tags": [
            "Key Value"
          ]
        },
        "delete": {
          "description": "\nDelete entry for given key.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "in": "path",
              "name": "key",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The key.\n"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if KV pair deleted successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_key_examples_rc_202"
              }
            },
            "404": {
              "description": "Returned if KV pair does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Delete entry for given key",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_fabric/{fabric}/_api/kv/{collection}/values": {
        "post": {
          "description": "Get collection values\n  Optional list of keys.  Max limit is 1000 keys per request.\n\n",
          "operationId": "GetValues",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "description": "This option can be used to simulate paging. **Default: 0**.\n\n",
              "in": "query",
              "name": "offset",
              "required": false,
              "default": 0,
              "type": "string"
            },
            {
              "description": "This option can be used to simulate paging. Limit the result. **Default: 20**, **Max: 100**\n\n",
              "in": "query",
              "name": "limit",
              "required": false,
              "default": 20,
              "type": "string"
            },
            {
              "description": "An optional JSON array of strings (keys).\n\n",
              "in": "body",
              "name": "Json Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/keys_array"
              },
              "x-description-offset": 0
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returns KV pairs from collection.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_get_values_examples_rc_200"
              }
            },
            "404": {
              "description": "Returned if KV pair of dynamo document does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Get values",
          "tags": [
            "Key Value"
          ]
        },
        "delete": {
          "description": "\nDelete key/value pairs. Requires a list of keys.  Max limit is 1000 keys per request.",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "description": "A JSON array of strings (keys).\n\n",
              "in": "body",
              "name": "Json Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/keys_array"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "202": {
              "description": "Returned after deletion of entry.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_key_examples_rc_202"
              }
            },
            "404": {
              "description": "Returned if fabric,collection name or key does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Delete entries for given keys.",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_fabric/{fabric}/_api/kv/{collection}/value": {
        "put": {
          "description": "\nSet one or more key-value pairs in given collection. \nIf the input is an array of objects then KV pairs are created in batch.\nSpecify expiration in UTC timestamp.\n\n**Note:** \n  Max limit is **100** KV pairs per request.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "description": "A JSON representation of a single document or of an array of documents.\n\nFields:\n* \"_key\" - if it is not set, it will be generated by the system\n* \"value\" - string or json object. Mandatory\n* \"expireAt\" - unix timestamp, indicating when the value will expire (-1 means no expiration)\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/key_value_array"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "202": {
              "description": "Returned after value set successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_key_examples_rc_202"
              }
            },
            "404": {
              "description": "Returned if KV pair does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Set one or more key-value pairs in given collection.",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_fabric/{fabric}/_api/kv/{collection}/truncate": {
        "put": {
          "description": "\nTruncates a collection.\n",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if given successfully truncated.\n\n",
              "schema": {
                "$ref": "#/definitions/kv_collection_examples_rc_200"
              }
            },
            "404": {
              "description": "Returned if fabric,collection name or key does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Truncates a given collection.",
          "tags": [
            "Key Value"
          ]
        }
      },
      "/_api/dynamo": {
        "post": {
          "description": "\nDynamo-like API interface.\n\nSet your JWT token or APIKEY as a aws_access_key_id (ex. '*bearer XXXXX*' or '*apikey XXXXX*').\n\nCurrently supported Dynamo actions (set as *'x-amz-target'* header tag): \n\n  - **CreateTable**\n  - **CreateGlobalTable**\n  - **DeleteItem**\n  - **DeleteTable**\n  - **DescribeGlobalTable**\n  - **DescribeTable**\n  - **DescribeTimeToLive**\n  - **GetItem**\n  - **ListGlobalTables**\n  - **ListTables**\n  - **PutItem**\n  - **Query**\n  - **UpdateItem**\n  - **UpdateTable**\n  - **UpdateTimeToLive**\n  - **Scan**\n  - **BatchGetItem**\n  - **BatchWriteItem**\n",
          "operationId": "DynamoLikeInterfaceAPI",
          "parameters": [
            {
              "description": "Dynamo actions\n",
              "format": "string",
              "in": "header",
              "name": "x-amz-target",
              "required": true,
              "type": "string"
            },
            {
              "description": "The body depends on the action.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": false,
              "schema": {
                "additionalProperties": {},
                "type": "object"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "200": {
              "description": "Returned after successful execution.\n\n",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Flag if there is an error in response. Returns true in case of success. False in case of failure.\n\n",
                    "format": "",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "description": "The response code.\n\n",
                    "format": "",
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "description": "Result will be based on Dynamo actions given in JSON body.",
                    "type": "string"
                  }
                }
              }
            },
            "400": {
              "description": "Returned if input is invalid.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            }
          },
          "summary": "Dynamo-like API interface",
          "tags": [
            "Dynamo"
          ],
          "x-examples": [],
          "x-filename": "",
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/document/{collection}": {
        "delete": {
          "description": "The body of the request is an array consisting of selectors for documents. A selector can either be a string with a key or a string with a document handle or an object with a *_key* attribute. \n\nThis API call removes all specified documents from *collection*. If the selector is an object and has a *_rev* attribute, it is a precondition that the actual revision of the removed document in the collection is the specified one.\n\nThe body of the response is an array of the same length as the input array. For each input selector, the output contains a JSON object with the information about the outcome of the operation. If no error occurred, an object is built in which the attribute *_id* contains the known *document-handle* of the removed document, *_key* contains the key which uniquely identifies a document in a given collection, and the attribute *_rev* contains the document revision. \n\nIn case of an error, an object with the attribute *error* set to *true* and *errorCode* set to the error code is built. If the query parameter *returnOld* is *true*, then the complete previous revision of the document is returned under the *old* attribute in the result.\n\nNote that if any precondition is violated or an error occurred with some of the documents, the return code is still 200 or 202, but the additional HTTP header *X-database-Error-Codes* is set, which contains a map of the error codes that occurred together with their multiplicities, as in: *1200:17,1205:10* which means that in 17 cases the error 1200 \"revision conflict\" and in 10 cases the error 1205 \"illegal document handle\" has happened.\n\n",
          "operationId": "removeDocument",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "description": "An array of keys or documents.\n",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "description": "Collection from which documents are removed.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return additionally the complete previous revision of the changed document under the attribute *old* in the result.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "If set to *true*, ignore any *_rev* attribute in the selectors. No revision check is performed.\n\n",
              "in": "query",
              "name": "ignoreRevs",
              "required": false,
              "type": "boolean",
              "default": true
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if *waitForSync* was *true*.\n\n"
            },
            "202": {
              "description": "Returned if *waitForSync* was *false*.\n\n"
            },
            "404": {
              "description": "Returned if the collection was not found. The response body contains an error document in this case.\n\n"
            }
          },
          "summary": "Removes multiple documents",
          "tags": [
            "Documents"
          ],
          "x-examples": []
        },
        "patch": {
          "description": "\nPartially updates documents, the documents to update are specified by the *_key* attributes in the body objects. The body of the request must contain a JSON array of document updates with the attributes to patch (the patch documents). All attributes from the patch documents will be added to the existing documents if they do not yet exist, and overwritten in the existing documents if they do exist there.\n\nSetting an attribute value to *null* in the patch documents will cause a value of *null* to be saved for the attribute by default.\n\nIf *ignoreRevs* is *false* and there is a *_rev* attribute in a document in the body and its value does not match the revision of the corresponding document in the database, the precondition is violated.\n\nIf the document exists and can be updated, then an *HTTP 201* or an *HTTP 202* is returned (depending on *waitForSync*, see below).\n\nThe body of the response contains a JSON array of the same length as the input array with the information about the handle and the revision of the updated documents. In each entry, the attribute *_id* contains the known *document-handle* of each updated document, *_key* contains the key which uniquely identifies a document in a given collection, and the attribute *_rev* contains the new document revision. In case of an error or violated precondition, an error object with the attribute *error* set to *true* and the attribute *errorCode* set to the error code is built.\n\nIf the query parameter *returnOld* is *true*, then, for each generated document, the complete previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, then, for each generated document, the complete new document is returned under the *new* attribute in the result.\n\nNote that if any precondition is violated or an error occurred with some of the documents, the return code is still 201 or 202, but the additional HTTP header *X-database-Error-Codes* is set, which contains a map of the error codes that occurred together with their multiplicities, as in: *1200:17,1205:10* which means that in 17 cases the error 1200 \"revision conflict\" and in 10 cases the error 1205 \"illegal document handle\" has happened.\n\n",
          "operationId": "updateDocument",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "A JSON representation of an array of document updates as objects.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 0
            },
            {
              "description": "This URL parameter is the name of the collection in which the documents are updated.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "If the intention is to delete existing attributes with the patch command, the URL query parameter *keepNull* can be used with a value of *false*. This will modify the behavior of the patch command to remove any attributes from the existing document that are contained in the patch document with an attribute value of *null*.\n\n",
              "in": "query",
              "name": "keepNull",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "Controls whether objects (not arrays) will be merged if present in both the existing and the patch document. If set to *false*, the value in the patch document will overwrite the existing document's value. If set to *true*, objects will be merged. The default is *true*.\n\n",
              "in": "query",
              "name": "mergeObjects",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "By default, or if this is set to *true*, the *_rev* attributes in the given documents are ignored. If this is set to *false*, then any *_rev* attribute given in a body document is taken as a precondition. The document is only updated if the current revision is the one specified.\n\n",
              "in": "query",
              "name": "ignoreRevs",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "Return additionally the complete previous revision of the changed documents under the attribute *old* in the result.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Return additionally the complete new documents under the attribute *new* in the result.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the documents were updated successfully and *waitForSync* was *true*.\n\n"
            },
            "202": {
              "description": "Returned if the documents were updated successfully and *waitForSync* was *false*.\n\n"
            },
            "400": {
              "description": "Returned if the body does not contain a valid JSON representation of an array of documents. The response body contains an error document in this case.\n\n"
            },
            "404": {
              "description": "Returned if the collection was not found.\n"
            }
          },
          "summary": "Update documents",
          "tags": [
            "Documents"
          ],
          "x-examples": []
        },
        "post": {
          "description": "\nCreates a new document from the document given in the body, unless there is already a document with the *_key* given. If no *_key* is given, a new unique *_key* is generated automatically.\n\nThe body can be an array of documents, in which case all documents in the array are inserted with the same semantics as for a single document. The result body will contain a JSON array of the same length as the input array, and each entry contains the result of the operation for the corresponding input. In case of an error the entry is a document with attributes *error* set to *true* and errorCode set to the error code that has happened.\n\nPossibly given *_id* and *_rev* attributes in the body are always ignored, the URL part or the query parameter collection respectively counts.\n\nIf the document was created successfully, then the *Location* header contains the path to the newly created document. The *Etag* header field contains the revision of the document. Both are only set in the single document case.\n\nIf *silent* is not set to *true*, the body of the response contains a JSON object (single document case) with the following attributes:\n\n  - *_id* contains the document handle of the newly created document\n  - *_key* contains the document key\n  - *_rev* contains the document revision\n\nIn the multi case the body is an array of such objects. If the query parameter *returnNew* is *true*, then, for each generated document, the complete new document is returned under the *new* attribute in the result.\n",
          "operationId": "insertDocument",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The *collection* in which the collection is to be created.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "A JSON representation of a single document or of an array of documents.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 0
            },
            {
              "description": "The name of the collection. This is only for backward compatibility.\n",
              "in": "query",
              "name": "collection",
              "required": false,
              "type": "string"
            },
            {
              "description": "Additionally return the complete new document under the attribute *new* in the result.\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Additionally return the complete old document under the attribute *old* in the result. Only available if the overwrite option is used.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "If set to *true*, an empty object will be returned as response. No meta-data will be returned for the created document. This option can be used to save some network traffic.\n\n",
              "in": "query",
              "name": "silent",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "If set to *true*, the insert becomes a replace-insert. If a document with the same *_key* already exists the new document is not rejected with unique constraint violated but will replace the old document.\n\n",
              "in": "query",
              "name": "overwrite",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the documents were created successfully and *waitForSync* was *true*. If you specified more than one document in the JSON body, check the response body to verify the insertions succeeded.\n\n"
            },
            "202": {
              "description": "Returned if the documents were created successfully and *waitForSync* was *false*.\n\n"
            },
            "400": {
              "description": "Returned if the body does not contain a valid JSON representation of one document or an array of documents. The response body contains an error document in this case.\n\n"
            },
            "404": {
              "description": "Returned if the collection specified by *collection* is unknown. The response body contains an error document in this case.\n\n"
            },
            "409": {
              "description": "Returned in the single document case if a document with the same qualifiers in an indexed attribute conflicts with an already existing document and thus violates that unique constraint. The response body contains an error document in this case. In the array case only 201 or 202 is returned, but if an error occurred, the additional HTTP header *X-database-Error-Codes* is set, which contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened.\n\n"
            }
          },
          "summary": "Create document",
          "tags": [
            "Documents"
          ]
        },
        "put": {
          "description": "\nReplaces multiple documents in the specified collection with the ones in the body, the replaced documents are specified by the *_key* attributes in the body documents.\n\nIf *ignoreRevs* is *false* and there is a *_rev* attribute in a document in the body and its value does not match the revision of the corresponding document in the database, the precondition is violated.\n\nIf the document exists and can be updated, then an *HTTP 201* or an *HTTP 202* is returned (depending on *waitForSync*, see below).\n\nThe body of the response contains a JSON array of the same length as the input array with the information about the handle and the revision of the replaced documents. In each entry, the attribute *_id* contains the known *document-handle* of each updated document, *_key* contains the key which uniquely identifies a document in a given collection, and the attribute *_rev* contains the new document revision. In case of an error or violated precondition, an error object with the attribute *error* set to *true* and the attribute *errorCode* set to the error code is built.\n\nIf the query parameter *returnOld* is *true*, then, for each generated document, the complete previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, then, for each generated document, the complete new document is returned under the *new* attribute in the result.\n\nNote that if any precondition is violated or an error occurred with some of the documents, the return code is still 201 or 202, but the additional HTTP header *X-database-Error-Codes* is set, which contains a map of the error codes that occurred together with their multiplicities, as in: *1200:17,1205:10* which means that in 17 cases the error 1200 \"revision conflict\" and in 10 cases the error 1205 \"illegal document handle\" has happened.\n\n",
          "operationId": "replaceDocument:multiple",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "A JSON representation of an array of documents.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 0
            },
            {
              "description": "This URL parameter is the name of the collection in which the documents are replaced.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "By default, or if this is set to *true*, the *_rev* attributes in the given documents are ignored. If this is set to *false*, then any *_rev* attribute given in a body document is taken as a precondition. The document is only replaced if the current revision is the one specified.\n\n",
              "in": "query",
              "name": "ignoreRevs",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "Return additionally the complete previous revision of the changed documents under the attribute *old* in the result.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Return additionally the complete new documents under the attribute *new* in the result.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the documents were replaced successfully and *waitForSync* was *true*.\n\n"
            },
            "202": {
              "description": "Returned if the documents were replaced successfully and *waitForSync* was *false*.\n\n"
            },
            "400": {
              "description": "Returned if the body does not contain a valid JSON representation of an array of documents. The response body contains an error document in this case.\n\n"
            },
            "404": {
              "description": "Returned if the collection was not found.\n\n"
            }
          },
          "summary": "Replace documents",
          "tags": [
            "Documents"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/document/{collection}/{key}": {
        "delete": {
          "description": "If *silent* is not set to *true*, the body of the response contains a  JSON object with the information about the handle and the revision.                 \n\nThe attribute *_id* contains the known *key* of the removed document, *_key* contains the key which uniquely identifies a document in a given collection, and the attribute *_rev* contains the document revision.\n\nIf the query parameter *returnOld* is *true*, then the complete previous revision of the document is returned under the *old* attribute in the result.\n\n",
          "operationId": "removeDocument2",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "Removes the document identified by *collection*.\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "Removes the document identified by *key*.\n\n",
              "format": "string",
              "in": "path",
              "name": "key",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return additionally the complete previous revision of the changed document under the attribute *old* in the result.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "If set to *true*, an empty object will be returned as response. No meta-data will be returned for the removed document. This option can be used to save some network traffic.\n\n",
              "in": "query",
              "name": "silent",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "You can conditionally remove a document based on a target revision id by using the *if-match* HTTP header.\n\n",
              "in": "header",
              "name": "If-Match",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the document was removed successfully and *waitForSync* was *true*.\n\n"
            },
            "202": {
              "description": "Returned if the document was removed successfully and *waitForSync* was *false*.\n\n"
            },
            "404": {
              "description": "Returned if the collection or the document was not found. The response body contains an error document in this case.\n\n"
            },
            "412": {
              "description": "Returned if a \"If-Match\" header or *rev* is given and the found document has a different version. The response will also contain the found document's current revision in the *_rev* attribute. Additionally, the attributes *_id* and *_key* will be returned.\n\n"
            }
          },
          "summary": "Removes a document",
          "tags": [
            "Documents"
          ],
          "x-examples": []
        },
        "get": {
          "description": "Returns the document identified by key. The returned document contains three special attributes: _id containing the document handle, _key containing key which uniquely identifies a document in a given collection and _rev containing the revision.\n\n",
          "operationId": "readDocument",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the collection.\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The key of the document.\n\n",
              "format": "string",
              "in": "path",
              "name": "key",
              "required": true,
              "type": "string"
            },
            {
              "description": "If the \"If-None-Match\" header is given, then it must contain exactly one Etag. The document is returned, if it has a different revision than the given Etag. Otherwise an *HTTP 304* is returned.\n\n",
              "in": "header",
              "name": "If-None-Match",
              "type": "string"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a *HTTP 412* is returned.\n\n",
              "in": "header",
              "name": "If-Match",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the document was found.\n\n"
            },
            "304": {
              "description": "Returned if the \"If-None-Match\" header is given and the document has the same version.\n\n"
            },
            "404": {
              "description": "Returned if the document or collection was not found.\n\n"
            },
            "412": {
              "description": "Returned if an \"If-Match\" header is given and the found document has a different version. The response will also contain the found document's current revision in the *_rev* attribute. Additionally, the attributes *_id* and *_key* will be returned.\n\n"
            }
          },
          "summary": "Read document",
          "tags": [
            "Documents"
          ],
          "x-examples": []
        },
        "head": {
          "description": "Like GET, but only returns the header fields and not the body. You can use this call to get the current revision of a document or check if the document was deleted.\n",
          "operationId": "checkDocument",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the collection.\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The key of the document.\n\n",
              "format": "string",
              "in": "path",
              "name": "key",
              "required": true,
              "type": "string"
            },
            {
              "description": "If the \"If-None-Match\" header is given, then it must contain exactly one Etag. If the current document revision is not equal to the specified Etag, an *HTTP 200* response is returned. If the current document revision is identical to the specified Etag, then an *HTTP 304* is returned.\n\n",
              "in": "header",
              "name": "If-None-Match",
              "type": "string"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a *HTTP 412* is returned.\n\n",
              "in": "header",
              "name": "If-Match",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the document was found.\n\n"
            },
            "304": {
              "description": "Returned if the \"If-None-Match\" header is given and the document has the same version.\n\n"
            },
            "404": {
              "description": "Returned if the document or collection was not found.\n\n"
            },
            "412": {
              "description": "Returned if an \"If-Match\" header is given and the found document has a different version. The response will also contain the found document's current revision in the *Etag* header.\n\n"
            }
          },
          "summary": "Read document header",
          "tags": [
            "Documents"
          ],
          "x-examples": []
        },
        "patch": {
          "description": "\nPartially updates the document identified by *key*. The body of the request must contain a JSON document with the attributes to patch (the patch document). All attributes from the patch document will be added to the existing document if they do not yet exist, and overwritten in the existing document if they do exist there.\n\nSetting an attribute value to *null* in the patch document will cause a value of *null* to be saved for the attribute by default.\n\nIf the *If-Match* header is specified and the revision of the document in the database is unequal to the given revision, the precondition is violated.\n\nIf *If-Match* is not given and *ignoreRevs* is *false* and there is a *_rev* attribute in the body and its value does not match the revision of the document in the database, the precondition is violated.\n\nIf a precondition is violated, an *HTTP 412* is returned.\n\nIf the document exists and can be updated, then an *HTTP 201* or an *HTTP 202* is returned, the *Etag* header field contains the new revision of the document (in double quotes) and the *Location* header contains a complete URL under which the document can be queried.\n\nIf *silent* is not set to *true*, the body of the response contains a JSON object with the information about the handle and the revision. The attribute *_id* contains the known *document-handle* of the updated document, *_key* contains the key which uniquely identifies a document in a given collection, and the attribute *_rev* contains the new document revision.\n\nIf the query parameter *returnOld* is *true*, then the complete previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, then the complete new document is returned under the *new* attribute in the result.\n\nIf the document does not exist, then a *HTTP 404* is returned and the body of the response contains an error document.\n\n",
          "operationId": "updateDocument2",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "A JSON representation of a document update as an object.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 0
            },
            {
              "description": "The name of the collection.\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "This URL parameter must be a document key.\n\n",
              "format": "string",
              "in": "path",
              "name": "key",
              "required": true,
              "type": "string"
            },
            {
              "description": "If the intention is to delete existing attributes with the patch command, the URL query parameter *keepNull* can be used with a value of *false*. This will modify the behavior of the patch command to remove any attributes from the existing document that are contained in the patch document with an attribute value of *null*.\n\n",
              "in": "query",
              "name": "keepNull",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Controls whether objects (not arrays) will be merged if present in both the existing and the patch document. If set to *false*, the value in the patch document will overwrite the existing document's value. If set to *true*, objects will be merged. The default is *true*.\n\n",
              "in": "query",
              "name": "mergeObjects",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "By default, or if this is set to *true*, the *_rev* attributes in the given document is ignored. If this is set to *false*, then the *_rev* attribute given in the body document is taken as a precondition. The document is only updated if the current revision is the one specified.\n\n",
              "in": "query",
              "name": "ignoreRevs",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "Return additionally the complete previous revision of the changed document under the attribute *old* in the result.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Return additionally the complete new document under the attribute *new* in the result.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "If set to *true*, an empty object will be returned as response. No meta-data will be returned for the updated document. This option can be used to save some network traffic.\n\n",
              "in": "query",
              "name": "silent",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "You can conditionally update a document based on a target revision id by using the *if-match* HTTP header.\n\n",
              "in": "header",
              "name": "If-Match",
              "type": "string"
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the document was updated successfully and *waitForSync* was *true*.\n\n"
            },
            "202": {
              "description": "Returned if the document was updated successfully and *waitForSync* was *false*.\n\n"
            },
            "400": {
              "description": "Returned if the body does not contain a valid JSON representation of a document. The response body contains an error document in this case.\n\n"
            },
            "404": {
              "description": "Returned if the collection or the document was not found.\n\n"
            },
            "412": {
              "description": "Returned if the precondition was violated. The response will also contain the found documents' current revisions in the *_rev* attributes. Additionally, the attributes *_id* and *_key* will be returned.\n\n"
            }
          },
          "summary": "Update document",
          "tags": [
            "Documents"
          ]
        },
        "put": {
          "description": "\nReplaces the document with key <key> with the one in the body, provided there is such a document and no precondition is violated.\n\nIf the *If-Match* header is specified and the revision of the document in the database is unequal to the given revision, the precondition is violated.\n\nIf *If-Match* is not given and *ignoreRevs* is *false* and there is a *_rev* attribute in the body and its value does not match the revision of the document in the database, the precondition is violated.\n\nIf a precondition is violated, an *HTTP 412* is returned.\n\nIf the document exists and can be updated, then an *HTTP 201* or an *HTTP 202* is returned (depending on *waitForSync*, see below), the *Etag* header field contains the new revision of the document and the *Location* header contains a complete URL under which the document can be queried.\n\nIf *silent* is not set to *true*, the body of the response contains a JSON object with the information about the handle and the revision. The attribute *_id* contains the known *document-handle* of the updated document, *_key* contains the key which uniquely identifies a document in a given collection, and the attribute *_rev* contains the new document revision.\n\nIf the query parameter *returnOld* is *true*, then the complete previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, then the complete new document is returned under the *new* attribute in the result.\n\nIf the document does not exist, then a *HTTP 404* is returned and the body of the response contains an error document.\n\n",
          "operationId": "replaceDocument",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "A JSON representation of a single document.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 0
            },
            {
              "description": "The name of the collection.\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "This URL parameter must be a document key.\n\n",
              "format": "string",
              "in": "path",
              "name": "key",
              "required": true,
              "type": "string"
            },
            {
              "description": "By default, or if this is set to *true*, the *_rev* attributes in the given document is ignored. If this is set to *false*, then the *_rev* attribute given in the body document is taken as a precondition. The document is only replaced if the current revision is the one specified.\n\n",
              "in": "query",
              "name": "ignoreRevs",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "Return additionally the complete previous revision of the changed document under the attribute *old* in the result.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Return additionally the complete new document under the attribute *new* in the result.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "If set to *true*, an empty object will be returned as response. No meta-data will be returned for the replaced document. This option can be used to save some network traffic.\n\n",
              "in": "query",
              "name": "silent",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "You can conditionally replace a document based on a target revision id by using the *if-match* HTTP header.\n\n",
              "in": "header",
              "name": "If-Match",
              "type": "string"
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the document was replaced successfully and *waitForSync* was *true*.\n\n"
            },
            "202": {
              "description": "Returned if the document was replaced successfully and *waitForSync* was *false*.\n\n"
            },
            "400": {
              "description": "Returned if the body does not contain a valid JSON representation of a document. The response body contains an error document in this case.\n\n"
            },
            "404": {
              "description": "Returned if the collection or the document was not found.\n\n"
            },
            "412": {
              "description": "Returned if the precondition was violated. The response will also contain the found documents' current revisions in the *_rev* attributes. Additionally, the attributes *_id* and *_key* will be returned.\n\n"
            }
          },
          "summary": "Replace document",
          "tags": [
            "Documents"
          ]
        }
      },
      "/_fabric/{fabric}/_api/collection": {
        "get": {
          "description": "Returns an object with an attribute *collections* containing an array of all collection descriptions. The same information is also available in the *names* as an object with the collection names as keys. By providing the optional query parameter *excludeSystem* with a value of *true*, all system collections will be excluded from the response.\n",
          "operationId": "handleCommandGet",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "Whether or not system collections should be excluded from the result.\n",
              "in": "query",
              "name": "excludeSystem",
              "required": false,
              "type": "boolean",
              "default": true
            }
          ],
          "responses": {
            "200": {
              "description": "The list of collections\n\n"
            }
          },
          "summary": "reads all collections",
          "tags": [
            "Collections"
          ],
          "x-examples": []
        },
        "post": {
          "description": "\nCreates a new collection with a given name. The request must contain an object with the following attributes.\n\nA JSON object with these properties is required:\n - **keyOptions**:\n    - **allowUserKeys**: if set to *true*, then it is allowed to supply own key values in the *_key* attribute of a document. If set to *false*, then the key generator will solely be responsible for generating keys and supplying own key values in the *_key* attribute of documents is considered an error.\n    - **type**: specifies the type of the key generator. The currently available generators are *traditional*, *autoincrement*, *uuid* and *padded*. The *traditional* key generator generates numerical keys in ascending order. The *autoincrement* key generator generates numerical keys in ascending order, the initial offset and the spacing can be configured The *padded* key generator generates keys of a fixed length (16 bytes) in ascending lexicographical sort order. This is ideal for usage with the _RocksDB_ engine, which will slightly benefit keys that are inserted in lexicographically ascending order. The key generator can be used in a single-server or cluster. The *uuid* key generator generates universally unique 128 bit keys, which are stored in hexadecimal human-readable format. This key generator can be used in a single-server or cluster to generate \"seemingly random\" keys. The keys produced by this key generator are not lexicographically sorted.\n    - **increment**: increment value for *autoincrement* key generator. Not used for other key generator types.\n    - **offset**: Initial offset value for *autoincrement* key generator. Not used for other key generator types.\n  - **name**: The name of the collection.\n  - **isSystem**: If *true*, create a  system collection. In this case *collection-name* should start with an underscore. End users should normally create non-system collections only. API implementors may be required to create system collections in very special occasions, but normally a regular collection will do. (The default is *false*)\n  - **type**: The type of the collection to be created.\n The following values for *type* are valid (The default is *2*):\n    - *2*: document collection\n    - *3*: edge collection.\n  - **stream**: If *true*, create a local stream for collection. (The default is *false*)\n  - **shardKeys**: The specified shard key determines in which shard a given document is to be stored. Choosing the right shard key can have significant impact on your performance can reduce network traffic and increase performance.\n",
          "operationId": "handleCommandPost:CreateCollection",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_collection"
              },
              "x-description-offset": 167
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "\n",
              "schema": {
                "$ref": "#/definitions/collection_info"
              },
              "x-description-offset": 234
            },
            "400": {
              "description": "Returned if the *collection-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create collection",
          "tags": [
            "Collections"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/collection/{collection-name}": {
        "delete": {
          "description": "\nDrops the collection identified by *collection-name*. If the collection was successfully dropped, an object is returned with the following attributes:\n- *error*: *false*\n- *id*: The identifier of the dropped collection.\n",
          "operationId": "handleCommandDelete:collection",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the collection to drop.\n",
              "format": "string",
              "in": "path",
              "name": "collection-name",
              "required": true,
              "type": "string"
            },
            {
              "description": "Whether or not the collection to drop is a system collection. This parameter must be set to *true* in order to drop a system collection.\n",
              "in": "query",
              "name": "isSystem",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "responses": {
            "400": {
              "description": "Returned if the *collection-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Drops a collection",
          "tags": [
            "Collections"
          ],
          "x-examples": []
        },
        "get": {
          "description": "The result is an object describing the collection with the following attributes:\n- *id*: The identifier of the collection. - *name*: The name of the collection. - *status*: The status of the collection as number.\n - 1: new born collection\n - 2: unloaded\n - 3: loaded\n - 4: in the process of being unloaded\n - 5: deleted\n - 6: loading\n\nEvery other status indicates a corrupted collection.\n- *type*: The type of the collection as number.\n  - 2: document collection (normal case)\n  - 3: edges collection\n- *isSystem*: If *true* then the collection is a system collection.\n  - *stream*: If *true* then the collection has a local streams associted with it.",
          "operationId": "handleCommandGet:collectionGetProperties",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n"
            }
          },
          "summary": "Return information about a collection",
          "tags": [
            "Collections"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/collection/{collection-name}/count": {
        "get": {
          "description": "\nResult contains the number of documents.\n**Note** that this will always load the collection into memory.\n- *count*: The number of documents inside the collection.\n",
          "operationId": "handleCommandGet:getCollectionCount",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Returned if the *collection-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Return number of documents in a collection",
          "tags": [
            "Collections"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/collection/{collection-name}/truncate": {
        "put": {
          "description": "Removes all documents from the collection, but leaves the indexes intact.\n",
          "operationId": "handleCommandPut:truncateCollection",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "400": {
              "description": "Returned if the *collection-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Truncate collection",
          "tags": [
            "Collections"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/collection/{collection-name}/stream": {
        "put": {
          "description": "Updates the local stream flag associated with collection.\nLocal stream associated with collection cannot be deleted.",
          "operationId": "handleCommandPut:stream",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection-name",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/collection_stream"
              },
              "x-description-offset": 167
            }
          ],
          "responses": {
            "400": {
              "description": "If the *collection-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "If the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            },
            "500": {
              "description": "If the *stream* is invalid in the request body, then a *HTTP 500* is returned.\n\n"
            }
          },
          "summary": "Update stream flag for the collection",
          "tags": [
            "Collections"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/cursor": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n - **batchSize**: Sets the batch size of queries. This batch size decides how many results are returned as part of query output.\n If this option is not specified, default value is used. `Default value: 100`. Maximum allowed for this parameter is `1000`\n  - **ttl**: The time-to-live for the cursor (in seconds). The cursor will be removed on the server automatically after the specified amount of time. This is useful to ensure garbage collection of cursors that are not fully fetched by clients. If not set, a server-defined value will be used (default: 30 seconds).\n  - **query**: contains the query string to be executed\n  - **bindVars** (object): key/value pairs representing the bind parameters.\n  - **options**:\n    - **failOnWarning**: When set to *true*, the query will throw an exception and abort instead of producing a warning. This option should be used during development to catch potential issues early. When the attribute is set to *false*, warnings will not be propagated to exceptions and will be returned with the query result. There is also a server configuration option `--query.fail-on-warning` for setting the default value for *failOnWarning* so it does not need to be set on a per-query level.\n    - **profile**: If set to *true* or *1*, then the additional query profiling information will be returned in the sub-attribute *profile* of the *extra* return attribute, if the query result is not served from the query cache. Set to *2* the query will include execution stats per query plan node in sub-attribute *stats.nodes* of the *extra* return attribute. Additionally the query plan is returned in the sub-attribute *extra.plan*.\n    - **maxTransactionSize**: Transaction size limit in bytes. \n    - **stream**: Specify *true* and the query will be executed in a **streaming** fashion. The query result is not stored on the server, but calculated on the fly. *Beware*: long-running queries will need to hold the collection locks for as long as the query cursor exists. When set to *false* a query will be executed right away in its entirety. In that case query results are either returned right away (if the result set is small enough), or stored on the database instance and accessible via the cursor API (with respect to the `ttl`). It is advisable to *only* use this option on short-running queries or without exclusive locks . Query statistics, warnings and profiling data will only be available after the query is finished.\n    The default value is *false*\n    - **skipInaccessibleCollections**: C8QL queries (especially graph traversals) will treat collection to which a user has no access rights as if these collections were empty. Instead of returning a forbidden access error, your queries will execute normally. \n    - **maxWarningCount**: Limits the maximum number of warnings a query will return. The number of warnings a query will return is limited to 10 by default, but that number can be increased or decreased by setting this attribute.\n    - **fullCount**: if set to *true* and the query contains a *LIMIT* clause, then the result will have an *extra* attribute with the sub-attributes *stats* and *fullCount*, `{ ... , \"extra\": { \"stats\": { \"fullCount\": 123 } } }`. The *fullCount* attribute will contain the number of documents in the result before the last top-level LIMIT in the query was applied. It can be used to count the number of documents that match certain filter criteria, but only return a subset of them, in one go. It is thus similar to MySQL's *SQL_CALC_FOUND_ROWS* hint. Note that setting the option will disable a few LIMIT optimizations and may lead to more documents being processed, and thus make queries run longer. Note that the *fullCount* attribute may only be present in the result if the query has a top-level LIMIT clause and the LIMIT clause is actually used in the query.\n    - **intermediateCommitCount**: Maximum number of operations after which an intermediate commit is performed automatically.\n**Note**: Use this option cautiously. The transactions are commited after every specific record count. In case of error, already commited records are not rolled back.\n    - **intermediateCommitSize**: Maximum total size of operations after which an intermediate commit is performed automatically.\n **Note**: Use this option cautiously. The transactions are commited after every specific query memory size. In case of error, already commited records are not rolled back.\n    - **optimizer.rules** (string): A list of to-be-included or to-be-excluded optimizer rules can be put into this attribute, telling the optimizer to include or exclude specific rules. To disable a rule, prefix its name with a `-`, to enable a rule, prefix it with a `+`. There is also a pseudo-rule `all`, which will match all optimizer rules.\n \nThe query details include the query string plus optional query options and bind parameters. These values need to be passed in a JSON representation in the body of the POST request.\n\n**HTTP 201**\n*A json document with these Properties is returned:* is returned if the result set can be created by the server.\n- **count**: the total number of result documents available (only available if the query was executed with the *count* attribute set)\n- **code**: the HTTP status code\n- **extra**: an optional JSON object with extra information about the query result contained in its *stats* sub-attribute. For data-modification queries, the *extra.stats* sub-attribute will contain the number of modified documents and the number of documents that could not be modified due to an error (if *ignoreErrors* query option is specified)\n- **cached**: a boolean flag indicating whether the query result was served from the query cache or not. If the query result is served from the query cache, the *extra* return attribute will not contain any *stats* sub-attribute and no *profile* sub-attribute.\n- **hasMore**: A boolean indicator whether there are more results available for the cursor on the server\n- **result** (anonymous json object): an array of result documents (might be empty if query has no results)\n- **error**: A flag to indicate that an error occurred (*false* in this case)\n- **id**: id of temporary cursor created on the server (optional, see above)\n\n\n**HTTP 400**\n*A json document with these Properties is returned:* is returned if the JSON representation is malformed or the query specification is missing from the request. If the JSON representation is malformed or the query specification is missing from the request, the server will respond with *HTTP 400*. The body of the response will contain a JSON object with additional error details. The object has the following attributes:\n\n- **errorMessage**: a descriptive error message If the query specification is complete, the server will process the query. If an error occurs during query processing, the server will respond with *HTTP 400*. Again, the body of the response will contain details about the error.\n- **errorNum**: the server error number\n- **code**: the HTTP status code\n- **error**: boolean flag to indicate that an error occurred (*true* in this case)\n",
          "operationId": "createQueryCursor",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_cursor"
              },
              "x-description-offset": 54
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the result set can be created by the server.\n\n",
              "schema": {
                "$ref": "#/definitions/api_cursor_rc_201"
              },
              "x-description-offset": 305
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or the query specification is missing from the request. If the JSON representation is malformed or the query specification is missing from the request, the server will respond with *HTTP 400*. The body of the response will contain a JSON object with additional error details. The object has the following attributes:\n\n",
              "schema": {
                "$ref": "#/definitions/api_cursor_rc_400"
              },
              "x-description-offset": 372
            },
            "404": {
              "description": "The server will respond with *HTTP 404* in case a non-existing collection is accessed in the query.\n\n"
            },
            "405": {
              "description": "The server will respond with *HTTP 405* if an unsupported HTTP method is used.\n\n"
            }
          },
          "summary": "Create cursor",
          "tags": [
            "Query"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/cursor/{cursor-identifier}": {
        "delete": {
          "description": "Deletes the cursor and frees the resources associated with it. The cursor will automatically be destroyed on the server when the client has retrieved all documents from it. The client can also explicitly destroy the cursor at any earlier time using an HTTP DELETE request. The cursor id must be included as part of the URL. Note: the server will also destroy abandoned cursors automatically after a certain server-controlled timeout to avoid resource leakage.\n\n",
          "operationId": "deleteQueryCursor",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The id of the cursor.\n\n",
              "format": "string",
              "in": "path",
              "name": "cursor-identifier",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the server is aware of the cursor.\n\n"
            },
            "404": {
              "description": "Returned if the server is not aware of the cursor. It is also returned if a cursor is used after it has been destroyed.\n\n"
            }
          },
          "summary": "Delete cursor",
          "tags": [
            "Query"
          ],
          "x-examples": []
        },
        "put": {
          "description": "If the cursor is still alive, returns an object with the following attributes:\n\n- *id*: the *cursor-identifier*\n- *result*: a list of documents for the current batch\n- *hasMore*: *false* if this was the last batch\n- *count*: if present the total number of elements\n\nNote that even if *hasMore* returns *true*, the next call might still return no documents. If, however, *hasMore* is *false*, then the cursor is exhausted.  Once the *hasMore* attribute has a value of *false*, the client can stop.\n\n",
          "operationId": "modifyQueryCursor",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the cursor.\n\n",
              "format": "string",
              "in": "path",
              "name": "cursor-identifier",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The server will respond with *HTTP 200* in case of success.\n\n"
            },
            "400": {
              "description": "Returned if the cursor identifier is omitted, the server will respond with *HTTP 404*.\n\n"
            },
            "404": {
              "description": "Returned if no cursor with the specified identifier can be found, the server will respond with *HTTP 404*.\n"
            }
          },
          "summary": "Read next batch from cursor",
          "tags": [
            "Query"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/query": {
        "post": {
          "description": "\nThis endpoint is for query validation only. To actually query the database, see `/api/cursor`.\n\nA JSON object with these properties is required:\n\n  - **query**: To validate a query string without executing it, the query string can be passed to the server via an HTTP POST request.\n\n",
          "operationId": "parseQuery",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_query_properties"
              },
              "x-description-offset": 152
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the query is valid, the server will respond with *HTTP 200* and return the names of the bind parameters it found in the query (if any) in the *bindVars* attribute of the response. It will also return an array of the collections used in the query in the *collections* attribute.\n\nIf a query can be parsed successfully, the *ast* attribute of the returned JSON will contain the abstract syntax tree representation of the query. The format of the *ast* is subject to change in future versions of database, but it can be used to inspect how database interprets a given query. Note that the abstract syntax tree will be returned without any optimizations applied to it.\n\n"
            },
            "400": {
              "description": "The server will respond with *HTTP 400* in case of a malformed request, or if the query contains a parse error. The body of the response will contain the error details embedded in a JSON object.\n\n"
            }
          },
          "summary": "Parse an C8QL query",
          "tags": [
            "Query"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/query/explain": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **query**: the query which you want explained; If the query references any bind variables, these must also be passed in the attribute *bindVars*. Additional options for the query can be passed in the *options* attribute.\n  - **options**:\n  - **bindVars** (object): key/value pairs representing the bind parameters.\n\nTo explain how an C8QL query would be executed on the server, the query string can be sent to the server via an HTTP POST request. The server will then validate the query and create an execution plan for it. The execution plan will be returned, but the query will not be executed.\n\nThe execution plan that is returned by the server can be used to estimate the probable performance of the query. Though the actual performance will depend on many different factors, the execution plan normally can provide some rough estimates on the amount of work the server needs to do in order to actually run the query.\n\nBy default, the explain operation will return the optimal plan as chosen by the query optimizer The optimal plan is the plan with the lowest total estimated cost. The plan will be returned in the attribute *plan* of the response object. If the option *allPlans* is specified in the request, the result will contain all plans created by the optimizer. The plans will then be returned in the attribute *plans*.\n\nThe result will also contain an attribute *warnings*, which is an array of warnings that occurred during optimization or execution plan creation. Additionally, a *stats* attribute is contained in the result with some optimizer statistics. If *allPlans* is set to *false*, the result will contain an attribute *cacheable* that states whether the query results can be cached on the server if the query result cache were used. The *cacheable* attribute is not present when *allPlans* is set to *true*.\n\nEach plan in the result is a JSON object with the following attributes:\n- *nodes*: the array of execution nodes of the plan.  \n- *estimatedCost*: the total estimated cost for the plan. If there are multiple plans, the optimizer will choose the plan with the lowest total cost. \n- *collections*: an array of collections used in the query \n- *rules*: an array of rules the optimizer applied.  \n- *variables*: array of variables used in the query \n\n",
          "operationId": "explainQuery",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_explain"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the query is valid, the server will respond with *HTTP 200* and return the optimal execution plan in the *plan* attribute of the response. If option *allPlans* was set in the request, an array of plans will be returned in the *allPlans* attribute instead.\n\n"
            },
            "400": {
              "description": "The server will respond with *HTTP 400* in case of a malformed request, or if the query contains a parse error. The body of the response will contain the error details embedded in a JSON object. Omitting bind variables if the query references any will also result in an *HTTP 400* error.\n\n"
            },
            "404": {
              "description": "The server will respond with *HTTP 404* in case a non-existing collection is accessed in the query.\n"
            }
          },
          "summary": "Explain an C8QL query",
          "tags": [
            "Query"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/restql": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **query**:\n    - **parameter**: bindVars for the query \n    - **name**: Name for the query \n    - **value**: value of the query \n\nsaves a query for a user for a given fabric.\n\n",
          "operationId": "SaveRestqlByName",
          "parameters": [
            {
              "description": "Fabric name for which to save user query.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_queries_create_user_queries"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Accepted.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            }
          },
          "summary": "Save restql by name",
          "tags": [
            "Query Workers"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/restql/execute/{name}": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **bindVars**: specify the bindVars of the query\n\nexecutes a saved query for a given fabric.\n\n",
          "operationId": "ExecuteRestqlByName",
          "parameters": [
            {
              "description": "Fabric name of the saved user query.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Query name to execute.\n\n",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_queries_execute_saved_queries"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Accepted.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            }
          },
          "summary": "Execute restql by name",
          "tags": [
            "Query Workers"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/restql/fetch/{id}": {
        "put": {
          "description": "If the restql cursor is still alive, returns an object with the following attributes:\n\n- *id*: the *cursor-identifier*\n- *result*: a list of documents for the current batch\n- *hasMore*: *false* if this was the last batch\n- *count*: if present the total number of elements\n\nNote that even if *hasMore* returns *true*, the next call might still return no documents. If, however, *hasMore* is *false*, then the cursor is exhausted.  Once the *hasMore* attribute has a value of *false*, the client can stop.\n\n",
          "operationId": "fetchRestqlCursor",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n\n"
            },
            {
              "description": "The id of the cursor.\n\n",
              "format": "string",
              "in": "path",
              "name": "id",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The server will respond with *HTTP 200* in case of success.\n\n"
            },
            "400": {
              "description": "Returned if the cursor identifier is omitted, the server will respond with *HTTP 404*.\n\n"
            },
            "404": {
              "description": "Returned if no cursor with the specified identifier can be found, the server will respond with *HTTP 404*.\n"
            }
          },
          "summary": "Read next batch from cursor",
          "tags": [
            "Query Workers"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/restql/user": {
        "get": {
          "description": "\nGet list of saved user queries under the given fabric. \n\n",
          "operationId": "ListRestqlAssociatedWithCurrentUser",
          "parameters": [
            {
              "description": "Fabric name for which to list saved user queries.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            }
          },
          "summary": "List restql associated with current user",
          "tags": [
            "Query Workers"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/restql/{name}": {
        "delete": {
          "description": "Delete a query under the given fabric.\n\n",
          "operationId": "DeleteRestqlByName",
          "parameters": [
            {
              "description": "Fabric name for which to delete a query.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "description": "Query name to be deleted.\n\n",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n\n"
            }
          },
          "summary": "Delete restql by name",
          "tags": [
            "Query Workers"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **query**:\n    - **parameter**: bindVars for the query \n    - **value**: value for the query \n\nUpdate a saved query for a given fabric.\n\n",
          "operationId": "UpdateRestqlByName",
          "parameters": [
            {
              "description": "Fabric name for which to update a query.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "description": "Query name to update.\n\n",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_queries_update_user_queries"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Accepted.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            }
          },
          "summary": "Update restql by name",
          "tags": [
            "Query Workers"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/index": {
        "get": {
          "description": "Returns an object with an attribute *indexes* containing an array of all index descriptions for the given collection. The same information is also available in the *identifiers* as an object with the index handles as keys.\n\n",
          "operationId": "getIndexes",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a JSON object containing a list of indexes on that collection.\n\n"
            }
          },
          "summary": "Read all indexes of a collection",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/fulltext": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **fields** (string): an array of attribute names. Currently, the array is limited\n   to exactly one attribute.\n  - **type**: must be equal to *\"fulltext\"*.\n  - **minLength**: Minimum character length of words to index. Will default to a server-defined value if unspecified. It is thus recommended to set this value explicitly when creating the index.\n\nCreates a fulltext index for the collection *collection-name*, if it does not already exist. The call expects an object containing the index details.\n\n",
          "operationId": "createIndex#fulltext",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_index_fulltext"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index already exists, then a *HTTP 200* is returned.\n\n"
            },
            "201": {
              "description": "Returned if the index does not already exist and could be created, then a *HTTP 201* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create fulltext index",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/general": {
        "post": {
          "description": "\nCreates a new index in the collection *collection*. Expects an object containing the index details.\n\nThe type of the index to be created must specified in the *type* attribute of the index details. Depending on the index type, additional other attributes may need to specified in the request in order to create the index.\n\nIndexes require the to be indexed attribute(s) in the *fields* attribute of the index details. Depending on the index type, a single attribute or multiple attributes can be indexed. In the latter case, an array of strings is expected.\n\nIndexing the system attribute *_id* is not supported for user-defined indexes. Manually creating an index using *_id* as an index attribute will fail with an error.\n\nOptionally, an index name may be specified as a string in the *name* attribute. Index names have the same restrictions as collection names. If no value is specified, one will be auto-generated.\n\nSome indexes can be created as unique or non-unique variants. Uniqueness can be controlled for most indexes by specifying the *unique* flag in the index details. Setting it to *true* will create a unique index. Setting it to *false* or omitting the *unique* attribute will create a non-unique index.\n\n**Note**: \nThe following index types do not support uniqueness, and using the *unique* attribute with these types may lead to an error:\n- geo indexes\n- fulltext indexes\n\n**Note**: \nUnique indexes on non-shard keys are not supported in a cluster.\n\nHash, skiplist and persistent indexes can optionally be created in a sparse variant. A sparse index will be created if the *sparse* attribute in the index details is set to *true*. Sparse indexes do not index documents for which any of the index attributes is either not set or is *null*. \n\nThe optional attribute **deduplicate** is supported by array indexes of type *hash* or *skiplist*. It controls whether inserting duplicate index values from the same document into a unique array index will lead to a unique constraint error or not. The default value is *true*, so only a single instance of each non-unique index value will be inserted into the index per document. \n\nTrying to insert a value into the index that already exists in the index will always fail, regardless of the value of this attribute.\n\n",
          "operationId": "createIndex:general",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index already exists, then an *HTTP 200* is returned.\n\n"
            },
            "201": {
              "description": "Returned if the index does not already exist and could be created, then an *HTTP 201* is returned.\n\n"
            },
            "400": {
              "description": "Returned if an invalid index description is posted or attributes are used that the target index will not support, then an *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if *collection* is unknown, then an *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create index",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/geo": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **fields** (string): An array with one or two attribute paths. If it is an array with one attribute path *location*, then a geo-spatial index on all documents is created using *location* as path to the coordinates. The value of the attribute must be an array with at least two double values. The array must contain the latitude (first value) and the longitude (second value). \n  \n  All documents, which do not have the attribute path or with value that are not suitable, are ignored.If it is an array with two attribute paths *latitude* and *longitude*, then a geo-spatial index on all documents is created using *latitude* and *longitude* as paths the latitude and the longitude. The value of the attribute *latitude* and of the attribute *longitude* must a double. All documents, which do not have the attribute paths or which values are not suitable, are ignored.\n  - **type**: must be equal to *\"geo\"*.\n  - **geoJson**: If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions\n\nCreates a geo-spatial index in the collection *collection-name*, if it does not already exist. Expects an object containing the index details. Geo indexes are always sparse, meaning that documents that do not contain the index attributes or have non-numeric values in the index attributes will not be indexed.\n\n",
          "operationId": "createIndex#geo",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_index_geo"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index already exists, then a *HTTP 200* is returned.\n\n"
            },
            "201": {
              "description": "Returned if the index does not already exist and could be created, then a *HTTP 201* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create geo-spatial index",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/hash": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **fields** (string): an array of attribute paths.\n  - **unique**: if *true*, then create a unique index.\n  - **type**: must be equal to *\"hash\"*.\n  - **sparse**: if *true*, then create a sparse index.\n  - **deduplicate**: if *false*, the deduplication of array values is turned off.\n\nCreates a hash index for the collection *collection-name* if it does not already exist. The call expects an object containing the index details.\n\nIn a sparse index all documents will be excluded from the index that do not contain at least one of the specified index attributes (i.e. *fields*) or that have a value of *null* in any of the specified index attributes. Such documents will not be indexed, and not be taken into account for uniqueness checks if the *unique* flag is set.\n\nIn a non-sparse index, these documents will be indexed (for non-present indexed attributes, a value of *null* will be used) and will be taken into account for uniqueness checks if the *unique* flag is set.\n\n**Note**: unique indexes on non-shard keys are not supported in a cluster.\n\n",
          "operationId": "createIndex:hash",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_index_hash"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index already exists, then a *HTTP 200* is returned.\n\n"
            },
            "201": {
              "description": "Returned if the index does not already exist and could be created, then a *HTTP 201* is returned.\n\n"
            },
            "400": {
              "description": "Returned if the collection already contains documents and you try to create a unique hash index in such a way that there are documents violating the uniqueness, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create hash index",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/persistent": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **fields** (string): an array of attribute paths.\n  - **unique**: if *true*, then create a unique index.\n  - **type**: must be equal to *\"persistent\"*.\n  - **sparse**: if *true*, then create a sparse index.\n  - **deduplicate**: It controls whether inserting duplicate index values from the same document into a unique array index will lead to a unique constraint error or not. The default value is *true* \n\n\nCreates a persistent index for the collection *collection-name*, if it does not already exist. The call expects an object containing the index details.\n\nIn a sparse index all documents will be excluded from the index that do not contain at least one of the specified index attributes (i.e. *fields*) or that have a value of *null* in any of the specified index attributes. Such documents will not be indexed, and not be taken into account for uniqueness checks if the *unique* flag is set.\n\nIn a non-sparse index, these documents will be indexed (for non-present indexed attributes, a value of *null* will be used) and will be taken into account for uniqueness checks if the *unique* flag is set.\n\n**Note**: unique indexes on non-shard keys are not supported in a cluster.\n\n",
          "operationId": "createIndex:persistent",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_index_persistent"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index already exists, then a *HTTP 200* is returned.\n\n"
            },
            "201": {
              "description": "Returned if the index does not already exist and could be created, then a *HTTP 201* is returned.\n\n"
            },
            "400": {
              "description": "Returned if the collection already contains documents and you try to create a unique persistent index in such a way that there are documents violating the uniqueness, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create a persistent index",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/skiplist": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **fields** (string): an array of attribute paths.\n  - **unique**: if *true*, then create a unique index.\n  - **type**: must be equal to *\"skiplist\"*.\n  - **sparse**: if *true*, then create a sparse index.\n  - **deduplicate**: if *false*, the deduplication of array values is turned off.\n\n\nCreates a skiplist index for the collection *collection-name*, if it does not already exist. The call expects an object containing the index details.\n\nIn a sparse index all documents will be excluded from the index that do not contain at least one of the specified index attributes (i.e. *fields*) or that have a value of *null* in any of the specified index attributes. Such documents will not be indexed, and not be taken into account for uniqueness checks if the *unique* flag is set.\n\nIn a non-sparse index, these documents will be indexed (for non-present indexed attributes, a value of *null* will be used) and will be taken into account for uniqueness checks if the *unique* flag is set.\n\n**Note**: unique indexes on non-shard keys are not supported in a cluster.\n\n",
          "operationId": "createIndex:skiplist",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_index_skiplist"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index already exists, then a *HTTP 200* is returned.\n\n"
            },
            "201": {
              "description": "Returned if the index does not already exist and could be created, then a *HTTP 201* is returned.\n\n"
            },
            "400": {
              "description": "Returned if the collection already contains documents and you try to create a unique skiplist index in such a way that there are documents violating the uniqueness, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create skip list",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/ttl": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **fields** (string): an array with exactly one attribute path.\n  - **type**: must be equal to *\"ttl\"*.\n  - **expireAfter**: The time (in seconds) after a document's creation after which the documents count as \"expired\".\n\nCreates a TTL index for the collection *collection-name* if it does not already exist. The call expects an object containing the index details.\n\n\n",
          "operationId": "createIndex:ttl",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "query",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_index_ttl"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index already exists, then a *HTTP 200* is returned.\n\n"
            },
            "201": {
              "description": "Returned if the index does not already exist and could be created, then a *HTTP 201* is returned.\n\n"
            },
            "400": {
              "description": "Returned if the collection already contains another TTL index, then an *HTTP 400* is returned, as there can be at most one TTL index per collection.\n\n"
            },
            "404": {
              "description": "Returned if the *collection-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create TTL index",
          "tags": [
            "Indexes"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/index/{collection}/{indexName}": {
        "delete": {
          "description": "\nDeletes an index with *indexName*.\n\n",
          "operationId": "dropIndex",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "path",
              "format": "string",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the index.\n\n",
              "format": "string",
              "in": "path",
              "name": "indexName",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index could be deleted, then an *HTTP 200* is\nreturned.\n\n"
            },
            "404": {
              "description": "Returned if the *indexName* is unknown, then an *HTTP 404* is returned.\n"
            }
          },
          "summary": "Delete index",
          "tags": [
            "Indexes"
          ],
          "x-examples": [],
          "x-filename": "database/Documentation/DocuBlocks/Rest/Indexes/api_index_delete.md",
          "x-hints": ""
        },
        "get": {
          "description": "\n\nThe result is an object describing the index. It has at least the following attributes:\n- *id*: the identifier of the index - *type*: the index type\n\nAll other attributes are type-dependent. For example, some indexes provide *unique* or *sparse* flags, whereas others don't. Some indexes also provide a selectivity estimate in the *selectivityEstimate* attribute of the result.\n\n",
          "operationId": "getIndexes:handle",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The collection name.\n\n",
              "in": "path",
              "format": "string",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the index.\n\n",
              "format": "string",
              "in": "path",
              "name": "indexName",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the index exists, then a *HTTP 200* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the index does not exist, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Read index",
          "tags": [
            "Indexes"
          ],
          "x-examples": [],
          "x-filename": "database/Documentation/DocuBlocks/Rest/Indexes/get_api_reads_index.md",
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/graph": {
        "get": {
          "description": "\nLists all graphs stored in this database.\n\n**HTTP 200**\n*A json document with these Properties is returned:*\n\nReturned if the module is available and the graphs could be listed.\n\n- **graphs**: \n  - **graph**:\n    - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n    - **name**: The name of the graph.\n    - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n    - **_id**: The internal id value of this graph. \n    - **edgedefinitions**: An array of definitions for the relations of the graph.\n  Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false). It is false in this response.\n\n",
          "operationId": "ListAllGraphs",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the module is available and the graphs could be listed.\n",
              "schema": {
                "$ref": "#/definitions/graph_list_http_examples_rc_200"
              },
              "x-description-offset": 112
            }
          },
          "summary": "List all graphs",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "post": {
          "description": "The creation of a graph requires the name of the graph and a definition of its edges.\nA JSON object with these properties is required:\n\n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n  - **name**: Name of the graph.\n\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the graph could be created and waitForSync is enabled for the `_graphs` collection, or given in the request.\nThe response body contains the graph configuration that has been stored.\n- **graph**:\n  - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is false in this response.\n**HTTP 202**\n*A json document with these Properties is returned:* Returned if the graph could be created and waitForSync is disabled for the `_graphs` collection and not given in the request.\nThe response body contains the graph configuration that has been stored.\n- **graph**:\n - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n**HTTP 400**\n*A json document with these Properties is returned:*\nReturned if the request is in a wrong format.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to create a graph you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n  2. `Read Only` access on every collection used within this graph.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n**HTTP 409**\n*A json document with these Properties is returned:*\nReturned if there is a conflict storing the graph.  This can occur either if a graph with this name is already stored, or if there is one edge definition with a the same [edge collection](../../Manual/Appendix/Glossary.html#edge-collection) but a different signature used in any other graph.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n",
          "operationId": "CreateAGraph",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/graph_create_http_examples"
              },
              "x-description-offset": 240
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the graph could be created and waitForSync is enabled for the `_graphs` collection, or given in the request. The response body contains the graph configuration that has been stored.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_create_http_examples_rc_201"
              },
              "x-description-offset": 307
            },
            "202": {
              "description": "Returned if the graph could be created and waitForSync is disabled for the `_graphs` collection and not given in the request. The response body contains the graph configuration that has been stored.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_create_http_examples_rc_202"
              },
              "x-description-offset": 374
            },
            "400": {
              "description": "Returned if the request is in a wrong format.\n",
              "schema": {
                "$ref": "#/definitions/graph_create_http_examples_rc_400"
              },
              "x-description-offset": 441
            },
            "403": {
              "description": "Returned if your user has insufficient rights. In order to create a graph you at least need to have the following privileges:\n\n  1. `Administrate` access on the Database.\n  2. `Read Only` access on every collection used within this graph.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_create_http_examples_rc_403"
              },
              "x-description-offset": 508
            },
            "409": {
              "description": "Returned if there is a conflict storing the graph.  This can occur either if a graph with this name is already stored, or if there is one edge definition with a the same [edge collection](../../Manual/Appendix/Glossary.html#edge-collection) but a different signature used in any other graph.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_create_http_examples_rc_409"
              },
              "x-description-offset": 575
            }
          },
          "summary": "Create a graph",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graph/{graph}": {
        "delete": {
          "description": "Drops an existing graph object by name. Optionally all collections not used by other graphs can be dropped as well.\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to drop a graph you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned if no graph with this name could be found.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "DropAGraph",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "Drop collections of this graph as well.  Collections will only be dropped if they are not used in other graphs.\n\n",
              "in": "query",
              "name": "dropCollections",
              "required": false,
              "type": "boolean",
              "default": false
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the graph could be dropped and waitForSync is enabled for the `_graphs` collection, or given in the request.\n\n"
            },
            "202": {
              "description": "Returned if the graph could be dropped and waitForSync is disabled for the `_graphs` collection and not given in the request.\n\n"
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to drop a graph you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_drop_http_examples_rc_403"
              },
              "x-description-offset": 186
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_drop_http_examples_rc_404"
              },
              "x-description-offset": 253
            }
          },
          "summary": "Drop a graph",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "get": {
          "description": "Selects information for a given graph. Will return the edge definitions as well as the orphan collections. Or returns a 404 if the graph does not exist.\n\n\n**HTTP 200**\n*A json document with these Properties is returned:*\n\nReturns the graph if it could be found.\nThe result will have the following format:\n\n- **graph**:\n  - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false). It is false in this response.\n\n\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned if no graph with this name could be found.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false). It is true in this response.\n\n",
          "operationId": "GetAGraph",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returns the graph if it could be found. The result will have the following format:\n\n",
              "schema": {
                "$ref": "#/definitions/graph_get_http_examples_rc_200"
              },
              "x-description-offset": 223
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_get_http_examples_rc_404"
              },
              "x-description-offset": 290
            }
          },
          "summary": "Get a graph",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graph/{graph}/edge": {
        "get": {
          "description": "\n\nLists all edge collections within this graph.\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the edge definitions could be listed.\n- **code**: The response code. - **collections** (string): The list of all vertex collections within this graph. Includes collections in edgedefinitions as well as orphans. - **error**: Flag if there was an error (true) or not (false). It is false in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned if no graph with this name could be found.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n\n",
          "operationId": "ListEdgedefinitions",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the edge definitions could be listed.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_list_edge_http_examples_rc_200"
              },
              "x-description-offset": 116
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_list_edge_http_examples_rc_404"
              },
              "x-description-offset": 183
            }
          },
          "summary": "List edge definitions",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "post": {
          "description": "Adds an additional edge definition to the graph.\nThis edge definition has to contain a *collection* and an array of each *from* and *to* vertex collections.  An edge definition can only be added if this definition is either not used in any other graph, or it is used with exactly the same definition. It is not possible to store a definition \"e\" from \"v1\" to \"v2\" in the one graph, and \"e\" from \"v2\" to \"v1\" in the other graph.\nA JSON object with these properties is required:\n\n  - **to** (string): One or many vertex collections that can contain target vertices.\n  - **from** (string): One or many vertex collections that can contain source vertices.\n  - **collection**: The name of the edge collection to be used.\n\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the definition could be added successfully and waitForSync is enabled for the `_graphs` collection. The response body contains the graph configuration that has been stored.\n- **graph**:\n  - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is false in this response.\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the definition could be added successfully and waitForSync is disabled for the `_graphs` collection. The response body contains the graph configuration that has been stored.\n- **graph**:\n  - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is false in this response.\n\n\n**HTTP 400**\n*A json document with these Properties is returned:*\nReturned if the definition could not be added. This could be because it is ill-formed, or if the definition is used in an other graph with a different signature.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to modify a graph you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned if no graph with this name could be found.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n\n",
          "operationId": "AddEdgedefinition",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_add_http_examples"
              },
              "x-description-offset": 486
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the definition could be added successfully and waitForSync is enabled for the `_graphs` collection. The response body contains the graph configuration that has been stored.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_add_http_examples_rc_201"
              },
              "x-description-offset": 553
            },
            "202": {
              "description": "Returned if the definition could be added successfully and waitForSync is disabled for the `_graphs` collection. The response body contains the graph configuration that has been stored.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_add_http_examples_rc_202"
              },
              "x-description-offset": 620
            },
            "400": {
              "description": "Returned if the definition could not be added. This could be because it is ill-formed, or if the definition is used in an other graph with a different signature.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_add_http_examples_rc_400"
              },
              "x-description-offset": 687
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to modify a graph you at least need to have the following privileges:\n\n  1. `Administrate` access on the Database.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_add_http_examples_rc_403"
              },
              "x-description-offset": 754
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_add_http_examples_rc_404"
              },
              "x-description-offset": 821
            }
          },
          "summary": "Add edge definition",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graph/{graph}/edge/{edgeCollection}": {
        "post": {
          "description": "Creates a new edge in the collection.\nWithin the body the edge has to contain a *_from* and *_to* value referencing to valid vertices in the graph. Furthermore the edge has to be valid in the definition of the used edge collection.\nA JSON object with these properties is required:\n\n  - **_from**: The source vertex of this edge. Has to be valid within the used edge definition.\n  - **_to**: The target vertex of this edge. Has to be valid within the used edge definition.\n\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the edge could be created and waitForSync is true.\n- **edge**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **code**: The response code.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false). It is false in this response.\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is false.\n- **edge**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **code**: The response code.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false). It is false in this response.\n**HTTP 400**\n*A json document with these Properties is returned:*\nReturned if the input document is invalid. This can for instance be the case if `_from` or `_to` is missing.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to insert edges into the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned in any of the following cases:\n* no graph with this name could be found. * this edge collection is not part of the graph. * either `_from` or `_to` vertex does not exist.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n\n",
          "operationId": "CreateAnEdge",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the edge collection the edge belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "edgeCollection",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if the response should contain the complete new version of the document.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/graph_edge_create_http_examples"
              },
              "x-description-offset": 345
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the edge could be created and waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_create_http_examples_rc_201"
              },
              "x-description-offset": 412
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_create_http_examples_rc_202"
              },
              "x-description-offset": 479
            },
            "400": {
              "description": "Returned if the input document is invalid. This can for instance be the case if `_from` or `_to` is missing.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_create_http_examples_rc_400"
              },
              "x-description-offset": 546
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to insert edges into the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_create_http_examples_rc_403"
              },
              "x-description-offset": 613
            },
            "404": {
              "description": "Returned in any of the following cases:\n* no graph with this name could be found.\n* this edge collection is not part of the graph.\n* either `_from` or `_to` vertex does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_create_http_examples_rc_404"
              },
              "x-description-offset": 680
            }
          },
          "summary": "Create an edge",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\n\nChange one specific edge definition.\nThis will modify all occurrences of this definition in all graphs known to your database.\n\nA JSON object with these properties is required:\n\n  - **to** (string): One or many vertex collections that can contain target vertices.\n  - **from** (string): One or many vertex collections that can contain source vertices.\n  - **collection**: The name of the edge collection to be used.\n\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the request was successful and waitForSync is true.\n\n - **graph**:\n   - **orphanCollections** (string): An array of additional vertex collections.\n   Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is false.\n\n - **graph**:\n   - **orphanCollections** (string): An array of additional vertex collections.\n   Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 400**\n*A json document with these Properties is returned:*\nReturned if no edge definition with this name is found in the graph, or of the new definition is ill-formed and cannot be used.\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to drop a vertex you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned if no graph with this name could be found.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "ReplaceAnEdgedefinition",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the edge collection the edge belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "edgeCollection",
              "required": true,
              "type": "string"
            },
            {
              "description": "Drop the collection as well.\nCollection will only be dropped if it is not used in other graphs.\n\n",
              "in": "query",
              "name": "dropCollections",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_modify_http_examples"
              },
              "x-description-offset": 184
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the request was successful and waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_modify_http_examples_rc_201"
              },
              "x-description-offset": 251
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_modify_http_examples_rc_202"
              },
              "x-description-offset": 318
            },
            "400": {
              "description": "Returned if no edge definition with this name is found in the graph, or of the new definition is ill-formed and cannot be used.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_modify_http_examples_rc_400"
              },
              "x-description-offset": 385
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to drop a vertex you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_modify_http_examples_rc_403"
              },
              "x-description-offset": 452
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_modify_http_examples_rc_404"
              },
              "x-description-offset": 519
            }
          },
          "summary": "Replace an edge definition",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nRemove one edge definition from the graph.  This will only remove the edge collection, the vertex collections remain untouched and can still be used in your queries.\n\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the edge definition could be removed from the graph and waitForSync is true.\n- **graph**:\n   - **orphanCollections** (string): An array of additional vertex collections.\n   Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override\n   concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the edge definition could be removed from the graph and waitForSync is false.\n\n- **graph**:\n   - **orphanCollections** (string): An array of additional vertex collections.\n   Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override\n   concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to drop a vertex you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned if no graph with this name could be found, or if no edge definition with this name is found in the graph.\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n",
          "operationId": "RemoveAnEdgedefinitionFromTheGraph",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the edge collection the edge belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "edgeCollection",
              "required": true,
              "type": "string"
            },
            {
              "description": "Drop the collection as well. Collection will only be dropped if it is not used in other graphs.\n\n",
              "in": "query",
              "name": "dropCollections",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the edge definition could be removed from the graph and waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_remove_http_examples_rc_201"
              },
              "x-description-offset": 236
            },
            "202": {
              "description": "Returned if the edge definition could be removed from the graph and waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_remove_http_examples_rc_202"
              },
              "x-description-offset": 303
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to drop a vertex you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_remove_http_examples_rc_403"
              },
              "x-description-offset": 370
            },
            "404": {
              "description": "Returned if no graph with this name could be found, or if no edge definition with this name is found in the graph.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_definition_remove_http_examples_rc_404"
              },
              "x-description-offset": 437
            }
          },
          "summary": "Remove an edge definition from the graph",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graph/{graph}/edge/{collection}/{edge}": {
        "delete": {
          "description": "\nRemoves an edge from the collection.\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the edge could be removed.\n- **removed**: Is set to true if the remove was successful. - **code**: The response code. - **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false). It is false in this response.\n**HTTP 202**\n*A json document with these Properties is returned:*\n\nReturned if the request was successful but waitForSync is false.\n- **removed**: Is set to true if the remove was successful. - **code**: The response code. - **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false). It is false in this response.\n\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to delete vertices in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned in the following cases:\n* No graph with this name could be found. * This collection is not part of the graph. * The edge to remove does not exist.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n**HTTP 412**\n*A json document with these Properties is returned:*\nReturned if if-match header is given, but the stored documents revision is different.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n\n\n",
          "operationId": "RemoveAnEdge",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the edge collection the edge belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the edge.\n\n",
              "format": "string",
              "in": "path",
              "name": "edge",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if a presentation of the deleted document should be returned within the response object.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the edge could be removed.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_delete_http_examples_rc_200"
              },
              "x-description-offset": 107
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_delete_http_examples_rc_202"
              },
              "x-description-offset": 174
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to delete vertices in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_delete_http_examples_rc_403"
              },
              "x-description-offset": 241
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The edge to remove does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_delete_http_examples_rc_404"
              },
              "x-description-offset": 308
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_delete_http_examples_rc_412"
              },
              "x-description-offset": 375
            }
          },
          "summary": "Remove an edge",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "get": {
          "description": "\nGets an edge from the given collection.\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the edge could be found.\n- **edge**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is false in this response.\n**HTTP 304**\n*A json document with these Properties is returned:*\nReturned if the if-none-match header is given and the currently stored edge still has this revision value. So there was no update between the last time the edge was fetched by the caller.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to update vertices in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Read Only` access on the given collection.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned in the following cases:\n* No graph with this name could be found. * This collection is not part of the graph. * The edge does not exist.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false). It is true in this response.\n\n**HTTP 412**\n*A json document with these Properties is returned:*\nReturned if if-match header is given, but the stored documents revision is different.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "GetAnEdge",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the edge collection the edge belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the edge.\n\n",
              "format": "string",
              "in": "path",
              "name": "edge",
              "required": true,
              "type": "string"
            },
            {
              "description": "Must contain a revision. If this is set a document is only returned if it has exactly this revision. Also see if-match header as an alternative to this.\n\n",
              "in": "query",
              "name": "rev",
              "required": false,
              "type": "string"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            },
            {
              "description": "If the \"If-None-Match\" header is given, then it must contain exactly one Etag. The document is returned, only if it has a different revision as the given Etag. Otherwise a HTTP 304 is returned. \n\n",
              "in": "header",
              "name": "if-none-match",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the edge could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_get_http_examples_rc_200"
              },
              "x-description-offset": 110
            },
            "304": {
              "description": "Returned if the if-none-match header is given and the currently stored edge still has this revision value. So there was no update between the last time the edge was fetched by the caller.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_get_http_examples_rc_304"
              },
              "x-description-offset": 177
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to update vertices in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Read Only` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_get_http_examples_rc_403"
              },
              "x-description-offset": 244
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The edge does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_get_http_examples_rc_404"
              },
              "x-description-offset": 311
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_get_http_examples_rc_412"
              },
              "x-description-offset": 378
            }
          },
          "summary": "Get an edge",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "patch": {
          "description": "\nUpdates the data of the specific edge in the collection.\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the edge could be updated, and waitForSync is false.\n- **edge**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **code**: The response code.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is false.\n- **edge**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **code**: The response code.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to update edges in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned in the following cases:\n* No graph with this name could be found. * This collection is not part of the graph. * The edge to update does not exist. * either `_from` or `_to` vertex does not exist (if updated).\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n**HTTP 412**\n*A json document with these Properties is returned:*\nReturned if if-match header is given, but the stored documents revision is different.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "ModifyAnEdge",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the edge collection the edge belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the vertex.\n\n",
              "format": "string",
              "in": "path",
              "name": "edge",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if values set to null should be stored. By default (true) the given documents attribute(s) will be set to null. If this parameter is false the attribute(s) will instead be deleted from the document.\n\n",
              "in": "query",
              "name": "keepNull",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "Define if a presentation of the deleted document should be returned within the response object.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Define if a presentation of the new document should be returned within the response object.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            },
            {
              "description": "The body has to contain a JSON object containing exactly the attributes that should be overwritten, all other attributes remain unchanged.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 60
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the edge could be updated, and waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_modify_http_examples_rc_200"
              },
              "x-description-offset": 127
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_modify_http_examples_rc_202"
              },
              "x-description-offset": 194
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to update edges in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_modify_http_examples_rc_403"
              },
              "x-description-offset": 261
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The edge to update does not exist.\n* either `_from` or `_to` vertex does not exist (if updated).\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_modify_http_examples_rc_404"
              },
              "x-description-offset": 328
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_modify_http_examples_rc_412"
              },
              "x-description-offset": 395
            }
          },
          "summary": "Modify an edge",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nReplaces the data of an edge in the collection.\n\nA JSON object with these properties is required:\n\n  - **_from**: The source vertex of this edge. Has to be valid within the used edge definition.\n  - **_to**: The target vertex of this edge. Has to be valid within the used edge definition.\n\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is true.\n- **edge**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **code**: The response code.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is false.\n- **edge**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **code**: The response code.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n  - **_from**: The _from value of the stored data.\n  - **_to**: The _to value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to replace edges in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned in the following cases:\n* No graph with this name could be found. * This collection is not part of the graph. * The edge to replace does not exist. * either `_from` or `_to` vertex does not exist.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 412**\n*A json document with these Properties is returned:*\nReturned if if-match header is given, but the stored documents revision is different.\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "ReplaceAnEdge",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the edge collection the edge belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the vertex.\n\n",
              "format": "string",
              "in": "path",
              "name": "edge",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if values set to null should be stored. By default the key is not removed from the document.\n\n",
              "in": "query",
              "name": "keepNull",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "Define if a presentation of the deleted document should be returned within the response object.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "Define if a presentation of the new document should be returned within the response object.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean",
              "default": true
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/graph_edge_replace_http_examples"
              },
              "x-description-offset": 105
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the request was successful but waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_replace_http_examples_rc_201"
              },
              "x-description-offset": 172
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_replace_http_examples_rc_202"
              },
              "x-description-offset": 239
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to replace edges in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_replace_http_examples_rc_403"
              },
              "x-description-offset": 306
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The edge to replace does not exist.\n* either `_from` or `_to` vertex does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_replace_http_examples_rc_404"
              },
              "x-description-offset": 373
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_edge_replace_http_examples_rc_412"
              },
              "x-description-offset": 440
            }
          },
          "summary": "Replace an edge",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graph/{graph}/vertex": {
        "get": {
          "description": "\nLists all vertex collections within this graph.\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the collections could be listed.\n- **code**: The response code. - **collections** (string): The list of all vertex collections within this graph. Includes collections in edgedefinitions as well as orphans. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned if no graph with this name could be found.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "ListVertexCollections",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the collections could be listed.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_list_vertex_http_examples_rc_200"
              },
              "x-description-offset": 118
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_list_vertex_http_examples_rc_404"
              },
              "x-description-offset": 185
            }
          },
          "summary": "List vertex collections",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "post": {
          "description": "Adds a vertex collection to the set of orphan collections of the graph. If the collection does not exist, it will be created.\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the collection could be created and waitForSync is enabled for the `_graphs` collection, or given in the request. The response body contains the graph configuration that has been stored.\n- **graph**:\n  - **orphanCollections** (string): An array of additional vertex collections.\n   Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\n\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\n\nReturned if the collection could be created and waitForSync is disabled for the `_graphs` collection, or given in the request. The response body contains the graph configuration that has been stored.\n\n\n  - **graph**:\n    - **orphanCollections** (string): An array of additional vertex collections.\n    Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 400**\n*A json document with these Properties is returned:*\nReturned if the request is in an invalid format.\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to modify a graph you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n  2. `Read Only` access on every collection used within this graph.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned if no graph with this name could be found.\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "AddVertexCollection",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the collection could be created and waitForSync is enabled for the `_graphs` collection, or given in the request. The response body contains the graph configuration that has been stored.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_add_http_examples_rc_201"
              },
              "x-description-offset": 196
            },
            "202": {
              "description": "Returned if the collection could be created and waitForSync is disabled for the `_graphs` collection, or given in the request. The response body contains the graph configuration that has been stored.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_add_http_examples_rc_202"
              },
              "x-description-offset": 263
            },
            "400": {
              "description": "Returned if the request is in an invalid format.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_add_http_examples_rc_400"
              },
              "x-description-offset": 330
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to modify a graph you at least need to have the following privileges:\n\n  1. `Administrate` access on the Database.\n  2. `Read Only` access on every collection used within this graph.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_add_http_examples_rc_403"
              },
              "x-description-offset": 397
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_add_http_examples_rc_404"
              },
              "x-description-offset": 464
            }
          },
          "summary": "Add vertex collection",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graph/{graph}/vertex/{collection}": {
        "delete": {
          "description": "\nRemoves a vertex collection from the graph and optionally deletes the collection, if it is not used in any other graph. It can only remove vertex collections that are no longer part of edge definitions, if they are used in edge definitions you are required to modify those first.\n\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the vertex collection was removed from the graph successfully and waitForSync is true.\n- **graph**:\n  - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is false.\n- **graph**:\n  - **orphanCollections** (string): An array of additional vertex collections. Documents within these collections do not have edges within this graph.\n  - **name**: The name of the graph.\n  - **_rev**: The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.\n  - **_id**: The internal id value of this graph. \n  - **edgedefinitions**: An array of definitions for the relations of the graph.\n   Each has the following type:\n    - **to** (string): List of vertex collection names. Edges in collection can only be inserted if their _to is in any of the collections here.\n    - **from** (string): List of vertex collection names. Edges in collection can only be inserted if their _from is in any of the collections here.\n    - **collection**: Name of the edge collection, where the edge are stored in.\n- **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 400**\n*A json document with these Properties is returned:*\n\nReturned if the vertex collection is still used in an edge definition. In this case it cannot be removed from the graph yet, it has to be removed from the edge definition first.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to drop a vertex you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned if no graph with this name could be found.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n",
          "operationId": "RemoveVertexCollection",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the vertex collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "Drop the collection as well.\nCollection will only be dropped if it is not used in other graphs.\n\n",
              "in": "query",
              "name": "dropCollection",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the vertex collection was removed from the graph successfully and waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_remove_http_examples_rc_200"
              },
              "x-description-offset": 350
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_remove_http_examples_rc_202"
              },
              "x-description-offset": 417
            },
            "400": {
              "description": "Returned if the vertex collection is still used in an edge definition. In this case it cannot be removed from the graph yet, it has to be removed from the edge definition first.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_remove_http_examples_rc_400"
              },
              "x-description-offset": 484
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to drop a vertex you at least need to have the following privileges:\n  1. `Administrate` access on the Database.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_remove_http_examples_rc_403"
              },
              "x-description-offset": 551
            },
            "404": {
              "description": "Returned if no graph with this name could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_collection_remove_http_examples_rc_404"
              },
              "x-description-offset": 618
            }
          },
          "summary": "Remove vertex collection",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "post": {
          "description": "\n\nAdds a vertex to the given collection.\n**HTTP 201**\n*A json document with these Properties is returned:*\nReturned if the vertex could be added and waitForSync is true.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **code**: The response code.\n- **vertex**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is false.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **code**: The response code.\n- **vertex**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to insert vertices into the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned if no graph with this name could be found. Or if a graph is found but this collection is not part of the graph.\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n",
          "operationId": "CreateAVertex",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the vertex collection the vertex should be inserted into.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if the response should contain the complete new version of the document.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "The body has to be the JSON object to be stored.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 42
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "201": {
              "description": "Returned if the vertex could be added and waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_create_http_examples_rc_201"
              },
              "x-description-offset": 109
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_create_http_examples_rc_202"
              },
              "x-description-offset": 176
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to insert vertices into the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_create_http_examples_rc_403"
              },
              "x-description-offset": 243
            },
            "404": {
              "description": "Returned if no graph with this name could be found. Or if a graph is found but this collection is not part of the graph.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_create_http_examples_rc_404"
              },
              "x-description-offset": 310
            }
          },
          "summary": "Create a vertex",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graph/{graph}/vertex/{collection}/{vertex}": {
        "delete": {
          "description": "\nRemoves a vertex from the collection.\n\n**HTTP 200**\n*A json document with these Properties is returned:*\n\nReturned if the vertex could be removed.\n- **removed**: Is set to true if the remove was successful. \n- **code**: The response code. - **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful but waitForSync is false.\n- **removed**: Is set to true if the remove was successful. \n- **code**: The response code. - **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to delete vertices in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned in the following cases:\n* No graph with this name could be found. * This collection is not part of the graph. * The vertex to remove does not exist.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 412**\n*A json document with these Properties is returned:*\nReturned if if-match header is given, but the stored documents revision is different.\n- **errorMessage**: A message created for this error. - **errorNum**: database error number for the error that occurred. - **code**: The response code. - **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n",
          "operationId": "RemoveAVertex",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the vertex collection the vertex belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the vertex.\n\n",
              "format": "string",
              "in": "path",
              "name": "vertex",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if a presentation of the deleted document should be returned within the response object.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "type": "boolean",
              "default": false
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the vertex could be removed.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_delete_http_examples_rc_200"
              },
              "x-description-offset": 108
            },
            "202": {
              "description": "Returned if the request was successful but waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_delete_http_examples_rc_202"
              },
              "x-description-offset": 175
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to delete vertices in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_delete_http_examples_rc_403"
              },
              "x-description-offset": 242
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The vertex to remove does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_delete_http_examples_rc_404"
              },
              "x-description-offset": 309
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_delete_http_examples_rc_412"
              },
              "x-description-offset": 376
            }
          },
          "summary": "Remove a vertex",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "get": {
          "description": "\nGets a vertex from the given collection.\n\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the vertex could be found.\n- **code**: The response code.\n- **vertex**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 304**\n*A json document with these Properties is returned:*\nReturned if the if-none-match header is given and the currently stored vertex still has this revision value. So there was no update between the last time the vertex was fetched by the caller.\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\n\nIt is true in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\nReturned if your user has insufficient rights.\nIn order to update vertices in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Read Only` access on the given collection.\n\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 404**\n*A json document with these Properties is returned:*\nReturned in the following cases:\n* No graph with this name could be found. * This collection is not part of the graph. * The vertex does not exist.\n- **errorMessage**: A message created for this error. \n- **errorNum**: database error number for the error that occurred. \n- **code**: The response code. \n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n**HTTP 412**\n*A json document with these Properties is returned:*\nReturned if if-match header is given, but the stored documents revision is different.\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "GetAVertex",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the vertex collection the vertex belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the vertex.\n\n",
              "format": "string",
              "in": "path",
              "name": "vertex",
              "required": true,
              "type": "string"
            },
            {
              "description": "Must contain a revision. If this is set a document is only returned if it has exactly this revision. Also see if-match header as an alternative to this.\n\n",
              "in": "query",
              "name": "rev",
              "required": false,
              "default": false,
              "type": "string"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an query parameter *rev*.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            },
            {
              "description": "If the \"If-None-Match\" header is given, then it must contain exactly one Etag. The document is returned, only if it has a different revision as the given Etag. Otherwise a HTTP 304 is returned. \n\n",
              "in": "header",
              "name": "if-none-match",
              "type": "string"
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the vertex could be found.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_get_http_examples_rc_200"
              },
              "x-description-offset": 111
            },
            "304": {
              "description": "Returned if the if-none-match header is given and the currently stored vertex still has this revision value. So there was no update between the last time the vertex was fetched by the caller.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_get_http_examples_rc_304"
              },
              "x-description-offset": 178
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to update vertices in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Read Only` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_get_http_examples_rc_403"
              },
              "x-description-offset": 245
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The vertex does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_get_http_examples_rc_404"
              },
              "x-description-offset": 312
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_get_http_examples_rc_412"
              },
              "x-description-offset": 379
            }
          },
          "summary": "Get a vertex",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        },
        "patch": {
          "description": "\nUpdates the data of the specific vertex in the collection.\n\n**HTTP 200**\n*A json document with these Properties is returned:*\nReturned if the vertex could be updated, and waitForSync is true.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **code**: The response code.\n- **vertex**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 202**\n*A json document with these Properties is returned:*\nReturned if the request was successful, and waitForSync is false.\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **code**: The response code.\n- **vertex**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n**HTTP 403**\n*A json document with these Properties is returned:*\n\nReturned if your user has insufficient rights.\nIn order to update vertices in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The vertex to update does not exist.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n**HTTP 412**\n*A json document with these Properties is returned:*\n\nReturned if if-match header is given, but the stored documents revision is different.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n",
          "operationId": "UpdateAVertex",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the vertex collection the vertex belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the vertex.\n\n",
              "format": "string",
              "in": "path",
              "name": "vertex",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if values set to null should be stored.\nBy default (true) the given documents attribute(s) will be set to null.\nIf this parameter is false the attribute(s) will instead be delete from the document.\n\n",
              "in": "query",
              "name": "keepNull",
              "required": false,
              "default": true,
              "type": "boolean"
            },
            {
              "description": "Define if a presentation of the deleted document should\nbe returned within the response object.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Define if a presentation of the new document should\nbe returned within the response object.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated,\nif it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative\nyou can supply the Etag in an attribute rev in the URL.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            },
            {
              "description": "The body has to contain a JSON object containing exactly the attributes that should be overwritten, all other attributes remain unchanged.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 62
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the vertex could be updated, and waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_modify_http_examples_rc_200"
              },
              "x-description-offset": 129
            },
            "202": {
              "description": "Returned if the request was successful, and waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_modify_http_examples_rc_202"
              },
              "x-description-offset": 196
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to update vertices in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_modify_http_examples_rc_403"
              },
              "x-description-offset": 263
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The vertex to update does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_modify_http_examples_rc_404"
              },
              "x-description-offset": 330
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_modify_http_examples_rc_412"
              },
              "x-description-offset": 397
            }
          },
          "summary": "Update a vertex",
          "tags": [
            "Graphs"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "put": {
          "description": "\n\nReplaces the data of a vertex in the collection.\n\n\n**HTTP 200**\n*A json document with these Properties is returned:*\n\nReturned if the vertex could be replaced, and waitForSync is true.\n\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **code**: The response code.\n- **vertex**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n\n**HTTP 202**\n*A json document with these Properties is returned:*\n\nReturned if the vertex could be replaced, and waitForSync is false.\n\n- **new**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **old**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **code**: The response code.\n- **vertex**:\n  - **_key**: The _key value of the stored data.\n  - **_rev**: The _rev value of the stored data.\n  - **_id**: The _id value of the stored data.\n- **error**: Flag if there was an error (true) or not (false).\nIt is false in this response.\n\n\n**HTTP 403**\n*A json document with these Properties is returned:*\n\nReturned if your user has insufficient rights.\nIn order to replace vertices in the graph  you at least need to have the following privileges:\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n**HTTP 404**\n*A json document with these Properties is returned:*\n\nReturned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The vertex to replace does not exist.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n**HTTP 412**\n*A json document with these Properties is returned:*\n\nReturned if if-match header is given, but the stored documents revision is different.\n\n- **errorMessage**: A message created for this error.\n- **errorNum**: database error number for the error that occurred.\n- **code**: The response code.\n- **error**: Flag if there was an error (true) or not (false).\nIt is true in this response.\n\n\n",
          "operationId": "ReplaceAVertex",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the graph.\n\n",
              "format": "string",
              "in": "path",
              "name": "graph",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the vertex collection the vertex belongs to.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            },
            {
              "description": "The *_key* attribute of the vertex.\n\n",
              "format": "string",
              "in": "path",
              "name": "vertex",
              "required": true,
              "type": "string"
            },
            {
              "description": "Define if values set to null should be stored. By default the key is not removed from the document.\n\n",
              "in": "query",
              "name": "keepNull",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Define if a presentation of the deleted document should\nbe returned within the response object.\n\n",
              "in": "query",
              "name": "returnOld",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Define if a presentation of the new document should\nbe returned within the response object.\n\n",
              "in": "query",
              "name": "returnNew",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated,\nif it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative\nyou can supply the Etag in an attribute rev in the URL.\n\n",
              "in": "header",
              "name": "if-match",
              "type": "string"
            },
            {
              "description": "The body has to be the JSON object to be stored.\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 52
            }
          ],
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned if the vertex could be replaced, and waitForSync is true.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_replace_http_examples_rc_200"
              },
              "x-description-offset": 119
            },
            "202": {
              "description": "Returned if the vertex could be replaced, and waitForSync is false.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_replace_http_examples_rc_202"
              },
              "x-description-offset": 186
            },
            "403": {
              "description": "Returned if your user has insufficient rights.\nIn order to replace vertices in the graph  you at least need to have the following privileges:\n\n  1. `Read Only` access on the Database.\n  2. `Write` access on the given collection.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_replace_http_examples_rc_403"
              },
              "x-description-offset": 253
            },
            "404": {
              "description": "Returned in the following cases:\n* No graph with this name could be found.\n* This collection is not part of the graph.\n* The vertex to replace does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_replace_http_examples_rc_404"
              },
              "x-description-offset": 320
            },
            "412": {
              "description": "Returned if if-match header is given, but the stored documents revision is different.\n\n",
              "schema": {
                "$ref": "#/definitions/graph_vertex_replace_http_examples_rc_412"
              },
              "x-description-offset": 387
            }
          },
          "summary": "Replace a vertex",
          "tags": [
            "Graphs"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/edges/{collection-id}": {
        "get": {
          "description": "Returns an array of edges starting or ending in the vertex identified by *vertex-handle*.\n\n",
          "operationId": "ReadIn-OrOutboundEdges",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The id of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection-id",
              "required": true,
              "type": "string"
            },
            {
              "description": "The id of the start vertex.\n\n",
              "in": "query",
              "name": "vertex",
              "required": true,
              "type": "string"
            },
            {
              "description": "Selects *in* or *out* direction for edges. If not set, any edges are returned.\n\n",
              "in": "query",
              "name": "direction",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the edge collection was found and edges were retrieved.\n\n"
            },
            "400": {
              "description": "Returned if the request contains invalid parameters.\n\n"
            },
            "404": {
              "description": "Returned if the edge collection was not found.\n\n"
            }
          },
          "summary": "Read in- or outbound edges",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/graphs/traversal": {
        "post": {
          "description": "\nStarts a traversal starting from a given vertex and following. edges contained in a given edgeCollection. The request must contain the following attributes.\n\nA JSON object with these properties is required:\n\n  - **sort**: body (JavaScript) code of a custom comparison function for the edges. The signature of this function is *(l, r) -> integer* (where l and r are edges) and must return -1 if l is smaller than, +1 if l is greater than, and 0 if l and r are equal. The reason for this is the following: The order of edges returned for a certain vertex is undefined. This is because there is no natural order of edges for a vertex with multiple connected edges. To explicitly define the order in which edges on the vertex are followed, you can specify an edge comparator function with this attribute. Note that the value here has to be a string to conform to the JSON standard, which in turn is parsed as function body on the server side. Furthermore note that this attribute is only used for the standard expanders. If you use your custom expander you have to do the sorting yourself within the expander code.\n  - **direction**: direction for traversal\n   - *if set*, must be either *\"outbound\"*, *\"inbound\"*, or *\"any\"*\n   - *if not set*, the *expander* attribute must be specified\n  - **minDepth**: ANDed with any existing filters): visits only nodes in at least the given depth\n  - **startVertex**: id of the startVertex, e.g. *\"users/foo\"*.\n  - **visitor**: body (JavaScript) code of custom visitor function function signature: *(config, result, vertex, path, connected) -> void* The visitor function can do anything, but its return value is ignored. To populate a result, use the *result* variable by reference. Note that the *connected* argument is only populated when the *order* attribute is set to *\"preorder-expander\"*.\n  - **itemOrder**: item iteration order can be *\"forward\"* or *\"backward\"*\n  - **strategy**: traversal strategy can be *\"depthfirst\"* or *\"breadthfirst\"*\n  - **filter**: default is to include all nodes: body (JavaScript code) of custom filter function function signature: *(config, vertex, path) -> mixed* can return four different string values:\n   - *\"exclude\"* -> this vertex will not be visited.\n   - *\"prune\"* -> the edges of this vertex will not be followed.\n   - *\"\"* or *undefined* -> visit the vertex and follow its edges.\n   - *Array* -> containing any combination of the above. If there is at least one *\"exclude\"* or *\"prune\"* respectively is contained, it's effect will occur.\n  - **init**: body (JavaScript) code of custom result initialization function function signature: *(config, result) -> void* initialize any values in result with what is required\n  - **maxIterations**: Maximum number of iterations in each traversal. This number can be set to prevent endless loops in traversal of cyclic graphs. When a traversal performs as many iterations as the *maxIterations* value, the traversal will abort with an error. If *maxIterations* is not set, a server-defined value may be used.\n  - **maxDepth**: ANDed with any existing filters visits only nodes in at most the given depth\n  - **uniqueness**: specifies uniqueness for vertices and edges visited.\n   If set, must be an object like this:\n   `\"uniqueness\": {\"vertices\": \"none\"|\"global\"|\"path\", \"edges\": \"none\"|\"global\"|\"path\"}`\n  - **order**: traversal order can be *\"preorder\"*, *\"postorder\"* or *\"preorder-expander\"*\n  - **graphName**: name of the graph that contains the edges. Either *edgeCollection* or *graphName* has to be given. In case both values are set the *graphName* is preferred.\n  - **expander**: body (JavaScript) code of custom expander function *must* be set if *direction* attribute is **not** set function signature: *(config, vertex, path) -> array* expander must return an array of the connections for *vertex* each connection is an object with the attributes *edge* and *vertex*\n  - **edgeCollection**: name of the collection that contains the edges.\n\nIf the Traversal is successfully executed *HTTP 200* will be returned.\n\nAdditionally the *result* object will be returned by the traversal.\n\nFor successful traversals, the returned JSON object has the following properties:\n- *error*: boolean flag to indicate if an error occurred (*false* in this case)\n- *code*: the HTTP status code\n- *result*: the return value of the traversal\nIf the traversal specification is either missing or malformed, the server will respond with *HTTP 400*.\n\nThe body of the response will then contain a JSON object with additional error details. The object has the following attributes:\n\n- *error*: boolean flag to indicate that an error occurred (*true* in this case)\n- *code*: the HTTP status code\n- *errorNum*: the server error number\n- *errorMessage*: a descriptive error message\n\n",
          "operationId": "executesATraversal",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/graph_traversal"
              },
              "x-description-offset": 214
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the traversal is fully executed\n*HTTP 200* will be returned.\n\n"
            },
            "400": {
              "description": "Returned if the traversal specification is either missing or malformed, the server will respond with *HTTP 400*.\n\n"
            },
            "404": {
              "description": "The server will responded with *HTTP 404* if the specified edge collection does not exist, or the specified start vertex cannot be found.\n\n"
            },
            "500": {
              "description": "The server will responded with *HTTP 500* when an error occurs inside the traversal or if a traversal performs more than *maxIterations* iterations.\n\n"
            }
          },
          "summary": "executes a traversal",
          "tags": [
            "Graphs"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/streams": {
        "get": {
          "description": "Get list of all streams.\n\n",
          "operationId": "ListOfStreams",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to Streams communication was encountered.\n\n"
            }
          },
          "summary": "Get list of streams",
          "tags": [
            "Streams"
          ],
          "x-filename": "database/Documentation/DocuBlocks/Rest/Streams/README.md",
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/streams/{stream}": {
        "post": {
          "description": "Create stream.\n\n",
          "operationId": "CreateStream",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream (up to 230 characters).\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to C8Streams communication was encountered.\n\n"
            }
          },
          "summary": "Create stream",
          "tags": [
            "Streams"
          ]
        },
        "delete": {
          "description": " Delete stream.\n",
          "operationId": "DeleteStream",
          "parameters": [
            {
              "description": "Fabric name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Stop all producer/consumer and delete stream forcefully. *deprecated*\n",
              "format": "string",
              "in": "query",
              "name": "force",
              "required": false,
              "default": true,
              "type": "boolean"
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to Streams communication was encountered.\n\n\n"
            }
          },
          "summary": "Delete stream",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/{stream}/publish": {
        "post": {
          "description": "Publish message in stream.\n\n",
          "operationId": "PublishStreamMessage",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Name of the message.\n",
              "in": "body",
              "name": "Message",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to C8Streams communication was encountered.\n\n"
            }
          },
          "summary": "Publish message",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/{stream}/backlog": {
        "get": {
          "description": "\nGet estimated backlog for the stream.\n\n",
          "operationId": "Backlog",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to Streams communication was encountered.\n\n"
            }
          },
          "summary": "Get backlog for the stream",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/{stream}/stats": {
        "get": {
          "description": "Get stats for the stream.\n\n",
          "operationId": "Stats",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to streams communication was encountered.\n\n"
            }
          },
          "summary": "Get stats for the stream",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/{stream}/subscriptions": {
        "get": {
          "description": "Get the list of subscriptions for given stream.\n\n",
          "operationId": "GetSubscriptionsList",
          "parameters": [
            {
              "description": "Fabric name.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to Streams communication was encountered.\n\n"
            }
          },
          "summary": "Get subscriptions list",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/ttl": {
        "get": {
          "description": "Get message TTL in seconds for the streams.\n\n",
          "operationId": "GetStreamsTTL",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to Streams communication was encountered.\n\n"
            }
          },
          "summary": "Get message TTL in seconds for streams",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/ttl/{ttl}": {
        "post": {
          "description": " Set message TTL in seconds for all streams.\n\n",
          "operationId": "SetStreamsTTL",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "TTL in seconds.\n",
              "format": "string",
              "in": "path",
              "name": "ttl",
              "default": 3600,
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to streams communication was encountered.\n\n"
            }
          },
          "summary": "Set message TTL in seconds for all streams.",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/clearbacklog": {
        "post": {
          "description": "Clear backlog for all streams.\n\n",
          "operationId": "ClearBacklog",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to streams communication was encountered.\n\n"
            }
          },
          "summary": "Clear backlog",
          "tags": [
            "Streams"
          ],
          "x-filename": "database/Documentation/DocuBlocks/Rest/Streams/README.md",
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/streams/clearbacklog/{subscription}": {
        "post": {
          "description": "Clear backlog for all streams for given subscription.\n\n",
          "operationId": "ClearSubscription'sBacklog",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Identifying name of the subscription.\n",
              "format": "string",
              "in": "path",
              "name": "subscription",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to C8Streams communication was encountered.\n\n"
            }
          },
          "summary": "Clear subscription's backlog",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/{stream}/expiry/{seconds}": {
        "post": {
          "description": " Expire messages on the stream for all subscriptions.\n\n",
          "operationId": "ExpireMessages",
          "parameters": [
            {
              "description": "Fabric name.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Expiry time in seconds.\n",
              "format": "int",
              "in": "path",
              "name": "seconds",
              "required": true,
              "default": 3600,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to Streams communication was encountered.\n\n"
            }
          },
          "summary": "Expire messages on the stream",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/subscription/{subscription}": {
        "delete": {
          "description": "Delete the given subscription on all streams on a stream db.\n\n",
          "operationId": "DeleteAllSubscriptions",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Identifying name of the subscription.\n",
              "format": "string",
              "in": "path",
              "name": "subscription",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to C8Streams communication was encountered.\n\n"
            }
          },
          "summary": "Unsubscribe",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/{stream}/subscriptions/{subscription}": {
        "delete": {
          "description": " Delete the given subscription. There should not be any active consumers.\n\n",
          "operationId": "DeleteSubscription",
          "parameters": [
            {
              "description": "Fabric name of the streams.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the stream.\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            },
            {
              "description": "Is geo replicated stream?\n",
              "format": "string",
              "in": "query",
              "name": "global",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "description": "Identifying name of the subscription.\n",
              "format": "string",
              "in": "path",
              "name": "subscription",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.\n\n"
            },
            "502": {
              "description": "Returned if an error related to C8Streams communication was encountered.\n\n"
            }
          },
          "summary": "Delete subscription.",
          "tags": [
            "Streams"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/platforms": {
        "get": {
          "description": "Returns the list of supported source platforms.\n\n",
          "operationId": "GetSupportedSourcePlatforms",
          "parameters": [
            {
              "description": "Fabric we are connecting to.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region to send the request to. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The list of supported source platforms.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StreamConnectorSupportedPlatform"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Supported Source Platforms",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources": {
        "get": {
          "description": "Returns all source definitions stored.\n\n",
          "operationId": "GetSourceDefinitions",
          "parameters": [
            {
              "description": "Fabric of the sources.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sources. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The list of source definitions.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StreamConnectorDefinition"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Source Definitions",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/deployed": {
        "get": {
          "description": "Returns all sources currently deployed.\n\n",
          "operationId": "GetDeployedSources",
          "parameters": [
            {
              "description": "Fabric of the sources.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sources. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The list of source names currently deployed.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Deployed Sources",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}": {
        "get": {
          "description": "Returns the definition of a source.\n\n",
          "operationId": "GetSourceDefinition",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Requested source definition.",
              "schema": {
                "$ref": "#/definitions/StreamConnectorDefinition"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Source Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        },
        "post": {
          "description": "Creates a new source definition.\n\n",
          "operationId": "CreateSourceDefinition",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Source information.\n",
              "in": "body",
              "name": "Source request body.\n",
              "required": true,
              "schema": {
                "$ref": "#/definitions/StreamSourceRequestBody"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Source definition created."
            },
            "400": {
              "description": "Bad params or the definition already exists. Please check for the actual error when returned."
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Create Source Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        },
        "put": {
          "description": "Updates a source definition.\n\n",
          "operationId": "UpdateSourceDefinition",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Source information.\n",
              "in": "body",
              "name": "Source request body.\n",
              "required": true,
              "schema": {
                "$ref": "#/definitions/StreamSourceRequestBody"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Source definition updated."
            },
            "400": {
              "description": "Invalid parameters. Refer to the response body for more information."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Update Source Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        },
        "delete": {
          "description": "Deletes a source definition.\n\n",
          "operationId": "DeleteSourceDefinition",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region to delete the source definition from. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Source definition deleted."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Delete Source Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/info": {
        "get": {
          "description": "Returns information about a source currently deployed.\n\n",
          "operationId": "GetSourceInfo",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Realtime information about the deployed source."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Source Info",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/status": {
        "get": {
          "description": "Returns the status of a source currently deployed.\n\n",
          "operationId": "GetSourceStatus",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Status of the deployed source."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Source Status",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/status": {
        "get": {
          "description": "Returns the status of an instance of a source currently deployed.\n\n",
          "operationId": "GetSourceInstanceStatus",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Status of the deployed source instance."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Source Instance Status",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/start": {
        "post": {
          "description": "Starts all instances of a source.\n\n",
          "operationId": "StartSource",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Source started."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Start Source",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/start": {
        "post": {
          "description": "Starts an instance of a source.\n\n",
          "operationId": "StartSourceInstance",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Source instance started."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Start Source Instance",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/restart": {
        "post": {
          "description": "Restarts all instances of a source.\n\n",
          "operationId": "RestartSource",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Source restarted."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Restart Source",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/restart": {
        "post": {
          "description": "Restarts an instance of a source.\n\n",
          "operationId": "RestartSourceInstance",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Source instance restarted."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Restart Source Instance",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/stop": {
        "post": {
          "description": "Stops all instances of a source.\n\n",
          "operationId": "StopSource",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Source stopped."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Stop Source",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/stop": {
        "post": {
          "description": "Stops an instance of a source.\n\n",
          "operationId": "StopSourceInstance",
          "parameters": [
            {
              "description": "Fabric of the source.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the source.\n",
              "format": "string",
              "in": "path",
              "name": "sourceName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the source. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Source instance stopped."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Source not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Stop Source Instance",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/platforms": {
        "get": {
          "description": "Returns the list of supported sink platforms.\n\n",
          "operationId": "GetSupportedSinkPlatforms",
          "parameters": [
            {
              "description": "Fabric we are connecting to.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region to send the request to. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The list of supported sink platforms.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StreamConnectorSupportedPlatform"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Supported Sink Platforms",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks": {
        "get": {
          "description": "Returns all sink definitions stored.\n\n",
          "operationId": "GetSinkDefinitions",
          "parameters": [
            {
              "description": "Fabric of the sinks.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sinks. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The list of sink definitions.",
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/StreamConnectorDefinition"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Sink Definitions",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/deployed": {
        "get": {
          "description": "Returns all sinks currently deployed.\n\n",
          "operationId": "GetDeployedSinks",
          "parameters": [
            {
              "description": "Fabric of the sinks.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sinks. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The list of sink names currently deployed.",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Deployed Sinks",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}": {
        "get": {
          "description": "Returns the definition of a sink.\n\n",
          "operationId": "GetSinkDefinition",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Requested sink definition.",
              "schema": {
                "$ref": "#/definitions/StreamConnectorDefinition"
              }
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Sink Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        },
        "post": {
          "description": "Creates a new sink definition.\n\n",
          "operationId": "CreateSinkDefinition",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Sink information.\n",
              "in": "body",
              "name": "Sink request body.\n",
              "required": true,
              "schema": {
                "$ref": "#/definitions/StreamSinkRequestBody"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Sink definition created."
            },
            "400": {
              "description": "Bad params or the definition already exists. Please check for the actual error when returned."
            },
            "401": {
              "description": "Unauthorized"
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Create Sink Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        },
        "put": {
          "description": "Updates a sink definition.\n\n",
          "operationId": "UpdateSinkDefinition",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Sink information.\n",
              "in": "body",
              "name": "Sink request body.\n",
              "required": true,
              "schema": {
                "$ref": "#/definitions/StreamSinkRequestBody"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Sink definition updated."
            },
            "400": {
              "description": "Invalid parameters. Refer to the response body for more information."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Update Sink Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        },
        "delete": {
          "description": "Deletes a sink definition.\n\n",
          "operationId": "DeleteSinkDefinition",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region to delete the sink definition from. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Sink definition deleted."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Delete Sink Definition",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/info": {
        "get": {
          "description": "Returns information about a sink currently deployed.\n\n",
          "operationId": "GetSinkInfo",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Realtime information about the deployed sink."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Sink Info",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/status": {
        "get": {
          "description": "Returns the status of a sink currently deployed.\n\n",
          "operationId": "GetSinkStatus",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Status of the deployed sink."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Sink Status",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/status": {
        "get": {
          "description": "Returns the status of an instance of a sink currently deployed.\n\n",
          "operationId": "GetSinkInstanceStatus",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Status of the deployed sink instance."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Get Sink Instance Status",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/start": {
        "post": {
          "description": "Starts all instances of a sink.\n\n",
          "operationId": "StartSink",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Sink started."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Start Sink",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/start": {
        "post": {
          "description": "Starts an instance of a sink.\n\n",
          "operationId": "StartSinkInstance",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Sink instance started."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Start Sink Instance",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/restart": {
        "post": {
          "description": "Restarts all instances of a sink.\n\n",
          "operationId": "RestartSink",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Sink restarted."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Restart Sink",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/restart": {
        "post": {
          "description": "Restarts an instance of a sink.\n",
          "operationId": "RestartSinkInstance",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Sink instance restarted."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Restart Sink Instance",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/stop": {
        "post": {
          "description": "Stops all instances of a sink.\n\n",
          "operationId": "StopSink",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Sink stopped."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Stop Sink",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/stop": {
        "post": {
          "description": "Stops an instance of a sink.\n\n",
          "operationId": "StopSinkInstance",
          "parameters": [
            {
              "description": "Fabric of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string"
            },
            {
              "description": "Name of the sink.\n",
              "format": "string",
              "in": "path",
              "name": "sinkName",
              "required": true,
              "type": "string"
            },
            {
              "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
              "format": "string",
              "in": "path",
              "name": "instanceId",
              "required": true,
              "type": "integer",
              "default": 0
            },
            {
              "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
              "format": "string",
              "in": "query",
              "name": "region",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Sink instance stopped."
            },
            "400": {
              "description": "Invalid instance ID."
            },
            "401": {
              "description": "Unauthorized"
            },
            "404": {
              "description": "Sink not found."
            },
            "500": {
              "description": "Internal server error"
            }
          },
          "summary": "Stop Sink Instance",
          "tags": [
            "Stream IO Connectors"
          ]
        }
      },
      "/_fabric/{fabric}/_api/streamapps/validate": {
        "post": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Validate stream application definition.",
          "description": "Validate stream application definition.",
          "operationId": "validate",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Stream application.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/stream_app_validate_request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Stream application definition is valid.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "422": {
              "description": "Error in stream application definition.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        }
      },
      "/_fabric/{fabric}/_api/streamapps": {
        "get": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Retrieve all Stream applications.",
          "description": "Retrieve all Stream applications.",
          "operationId": "getAll",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Stream applications.",
              "schema": {
                "$ref": "#/definitions/stream_app_response_container"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        },
        "post": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Create and deploy Stream application.",
          "description": "Create and deploy Stream application.",
          "operationId": "create",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "default": "_system",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Stream application.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/stream_app_request"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "Stream application created.",
              "schema": {
                "$ref": "#/definitions/stream_app_response_container"
              }
            },
            "400": {
              "description": "Invalid Request.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "409": {
              "description": "Stream application already exists.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "422": {
              "description": "Error in stream application definition.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        }
      },
      "/_fabric/{fabric}/_api/streamapps/samples": {
        "get": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Retrieve sample applications.",
          "description": "Retrieve sample applications.",
          "operationId": "getSamples",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Sample stream applications.",
              "schema": {
                "$ref": "#/definitions/get_all_sample_stream_apps_response"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        }
      },
      "/_fabric/{fabric}/_api/streamapps/{appname}": {
        "get": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Retrieve single stream application.",
          "description": "Retrieve single stream application.",
          "operationId": "getApplication",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "name": "appname",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Stream application.",
              "schema": {
                "$ref": "#/definitions/get_all_stream_apps_response"
              }
            },
            "404": {
              "description": "Stream application does not exist.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        },
        "put": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Update and re-deploy stream application.",
          "description": "Update and re-deploy stream application.",
          "operationId": "update",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "name": "appname",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Stream application.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/stream_app_request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Stream application created.",
              "schema": {
                "$ref": "#/definitions/stream_app_response_container"
              }
            },
            "400": {
              "description": "Invalid Request",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "404": {
              "description": "Stream application does not exists.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "422": {
              "description": "Error in stream application definition.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Stop and  delete stream application.",
          "description": "Stop and  delete stream application.",
          "operationId": "delete",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "name": "appname",
              "in": "path",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "204": {
              "description": "Stream application deleted."
            },
            "404": {
              "description": "Stream application does not exists.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        }
      },
      "/_fabric/{fabric}/_api/streamapps/query/{appName}": {
        "post": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Submit an ad hoc Stream query and get the result records from a store.",
          "description": "Submit an ad hoc Stream query and get the result records from a store.",
          "operationId": "queryStreamApp",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "name": "appName",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Query object which contains the query which returns the store records.",
              "required": true,
              "schema": {
                "$ref": "#/definitions/stream_app_query_request"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Result of query execution.",
              "schema": {
                "$ref": "#/definitions/stream_app_query_response"
              }
            },
            "400": {
              "description": "Invalid Request Body.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "422": {
              "description": "Error in stream application definition",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "500": {
              "description": "Internal server error",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        }
      },
      "/_fabric/{fabric}/_api/streamapps/{appname}/active": {
        "patch": {
          "tags": [
            "Stream Workers"
          ],
          "summary": "Enable or Disable stream application.",
          "description": "Enable or Disable stream application.",
          "operationId": "enableApplication",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "fabric",
              "in": "path",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "name": "appname",
              "in": "path",
              "required": true,
              "type": "string"
            },
            {
              "name": "active",
              "in": "query",
              "required": true,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Stream application.",
              "schema": {
                "$ref": "#/definitions/get_all_stream_apps_response"
              }
            },
            "404": {
              "description": "Stream application does not exist.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            },
            "500": {
              "description": "Internal server error.",
              "schema": {
                "$ref": "#/definitions/error_response"
              }
            }
          }
        }
      },
      "/_fabric/{fabric}/_api/search": {
        "post": {
          "description": "\n\nSearch a collection for string matches.\n\nThe specified search query will be executed for the collection. The results of the search will be in the response.\nIf there are too many results,  an \"id\" will be specified for the cursor that can be used to obtain the remaining results.\n\n `Note`: This API is applicable for those collections on which search capability is enabled. For user created views, use C8QL query to execute search operation.\n\n",
          "operationId": "SearchView",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "search"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "example": "",
                    "description": "Collection in which to search.\n\n"
                  },
                  "search": {
                    "type": "string",
                    "example": "",
                    "description": "C8QL search query, specifying search criteria for the documents in the collection.\n\n"
                  },
                  "bindVars": {
                    "type": "object",
                    "example": {},
                    "description": "Bind variables for the search query.\n\n"
                  },
                  "ttl": {
                    "type": "integer",
                    "example": 60,
                    "description": "How long search results should be preserved by the server (in seconds).\n\n"
                  }
                }
              },
              "required": true,
              "description": "Collection in which to search.\n\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Search completed.\n\n"
            },
            "400": {
              "description": "Invalid arguments supplied.\n\n"
            },
            "403": {
              "description": "Permission denied for the specified collection.\n\n"
            },
            "404": {
              "description": "Fabric or collection does not exist or search is disabled for this collection.\n\n"
            }
          },
          "summary": "String Search",
          "tags": [
            "Search"
          ]
        }
      },
      "/_fabric/{fabric}/_api/search/collection/{collection-name}": {
        "post": {
          "description": "\n\nSet search capability of a collection (enabling or disabling it). If the collection does not exist, it will be created. It is required to specify field if enable is set to true. Seach capability is enabled only for one field per collection.\n\n",
          "operationId": "SearchViewUpdate",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection-name",
              "required": true,
              "type": "string",
              "description": "Collection for which to set search capability.\n"
            },
            {
              "in": "query",
              "name": "enable",
              "required": true,
              "type": "boolean",
              "default": true,
              "description": "Whether to enable or disable search capability.\n\n"
            },
            {
              "in": "query",
              "name": "field",
              "type": "string",
              "required": false,
              "description": "For which field to enable search capability (required if enable == true).\n\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n",
              "schema": {
                "$ref": "#/definitions/example_operation_success_rc_200"
              }
            },
            "400": {
              "description": "Invalid arguments supplied.\n\n"
            },
            "403": {
              "description": "Permission denied for the specified collection.\n\n"
            },
            "404": {
              "description": "Fabric or collection with given name doesn't exist.\n\n"
            },
            "409": {
              "description": "Conflict while creating view.\n\n"
            }
          },
          "summary": "Set Search Capability",
          "tags": [
            "Search"
          ]
        }
      },
      "/_fabric/{fabric}/_api/search/view/{view-name}": {
        "delete": {
          "description": "\n\nDrops the view identified by *view-name*.\n\n",
          "operationId": "deleteView",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the view to drop.\n\n",
              "format": "string",
              "in": "path",
              "name": "view-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n",
              "schema": {
                "$ref": "#/definitions/example_operation_success_rc_200"
              }
            },
            "400": {
              "description": "Returned if the *view-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *fabric-name* or *view-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Drops a view",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "get": {
          "description": "\n\nThe result is an object describing the view \n\n",
          "operationId": "getViews:Properties",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the view.\n\n",
              "format": "string",
              "in": "path",
              "name": "view-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the view with given name exist\n\n",
              "schema": {
                "$ref": "#/definitions/search_get_view_rc_200_example"
              }
            },
            "404": {
              "description": "Returned if the *fabric name* or *view-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Return information about a view",
          "tags": [
            "Search"
          ]
        }
      },
      "/_fabric/{fabric}/_api/search/view/{view-name}/properties": {
        "get": {
          "description": "\n\nReturns an object containing the definition of the view identified by *view-name*.\n\n\n\nThe result is an object describing the view with the following attributes:\n- **id**: The identifier of the view\n- **name**: The name of the view\n- **type**: The type of the view as string\n- any additional view implementation specific properties\n\n",
          "operationId": "getView",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the view.\n\n",
              "format": "string",
              "in": "path",
              "name": "view-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the view with given name exist\n\n",
              "schema": {
                "$ref": "#/definitions/search_get_view_properties_rc_200_example"
              }
            },
            "400": {
              "description": "If the *view-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "If the *fabric-name* or *view-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Read properties of a view",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "put": {
          "description": "\n**A JSON object with these properties is required:**\n\n  - **properties**:\n    - **links**:\n      - **[collection-name]**:\n        - **analyzers** (string): The list of analyzers to be used for indexing of string values\n      (default: [\"identity\"]).\n        - **fields**:\n          - **field-name** (object): This is a recursive structure for the specific attribute path, potentially\n       containing any of the following attributes:\n       *analyzers*, *includeAllFields*, *trackListPositions*, *storeValues*\n       Any attributes not specified are inherited from the parent.\n        - **includeAllFields**: The flag determines whether or not to index all fields on a particular level of\n      depth (default: false).\n        - **trackListPositions**: The flag determines whether or not values in a lists should be treated separate\n      (default: false).\n        - **storeValues**: How should the view track the attribute values, this setting allows for\n      additional value retrieval optimizations, one of:\n      - **none**: Do not store values by the view\n      - **id**: Store only information about value presence, to allow use of the EXISTS() function\n      (default \"none\").\n\n\n\nChanges the properties of a view.\n\nOn success an object with the following attributes is returned:\n- **id**: The identifier of the view\n- **name**: The name of the view\n- **type**: The view type\n- all additional search view implementation specific properties\n\n",
          "operationId": "modifyViewPut",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the view.\n\n",
              "format": "string",
              "in": "path",
              "name": "view-name",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/post_api_view_props"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "400": {
              "description": "Returned if the *view-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *fabric-name* or *view-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Change properties of an C8Search view",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/search/view/{view-name}/rename": {
        "put": {
          "description": "\n\nRenames a view. Expects an object with the attribute(s)\n- **name**: The new name\n\nIt returns an object with the attributes\n- **id**: The identifier of the view.\n- **name**: The new name of the view.\n- **type**: The view type.\n\n**Note**: this method is not available in a cluster.\n\n",
          "operationId": "modifyView:rename",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the view to rename.\n",
              "format": "string",
              "in": "path",
              "name": "view-name",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/rename_view"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success.\n\n",
              "schema": {
                "$ref": "#/definitions/example_operation_success_rc_200"
              }
            },
            "400": {
              "description": "Returned if the *view-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *fabric-name* or *view-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Rename a view",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/search/view": {
        "get": {
          "description": "\n\nReturns an object containing an array of all view descriptions.\n\n",
          "operationId": "getViews:AllViews",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "The list of views.\n\n"
            }
          },
          "summary": "List all views.",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "post": {
          "description": "\n**A JSON object with these properties is required:**\n\n  - **type**: The type of the view. must be equal to *\"search\"*\n  - **name**: The name of the view.\n  - **primarySort**: The default sort for the view.\n   - **links**:\n     - **[collection-name]**:\n       - **analyzers** (string): The list of analyzers to be used for indexing of string values\n     (default: [\"identity\"]).\n       - **fields**:\n         - **field-name** (object): This is a recursive structure for the specific attribute path, potentially\n      containing any of the following attributes:\n      *analyzers*, *includeAllFields*, *trackListPositions*, *storeValues*\n      Any attributes not specified are inherited from the parent.\n       - **includeAllFields**: The flag determines whether or not to index all fields on a particular level of\n     depth (default: false).\n       - **trackListPositions**: The flag determines whether or not values in a lists should be treated separate\n     (default: false).\n       - **storeValues**: How should the view track the attribute values, this setting allows for\n     additional value retrieval optimizations, one of:\n     - *none*: Do not store values by the view\n     - *id*: Store only information about value presence, to allow use of the EXISTS() function\n     (default \"none\").\n\n\nCreates a new view with a given name and properties if it does not\nalready exist.\n\n**Note**: view can't be created with the links. Please use PUT/PATCH for links\nmanagement.\n\n",
          "operationId": "createView",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/post_api_view_iresearch"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "400": {
              "description": "Returned if the *view-name* is missing, then a *HTTP 400* is returned.\n\n"
            },
            "404": {
              "description": "Returned if the *fabric-name* or *view-name* is unknown, then a *HTTP 404* is returned.\n\n"
            }
          },
          "summary": "Create an C8Search view",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/search/analyzer": {
        "get": {
          "description": "\n\nRetrieves a an array of all analyzer definitions.\nThe resulting array contains objects with the following attributes:\n- **name**: the analyzer name\n- **type**: the analyzer type\n- **properties**: the properties used to configure the specified type\n- **features**: the set of features to set on the analyzer generated fields\n\n",
          "operationId": "RestAnalyzerHandler:List",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "The analyzer definitions was retrieved successfully.\n\n"
            }
          },
          "summary": "List all analyzers",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "post": {
          "description": "\n**A JSON object with these properties is required:**\n\n  - **features** (string): The set of features to set on the analyzer generated fields.\n   The default value is an empty array.\n  - **type**: The analyzer type.\n  - **name**: The analyzer name.\n  - **properties**: The properties used to configure the specified type.\n   Value may be a string, an object or null.\n   The default value is *null*.\n\n\n\n\nCreates a new analyzer based on the provided configuration.\n\n**Note**: You need to be the main system tenant admin *_mm.root* in order to execute this REST call.\n\n",
          "operationId": "RestAnalyzerHandler:Create",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/post_api_analyzer"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "An analyzer with a matching name and definition already exists.\n\n"
            },
            "201": {
              "description": "A new analyzer definition was successfully created.\n\n"
            },
            "400": {
              "description": "One or more of the required parameters is missing or one or more of the parameters\nis not valid.\n\n"
            },
            "403": {
              "description": "The user does not have permission to create and analyzer with this configuration.\n\n"
            },
            "404": {
              "description": "The fabric with given name doesn't exist.\n\n"
            }
          },
          "summary": "Create an analyzer with the suppiled definition (requires superuser privileges)",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        }
      },
      "/_fabric/{fabric}/_api/search/analyzer/{analyzer-name}": {
        "delete": {
          "description": "\n\nRemoves an analyzer configuration identified by **analyzer-name**. \n\nIf the analyzer definition was successfully dropped, an object is returned with\nthe following attributes:\n- **error**: *false*\n- **name**: The name of the removed analyzer\n\n\n\n**Note**: You need to be the main system tenant admin *_mm.root* in order to execute this REST call.\n\n",
          "operationId": "RestAnalyzerHandler:Delete",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the analyzer to remove.\n\n",
              "format": "string",
              "in": "path",
              "name": "analyzer-name",
              "required": true,
              "type": "string"
            },
            {
              "description": "The analyzer configuration should be removed even if it is in-use.\nThe default value is *false*.\n\n",
              "in": "query",
              "name": "force",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "The analyzer configuration was removed successfully.\n\n"
            },
            "400": {
              "description": "The *analyzer-name* was not supplied or another request parameter was not\nvalid.\n\n"
            },
            "403": {
              "description": "The user does not have permission to remove this analyzer configuration.\n\n"
            },
            "404": {
              "description": "An analyzer configuration does not exist or fabric with given name doesn't exist.\n\n"
            },
            "409": {
              "description": "The specified analyzer configuration is still in use and *force* was omitted or\n*false* specified.\n\n"
            }
          },
          "summary": "Remove an analyzer (requires superuser privileges)",
          "tags": [
            "Search"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "get": {
          "description": "\n\nRetrieves the full definition for the specified analyzer name.\nThe resulting object contains the following attributes:\n- **name**: the analyzer name\n- **type**: the analyzer type\n- **properties**: the properties used to configure the specified type\n- **features**: the set of features to set on the analyzer generated fields\n\n",
          "operationId": "RestAnalyzerHandler:GetDefinition",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the analyzer to retrieve.\n\n",
              "format": "string",
              "in": "path",
              "name": "analyzer-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The analyzer definition was retrieved successfully.\n\n"
            },
            "404": {
              "description": "Such an analyzer configuration does not exist.\n\n"
            }
          },
          "summary": "Return the analyzer definition",
          "tags": [
            "Search"
          ]
        }
      },
      "/_fabric/_system/_api/database": {
        "get": {
          "description": "\nRetrieves the list of all existing GeoFabrics\n**Note**: retrieving the list of GeoFabrics is only possible from within the *_system* fabric.\n**Note**: You should use the *GET user API* to fetch the list of the available GeoFabrics accessible to the user.\n\n",
          "operationId": "ListOfGeo-fabrics",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returned if the list of GeoFabrics was compiled successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            }
          },
          "summary": "List of GeoFabrics",
          "tags": [
            "Geo Fabrics"
          ],
          "x-examples": []
        },
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **users**: Enter an array of usernames that will have admin access to the new GeoFabric. If this field is left blank, the default user *root* will have admin access.\n    \n  - **name**: Has to contain a valid GeoFabric name. \n  - **tenant**: Name of the tenant to associate with GeoFabric. This option is applicable and optional when system tenant _mm invokes the API. Other tenants need not specify this option as the tenant invoking API shall be associated with GeoFabric.\n  - **options**:\n    - **spotDc**: The Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed. By default a random datacenter is chosen from those which are capable.\n    - **dcList**: The list of Edge Locations (datacenters) as a comma-separated string. The individual elements for this parameter are your Edge Location URL prefixes up to the first *.* character. \n    \n      For instance if one of your Edge Location URLs is *http://myfederation-us-east-1.dev.aws.macrometa.io*, then the corresponding value of one the items for this parameter would be *myfederation-us-east-1*. You can use the */datacenter/all* REST API call to get a list of all available Edge Locations and then pick and choose from this list. \n      \n      It is a mandatory field, but if not specified (due to user error), it defaults to the local Edge Location.\n    - **metadata**: An optional JSON object with user defined key-value pairs.\n\nCreates a new GeoFabric\nThe response is a JSON object with the attribute *result* set to *true*.\n\n**Note**: creating a new GeoFabric is only possible from within the *_system* fabric.\n\n",
          "operationId": "CreateGeo-fabric",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/create_database"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the GeoFabric was created successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request parameters are invalid or if a GeoFabric with the\nspecified name already exists.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            },
            "409": {
              "description": "Returned if a GeoFabric with the specified name already exists.\n\n\n"
            }
          },
          "summary": "Create GeoFabric",
          "tags": [
            "Geo Fabrics"
          ],
          "x-examples": []
        }
      },
      "/_fabric/_system/_api/database/user": {
        "get": {
          "description": "\n\nRetrieves the list of all GeoFabrics along with it’s information the current user can access without specifying a different username or password.\n\n",
          "operationId": "ListOfAccessibleGeoFabrics",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returned if the list of GeoFabric was compiled successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            }
          },
          "summary": "List of accessible GeoFabrics",
          "tags": [
            "Geo Fabrics"
          ],
          "x-examples": []
        }
      },
      "/_fabric/_system/_api/database/{fabric}": {
        "delete": {
          "description": "\nDrops the GeoFabric along with all data stored in it.\n\n**Note**: dropping a GeoFabric is only possible from within the *_system* fabric. The *_system* fabric itself cannot be dropped.\n\n",
          "operationId": "DropGeo-fabric",
          "parameters": [
            {
              "description": "The name of the GeoFabric.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the GeoFabric was dropped successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is malformed.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            },
            "404": {
              "description": "Returned if the GeoFabric could not be found.\n\n"
            }
          },
          "summary": "Drop GeoFabric",
          "tags": [
            "Geo Fabrics"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/database/metadata": {
        "get": {
          "description": "\n\nRetrieves information about the current GeoFabric\n\nThe response is a JSON object with the following attributes:\n\n- *name*: the name of the current GeoFabric\n\n- *options*:\n    - *clusters*: list of datacenters added to the GeoFabric\n    - *dcList*: comma-separated list of datacenters added to the GeoFabric\n    - *metadata*: An optional JSON object with user defined key-value pairs\n    - *global*: is global\n    - *isSystem*: whether or not the current GeoFabric is the *_system* fabric\n    - *name*: name of the GeoFabric\n    - *origin*: originating location\n    - *realTime*: whether the changes are published in a real time streams\n    - *spotDc*: The Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed\n    - *status*: available or not\n    - *tenant*: tanant's name\n\n- *isSystem*: whether or not the current GeoFabric is the *_system* fabric\n\n",
          "operationId": "InformationOfTheGeo-fabric",
          "parameters": [
            {
              "description": "The Database name for which we want the information.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the information was retrieved successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            },
            "404": {
              "description": "Returned if the GeoFabric could not be found.\n\n\n\n"
            }
          },
          "summary": "Information of the GeoFabric",
          "tags": [
            "Geo Fabrics"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\n\nA JSON object with following properties is required:\n\n- *metadata*: A JSON object with user defined key-value pairs.\n\n",
          "operationId": "SetMetadataInformationOfTheGeo-fabric",
          "parameters": [
            {
              "description": "The Database name for which metadata should be set.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "description": "A JSON object with user defined key-value pairs.\n\nFields:\n* metadata - json object\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/database_metadata"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the GeoFabric metadata was set successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if user has insufficient privileges.\n\n"
            },
            "404": {
              "description": "Returned if the GeoFabric could not be found.\n\n\n\n"
            }
          },
          "summary": "Set the GeoFabric metadata",
          "tags": [
            "Geo Fabrics"
          ],
          "x-examples": []
        },
        "patch": {
          "description": "\n\nA JSON object with following properties is required:\n\n- *metadata*: A JSON object with user defined key-value pairs to be updated or added in existing metadata.\n\n",
          "operationId": "UpdateMetadataInformationOfTheGeo-fabric",
          "parameters": [
            {
              "description": "The Database name for which metadata should be set.\n\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "description": "A JSON object with user defined key-value pairs.\n\nFields:\n* metadata - json object\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/database_metadata"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the GeoFabric metadata was updated successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if user has insufficient privileges.\n\n"
            },
            "404": {
              "description": "Returned if the GeoFabric could not be found.\n\n\n\n"
            }
          },
          "summary": "Modify the GeoFabric metadata",
          "tags": [
            "Geo Fabrics"
          ],
          "x-examples": []
        }
      },
      "/_api/environments": {
        "get": {
          "description": "\nRetrieves the list of all existing Environments\n**Note**: retrieving the list of Environments is only possible from within the *_system* fabric.\n**Note**: You should use the *GET user API* to fetch the list of the available Environments accessible to the user.\n\n",
          "operationId": "ListEnvironments",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returned if the list of Environments was compiled successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            }
          },
          "summary": "List of Environments",
          "tags": [
            "Environments"
          ],
          "x-examples": []
        },
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **users**: Enter an array of usernames that will have admin access to the new Environment. If this field is left blank, the default user *root* will have admin access.\n    \n  - **name**: Has to contain a valid Environment name. \n  - **tenant**: Name of the tenant to associate with Environment. This option is applicable and optional when system tenant _mm invokes the API. Other tenants need not specify this option as the tenant invoking API shall be associated with Environment.\n  - **options**:\n    - **spotDc**: The Edge Location (Datacenter) where on-spot operations for the given Environment will be performed. By default a random datacenter is chosen from those which are capable.\n    - **metadata**: An optional JSON object with user defined key-value pairs.\n\nCreates a new Environment\nThe response is a JSON object with the attribute *result* set to *true*.\n\n**Note**: creating a new Environment is only possible from within the *_system* fabric.\n\n",
          "operationId": "CreateEnvironment",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/create_environment_database"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the Environment was created successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request parameters are invalid or if an Environment with the\nspecified name already exists.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            },
            "409": {
              "description": "Returned if an Environment with the specified name already exists.\n\n\n"
            }
          },
          "summary": "Create Environment",
          "tags": [
            "Environments"
          ],
          "x-examples": []
        }
      },
      "/_api/environments/user": {
        "get": {
          "description": "\n\nRetrieves the list of all Environments along with it’s information the current user can access without specifying a different username or password.\n\n",
          "operationId": "ListOfAccessibleEnvironments",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returned if the list of Environment was compiled successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            }
          },
          "summary": "List of accessible Environments",
          "tags": [
            "Environments"
          ],
          "x-examples": []
        }
      },
      "/_api/environments/{environment}": {
        "delete": {
          "description": "\nDrops the Environment along with all data stored in it.\n\n**Note**: dropping an Environment is only possible from within the *_system* fabric. The *_system* fabric itself cannot be dropped.\n\n",
          "operationId": "DropEnvironment",
          "parameters": [
            {
              "description": "The name of the Environment.\n\n",
              "format": "string",
              "in": "path",
              "name": "environment",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the Environment was dropped successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is malformed.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            },
            "404": {
              "description": "Returned if the Environment could not be found.\n\n"
            }
          },
          "summary": "Drop Environment",
          "tags": [
            "Environments"
          ],
          "x-examples": []
        }
      },
      "/_api/environments/{environment}/metadata": {
        "get": {
          "description": "\n\nRetrieves information about the current Environment\n\nThe response is a JSON object with the following attributes:\n\n- *name*: the name of the current Environment\n\n- *options*:\n    - *clusters*: list of datacenters added to the Environment\n    - *dcList*: comma-separated list of datacenters added to the Environment\n    - *metadata*: An optional JSON object with user defined key-value pairs\n    - *global*: is global\n    - *isSystem*: whether or not the current Environment is the *_system* fabric\n    - *name*: name of the Environment\n    - *origin*: originating location\n    - *realTime*: whether the changes are published in a real time streams\n    - *spotDc*: The Edge Location (Datacenter) where on-spot operations for the given Environment will be performed\n    - *status*: available or not\n    - *tenant*: tanant's name\n\n- *isSystem*: whether or not the current Environment is the *_system* fabric\n\n",
          "operationId": "InformationOfTheEnvironment",
          "parameters": [
            {
              "description": "The Database name for which we want the information.\n\n",
              "format": "string",
              "in": "path",
              "name": "environment",
              "required": true,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the information was retrieved successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if the request was not executed in the *_system* fabric.\n\n"
            },
            "404": {
              "description": "Returned if the Environment could not be found.\n\n\n\n"
            }
          },
          "summary": "Information of the Environment",
          "tags": [
            "Environments"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\n\nA JSON object with following properties is required:\n\n- *metadata*: A JSON object with user defined key-value pairs.\n\n",
          "operationId": "SetMetadataInformationOfTheEnvironment",
          "parameters": [
            {
              "description": "The Database name for which metadata should be set.\n\n",
              "format": "string",
              "in": "path",
              "name": "environment",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "description": "A JSON object with user defined key-value pairs.\n\nFields:\n* metadata - json object\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/database_metadata"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the Environment metadata was set successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if user has insufficient privileges.\n\n"
            },
            "404": {
              "description": "Returned if the Environment could not be found.\n\n\n\n"
            }
          },
          "summary": "Set the Environment metadata",
          "tags": [
            "Environments"
          ],
          "x-examples": []
        },
        "patch": {
          "description": "\n\nA JSON object with following properties is required:\n\n- *metadata*: A JSON object with user defined key-value pairs to be updated or added in existing metadata.\n\n",
          "operationId": "UpdateMetadataInformationOfTheEnvironment",
          "parameters": [
            {
              "description": "The Database name for which metadata should be set.\n\n",
              "format": "string",
              "in": "path",
              "name": "environment",
              "required": true,
              "default": "_system",
              "type": "string"
            },
            {
              "description": "A JSON object with user defined key-value pairs.\n\nFields:\n* metadata - json object\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/database_metadata"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the Environment metadata was updated successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is invalid.\n\n"
            },
            "403": {
              "description": "Returned if user has insufficient privileges.\n\n"
            },
            "404": {
              "description": "Returned if the Environment could not be found.\n\n\n\n"
            }
          },
          "summary": "Modify the Environment metadata",
          "tags": [
            "Environments"
          ],
          "x-examples": []
        }
      },
      "/_api/version": {
        "get": {
          "description": "\nReturns the server name and version number. The response is a JSON object with the following attributes:\n\n**HTTP 200**\n*A json document with these Properties is returned:* is returned in all cases.\n- **version**: the server version string. \n\nThe string has the format \"*major*.*minor*.*sub*\". *major* and *minor* will be numeric, and *sub* may contain a number or a textual version.\n",
          "operationId": "RestVersionHandler",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "Returned in all cases.\n\n",
              "schema": {
                "$ref": "#/definitions/get_api_return_rc_200"
              },
              "x-description-offset": 175
            }
          },
          "summary": "Return server version",
          "tags": [
            "Users"
          ]
        }
      },
      "/_fabric/{fabric}/_api/user": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **passwd**: The user password as a string.\n  - **active**: An optional flag that specifies whether the user is active.  If not specified, this will default to true\n  - **extra**: An optional JSON object with arbitrary extra data about the user.\n  - **user**: The name of the user as a string.\n  - **email**: The email of the user as a string.\n\nCreate a new user. You need server access level *Administrate* in order to execute this REST call.\n\n",
          "operationId": "CreateUser",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_create"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the user can be added by the server.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing from the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "409": {
              "description": "Returned if a user with the same name already exists.\n\n"
            }
          },
          "summary": "Create User",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/": {
        "get": {
          "description": "\n\nFetches data about all users.  You need the *Administrate* server access level in order to execute this REST call.  Otherwise, you will only get information about yourself.\n\nThe call will return a JSON object with at least the following attributes on success:\n\n- *user*: The name of the user as a string.\n- *active*: An optional flag that specifies whether the user is active.\n- *extra*: An optional JSON object with arbitrary extra data about the user.\n\n\n",
          "operationId": "ListAvailableUsers",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "The users that were found.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "List available Users",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}": {
        "delete": {
          "description": "\nRemoves an existing user, identified by *user*.  You need *Administrate* for the server access level in order to execute this REST call.\n\n",
          "operationId": "RemoveUser",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the user was removed by the server.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The specified user does not exist.\n\n"
            }
          },
          "summary": "Remove User",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "get": {
          "description": "Fetches data about the specified user. You can fetch information about yourself or you need the *Administrate* server access level in order to execute this REST call.\n",
          "operationId": "FetchUser",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The user was found.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The user with the specified name does not exist.\n\n"
            }
          },
          "summary": "Fetch User",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "patch": {
          "description": "\nA JSON object with these properties is required:\n\n  - **passwd**: The user password as a string. The empty string is allowed for passwords\n  - **active**: An optional flag that specifies whether the user is active.\n  - **extra**: An optional JSON object with arbitrary extra data about the user.\n\nPartially updates the data of an existing user. The name of an existing user must be specified in *user*. You need server access level *Administrate* in order to execute this REST call. Additionally, a user can change his/her own data.\n\n",
          "operationId": "ModifyUser",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_modify"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the user data can be replaced by the server.\n\n"
            },
            "400": {
              "description": "The JSON representation is malformed or mandatory data is missing from the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The specified user does not exist.\n\n"
            }
          },
          "summary": "Modify User.",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **passwd**: The user password as a string. Specifying a password is mandatory.\n  - **active**: An optional flag that specifies whether the user is active.  If not specified, this will default to true\n  - **extra**: An optional JSON object with arbitrary extra data about the user.\n\nReplaces the data of an existing user. The name of an existing user must be specified in *user*. You need server access level *Administrate* in order to execute this REST call. Additionally, a user can change his/her own data.\n\n",
          "operationId": "ReplaceUser",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_replace"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the user data can be replaced by the server.\n\n"
            },
            "400": {
              "description": "The JSON representation is malformed or mandatory data is missing from the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The specified user does not exist.\n\n"
            }
          },
          "summary": "Replace User",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}/database": {
        "get": {
          "description": "\nFetch the list of databases available to the specified *user*. You need *Administrate* for the server access level in order to execute this REST call.\n\nThe call will return a JSON object with the per-database access privileges for the specified user. The *result* object will contain the databases names as object keys, and the associated privileges for the database as values.\n\nIn case you specified *full*, the result will contain the permissionsfor the databases as well as the permissions for the collections and streams.\n\n\n",
          "operationId": "ListTheAccessibleDatabasesForAUser",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user for which you want to query the databases.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return the full set of access levels for all databases and all collections.\n\n",
              "in": "query",
              "name": "full",
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the list of available databases can be returned.\n\n"
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "List the accessible databases for a user.",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}/database/{dbname}": {
        "get": {
          "description": "\nFetch the database access level for a specific database.\n\n\n",
          "operationId": "GetTheDatabaseAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "default": "_system",
              "required": true,
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user for which you want to query the databases.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database to query.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n"
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Get the database access level.",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nClears the database access level for the database *dbname* of user *user*. As consequence the default database access level is used. If there is no defined default database access level, it defaults to *No access*. You need permission to the *_system* database in order to execute this REST call.\n\n",
          "operationId": "ClearTheDatabaseAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n"
            }
          },
          "summary": "Clear the database access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"rw\" to set the database access level to *Administrate* .\n   Use \"ro\" to set the database access level to *Access*.\n   Use \"none\" to set the database access level to *No access*.\n\nSets the database access levels for the database *dbname* of user *user*. You need the *Administrate* server access level in order to execute this REST call.\n\n\n",
          "operationId": "SetTheDatabaseAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_database"
              },
              "x-description-offset": 54
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level was changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Set the database access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}/database/{dbname}/collection": {
        "get": {
          "description": "\nFetch the list of collections access level for a specific *user*\n\n If access level for collection is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use. \n\n\n",
          "operationId": "GetTheAllCollectionAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user for which you want to query the databases.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database to query.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return the full set of access levels for all collections.\n\n",
              "in": "query",
              "name": "full",
              "default": false,
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n"
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Get the specific collection access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}/database/{dbname}/collection/{collection}": {
        "get": {
          "description": "\nReturns the collection access level for a specific collection\n\n If access level for collection is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\n",
          "operationId": "GetTheSpecificCollectionAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user for which you want to query the databases.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database to query.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n"
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Get the specific collection access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\n\nClears the collection access level for the collection *collection* in the database *dbname* of user *user*.  As consequence the default collection access level is used. If there is no defined default collection access level, it defaults to *No access*.  You need permissions to the *_system* database in order to execute this REST call.\n\n",
          "operationId": "ClearTheCollectionAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "name": "collection",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if there is an error.\n\n"
            }
          },
          "summary": "Clear the collection access level.",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"rw\" to set the collection level access to *Read/Write*. Use \"ro\" to set the collection level access to  *Read Only*. Use \"none\" to set the collection level access to *No access*.\n\n - **collection**: Use \"&#42;\" to set default access level for all collections.\n\n If access level for collection is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\nSets the collection access level for the *collection* in the database *dbname* for user *user*. You need the *Administrate* server access level in order to execute this REST call.\n\n",
          "operationId": "SetTheCollectionAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_collection"
              },
              "x-description-offset": 54
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the collection.\n\n",
              "format": "string",
              "in": "path",
              "default": "*",
              "name": "collection",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access permissions were changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Set the collection access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}/database/{dbname}/stream": {
        "get": {
          "description": "\nFetch the list of streams available to the specified *user*. You need *Administrate* for the server access level in order to execute this REST call.\n\nThe call will return a JSON object with the per-stream access privileges for the specified user. The *result* object will contain the stream names as object keys, and the associated privileges for the stream as values.\n\nIf access level for stream is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\n\n",
          "operationId": "ListTheAccessibleStreamsForAUser",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the user for which you want to query the streams.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "Return the full set of access levels for all streams.\n\n",
              "in": "query",
              "name": "full",
              "default": false,
              "required": false,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the list of available streams can be returned.\n\n"
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "List the accessible streams",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}/database/{dbname}/stream/{stream}": {
        "get": {
          "description": "\nFetch the stream access level for a specific stream.\n\n\n",
          "operationId": "GetTheStreamAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user for which you want to query the streams.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the stream to query.\n\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n"
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Get the stream access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nClears the stream access level for the *stream* of user *user*. As consequence the default stream access level is used. If there is no defined default stream access level, it defaults to *No access*.\n\n",
          "operationId": "ClearTheStreamAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the stream.\n\n",
              "format": "string",
              "in": "path",
              "name": "stream",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n"
            }
          },
          "summary": "Clear the stream access level.",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"ro\" to set the stream access level to Subscribe.\n   Use \"wo\" to set the stream access level to Publish.\n   Use \"rw\" to set the stream access level to Publish and Subscribe.\n   Use \"none\" to set the stream access level to *No access*.\n\n - **stream**: Use \"&#42;\" to set default access level for all streams.\n\nIf access level for stream is not set then default(\"&#42;\") access level will be use. If default(\"&#42;\") access level is also not set then database access level will be use.\n\nUse Sets the stream access levels for the *stream* of api key with *keyid*. You need the *Administrate* server access level in order to execute this REST call.\n\n\n",
          "operationId": "SetTheStreamAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_database"
              },
              "x-description-offset": 54
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the database.\n\n",
              "format": "string",
              "in": "path",
              "default": "_system",
              "name": "dbname",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the stream.\n\n",
              "format": "string",
              "in": "path",
              "default": "*",
              "name": "stream",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level was changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Set the stream access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/user/{user}/billing": {
        "get": {
          "description": "\nFetch the billing access level.\n\n\n",
          "operationId": "GetTheBillingAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user for which you want to query the billing.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level can be returned.\n\n"
            },
            "400": {
              "description": "Returned if the access privileges are not right etc.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Get the billing access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "delete": {
          "description": "\nClears the billing access level of user *user*.\n\n",
          "operationId": "ClearTheBillingAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the access permissions were changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n"
            }
          },
          "summary": "Clear the billing access level",
          "tags": [
            "Users"
          ],
          "x-examples": []
        },
        "put": {
          "description": "\nA JSON object with these properties is required:\n\n  - **grant**: Use \"rw\" to set the billing access level to *Administrate*.\n   Use \"ro\" to set the billing access level to *Access*.\n   Use \"none\" to set the billing access level to *No access*.\n\nSets the billing access levels for user *user*. You need the *Administrate* server access level in order to execute this REST call.\n\n\n",
          "operationId": "SetTheBillingAccessLevel",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/user_grant_database"
              },
              "x-description-offset": 54
            },
            {
              "description": "The name of the user.\n\n",
              "format": "string",
              "in": "path",
              "name": "user",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the access level was changed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing\nfrom the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Set the billing access level.",
          "tags": [
            "Users"
          ],
          "x-examples": []
        }
      },
      "/_api/plan": {
        "get": {
          "description": "Return a list of plans in the system. You need to be the tenant admin in order to execute this REST call.\n\n",
          "operationId": "ReturnListOfPlans",
          "parameters": [],
          "responses": {
            "201": {
              "description": "List of plans displayed.\n",
              "schema": {
                "$ref": "#/definitions/plan_201_billing"
              }
            }
          },
          "summary": "Return list of plans",
          "tags": [
            "Billing"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "post": {
          "description": "\n**A JSON object with these properties is required:**\n\n - **name**: The plan name as a string. This is mandatory.\n - **planId**: The plan Id as a string. This is mandatory.\n - **description**: The description of the plan as a string.\n - **featureGates**: A list of string containing the enabled feature gates for this plan. This is mandatory.\n - **attribution**: The plan attribution.\n - **label**: The display label as a string.\n - **isBundle**: The bundle true/false. Default is false.\n - **metadata**: Metadata of the plan, having set of key-value pairs.\n - **metrics** : List of metrices applicable for this plan.\n - **active**: A mandatoy flag that specifies whether the plan is active.\n - **demo**: An optional flag that specifies whether the plan is a demo plan or not. \n\nCreate a new Plan. You need server access level *Administrate* in order to execute this REST call.\n\n",
          "operationId": "CreatePlan(requiresSuperuserPrivileges)",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/plan_create"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the plan can be added by the server.\n\n",
              "schema": {
                "$ref": "#/definitions/plan_201_billing"
              }
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing from the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "409": {
              "description": "Returned if a plan with the same name already exists.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_409"
              }
            }
          },
          "summary": "Create Plan (requires superuser privileges)",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/plan/{name}": {
        "delete": {
          "description": "Removes an existing plan, identified by *name*.  You need *Administrate* for the server access level in order to execute this REST call.\n\n",
          "operationId": "RemovePlan(requiresSuperuserPrivileges)",
          "parameters": [
            {
              "description": "The plan name to delete, as a string.\n\n",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the plan was removed by the server\n\n",
              "schema": {
                "$ref": "#/definitions/plan_201_billing"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "The specified plan does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Remove Plan (requires superuser privileges)",
          "tags": [
            "Billing"
          ]
        },
        "get": {
          "description": "\nFetches data about the given plan. The call will return a JSON object with the plan details.\n\n",
          "operationId": "ListDetailsOfPlan",
          "parameters": [
            {
              "description": "The plan name for whom we want to fetch info.",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The details for the given plan. \n\n",
              "schema": {
                "$ref": "#/definitions/plan_201_billing"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            }
          },
          "summary": "List details of the plan",
          "tags": [
            "Billing"
          ]
        },
        "patch": {
          "description": "\n**A JSON object with these properties is required:**\n\n  - **name**: The plan name as a string.\n - **planId**: The plan Id as a string.\n - **description**: The description of the plan as a string.\n - **featureGates**: A list of string containing the enabled feature gates for this plan.\n - **attribution**: The plan attribution.\n - **label**: The display label as a string.\n - **isBundle**: The bundle true/false.\n - **metadata**: The plan metadata.\n - **active**: An flag that specifies whether the plan is active. \n\nModify a Plan. You need server access level *Administrate* in order to execute this REST call.\n\n",
          "operationId": "ModifyPlan(requiresSuperuserPrivileges)",
          "parameters": [
            {
              "description": "The name of the plan to modify.",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/plan_create"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the plan data can be replaced by the server.\n\n",
              "schema": {
                "$ref": "#/definitions/plan_create"
              }
            },
            "400": {
              "description": "The JSON representation is malformed or mandatory data is missing from the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            },
            "404": {
              "description": "The specified plan does not exist.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "Modify Plan",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/plan/update": {
        "post": {
          "description": "Update the plan for specified tenant. If tenant name is not specified, then tenant who is invoking API will be used to update plan.\n\n **A JSON object with these properties is required:**\n\n - **attribution**: Attribution of the plan. e.g. `Macrometa`.\n - **plan**: Name of the plan e.g. `ENTERPRISE`.\n  - **tenant**: Name of the tenant. This is an optional field.\n  - **payment_method_id**: Stripe payment method ID which should be associated account.",
          "operationId": "UpdateTenantPlan",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/update_tenant_plan"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the plan is updated successfully.\n\n",
              "schema": {
                "$ref": "#/definitions/tenant_update_plan_example_rc_200"
              }
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing from the request.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if user is not authorized to perform an operation.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            }
          },
          "summary": "Update tenant plan",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/account": {
        "get": {
          "description": "Get account details (plan, contact and payment settings) for given tenant\n\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token.\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "GetBillingAccount",
          "parameters": [
            {
              "description": "Tenant name\n",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Account details fetched successfully.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Account_Get"
              }
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Get account details",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/contact": {
        "put": {
          "description": "Update contact details for given tenant name.\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token.\n\n\n Following attributes are provided as part of JSON request body.\n - **firstname**: First name\n - **lastname**: Last name\n - **company**: Name of the company\n - **email**: Email address\n - **phone**: Phone number\n - **line1**: Address Line 1 \n - **line2**: Address Line 2\n - **city**: City\n - **state**: State \n - **country**: Name of the country\n - **zipcode**: Zip code\n\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "UpdateContactDetails",
          "parameters": [
            {
              "description": "Tenant name.\n",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Contact_Update"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Contact details updated successfully.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_200"
              }
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Update contact details.",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/paymentsettings": {
        "put": {
          "description": "Update payment settings for given tenant\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token. - **payment_method_id**: Payment Method ID.\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "UpdatePaymentSettings",
          "parameters": [
            {
              "description": "Tenant name.\n",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Payment_Update"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Payment settings updated successfully.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_200"
              }
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Update payment settings",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/payments": {
        "get": {
          "description": "Get all payments details of the tenant for specified number of previous months.\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token. \n - **limit**: Number of previous months for which payment details are required.\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "GetPayments",
          "parameters": [
            {
              "description": "Tenant name.\n",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            },
            {
              "description": "Number of previous months for which payment details are required. ***Example: 3***\n",
              "format": "integer",
              "in": "query",
              "name": "limit",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Payment details fetched successfully.\nExample - https://stripe.com/docs/api/payment_intents/list"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Get payment details of the previous months for the given tenant.",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/invoices": {
        "get": {
          "description": "Get all invoice details of the tenant for specified number of previous months.\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token. \n - **limit**: Number of previous months for which invoice details are required.\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "GetBillingInvoices",
          "parameters": [
            {
              "description": "Name of the tenant.\n",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            },
            {
              "description": "Number of previous months for which invoices are required. ***Example: 3***\n",
              "format": "integer",
              "in": "query",
              "name": "limit",
              "required": false,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Invoice details fetched successfully.\nExample - https://stripe.com/docs/api/invoices/list"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Get invoices of the previous months for the given tenant",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/invoice/current": {
        "get": {
          "description": "Get invoice of the tenant for the current month.\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token.\n\n**Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "GetCurrentMonthInvoice",
          "parameters": [
            {
              "description": "Name of the tenant",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Invoice details fetched successfully.\nExample - https://stripe.com/docs/api/invoices/upcoming"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Get invoice of the current month for the given tenant.",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/invoices/{year}/{month}": {
        "get": {
          "description": "Get invoices for given tenant, for specific month in specific year.\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token.\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "GetInvoiceForMonthYear",
          "parameters": [
            {
              "description": "Name of the tenant.",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            },
            {
              "description": "Year in 'YYYY' format. Example:2021",
              "format": "integer",
              "in": "path",
              "name": "year",
              "required": true,
              "type": "integer"
            },
            {
              "description": "Month. Valid values:[1..12]",
              "format": "integer",
              "in": "path",
              "name": "month",
              "required": true,
              "type": "integer"
            }
          ],
          "responses": {
            "200": {
              "description": "Invoice details fetched successfully.\nExample - https://stripe.com/docs/api/invoices/retrieve"
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Get invoice of specific year and month for the tenant",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/usage": {
        "get": {
          "description": "Get usage of the tenant in specific date range.\n If no query parameters are specified, usage from start date of the month to current date is returned.\n\n\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token.\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "GetAccountUsage",
          "parameters": [
            {
              "description": "Name of the tenant.",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            },
            {
              "description": "Start date in 'YYYY-MM-DD' format. Example: 2020-12-31",
              "format": "string",
              "in": "query",
              "name": "startDate",
              "required": false,
              "type": "string"
            },
            {
              "description": "End date in 'YYYY-MM-DD' format. Example: 2020-12-31",
              "format": "string",
              "in": "query",
              "name": "endDate",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Usage of tenant fetched successfully.",
              "schema": {
                "$ref": "#/definitions/Response_Usage_Get"
              }
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Get usage of the tenant",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_api/billing/region/{region}/usage": {
        "get": {
          "description": "Get usage of the tenant in specific date range for specific region.\n If no query parameters are specified, usage from start date of the month to current date is returned.\n \n\n - **tenant**: Name of the tenant is sent as a HTTP header. This is an optional field.\n If not provided, it will determined from authentication token.\n\n **Note**: This API is not applicable for system tenants `_mm` and `demo`.",
          "operationId": "GetAccountUsageOfSpecificRegion",
          "parameters": [
            {
              "description": "Name of the tenant.",
              "format": "string",
              "in": "header",
              "name": "tenant",
              "type": "string"
            },
            {
              "description": "Name of the region.",
              "format": "string",
              "in": "path",
              "name": "region",
              "required": true,
              "type": "string"
            },
            {
              "description": "Start date in 'YYYY-MM-DD' format. Example: 2020-12-31.",
              "format": "string",
              "in": "query",
              "name": "startDate",
              "required": false,
              "type": "string"
            },
            {
              "description": "End date in 'YYYY-MM-DD' format. Example: 2020-12-31.",
              "format": "string",
              "in": "query",
              "name": "endDate",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Usage of tenant fetched successfully.",
              "schema": {
                "$ref": "#/definitions/Response_Usage_Get"
              }
            },
            "400": {
              "description": "Returned if the request doesn't have the expected format.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_400"
              }
            },
            "500": {
              "description": "Returned if there is an internal server error",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_500"
              }
            },
            "502": {
              "description": "Bad Gateway.",
              "schema": {
                "$ref": "#/definitions/Response_Billing_Code_502"
              }
            }
          },
          "summary": "Get usage of the tenant for specific region",
          "tags": [
            "Billing"
          ]
        }
      },
      "/_fabric/{fabric}/_api/export": {
        "post": {
          "description": "Execute the **query** and return list of result ducuments. **Query** cannot contain the following keywords: **INSERT**, **UPDATE**, **REPLACE**, **REMOVE** and **UPSERT**. \n\n A JSON object with these properties is required:\n\n - **bindVars** (object): Key-value pairs representing the bind parameters. Optional if bind parameters are not used in **query**. \n - **query** - C8DB query. Required field. \n\n ",
          "operationId": "ExportQueryData",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_export"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "is returned if the result list can be created by the server.\n\n"
            },
            "400": {
              "description": "is returned if the JSON representation is malformed.\n\n"
            },
            "401": {
              "description": "If user is not authorized to perform an operation\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Export data",
          "tags": [
            "Import Export"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/export/{collection}": {
        "get": {
          "description": "Return a list of documents in the specified collection. If offset, limit and order are not specified their default values will be applied.\n\n",
          "operationId": "ExportCollectionData",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "default": "",
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "description": "This option can be used to simulate paging. **Default: 0**.\n\n",
              "in": "query",
              "name": "offset",
              "required": false,
              "default": 0,
              "type": "string"
            },
            {
              "description": "This option can be used to simulate paging. Limit the result. **Default: 20**, **Max: 1000**.\n\n",
              "in": "query",
              "name": "limit",
              "required": false,
              "default": 20,
              "type": "string"
            },
            {
              "description": "Order the results asc or desc. **Default: asc**.\n\n",
              "in": "query",
              "name": "order",
              "required": false,
              "default": "asc",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "is returned if the result list can be created by the server.\n\n"
            },
            "400": {
              "description": "is returned if the JSON representation is malformed.\n\n"
            },
            "401": {
              "description": "If user is not authorized to perform an operation\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "Export collection data",
          "tags": [
            "Import Export"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/import/{collection}": {
        "post": {
          "description": "Create documents in the collection identified by collection parameter.\n - **data**: An array of json documents. Each document is interpreted separately.\n - **details**: If *true*, return extra detailed errors in the result.\n - **primaryKey**: If used, this attribute becomes the *_key* for the new document. If the values in the attribute are not strings, we convert them to strings before import. Any existing *_key* value is renamed to *old_key*. You must use the following naming convention: https://macrometa.dev/documents/naming-conventions/#document-keys\n - **replace**: If *true*, replaces any existing document in the collection with the same *_key*.\n\n",
          "operationId": "ImportCollectionData",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "path",
              "name": "collection",
              "required": true,
              "default": "",
              "type": "string",
              "format": "string",
              "description": "The name of the collection.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/api_import"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "is returned if the result list can be created by the server.\n\n"
            },
            "400": {
              "description": "is returned if the JSON representation is malformed.\n\n"
            },
            "401": {
              "description": "If user is not authorized to perform an operation\n\n"
            },
            "403": {
              "description": "Returned if user have *No access* server access level. Or if the limit of maximum documents imported per API call exceeds.\n\n"
            },
            "500": {
              "description": "Internal server error.\n\n"
            }
          },
          "summary": "Import collection data",
          "tags": [
            "Import Export"
          ],
          "x-examples": []
        }
      },
      "/_api/compute/configmaps": {
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ConfigmapController_findAll",
          "summary": "List configmaps"
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateConfigmapDto"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ConfigmapController_create",
          "summary": "Create configmap"
        }
      },
      "/_api/compute/configmaps/{configMap}": {
        "delete": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configMap",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ConfigmapController_remove",
          "summary": "Delete configmap"
        },
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configMap",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ConfigmapController_findOne",
          "summary": "Describe configmap"
        },
        "patch": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "configMap",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateConfigmapDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ConfigmapController_update"
        }
      },
      "/_api/compute/revisions": {
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "service",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "RevisionController_findAll",
          "summary": "List revisions"
        }
      },
      "/_api/compute/revisions/{revision}": {
        "delete": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "revision",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "RevisionController_remove",
          "summary": "Delete revision"
        },
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "revision",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "RevisionController_findOne",
          "summary": "Describe revision"
        }
      },
      "/_api/compute/routes": {
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "RouteController_findAll",
          "summary": "List routes"
        }
      },
      "/_api/compute/routes/{service}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "service",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "RouteController_findOne",
          "summary": "Describe route"
        }
      },
      "/_api/compute/secrets": {
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "SecretsController_findAll",
          "summary": "List secrets"
        }
      },
      "/_api/compute/secrets/registry": {
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateRegistrySecretDto"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "SecretsController_create",
          "summary": "Create docker registry secret"
        }
      },
      "/_api/compute/secrets/{secret}": {
        "delete": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "secret",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "SecretsController_remove",
          "summary": "Delete secret"
        },
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "secret",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "SecretsController_findOne",
          "summary": "Describe secret"
        }
      },
      "/_api/compute/services": {
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ServiceController_findAll",
          "summary": "List http services"
        },
        "post": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/CreateServiceDto"
              }
            }
          ],
          "responses": {
            "201": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ServiceController_create",
          "summary": "Create http service"
        }
      },
      "/_api/compute/services/{service}": {
        "delete": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "service",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ServiceController_remove",
          "summary": "Delete http service"
        },
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "service",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ServiceController_findOne",
          "summary": "Describe http service"
        },
        "put": {
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "service",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/UpdateServiceDto"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "ServiceController_update",
          "summary": "Update an existing http service"
        }
      },
      "/_api/compute/status/{cmdId}": {
        "get": {
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "in": "path",
              "name": "cmdId",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "details",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "regions",
              "required": false,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "",
              "schema": {
                "type": "object"
              }
            }
          },
          "tags": [
            "Compute"
          ],
          "operationId": "StatusController_findOne",
          "summary": "Get status"
        }
      },
      "/datacenter/all": {
        "get": {
          "description": "\nReturn a list of all Edge Locations (AKA Datacenters) deployed in the Macrometa Fabric.\n\nThe call will return a JSON object with the list of available Edge Locations, with details of each of them.\n\n",
          "operationId": "ReturnListOfAllEdgeLocations",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returned if list of all edge locations is fetched.\n\n",
              "schema": {
                "$ref": "#/definitions/get_datacenter_response_200"
              }
            }
          },
          "summary": "Return list of all Edge Locations",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        }
      },
      "/datacenter/local": {
        "get": {
          "description": "\nFetches data about the local Edge Location specific to this Datacenter/Location.\n\nThe call will return a JSON object with the Edge Location details.\n\n",
          "operationId": "ListDetailsOfLocalEdgeLocation",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Data of Edge Location fetched successfully.\n",
              "schema": {
                "$ref": "#/definitions/get_datacenter_response_200"
              }
            }
          },
          "summary": "List details of Local Edge Location",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        }
      },
      "/datacenter/{dc-name}": {
        "get": {
          "description": "\nFetches data about the specified Edge Location.\n\nThe call will return a JSON object with the Edge Location details.\n\n",
          "operationId": "ListDetailsOfSpecifiedEdgeLocation",
          "parameters": [
            {
              "description": "The Datacenter name for which you want details.\n\n",
              "format": "string",
              "in": "path",
              "name": "dc-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Data of specific Edge Location fetched successfully.\n",
              "schema": {
                "$ref": "#/definitions/datacenter_rc_200"
              }
            },
            "404": {
              "description": "Specified datacenter not found.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_404"
              }
            }
          },
          "summary": "List details of specified Edge Location",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        }
      },
      "/datacenter/{location}/{status}": {
        "put": {
          "description": "Change whether an edge location (Datacenter) is capable of being on-spot.\n\n",
          "operationId": "ChangeSpotCapabilityOfAnEdgeLocation",
          "parameters": [
            {
              "description": "The target edge location.\n\n",
              "format": "string",
              "in": "path",
              "name": "location",
              "required": true,
              "type": "string"
            },
            {
              "description": "Whether the edge location is capable of being on-spot.\n\n",
              "format": "boolean",
              "in": "path",
              "name": "status",
              "required": true,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "The spot capability of an edge location changed successfully.\n\n",
              "schema": {
                "properties": {
                  "result": {
                    "type": "string",
                    "example": true
                  }
                }
              }
            }
          },
          "summary": "Change spot capability of an Edge Location.",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        }
      },
      "/datacenter/_tenant/{tenant-name}": {
        "get": {
          "description": "\nReturns the list of the Edge Locations specific to this tenant.\n\nThe call will return a JSON object with the list of the Edge Location details.\n\n",
          "operationId": "ListEdgeLocation(akaDatacenter)DetailsForSpecifiedTenant",
          "parameters": [
            {
              "description": "The Tenant for which you want details. You must have permissions to view the tenant information.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant-name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Datacenter details displayed for specified tenant.\n\n",
              "schema": {
                "$ref": "#/definitions/datacenter_rc_200_array"
              }
            },
            "400": {
              "description": "There was an error fetching the tenant information. Check your parameter inputs.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_400"
              }
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the tenant's system\ndatabase.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_401"
              }
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n",
              "schema": {
                "$ref": "#/definitions/error_example_rc_403"
              }
            }
          },
          "summary": "List datacenter details for specified tenant.",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        }
      },
      "/_api/members": {
        "get": {
          "description": "\n\nRetrieves the list of all clusters in the federation.\n\n",
          "operationId": "ListOfFederationMembers",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returned if the list of clusters in federaion was compiled successfully.\n\n"
            },
            "500": {
              "description": "Returned if the request fails.\n\n"
            }
          },
          "summary": "List of clusters in federation",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        },
        "post": {
          "description": "\nA JSON object with following properties is required:\n\n  - **peer**: Hostname of the region to which the current region is going to join.\n\n",
          "operationId": "JoinFederationOfClusters",
          "parameters": [
            {
              "description": "A JSON object containing IP address of the peer cluster that wants to join the federation.\n\nFields:\n* peer - string\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/federation_member_peerip"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the cluster join process started successfully.\n\n"
            },
            "400": {
              "description": "Returned if invalid IP address is specified or the peer is already member of federation.\n\n"
            },
            "401": {
              "description": "Access denied"
            },
            "500": {
              "description": "Returned if the *_system* fabric could not be synchronized.\n\n\n"
            }
          },
          "summary": "Join the federation of clusters",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        }
      },
      "/_api/members/{member}": {
        "delete": {
          "description": "\nRemoves a member cluster from federation.\n\n",
          "operationId": "DeleteMemberFromFederation",
          "parameters": [
            {
              "description": "Name of the cluster.\n\n",
              "format": "string",
              "in": "path",
              "name": "member",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the cluster was removed successfully.\n\n"
            },
            "400": {
              "description": "Returned if the request is malformed.\n\n"
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Returned if the cluster could not be found.\n\n"
            }
          },
          "summary": "Remove a cluster in federation",
          "tags": [
            "Data Centers"
          ],
          "x-examples": []
        }
      },
      "/_api/tenants": {
        "get": {
          "description": "\nReturn a list of tenants in the system. You need to be the main system tenant admin *_mm.root* in order to execute this REST call.\n\n",
          "operationId": "ReturnListOfTenants",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Returned if the call succeeded.\n\n"
            }
          },
          "summary": "Return list of tenants.",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        }
      },
      "/_api/tenant": {
        "post": {
          "description": "\n**A JSON object with these properties is required:**\n\n  - **name**: The name of the tenant as a string. This is mandatory.\n   - **email**: The email address of the tenant as a string. This is non mandatory.\n   - **passwd**: The user password as a string. If no password is specified, the empty string will be used.\n  - **plan**: The name of the tenant plan as a string. This is mandatory.\n  - **attribution**: The attribution of the tenant as a string. This is mandatory.\n   - **dcList**: A comma-separated string containing the datacenter names on which this tenant\n   is to be created. If an empty string is passed in, the tenant is assumed to\n   be global to the federation and will be created on all current datacenters in\n   the federation.\n    - **metadata**: The metadata of the tenant as a JSON object. This is non mandotory\n - **contact**: Contact details of the user account. An optional JSON object with detailed contact information of the user.\nThis is field is non mandotory for **FREE**, **ENTERPRISE** and other **Demo** plans\n\nCreate a new tenant. You need server access level *Administrate* in order to execute this REST call.\n\n",
          "operationId": "CreateTenant(requiresSuperuserPrivileges)",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_create"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if the tenant can be added by the server.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing from the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "409": {
              "description": "Returned if a tenant with the same name already exists.\n\n"
            }
          },
          "summary": "Create Tenant (requires superuser privileges)",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        }
      },
      "/_api/tenant/{tenant}": {
        "delete": {
          "description": "\nRemoves an existing tenant, identified by *tenant-name*.  You need *Administrate* for the server access level in order to execute this REST call.\n\n",
          "operationId": "RemoveTenant(requiresSuperuserPrivileges)",
          "parameters": [
            {
              "description": "The tenant name to delete, as string. The main default system tenant *_mm* cannot be deleted.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "202": {
              "description": "Returned if the tenant was removed by the server\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The specified tenant does not exist\n\n"
            }
          },
          "summary": "Remove Tenant (requires superuser privileges)",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        },
        "get": {
          "description": "\nFetches data about the given tenant.  Only super admin can execute this REST call. The call will return a JSON object with the tenant details.\n\n",
          "operationId": "ListDetailsOfTenant",
          "parameters": [
            {
              "description": "The tenant name for whom we want to fetch info.",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "The details for the given tenant. \n\n",
              "schema": {
                "$ref": "#/definitions/get_tenant_example_rc_200"
              },
              "x-description-offset": 110
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            }
          },
          "summary": "List details of the tenant",
          "tags": [
            "Administration"
          ]
        },
        "patch": {
          "description": "\n**A JSON object with these properties is required:**\n\n  - **active**: Boolean flag for active status of objcet. This is non mandotory\n  - **status**: Status of tenant. This value ias added for future reference. This is non mandotory. **Valid values**: *`active, expired, delinquent, inactive`* \n  - **metadata**: The metadata of the tenant as a JSON object. This is non\nmandotory\n\n\n You need server access level *Administrate* in order to execute this REST call.\n\n",
          "operationId": "ModifyTenant",
          "parameters": [
            {
              "description": "The name of the tenant to modify.",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_modify"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "Returned, if the tenant data is successfully updated by the server.\n\n",
              "schema": {
                "$ref": "#/definitions/tenant_modify_example_rc_200"
              }
            },
            "400": {
              "description": "The JSON representation is malformed or mandatory data is missing from the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The specified tenant does not exist.\n\n"
            }
          },
          "summary": "Modify Tenant",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        }
      },
      "/_api/limits/defaults": {
        "get": {
          "description": "Returns the default limits for tenants.",
          "operationId": "GetDefaultTenantLimits",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/tenant_limits_value"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Returns the default limits for tenants",
          "tags": [
            "Administration"
          ]
        },
        "put": {
          "description": "Sets the default tenant limits.\nIf data fields are omitted, they will be set to c8db defined default values.",
          "operationId": "SetDefaultTenantLimits",
          "parameters": [
            {
              "description": "The new default values.",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_limits_value"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/tenant_limits_value"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters"
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Sets the default tenant limits",
          "tags": [
            "Administration"
          ]
        },
        "patch": {
          "description": "Updates default tenant limits. Omitted data fields will keep their current value.",
          "operationId": "UpdateDefaultTenantLimits",
          "parameters": [
            {
              "description": "The new default values.",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_limits_value"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/tenant_limits_value"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters"
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Updates default tenant limits",
          "tags": [
            "Administration"
          ]
        },
        "delete": {
          "description": "Resets default tenant limits.",
          "operationId": "ResetDefaultTenantLimits",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/tenant_limits_value"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Resets default tenant limits",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/limits/defaults/{service}": {
        "get": {
          "description": "Returns the default service limits for tenants.\n\n This API supports these services: `[database, streamsLocal, streamsGlobal and eventhub]`",
          "operationId": "GetServiceDefaultLimits",
          "parameters": [
            {
              "description": "The name of the service.",
              "format": "string",
              "in": "path",
              "name": "service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/streams_limits_example"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Service with given name is not found."
            },
            "500": {
              "description": "Internal server error."
            }
          },
          "summary": "Returns the default limits for tenants",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/limits/enable": {
        "get": {
          "description": "The flag indication whether limits are enabled for all tenants. The default value is *true*. If set to *false*, the configured limits will not be applicable.",
          "operationId": "GetEnableLimits",
          "parameters": [],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "description": "Returns the value of enable limits flag. Returns *true* if its enabled, else *false*",
                    "type": "object",
                    "example": {
                      "value": true
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Get the value of enable limits flag",
          "tags": [
            "Administration"
          ]
        },
        "post": {
          "description": "Sets the value of enable limits flag. Default value of this flag is *true*",
          "operationId": "SetEnableLimits",
          "parameters": [
            {
              "description": "The flag indication whether limits are enabled for all tenants. The default value is *true*. If set to *false*, the configured limits will not be applicable.",
              "in": "query",
              "name": "value",
              "required": true,
              "default": true,
              "type": "boolean"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/set_enable_limits_flag"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters"
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Sets the value of  enable limits flag.",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/limits/tenant/{tenant}": {
        "get": {
          "description": "Returns the limits for a tenant.",
          "operationId": "GetTenantLimits",
          "parameters": [
            {
              "description": "The name of the relevant tenant.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/tenant_limits_value"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Returns the limits for a tenant.",
          "tags": [
            "Administration"
          ]
        },
        "put": {
          "description": "Sets the tenant limits.\nIf data fields are omitted, they will be set to 'null', and c8db global limits applies.",
          "operationId": "SetTenantLimits",
          "parameters": [
            {
              "description": "The name of the relevant tenant.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "description": "The new default values.",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_limits_value"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "type": "boolean"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters"
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Sets the tenant limits",
          "tags": [
            "Administration"
          ]
        },
        "patch": {
          "description": "Updates tenant limits. Omitted data fields will keep their current value.",
          "operationId": "UpdateTenantLimits",
          "parameters": [
            {
              "description": "The name of the relevant tenant.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "description": "The new default values.",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_limits_value"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "type": "boolean"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters"
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Updates tenant limit",
          "tags": [
            "Administration"
          ]
        },
        "delete": {
          "description": "Resets tenant limits.",
          "operationId": "ResetTenantLimits",
          "parameters": [
            {
              "description": "The name of the relevant tenant.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "type": "boolean"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            }
          },
          "summary": "Resets tenant limits",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/limits/tenant/{tenant}/{service}": {
        "get": {
          "description": "Returns the database for a specific tenant. This API supports these services: `[database, streamsLocal, streamsGlobal and eventhub]`",
          "operationId": "GetTenantServiceLimits",
          "parameters": [
            {
              "description": "The name of the relevant tenant.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the service.",
              "format": "string",
              "in": "path",
              "name": "service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/streams_limits_example"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Tenant with given name or service given name not found."
            },
            "500": {
              "description": "Internal server error."
            }
          },
          "summary": "Returns the limits for a specific tenant.",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/limits/plan/{attribution}/{name}": {
        "get": {
          "description": "Returns the limits for a specific plan.",
          "operationId": "GetPlanLimits",
          "parameters": [
            {
              "description": "The attribution of the plan. E.g. Macrometa\n\n",
              "format": "string",
              "in": "path",
              "name": "attribution",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the plan.",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/tenant_limits_value"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Plan with given attributes not found."
            }
          },
          "summary": "Returns the limits for a plan.",
          "tags": [
            "Administration"
          ]
        },
        "put": {
          "description": "Sets the plan limits.\nIf data fields are omitted, they will be set to 'null', and c8db global limits applies.",
          "operationId": "SetPlanLimits",
          "parameters": [
            {
              "description": "The attribution of the plan. E.g. Macrometa\n\n",
              "format": "string",
              "in": "path",
              "name": "attribution",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the plan.",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "description": "The new default values with plan information",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_limits_value"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "type": "boolean"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters"
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Plan with given attributes not found."
            }
          },
          "summary": "Sets the plan limits",
          "tags": [
            "Administration"
          ]
        },
        "patch": {
          "description": "Updates plan limits. Omitted data fields will keep their current value.",
          "operationId": "UpdatePlanLimits",
          "parameters": [
            {
              "description": "The attribution of the plan. E.g. Macrometa\n\n",
              "format": "string",
              "in": "path",
              "name": "attribution",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the plan.",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "description": "The new default values with plan information",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/tenant_limits_value"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "type": "boolean"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters"
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Plan with given attributes not found."
            }
          },
          "summary": "Update plan limits",
          "tags": [
            "Administration"
          ]
        },
        "delete": {
          "description": "Reset plan specific plan limits.",
          "operationId": "ResetPlanLimits",
          "parameters": [
            {
              "description": "The attribution of the plan. E.g. Macrometa\n\n",
              "format": "string",
              "in": "path",
              "name": "attribution",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the plan.",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "type": "boolean"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Plan with given attributes not found."
            }
          },
          "summary": "Reset plan limits",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/limits/plan/{attribution}/{name}/{service}": {
        "get": {
          "description": "Returns the service limits for a specific plan. This API supports these services: `[database, streamsLocal, streamsGlobal and eventhub]`",
          "operationId": "GetPlanServiceLimits",
          "parameters": [
            {
              "description": "The attribution of the plan. E.g. Macrometa\n\n",
              "format": "string",
              "in": "path",
              "name": "attribution",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the plan.",
              "format": "string",
              "in": "path",
              "name": "name",
              "required": true,
              "type": "string"
            },
            {
              "description": "The name of the service.",
              "format": "string",
              "in": "path",
              "name": "service",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "schema": {
                "properties": {
                  "error": {
                    "description": "Error flag",
                    "type": "boolean",
                    "example": false
                  },
                  "code": {
                    "type": "integer",
                    "example": 200
                  },
                  "result": {
                    "$ref": "#/definitions/streams_limits_example"
                  }
                }
              }
            },
            "401": {
              "description": "Access denied"
            },
            "404": {
              "description": "Tenant with given name or service given name not found."
            },
            "500": {
              "description": "Internal server error."
            }
          },
          "summary": "Returns the service limits for a specific plan",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/features/tenant/{tenant}": {
        "delete": {
          "description": "\n\nReset features for a given tenant to default values.\n\n",
          "operationId": "ResetFeaturesForATenant",
          "parameters": [
            {
              "description": "The name of the tenant for which to reset the features.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Success\n\n"
            },
            "400": {
              "description": "Invalid parameters\n\n\n"
            }
          },
          "summary": "Reset features for a tenant",
          "tags": [
            "Administration"
          ]
        },
        "get": {
          "description": "\n\nLooks up features for a given tenant.\n\n",
          "operationId": "LookupFeaturesForATenant",
          "parameters": [
            {
              "description": "The name of the tenant for which to lookup the features.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "List of features with avaialbility flag.",
              "schema": {
                "$ref": "#/definitions/features_list_with_availability_flag_example"
              }
            },
            "400": {
              "description": "Invalid parameters\n\n\n\n"
            }
          },
          "summary": "Lookup features for a tenant.",
          "tags": [
            "Administration"
          ],
          "x-examples": [],
          "x-hints": ""
        },
        "post": {
          "description": "\n\nSets the features for the specified tenant.\n\n",
          "operationId": "UpdateFeaturesForATenant",
          "parameters": [
            {
              "description": "The name of the tenant for which to update the features.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "description": "The features to update (each value must be either true or false).\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/features_list_with_availability_flag_example"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "200": {
              "description": "Returns if features updated successfully.\n\n"
            },
            "400": {
              "description": "Returns if invalid parameters are provided.\n\n\n\n"
            }
          },
          "summary": "Sets features for a tenant.",
          "tags": [
            "Administration"
          ]
        },
        "put": {
          "description": "Updates the features for the specified tenant.\n\n",
          "operationId": "UpdateFeaturesForSpecifiedTenant",
          "parameters": [
            {
              "description": "The name of the tenant for which to update the features.\n\n",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "description": "The features to update (each value must be either true or false).\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/features_list_with_availability_flag_example"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if features are updated successfully.\n\n"
            },
            "400": {
              "description": "Returned if invalid parameters are provided.\n\n"
            }
          },
          "summary": "Update features for a tenant.",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_api/tenant/{tenant}/datacenter/{datacenter}": {
        "post": {
          "description": "\nAdd new Datacenter to specified tenant. Only super admin can execute this REST call. \n\nThe tenant's internal system metadata will be updated with the new location. Only super admin execute this REST call.\n\nThe new datacenter will be added to `_system` fabric of the tenant. The new datacenter will not be added to the GeoFabrics of the tenant. \n\nWhile the new datacenter is being added to the tenant, it will `not` be available for normal operations in the new location until the tenant data sync in the new datacenter has been completed. \n\nAfter all the tenant data has been synced from the originating datacenter, the tenant will be available in that datacenter.\n\n",
          "operationId": "AddDatacentersToTenant(superuser)",
          "parameters": [
            {
              "description": "The tenant to which the datacenter will be added. You cannot modify the system tenants `_mm` and `demo`.",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "in": "path",
              "name": "datacenter",
              "description": "Datacenter that needs to be added to the tenant.",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "force",
              "description": "Force syncing fabric data.",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "in": "query",
              "name": "remoteDc",
              "description": "Name of remote datacenter to sync fabric data from (leave empty to use default).",
              "required": false,
              "default": "",
              "type": "string"
            },
            {
              "in": "query",
              "name": "excludeCollections",
              "description": "Collections to be excluded from syncing (comma-separated).",
              "required": false,
              "default": "",
              "type": "string"
            },
            {
              "in": "query",
              "name": "fabric",
              "description": "Fabric to which the datacenter needs to be added.",
              "required": false,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the tenant datacenters can be updated by the server.\n\n"
            },
            "400": {
              "description": "Returned if the JSON representation is malformed or mandatory data is missing from the request.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system* database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The specified tenant does not exist.\n\n"
            }
          },
          "summary": "Add datacenter to the tenant. (Requires superadmin access)",
          "tags": [
            "Administration"
          ]
        },
        "delete": {
          "description": "Remove datacenter from a tenant. Only super admin can execute this REST call.",
          "operationId": "RemoveTenantDatacenter(superuser)",
          "parameters": [
            {
              "description": "The tenant to be modified. You cannot modify the system tenants `_mm` and `demo`.",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "description": "The datacenter to be removed.",
              "format": "string",
              "in": "path",
              "name": "datacenter",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "fabric",
              "description": "Fabric from which the datacenter needs to be removed.",
              "required": false,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the tenant was removed by the server.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*\ndatabase.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "Returned if the specified tenant does not exist.\n\n"
            },
            "500": {
              "description": "Internal server error.\n\n"
            }
          },
          "summary": "Remove datacenter from the tenant. (Requires superadmin access).",
          "tags": [
            "Administration"
          ]
        },
        "put": {
          "description": "Reconcie datacenter of a given tenant. Only super admin can execute this REST call.",
          "operationId": "ReconcileTenantDatacenter(superuser)",
          "parameters": [
            {
              "description": "The tenant to be reconciled. You cannot modify the system tenants `_mm` and `demo`.",
              "format": "string",
              "in": "path",
              "name": "tenant",
              "required": true,
              "type": "string"
            },
            {
              "description": "The datacenter on which to perform reconciling.",
              "format": "string",
              "in": "path",
              "name": "datacenter",
              "required": true,
              "type": "string"
            },
            {
              "in": "query",
              "name": "force",
              "description": "Force syncing fabric data.",
              "required": false,
              "default": false,
              "type": "boolean"
            },
            {
              "in": "query",
              "name": "remoteDc",
              "description": "Name of remote datacenter to sync fabric data from (leave empty to use default).",
              "required": false,
              "default": "",
              "type": "string"
            },
            {
              "in": "query",
              "name": "excludeCollections",
              "description": "Collections to be excluded from syncing (comma-separated).",
              "required": false,
              "default": "",
              "type": "string"
            },
            {
              "in": "query",
              "name": "fabric",
              "description": "Fabric that needs to be reconciled.",
              "required": false,
              "default": "_system",
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if the tenant was reconciled by the server.\n\n"
            },
            "401": {
              "description": "Returned if you have *No access* database access level to the *_system*  database.\n\n"
            },
            "403": {
              "description": "Returned if you have *No access* server access level.\n\n"
            },
            "404": {
              "description": "The specified tenant does not exist.\n\n"
            },
            "500": {
              "description": "Internal server error\n\n"
            }
          },
          "summary": "Reconcile tenant from given datacenter. (Requires superadmin access).",
          "tags": [
            "Administration"
          ]
        }
      },
      "/_fabric/{fabric}/_api/events": {
        "delete": {
          "description": "Deletes one or more events by _id.\n\n",
          "operationId": "DeleteEvent",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "description": "A JSON array of strings (event _ids).\n\n",
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "type": "object"
              },
              "x-description-offset": 0
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if event deletion successful\n\n"
            },
            "400": {
              "description": "Returned if invalid parameters are provided\n\n"
            }
          },
          "summary": "Delete event.",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        },
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **status**: The activity status (OK/WARN/ERROR).\n  - **description**: Event description.\n  - **entityName**: The entity name of the event. Ex: name of collection; name of user etc\n  - **entityType**: The entity type of the event (COLLECTION/GRAPH/PIPELINE/AUTH/STREAM/GEOFABRIC).\n  - **details**: Additional activity info. Ex: error message.\n  - **action**: The activity of the event (CREATE/UPDATE/DELETE/EXECUTE/LOGIN).\n  - **attributes**:\n\nCreates a new event with a given params. The request must contain an object with the following attributes.\n\n",
          "operationId": "CreateEvent",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/event_create"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Returned if event created successfully\n\n"
            },
            "400": {
              "description": "Returned  if the body does not contain a valid JSON representation of an event.\n\n"
            }
          },
          "summary": "Create event",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        },
        "get": {
          "description": "Looks up events for a given tenant and fabric.\n",
          "operationId": "LookupEventsForATenantAndFabric",
          "parameters": [
            {
              "description": "The fabric name to use in the URL path for this API call. The main default system database is _system\n",
              "format": "string",
              "in": "path",
              "name": "fabric",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned if features lookup successful\n\n"
            },
            "400": {
              "description": "Returned if invalid parameters are provided\n\n"
            }
          },
          "summary": "Lookup events for a tenant and fabric",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/metrics/names": {
        "get": {
          "description": "Returns an array of all metrics names.\n\n",
          "operationId": "names",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            }
          ],
          "responses": {
            "200": {
              "description": "Returned  when operation is successful\n"
            }
          },
          "summary": "Get metrics names",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        }
      },
      "/_fabric/{fabric}/_api/metrics/query": {
        "post": {
          "description": "\nA JSON object with these properties is required:\n\n  - **metrics** (string): Array of strings containing the metric names we want to receive\n  - **since**: unix timestamp in milliseconds of oldest entry we want to receive\n  - **limit**: number of results we want to receive\n  - **querytype**: \"list\" returns a list of all available metrics, \"get\" returns all the requested metrics, \"sum\" returns sum of all records for each of the requested metrics \n  - **GeoFabric**: GeoFabric name\n\n",
          "operationId": "query",
          "parameters": [
            {
              "in": "path",
              "name": "fabric",
              "required": true,
              "default": "_system",
              "type": "string",
              "format": "string",
              "description": "The name of the fabric.\n"
            },
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/post_metrics_query"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "200": {
              "description": "\n"
            }
          },
          "summary": "Query user metrics",
          "tags": [
            "Administration"
          ],
          "x-examples": []
        }
      },
      "/_api/trigger/zendesk": {
        "post": {
          "description": "\n\nCreates the Zendesk support ticket. Based on the operation, this API requires different request parameters to create the ticket body.\nFollowing operations are supported -\n 1. **Generic**: Default operation. User needs to pass ticket subject and body.\n 2. **AddRegionToTenant**: Operation to add new region to the existing tenant.\n 3. **RemoveRegionFromTenant**: Operation to remove existing region from the existing tenant.\n 4. **AddRegionToFabric**: Operation to add new region to the existing fabric.\n 5. **RemoveRegionFromFabric**: Operation to remove existing region from the existing fabric.\n\n",
          "operationId": "zendeskAPI",
          "parameters": [
            {
              "in": "body",
              "name": "Json Request Body",
              "required": true,
              "schema": {
                "$ref": "#/definitions/post_zendesk_api"
              },
              "x-description-offset": 54
            }
          ],
          "responses": {
            "201": {
              "description": "Successfully created Zendesk support ticket.\n\n"
            },
            "400": {
              "description": "Invalid request.\n\n"
            },
            "500": {
              "description": "Failed to create Zendesk support ticket.\n\n"
            }
          },
          "summary": "Creates the Zendesk support ticket",
          "tags": [
            "Support"
          ],
          "x-examples": []
        }
      }
    },
    "swagger": "2.0"
  }