{
  "host": "api-gdn.paas.macrometa.io",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "servers": [
    {
      "url": "api-gdn.paas.macrometa.io",
      "description": "Production server"
    }
  ],
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "definitions": {
    "document_get_412": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 412
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorNum": {
          "example": 1200
        },
        "errorMessage": {
          "example": "precondition failed"
        },
        "_id": {
          "example": "xxx/8753101"
        },
        "_key": {
          "example": "8753101"
        },
        "_rev": {
          "example": "_dpDlw6W--_"
        }
      }
    },
    "import_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "properties": {
            "created": {
              "description": "Number of records created.",
              "type": "integer",
              "example": 3
            },
            "errors": {
              "description": "Number of records with errors.",
              "type": "integer",
              "example": 0
            },
            "unprocessed": {
              "description": "Number of records not processed.",
              "type": "integer",
              "example": 0
            }
          }
        }
      }
    },
    "query_workers_get_restql_user_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "items": {
            "$ref": "#/definitions/examples_id_key_rev_data"
          }
        }
      }
    },
    "query_workers_post_restql_execute_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "hasMore": {
          "type": "boolean",
          "example": true
        },
        "id": {
          "type": "integer",
          "example": 11894969
        },
        "cached": {
          "type": "boolean",
          "example": false
        },
        "extra": {
          "properties": {
            "stats": {
              "type": "array",
              "example": []
            },
            "warnings": {
              "type": "array",
              "example": []
            }
          }
        },
        "result": {
          "items": {
            "$ref": "#/definitions/examples_id_key_rev_data"
          }
        }
      }
    },
    "query_workers_post_restql_execute_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "hasMore": {
          "type": "boolean",
          "example": true
        },
        "id": {
          "type": "integer",
          "example": 11894969
        },
        "cached": {
          "type": "boolean",
          "example": false
        },
        "extra": {
          "properties": {
            "warnings": {
              "type": "array",
              "example": []
            }
          }
        },
        "result": {
          "items": {
            "$ref": "#/definitions/examples_id_key_rev_data"
          }
        }
      }
    },
    "query_workers_post_restql_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "properties": {
            "userid": {
              "description": "The userid",
              "type": "string",
              "example": "testuser"
            },
            "tenant": {
              "description": "The tenant",
              "type": "string",
              "example": "_mm"
            },
            "fabric": {
              "description": "The fabric",
              "type": "string",
              "example": "_system"
            },
            "name": {
              "description": "Query name",
              "type": "string",
              "example": "testQueryName"
            },
            "value": {
              "description": "The query being saved",
              "type": "string",
              "example": "for u in testCollection return u"
            },
            "_key": {
              "description": "The key for this record",
              "type": "string",
              "example": "testuser._system.testQueryName"
            },
            "type": {
              "description": "Record Type",
              "type": "string",
              "example": "c8ql"
            }
          }
        }
      }
    },
    "example_id_key_rev": {
      "properties": {
        "_id": {
          "description": "ID of the collection.",
          "type": "string",
          "example": "test/foo"
        },
        "_key": {
          "description": "_key details of collection.",
          "type": "string",
          "example": "foo"
        },
        "_rev": {
          "description": "_rev details of collection.",
          "type": "string",
          "example": "_dPRuHxe--_"
        }
      },
      "type": "object"
    },
    "example_old_id_key_rev": {
      "properties": {
        "_id": {
          "description": "ID of the collection.",
          "type": "string",
          "example": "test/foo"
        },
        "_key": {
          "description": "_key details of collection.",
          "type": "string",
          "example": "foo"
        },
        "_rev": {
          "description": "_rev details of collection.",
          "type": "string",
          "example": "_zPad4Hxd--_"
        }
      },
      "type": "object"
    },
    "example_operation_success_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Return true flag if operation is successfully completed.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "example_operation_success_rc_204_delete_stream_worker": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 204
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Successfully removed stream application"
        }
      }
    },
    "example_operation_success_rc_200_validate_stream_worker": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Successfully validated stream application"
        }
      }
    },
    "redirect_example_rc_304": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 304
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": 102020
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_400": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 400
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": 102020
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_401": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 401
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": "102020"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_403": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 403
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": 581
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_404": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 404
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": 581
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_409": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 409
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": 581
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_412": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 412
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": 581
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_429": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 429
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Error number returned from the database.",
          "type": "integer",
          "example": 581
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "error_example_rc_422": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 422
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "export_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "items": {
            "properties": {
              "_key": {
                "type": "string",
                "example": "1634556"
              },
              "name": {
                "type": "string",
                "example": "test1"
              }
            }
          }
        }
      }
    },
    "api_key_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of API keys with details as keyid, user name and tenant name.",
          "items": {
            "$ref": "#/definitions/apikey200_help"
          },
          "type": "array"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "apikey200_help": {
      "properties": {
        "keyid": {
          "description": "Keyid of the API key.",
          "type": "string",
          "example": "test1"
        },
        "user": {
          "description": "Name of the user.",
          "type": "string",
          "example": "root"
        },
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": "_mm"
        }
      }
    },
    "api_key_dbname_collection_put_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "_system/test1": {
          "type": "string",
          "example": "rw"
        }
      }
    },
    "api_key_dbname_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "string",
          "example": "rw"
        }
      }
    },
    "api_key_put_dbname_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "string",
          "example": "rw"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "api_key_database_collection_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "List of collections and the access level.",
          "type": "object",
          "properties": {
            "test1": {
              "type": "string",
              "example": "rw"
            }
          }
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "api_key_database_stream_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "properties": {
            "c8locals.streamTest": {
              "type": "string",
              "example": "rw"
            }
          }
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "api_key_http_examples_rc_200_billing": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Billing tag with billing access level present.",
          "properties": {
            "billing": {
              "type": "string",
              "example": "rw"
            }
          }
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "http_examples_rc_200_attributes": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Object represting attributes for key.",
          "$ref": "#/definitions/attribute_values"
        }
      }
    },
    "http_examples_rc_201_attributes": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "format": "",
          "type": "boolean",
          "example": false
        },
        "attributes": {
          "description": "Object represting attributes for key.",
          "$ref": "#/definitions/attribute_values"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "attribute_values": {
      "properties": {
        "key1": {
          "description": "Attribute key-value.",
          "format": "string",
          "type": "string",
          "example": "value1"
        },
        "key2": {
          "description": "Attribute key-value.",
          "format": "string",
          "type": "string",
          "example": "value2"
        }
      }
    },
    "api_key_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "key": {
          "description": "The generated key.",
          "type": "string",
          "example": "test1.KqEsCra56Nr6qiBvDhIUr7Fiey9gxUHCdg8dLuY75rOSAQtMUdeh6Hf851kd6atM3ccf69"
        },
        "keyid": {
          "description": "keyid of the key.",
          "type": "string",
          "example": "test1"
        },
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": "_mm"
        },
        "user": {
          "description": "Name of the user.",
          "type": "string",
          "example": "root"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "api_key_http_examples_rc_200_0": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "tenant": {
          "description": "The name of the tenant.",
          "type": "string",
          "example": "_mm"
        },
        "user": {
          "description": "The username of the tenant.",
          "type": "string",
          "example": "test1"
        },
        "email": {
          "description": "The email of this API key.",
          "type": "string",
          "example": "test@foo.com"
        },
        "active": {
          "description": "Active status the API key.",
          "type": "boolean",
          "example": true
        },
        "apikey": {
          "description": "Hash of API key.",
          "type": "object",
          "properties": {
            "hash": {
              "description": "Hash of API key.",
              "type": "string",
              "example": "1467ad2eed8e823f5a5db74aacd716d2f87dc3dde2bced8799e3c07dcf1c88ee"
            },
            "parent": {
              "description": "Hash of API key.",
              "type": "string",
              "example": "root"
            }
          }
        },
        "extra": {
          "description": "A JSON object with extra user information.",
          "type": "object"
        }
      }
    },
    "api_key_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "items": {
            "properties": {
              "_system": {
                "description": "Access level of system is described.",
                "type": "string",
                "example": "rw"
              }
            }
          }
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "api_key_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "authentication_examples_rc_200": {
      "properties": {
        "jwt": {
          "description": "JWT authentication token.",
          "type": "string",
          "example": "IsInR5cCI6IkpXVCJ9.pvaG4gRG9lIiwiaWF0IjoyfQ.SflKxwRJSMeV_adQssw5c"
        },
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": "foo"
        },
        "username": {
          "description": "Username of the tenant.",
          "type": "string",
          "example": "joe"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "kv_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "It shows name of the collection.",
          "type": "string",
          "example": "testCollection"
        },
        "count": {
          "description": "It gives kv count.\n\n",
          "type": "integer",
          "example": 5
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "kv_collection_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "format": "",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "It shows name of the collection.\n\n",
          "format": "",
          "type": "string",
          "example": "testCollection"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "kv_key_examples_rc_200": {
      "properties": {
        "_id": {
          "description": "ID of the collection.",
          "type": "string",
          "example": "test/foo"
        },
        "_key": {
          "description": "_key details of collection.",
          "type": "string",
          "example": "foo"
        },
        "_rev": {
          "description": "_rev details of collection.",
          "type": "string",
          "example": "_dPRuHxe--_"
        },
        "expireAt": {
          "description": "Expiration details of collection.n",
          "type": "integer",
          "example": 1638291600
        },
        "value": {
          "description": "Value of the collection.",
          "type": "string",
          "example": "bar"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "examples_id_key_rev": {
      "properties": {
        "_id": {
          "description": "ID of the collection.",
          "type": "string",
          "example": "test/foo"
        },
        "_key": {
          "description": "_key details of collection.",
          "type": "string",
          "example": "foo"
        },
        "_rev": {
          "description": "_rev details of collection.",
          "type": "string",
          "example": "_dPRuHxe--_"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "examples_id_key_rev_array": {
      "items": {
        "$ref": "#/definitions/examples_id_key_rev"
      }
    },
    "examples_id_key_rev_data": {
      "properties": {
        "_id": {
          "description": "ID of the collection.",
          "type": "string",
          "example": "test/foo"
        },
        "_key": {
          "description": "_key details of collection.",
          "type": "string",
          "example": "foo"
        },
        "_rev": {
          "description": "_rev details of collection.",
          "type": "string",
          "example": "_dPRuHxe--_"
        },
        "data": {
          "description": "data in record.",
          "type": "string",
          "example": "data1"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "examples_id_key_rev_oldrev": {
      "properties": {
        "_id": {
          "description": "ID of the collection.",
          "type": "string",
          "example": "test/foo"
        },
        "_key": {
          "description": "_key details of collection.",
          "type": "string",
          "example": "foo"
        },
        "_rev": {
          "description": "_rev details of collection.",
          "type": "string",
          "example": "_dPRuHxe--_"
        },
        "_oldRev": {
          "description": "previous revision of collection.",
          "type": "string",
          "example": "_dP34awxe--_"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "kv_get_values_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": "false"
        },
        "result": {
          "description": "An array of key-value pairs from collection. If no keys are found and empty array is returned.",
          "items": {
            "properties": {
              "_key": {
                "type": "string",
                "example": "foo"
              },
              "value": {
                "type": "string",
                "example": "bar"
              },
              "expireAt": {
                "type": "number",
                "example": 1637859600
              }
            }
          }
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "plan_201_billing": {
      "properties": {
        "active": {
          "description": "Active status of the billing plan.",
          "type": "boolean",
          "example": true
        },
        "attribution": {
          "description": "Attribution name of the billing plan.",
          "type": "string",
          "example": null
        },
        "demo": {
          "description": "Flag about demo status of the billing plan.",
          "type": "boolean",
          "example": true
        },
        "description": {
          "description": "Information of the billing plan.",
          "type": "string",
          "example": "Information of the plan"
        },
        "featureGates": {
          "description": "List of featureGates associated with billing plan.",
          "items": {
            "type": "string",
            "example": "KV"
          }
        },
        "isBundle": {
          "type": "boolean",
          "example": false
        },
        "label": {
          "description": "Label of the billing plan.",
          "type": "string",
          "example": "Free"
        },
        "metadata": {
          "description": "Metadata about the billing plan.",
          "properties": {},
          "example": {
            "key": "value"
          }
        },
        "metrics": {
          "description": "Metric values displayed along with name.",
          "items": {
            "properties": {
              "name": {
                "type": "string",
                "example": "kv-reads"
              },
              "value": {
                "type": "string",
                "example": "c8db_service_kv_read_requests_count"
              },
              "metricType": {
                "type": "string",
                "example": "counter"
              }
            }
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the billing plan.",
          "type": "string",
          "example": "enterprise"
        },
        "planID": {
          "description": "ID associated with the billing plan.",
          "type": "string",
          "example": "aa2da2sd3s2ed3ssd3sd"
        },
        "pricing": {
          "description": "Pricing details of the billing plan.",
          "type": "string",
          "example": "Custom pricing"
        }
      }
    },
    "api_plan_list_rc_200": {
      "type": "array",
      "description": "Array of billing plans details.",
      "items": {
        "$ref": "#/definitions/plan_201_billing"
      }
    },
    "datacenter_rc_200_array": {
      "items": {
        "properties": {
          "tenant": {
            "description": "Tenant name",
            "type": "string"
          },
          "dcInfo": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/datacenter_rc_200"
            }
          }
        }
      },
      "type": "array"
    },
    "datacenter_rc_200": {
      "properties": {
        "_id": {
          "description": "ID of the data center.",
          "type": "string"
        },
        "_key": {
          "description": "_key associated with data center.",
          "type": "string"
        },
        "_rev": {
          "description": "_rev value of the data center.",
          "type": "string"
        },
        "host": {
          "description": "Datacenter cluster IP.",
          "type": "string"
        },
        "local": {
          "description": "Flag about data center is local or not.",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the data center.",
          "type": "string"
        },
        "spot_region": {
          "type": "boolean"
        },
        "status": {
          "type": "integer"
        },
        "tags": {
          "description": "Tag values associated with data center such as URL.",
          "properties": {
            "api": {
              "type": "string"
            },
            "role": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        },
        "locationInfo": {
          "description": "Complete information about the location of data center.",
          "properties": {
            "_id": {
              "type": "string"
            },
            "_key": {
              "type": "string"
            },
            "_rev": {
              "type": "string"
            },
            "city": {
              "type": "string"
            },
            "countrycode": {
              "type": "string"
            },
            "countryname": {
              "type": "string"
            },
            "latitude": {
              "type": "string"
            },
            "longitude": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "url": {
              "type": "string"
            }
          }
        }
      }
    },
    "datacenter_get_rc_200_array": {
      "items": {
        "properties": {
          "tenant": {
            "description": "Tenant name",
            "type": "string",
            "example": "_mm"
          },
          "dcInfo": {
            "type": "array",
            "items": {
              "properties": {
                "_id": {
                  "description": "ID of the data center.",
                  "type": "string",
                  "example": "_clusters/gdn-us-west"
                },
                "_key": {
                  "description": "key associated with data center.",
                  "type": "string",
                  "example": "gdn-us-west"
                },
                "_rev": {
                  "description": "_rev value of the data center.",
                  "type": "string",
                  "example": "_c9VHcYC--_"
                },
                "host": {
                  "description": "Data center cluster IP.",
                  "type": "string",
                  "example": "192.168.1.100"
                },
                "local": {
                  "description": " If *true*, the data center is a regional data center for the request else *false*.",
                  "type": "boolean",
                  "example": true
                },
                "name": {
                  "description": "Name of the data center.",
                  "type": "string",
                  "example": "gdn-us-west"
                },
                "spot_region": {
                  "description": "If true, the data center is on-spot capable.",
                  "type": "boolean",
                  "example": false
                },
                "status": {
                  "description": " If *0*, the data center is online else data center is having connectivity problem.",
                  "type": "integer",
                  "example": 0
                },
                "tags": {
                  "$ref": "#/definitions/datacenter_response_tags"
                },
                "locationInfo": {
                  "description": "Complete information about the location of data center.",
                  "properties": {
                    "_id": {
                      "description": "ID of the location info.",
                      "type": "string",
                      "example": "_members/gdn-us-west"
                    },
                    "_key": {
                      "description": "key for the location info.",
                      "type": "string",
                      "example": "gdn-us-west"
                    },
                    "_rev": {
                      "description": "The document revision.",
                      "type": "string",
                      "example": "_c9VHcYC--_"
                    },
                    "city": {
                      "description": "The city of the data center.",
                      "type": "string",
                      "example": "San Jose"
                    },
                    "countrycode": {
                      "description": "The country code of the data center.",
                      "type": "string",
                      "example": "US"
                    },
                    "countryname": {
                      "description": "The country name of the data center",
                      "type": "string",
                      "example": "United States"
                    },
                    "latitude": {
                      "description": "The latitude of the data center.",
                      "type": "string",
                      "example": 37.3388
                    },
                    "longitude": {
                      "description": "The latitude of the data center",
                      "type": "string",
                      "example": -121.8916
                    },
                    "host": {
                      "description": "Data center cluster IP.",
                      "type": "string",
                      "example": "92.236.111.184"
                    },
                    "status": {
                      "description": " If *0*, the data center is online else data center is having connectivity problem.",
                      "type": "integer",
                      "example": 0
                    },
                    "url": {
                      "description": "URL for the data center.",
                      "type": "string",
                      "example": "gdn-us-west.paas.macrometa.io"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "type": "array"
    },
    "datacenter_get_rc_200": {
      "properties": {
        "name": {
          "description": "Name of the data center.",
          "type": "string",
          "example": "gdn-us-west"
        },
        "local": {
          "description": "If *true*, the data center is a regional data center for the request else *false*.",
          "type": "boolean",
          "example": true
        },
        "status": {
          "description": "If *0*, the data center is online else data center is having connectivity problem.",
          "type": "integer",
          "example": 0
        },
        "tags": {
          "$ref": "#/definitions/datacenter_response_tags"
        },
        "locationInfo": {
          "$ref": "#/definitions/datacenter_response_location_info"
        }
      }
    },
    "datacenter_members_post_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "datacenter_members_get_rc_200": {
      "type": "array",
      "items": {
        "properties": {
          "_key": {
            "description": "key for the data center.",
            "type": "string",
            "example": "gdn-us-west"
          },
          "host": {
            "description": "IP address of the data center.",
            "type": "string",
            "example": "192.168.1.100"
          },
          "status": {
            "description": "If *0*, the data center is online else data center is having connectivity problem.",
            "type": "integer",
            "example": 0
          },
          "city": {
            "description": "The city of the data center.",
            "type": "string",
            "example": "San Jose"
          },
          "countrycode": {
            "description": "The Country code of the data center.",
            "type": "string",
            "example": "US"
          },
          "countryname": {
            "description": "The Country Name of the data center.",
            "type": "string",
            "example": "United States"
          },
          "latitude": {
            "description": "The latitude of the data center.",
            "type": "string",
            "example": 37.3388
          },
          "longitude": {
            "description": "The longitude of the data center.",
            "type": "string",
            "example": -121.8916
          },
          "url": {
            "description": "URL for the data center.",
            "type": "string",
            "example": "gdn-us-west.paas.macrometa.io"
          }
        }
      }
    },
    "get_datacenter_response_200": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/datacenter_response_fields"
      }
    },
    "get_regional_datacenter_response_200": {
      "$ref": "#/definitions/datacenter_response_fields"
    },
    "datacenter_response_tags": {
      "description": "Tag values associated with data center.",
      "properties": {
        "api": {
          "description": "API URL for the data center.",
          "type": "string",
          "example": "api-gdn-us-west.paas.macrometa.io"
        },
        "url": {
          "description": "URL for the data center",
          "type": "string",
          "example": "gdn-us-west.paas.macrometa.io"
        }
      }
    },
    "datacenter_response_location_info": {
      "description": "Complete information about the location of data center.",
      "properties": {
        "city": {
          "description": "The city of the data center.",
          "type": "string",
          "example": "San Jose"
        },
        "countrycode": {
          "description": "The country code of the data center.",
          "type": "string",
          "example": "US"
        },
        "countryname": {
          "description": "The country name of the data center",
          "type": "string",
          "example": "United States"
        },
        "latitude": {
          "description": "The latitude of the data center.",
          "type": "string",
          "example": 37.3388
        },
        "longitude": {
          "description": "The latitude of the data center",
          "type": "string",
          "example": -121.8916
        },
        "url": {
          "description": "URL for the data center.",
          "type": "string",
          "example": "gdn-us-west.paas.macrometa.io"
        }
      }
    },
    "datacenter_response_fields": {
      "properties": {
        "_key": {
          "description": "key for the data center",
          "type": "string",
          "example": "gdn-us-west"
        },
        "host": {
          "description": "IP address of the data center.",
          "type": "string",
          "example": "92.236.111.184"
        },
        "local": {
          "description": "If *true*, the data center is a regional data center for the request else *false*.",
          "type": "boolean",
          "example": true
        },
        "name": {
          "description": "Name of the data center.",
          "type": "string",
          "example": "gdn-us-west"
        },
        "spot_region": {
          "description": "If *true*, the data center is on-spot capable",
          "type": "boolean",
          "example": false
        },
        "status": {
          "description": "If *0*, the data center is online else data center is having connectivity problem.",
          "type": "integer",
          "example": 0
        },
        "tags": {
          "$ref": "#/definitions/datacenter_response_tags"
        },
        "locationInfo": {
          "$ref": "#/definitions/datacenter_response_location_info"
        }
      }
    },
    "tenant_limits_value": {
      "properties": {
        "apiServer": {
          "$ref": "#/definitions/api_server_limits_example"
        },
        "cep": {
          "$ref": "#/definitions/cep_limits_example"
        },
        "compute": {
          "$ref": "#/definitions/compute_limits_example"
        },
        "database": {
          "$ref": "#/definitions/database_limits_example"
        },
        "eventhub": {
          "$ref": "#/definitions/eventhub_limits_example"
        },
        "streamsGlobal": {
          "$ref": "#/definitions/streams_limits_example"
        },
        "streamsLocal": {
          "$ref": "#/definitions/streams_limits_example"
        }
      }
    },
    "database_limits_example": {
      "properties": {
        "maxDocumentSize": {
          "description": "The maximum document size in bytes.",
          "type": "integer",
          "example": 409600
        },
        "maxDocumentsReturnedByQuery": {
          "description": "The maximum documents returned by a query, or 0 to disable this limit. The page size for the query is equal to this value (if set), preventing c8db from creating a persistent cursor for queries.",
          "format": "int64",
          "type": "integer",
          "example": 1000
        },
        "maxQueryExecutionTimeInMs": {
          "description": "The maximum time allowed for a query to complete processing.",
          "type": "integer",
          "example": 10000
        },
        "maxQueryMemoryBytes": {
          "description": "The maximum bytes of memory allowed to be used by a query during processing.",
          "type": "integer",
          "example": 268435456
        },
        "maxGeoFabricsPerTenant": {
          "description": "The maximum number of fabric a tenant can create. Use 0 to disable.",
          "type": "integer",
          "example": 2
        },
        "maxCollectionsPerFabric": {
          "description": "The maximum number of collections per fabric a tenant can create. Use 0 to disable.",
          "type": "integer",
          "example": 10
        },
        "maxGraphsPerFabric": {
          "description": "The maximum number of graph collections per fabric a tenant can create. Use 0 to disable.",
          "type": "integer",
          "example": 10
        },
        "maxIndexes": {
          "description": "The maximum number of indexes per fabric a tenant can create. Use 0 to disable.",
          "type": "integer",
          "example": 10
        },
        "maxViewsPerFabric": {
          "description": "The maximum number of views per fabric a tenant can create. Use 0 to disable.",
          "type": "integer",
          "example": 10
        },
        "maxRequestsPerDay": {
          "description": "The maximum number of API requests per day for a tenant, including UI requests to the APIs. Use 0 to disable. This only applies for tenants with the 'tenant.trial' property in _tenants set to *true*.",
          "type": "integer",
          "example": 5000
        },
        "maxStoragePerRegion": {
          "description": "The maximum storage (in bytes) allowed to be used by a tenant in a region. Use 0 to disable. This only applies for tenants with the 'FREE' billing plan. **Note**: As the metadata is also get counted in storage size calculation, the required storage size could be more than the total documents size stored in database.",
          "type": "integer",
          "example": 104857600
        },
        "maxRestQLUsagePerFabric": {
          "description": "The maximum number of RestQL queries per fabric a tenant can execute in a day. Use 0 to disable.",
          "type": "integer",
          "example": 25
        },
        "maxRestQLUsagePerDay": {
          "description": "The maximum number of RestQL requests can be executed by a tenant in a day. Use 0 to disable. This only applies for tenants with the 'tenant.trial' property in _tenants set to *true*.",
          "type": "integer",
          "example": 100
        },
        "maxDocumentsImportedPerAPICall": {
          "description": "The maximum number of documents a tenant can import in a single API call. Use 0 to disable.",
          "type": "integer",
          "example": 10000
        }
      }
    },
    "api_server_limits_example": {
      "properties": {
        "maxRequestPerMinute": {
          "description": "Rate limiting at the gateway proxy. This value indicates the maximum number of requests per minute for a tenant, including all http/https requests for any component coming from a regions LoadBalancer. If the value is 0, rate limiting is disabled.",
          "format": "int64",
          "type": "integer",
          "example": 60
        }
      }
    },
    "streams_limits_example": {
      "properties": {
        "maxStreamsCount": {
          "description": "Max streams count.",
          "type": "integer",
          "example": 10
        },
        "maxProducersCount": {
          "description": "Max streams producer count.",
          "type": "integer",
          "example": 10
        },
        "maxConsumersCount": {
          "description": "Max streams consumer count.",
          "type": "integer",
          "example": 10
        },
        "maxSubscriptionsCount": {
          "description": "Max streams subscriptions count.",
          "type": "integer",
          "example": 10
        },
        "maxBacklogMessageTTLMin": {
          "description": "Max streams backlog messagaes TTL in minute.",
          "type": "integer",
          "example": 1440
        },
        "maxBacklogStorageSizeMB": {
          "description": "Max streams backlog storage size in MB.",
          "type": "integer",
          "example": 100
        },
        "maxDispatchThrottlingRateInByte": {
          "description": "Max streams byte dispatch rate per minute.",
          "type": "integer",
          "example": 4096
        }
      }
    },
    "compute_limits_example": {
      "description": "The limits values for compute feature",
      "format": "object",
      "properties": {
        "maxConfigmapsCount": {
          "description": "Max compute namespace configuration maps count.",
          "type": "integer",
          "example": 5
        },
        "maxEphimeralStorageMB": {
          "description": "Max compute namespace ephimeral storage size in MB.",
          "type": "integer",
          "example": 50
        },
        "maxLimitsCpuMi": {
          "description": "Max compute namespace limits CPU millicores.",
          "type": "integer",
          "example": 50
        },
        "maxLimitsMemoryMB": {
          "description": "Max compute namespace limits memory size in MB.",
          "type": "integer",
          "example": 100
        },
        "maxPodsCount": {
          "description": "Max compute namespace PODS count.",
          "type": "integer",
          "example": 5
        },
        "maxRequestsCpuMi": {
          "description": "Max compute namespace request CPU millicores.",
          "type": "integer",
          "example": 300
        },
        "maxRequestsMemoryMB": {
          "description": "Max compute namespace requests memory MB.",
          "type": "integer",
          "example": 300
        },
        "maxSecretsCount": {
          "description": "Max compute namespace secrets count.",
          "type": "integer",
          "example": 5
        },
        "maxServicesCount": {
          "description": "Max compute namespace services count.",
          "type": "integer",
          "example": 5
        }
      }
    },
    "eventhub_limits_example": {
      "description": "The limits values for eventhub feature",
      "format": "object",
      "properties": {
        "maxEventhubProducersCount": {
          "description": "Max eventhub producers count.",
          "type": "integer",
          "example": 50
        },
        "maxEventhubConsumersCount": {
          "description": "Max eventhub consumers count",
          "type": "integer",
          "example": 100
        }
      }
    },
    "cep_limits_example": {
      "description": "The limits values for CEP feature",
      "format": "object",
      "properties": {
        "maxPublishedWorkers": {
          "description": "Max number of published workers.",
          "type": "integer",
          "example": 0
        },
        "maxWorkersMemoryMB": {
          "description": "Max total memory size in MB of all the stream workers for the tenant.",
          "type": "integer",
          "example": 0
        },
        "maxMemoryMBPerWorker": {
          "description": "Max memory size in MB per stream worker for the tenant.",
          "type": "integer",
          "example": 0
        },
        "maxWorkersCpuSecondsPerMinute": {
          "description": "Max CPU seconds per minute for stream worker",
          "type": "integer",
          "example": 0
        },
        "maxWorkersThroughputInMBPerMinute": {
          "description": "Max IN throughput per minute in MB for stream workers.",
          "type": "integer",
          "example": 0
        },
        "maxWorkersThroughputOutMBPerMinute": {
          "description": "Max OUT throughput per minute in MB for stream workers.",
          "type": "integer",
          "example": 0
        }
      }
    },
    "set_enable_limits_flag": {
      "properties": {
        "value": {
          "description": "The flag value for enable limits. This value will be applicable for all tenants. This is a boolean field. Set this value to true, if limits need to be enabled, else set it to false to disable limits.",
          "format": "",
          "type": "boolean",
          "example": true
        }
      }
    },
    "rename_view": {
      "properties": {
        "name": {
          "description": "The new name of the search view.",
          "type": "string",
          "example": "new_view_name"
        }
      },
      "type": "object"
    },
    "post_api_view": {
      "properties": {
        "name": {
          "description": "The name of the search view.",
          "type": "string"
        },
        "properties": {
          "$ref": "#/definitions/post_api_view_props"
        },
        "type": {
          "description": "The type of the search view. must be equal to one of the supported C8DB search view\ntypes.\n\n",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "post_api_view_fields": {
      "description": "A list of link properties that are applied at each document level with each key specifying a document attribute",
      "properties": {
        "[field-name]": {
          "description": "JSON object of link properties.",
          "items": {
            "type": "object"
          },
          "type": "object"
        }
      },
      "type": "object",
      "default": {}
    },
    "post_api_view_iresearch": {
      "properties": {
        "name": {
          "description": "The name of the search view. This field is immutable.",
          "type": "string",
          "example": "new_collection_view"
        },
        "primarySort": {
          "description": "Specify default sorting order. This field is immutable.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "field": {
                "description": "The name of the field.",
                "type": "string",
                "example": "attribute1"
              },
              "direction": {
                "description": "The sorting direction.",
                "type": "string",
                "example": "asc"
              }
            },
            "default": {}
          },
          "default": []
        },
        "links": {
          "$ref": "#/definitions/post_api_view_links"
        },
        "type": {
          "description": "The type of the search view. must be equal to *search*.",
          "type": "string",
          "default": "search"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "type": "object"
    },
    "post_api_view_link_props": {
      "description": "The link properties. If specified, then *properties* should be a JSON object containing the following attributes:\n",
      "properties": {
        "analyzers": {
          "description": "The list of analyzers to be used for indexing of string values.",
          "format": "string",
          "items": {
            "type": "string",
            "default": "identity"
          },
          "type": "array"
        },
        "fields": {
          "$ref": "#/definitions/post_api_view_fields"
        },
        "includeAllFields": {
          "description": "The flag determines whether or not to index all fields on a particular level of depth.",
          "type": "boolean",
          "default": false
        },
        "storeValues": {
          "description": "How should the search view track the attribute values, this setting allows for additional value retrieval optimizations, one of:\n- *none*: Do not store values by the search view\n- *id*: Store only information about value presence, to allow use of the EXISTS() function.",
          "type": "string",
          "default": "none"
        },
        "trackListPositions": {
          "description": "The flag determines whether or not values in a lists should be treated separate.",
          "type": "boolean",
          "default": false
        }
      },
      "type": "object"
    },
    "post_api_view_links": {
      "description": "The set of collection names associated with the properties.\n",
      "properties": {
        "[collection-name]": {
          "$ref": "#/definitions/post_api_view_link_props"
        }
      },
      "type": "object"
    },
    "post_api_view_props": {
      "description": "The search view properties. If specified, then *properties* should be a JSON object\ncontaining the attributes supported by the specific search view type.\n\nThe search view properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe search view properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\nThe search view properties. If specified, then *properties* should be a JSON object\ncontaining the following attributes:\n\n",
      "properties": {
        "links": {
          "$ref": "#/definitions/post_api_view_links"
        }
      },
      "type": "object"
    },
    "post_api_analyzer": {
      "properties": {
        "features": {
          "description": "The set of features to set on the analyzer generated fields.\nThe default value is an empty array.",
          "items": {
            "type": "string",
            "example": "norm"
          },
          "type": "array"
        },
        "name": {
          "description": "The analyzer name.",
          "type": "string",
          "example": "custom_analyzer"
        },
        "properties": {
          "description": "The properties used to configure the specified type. Value may be a string, an object or null.",
          "type": "object",
          "default": null
        },
        "type": {
          "description": "The analyzer type",
          "type": "string",
          "example": "text"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "auth_token": {
      "properties": {
        "email": {
          "description": "The email of the user for whom we want the auth token.",
          "type": "string",
          "example": "joe@foo.com"
        },
        "password": {
          "description": "The user password as a string.",
          "type": "string",
          "example": "password"
        },
        "tenant": {
          "description": "The name of the tenant for whose user we want the auth token.",
          "type": "string",
          "example": "foo"
        },
        "username": {
          "description": "The name of the user for whom we want the auth token.",
          "type": "string",
          "example": "joe"
        }
      },
      "required": [
        "password"
      ],
      "type": "object"
    },
    "keys_array": {
      "items": {
        "type": "string",
        "format": "string",
        "example": "foo"
      },
      "type": "array"
    },
    "key_value": {
      "properties": {
        "_key": {
          "description": "Key",
          "type": "string",
          "example": "foo"
        },
        "value": {
          "description": "Value",
          "type": "string",
          "example": "bar"
        },
        "expireAt": {
          "description": "Expiry time in UTC timestamp format.",
          "type": "integer",
          "default": -1
        }
      },
      "required": [
        "_key",
        "value"
      ],
      "type": "object"
    },
    "key_value_array": {
      "items": {
        "$ref": "#/definitions/key_value"
      },
      "type": "array"
    },
    "kv_array_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of keys. If there are no results, the array is returned as empty.",
          "items": {
            "type": "string",
            "example": "data"
          }
        }
      }
    },
    "keys_array_rc_200_1": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of keys. If there are no results, the array is returned as empty.",
          "items": {
            "properties": {
              "name": {
                "description": "Name of the collection.",
                "type": "string",
                "example": "testCollection"
              },
              "expiration": {
                "description": "Expiration details of a collection.",
                "type": "string",
                "example": true
              }
            }
          }
        }
      }
    },
    "get_all_GeoFabrics_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of GeoFabric names",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "_system",
            "demo._system"
          ]
        }
      }
    },
    "create_GeoFabric_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "boolean"
        }
      }
    },
    "get_GeoFabric_info_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there was an error.\nIt is false in this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "_system"
            },
            "options": {
              "$ref": "#/definitions/get_user_GeoFabrics_options_examples_rc_200"
            },
            "isSystem": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "get_user_GeoFabrics_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "_system"
              },
              "options": {
                "$ref": "#/definitions/get_user_GeoFabrics_options_examples_rc_200"
              },
              "isSystem": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      }
    },
    "get_user_GeoFabrics_options_examples_rc_200": {
      "properties": {
        "associated_regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "datacenter1",
            "datacenter2"
          ]
        },
        "clusters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "datacenter1",
            "datacenter2"
          ]
        },
        "dcList": {
          "type": "string",
          "example": "datacenter1,datacenter2"
        },
        "dynamo_local_tables": {
          "type": "boolean",
          "example": false
        },
        "metadata": {
          "type": "object",
          "example": {
            "key": "value"
          }
        },
        "name": {
          "type": "string",
          "example": "_system"
        },
        "realTime": {
          "type": "boolean"
        },
        "spotDc": {
          "type": "string",
          "example": "datacenter1"
        },
        "status": {
          "type": "string",
          "example": "available"
        },
        "tenant": {
          "type": "string",
          "example": "_mm"
        }
      }
    },
    "dropped_GeoFabrics_example_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Whether GeoFabric was successfully removed.",
          "type": "boolean"
        }
      }
    },
    "set_GeoFabric_example_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "boolean"
        }
      }
    },
    "patch_GeoFabric_example_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "boolean"
        }
      }
    },
    "GeoFabric_add_locations": {
      "properties": {
        "dc": {
          "description": "The data center to be added to the GeoFabric, as a string.",
          "type": "string"
        }
      },
      "required": [
        "dc"
      ],
      "type": "object"
    },
    "graph_traversal": {
      "properties": {
        "direction": {
          "description": "Direction for traversal\n- *if set*, must be either *\"outbound\"*, *\"inbound\"*, or *\"any\"*\n- *if not set*, the *expander* attribute must be specified.\n\n",
          "type": "string"
        },
        "edgeCollection": {
          "description": "Name of the collection that contains the edges.\n\n",
          "type": "string"
        },
        "expander": {
          "description": "Body (JavaScript) code of custom expander function *must* be set if *direction* attribute is **not** set function signature: *(config, vertex, path) -> array* expander must return an array of the connections for *vertex* each connection is an object with the attributes *edge* and *vertex*.\n\n",
          "type": "string"
        },
        "filter": {
          "description": "Default is to include all nodes: body (JavaScript code) of custom filter function function signature: *(config, vertex, path) -> mixed* can return four different string values:\n- *\"exclude\"* -> this vertex will not be visited.\n- *\"prune\"* -> the edges of this vertex will not be followed.\n- *\"\"* or *undefined* -> visit the vertex and follow its edges.\n- *Array* -> containing any combination of the above.\n  If there is at least one *\"exclude\"* or *\"prune\"* respectively is contained, it's effect will occur.\n\n",
          "type": "string"
        },
        "graphName": {
          "description": "Name of the graph that contains the edges. Either *edgeCollection* or *graphName* has to be given. In case both values are set the *graphName* is preferred.\n\n",
          "type": "string"
        },
        "init": {
          "description": "Body (JavaScript) code of custom result initialization function function signature: *(config, result) -> void* initialize any values in result with what is required.\n\n",
          "type": "string"
        },
        "itemOrder": {
          "description": "Item iteration order can be *\"forward\"* or *\"backward\"*.\n\n",
          "type": "string"
        },
        "maxDepth": {
          "description": "ANDed with any existing filters visits only nodes in at most the given depth.\n\n",
          "type": "string"
        },
        "maxIterations": {
          "description": "Maximum number of iterations in each traversal. This number can be set to prevent endless loops in traversal of cyclic graphs. When a traversal performs as many iterations as the *maxIterations* value, the traversal will abort with an error. If *maxIterations* is not set, a server-defined value may be used.\n\n",
          "type": "string"
        },
        "minDepth": {
          "description": "ANDed with any existing filters):\nvisits only nodes in at least the given depth.\n\n",
          "type": "string"
        },
        "order": {
          "description": "Traversal order can be *\"preorder\"*, *\"postorder\"* or *\"preorder-expander\"*.\n\n",
          "type": "string"
        },
        "sort": {
          "description": "Body (JavaScript) code of a custom comparison function for the edges. The signature of this function is *(l, r) -> integer* (where l and r are edges) and must return -1 if l is smaller than, +1 if l is greater than, and 0 if l and r are equal. The reason for this is the following: The order of edges returned for a certain vertex is undefined. This is because there is no natural order of edges for a vertex with multiple connected edges. To explicitly define the order in which edges on the vertex are followed, you can specify an edge comparator function with this attribute. Note that the value here has to be a string to conform to the JSON standard, which in turn is parsed as function body on the server side. Furthermore note that this attribute is only used for the standard expanders. If you use your custom expander you have to do the sorting yourself within the expander code.\n\n",
          "type": "string"
        },
        "startVertex": {
          "description": "Id of the startVertex, e.g. *\"users/foo\"*.\n\n",
          "type": "string"
        },
        "strategy": {
          "description": "Traversal strategy can be *\"depth-first\"* or *\"breadth-first\"*.\n\n",
          "type": "string"
        },
        "uniqueness": {
          "description": "Specifies uniqueness for vertices and edges visited. If set, must be an object like this:\n`\"uniqueness\": {\"vertices\": \"none\"|\"global\"|\"path\", \"edges\": \"none\"|\"global\"|\"path\"}`.\n\n",
          "type": "string"
        },
        "visitor": {
          "description": "Body (JavaScript) code of custom visitor function function signature: *(config, result, vertex, path, connected) -> void* The visitor function can do anything, but its return value is ignored. To populate a result, use the *result* variable by reference. Note that the *connected* argument is only populated when the *order* attribute is set to *\"preorder-expander\"*.\n\n",
          "type": "string"
        }
      },
      "required": [
        "startVertex"
      ],
      "type": "object"
    },
    "event_attributes": {
      "description": "Additional event attributes. If specified, then *attributes* should be a JSON array containing key-value attributes",
      "type": "object",
      "example": {
        "CollectionType": "DOCUMENT",
        "HasStream": 1,
        "IsLocal": 0,
        "IsOrigin": 1
      }
    },
    "create_database": {
      "properties": {
        "name": {
          "description": "Has to contain a valid GeoFabric name.\n\n",
          "type": "string",
          "example": "_system"
        },
        "tenant": {
          "description": "Name of the tenant to associate with GeoFabric. This option is applicable and optional when system tenant *_mm* invokes the API. Other tenants should not specify this option as the tenant invoking API shall be associated with GeoFabric.\n\n",
          "type": "string",
          "example": "_mm"
        },
        "options": {
          "$ref": "#/definitions/create_database_options"
        },
        "users": {
          "description": "Enter an array of usernames that will have admin access to the new GeoFabric. If this field is left blank, the default user *root* will have admin access.\n\n",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "root"
          ]
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "create_environment_database": {
      "properties": {
        "name": {
          "description": "Has to contain a valid environment name.",
          "type": "string"
        },
        "tenant": {
          "description": "Name of the tenant to associate with environment. This option is applicable and optional when system tenant *_mm* invokes the API. Other tenants should not specify this option as the tenant invoking API shall be associated with environment.",
          "type": "string"
        },
        "options": {
          "$ref": "#/definitions/create_environment_database_options"
        },
        "users": {
          "description": "Enter an array of usernames that will have admin access to the new environment. If this field is left blank, the default user *root* will have admin access.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "create_database_options": {
      "description": "Has to be a dictionary of Database options used when creating the GeoFabric. If this is not specified, default options are used. If one of the dict members is not specified, then defaults will be used for that dict member.\nThe members of the *options* dictionary are as follows:\n\n",
      "properties": {
        "dcList": {
          "description": "The list of Edge Locations (data centers) as a comma-separated string. The individual elements for this parameter are your Edge Location URL prefixes up to the first *.* character. For instance if one of your Edge Location URLs is *http://myfederation-us-east-1.dev.aws.macrometa.io*, then the corresponding value of one the items for this parameter would be *myfederation-us-east-1*. You can use the */datacenter/all* REST API call to get a list of all available Edge Locations and then pick and choose from this list. It is a mandatory field, but if not specified (due to user error), it defaults to the local Edge Location.\n\n",
          "type": "string",
          "example": "datacenter1,datacenter2"
        },
        "spotDc": {
          "description": "The Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed. By default a random data center is chosen from those which are capable.\n\n",
          "type": "string",
          "example": "datacenter1"
        },
        "metadata": {
          "description": "Object with user defined key-value pairs.",
          "type": "object",
          "example": {
            "key": "value"
          }
        }
      },
      "required": [
        "options"
      ],
      "type": "object"
    },
    "create_environment_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "boolean"
        }
      }
    },
    "get_user_environments_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "_system"
              },
              "options": {
                "$ref": "#/definitions/get_user_environments_options_examples_rc_200"
              },
              "isSystem": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "get_user_environments_options_examples_rc_200": {
      "properties": {
        "associated_regions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "string",
            "string",
            "string"
          ]
        },
        "clusters": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "string",
            "string",
            "string"
          ]
        },
        "dcList": {
          "type": "string",
          "example": "string"
        },
        "dynamo_local_tables": {
          "type": "boolean",
          "example": false
        },
        "metadata": {
          "type": "object",
          "example": null
        },
        "name": {
          "type": "string",
          "example": "_system"
        },
        "realTime": {
          "type": "boolean"
        },
        "spotDc": {
          "type": "string",
          "example": ""
        },
        "status": {
          "type": "string",
          "example": "available"
        },
        "tenant": {
          "type": "string",
          "example": "_mm"
        }
      }
    },
    "get_all_environment_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of environment names",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "_system",
            "demo._system"
          ]
        }
      }
    },
    "dropped_environment_example_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Whether environment was successfully removed.",
          "type": "boolean"
        }
      }
    },
    "get_environment_info_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Information about the current environment.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "_system"
            },
            "options": {
              "$ref": "#/definitions/get_user_environments_options_examples_rc_200"
            },
            "isSystem": {
              "description": "Whether or not the current GeoFabric is the *_system* fabric",
              "type": "boolean",
              "example": true
            }
          }
        }
      }
    },
    "set_environment_example_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "format": "",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Flag for if the environment was set successfully.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "patch_environment_example_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "format": "",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "boolean",
          "description": "Flag for if the environment was updated successfully.",
          "example": true
        }
      }
    },
    "create_environment_database_options": {
      "description": "Has to be a dictionary of Database options used when creating the environment. If this is not specified, default options are used. If one of the dict members is not specified, then defaults will be used for that dict member.\nThe members of the *options* dictionary are as follows:",
      "properties": {
        "spotDc": {
          "description": "The Edge Location (Datacenter) where on-spot operations for the given environment will be performed. By default a random data center is chosen from those which are capable.",
          "type": "string"
        },
        "metadata": {
          "description": "Object with user defined key-value pairs.",
          "type": "object",
          "example": {
            "key": "value"
          }
        }
      },
      "required": [
        "options"
      ],
      "type": "object"
    },
    "database_metadata": {
      "properties": {
        "metadata": {
          "description": "Object with user defined key-value pairs.",
          "type": "object",
          "example": {
            "key": "value"
          }
        }
      }
    },
    "create_database_users": {
      "description": "",
      "properties": {
        "active": {
          "description": "A flag indicating whether the user account should be activated or not. The default value is *true*. If set to *false*, the user won't be able to log into the GeoFabric.\n\n",
          "type": "boolean"
        },
        "extra": {
          "description": "A JSON object with extra user information. The data contained in *extra* will be stored for the user but not be interpreted further by database.\n\n",
          "format": "",
          "type": "object"
        },
        "passwd": {
          "description": "The user password as a string. If not specified, it will default to an empty string.\n\n",
          "type": "string"
        },
        "username": {
          "description": "Login name of the user to be created.\n\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "api_query_properties": {
      "properties": {
        "query": {
          "description": "To validate a query string without executing it, the query string can be passed to the server via an HTTP POST request.",
          "type": "string",
          "example": "for u in testCollection return u"
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    },
    "track_query_properties": {
      "properties": {
        "enabled": {
          "description": "If set to *true*, then queries will be tracked. If set to *false*, neither queries nor slow queries will be tracked.\n\n",
          "format": "",
          "type": "boolean"
        },
        "maxQueryStringLength": {
          "description": "The maximum query string length to keep in the list of queries. Query strings can have arbitrary lengths, and this property can be used to save memory in case very long query strings are used. The value is specified in bytes.\n\n",
          "format": "int64",
          "type": "integer"
        },
        "maxSlowQueries": {
          "description": "The maximum number of slow queries to keep in the list of slow queries. If the list of slow queries is full, the oldest entry in it will be discarded when additional slow queries occur.\n\n",
          "format": "int64",
          "type": "integer"
        },
        "slowQueryThreshold": {
          "description": "The threshold value for treating a query as slow. A query with a runtime greater or equal to this threshold value will be put into the list of slow queries when slow query tracking is enabled. The value for *slowQueryThreshold* is specified in seconds.\n\n",
          "format": "int64",
          "type": "integer"
        },
        "trackBindVars": {
          "description": "If set to *true*, then the bind variables used in queries will be tracked along with queries.\n\n",
          "format": "",
          "type": "boolean"
        },
        "trackSlowQueries": {
          "description": "If set to *true*, then slow queries will be tracked in the list of slow queries if their runtime exceeds the value set in *slowQueryThreshold*. In order for slow queries to be tracked, the *enabled* property must also be set to *true*.\n\n",
          "format": "",
          "type": "boolean"
        }
      },
      "required": [
        "enabled"
      ],
      "type": "object"
    },
    "tenant_create": {
      "properties": {
        "email": {
          "description": "Email address of tenant.",
          "type": "string",
          "example": "demo@macrometa.com"
        },
        "name": {
          "description": "The name of the tenant as a string.",
          "type": "string",
          "example": "Test"
        },
        "passwd": {
          "description": "The user password as a string.",
          "type": "string",
          "default": ""
        },
        "plan": {
          "description": "The billing plan name as a string.",
          "type": "string",
          "default": "",
          "example": "ENTERPRISE"
        },
        "attribution": {
          "description": "The attribution as a string.",
          "type": "string",
          "default": "",
          "example": "Macrometa"
        },
        "dcList": {
          "description": "A comma-separated string containing the data center names on which this tenant is to be created. If an empty string is passed in, the tenant is assumed to be global to the federation and will be created on all current data centers in the federation.",
          "type": "string",
          "default": ""
        },
        "metadata": {
          "description": "The metadata as a JSON object. This Object has a metadata key-value pairs.",
          "$ref": "#/definitions/get_tenant_metadata_object_example"
        },
        "contact": {
          "description": "The details about contact tenant information.",
          "$ref": "#/definitions/create_tenant_contact_object_example"
        }
      },
      "required": [
        "name",
        "email",
        "dcList"
      ],
      "type": "object"
    },
    "get_tenant_example_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "$ref": "#/definitions/get_tenant_result_value"
        }
      }
    },
    "get_tenant_result_value": {
      "properties": {
        "limits": {
          "description": "Limits for tenants.",
          "type": "object",
          "items": {
            "$ref": "#/definitions/tenant_limits_value"
          }
        },
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": "Test"
        },
        "status": {
          "description": "Availability of tenant.",
          "format": "string",
          "type": "string",
          "example": "available"
        },
        "spotDc": {
          "description": "The Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed. By default a random data center is chosen from those which are capable.",
          "format": "string",
          "type": "string",
          "default": ""
        },
        "realTime": {
          "description": "For this tenant, whether the changes are published in a real time streams.",
          "format": "boolean",
          "type": "boolean",
          "example": true
        },
        "name": {
          "description": "Name of the tenant with fabric name as a suffix.",
          "format": "string",
          "type": "string",
          "example": "demo._system"
        },
        "clusters": {
          "description": "List of data centers in tenant.",
          "items": {
            "type": "string"
          },
          "example": [
            "dc-region1",
            "dc-region2"
          ]
        },
        "dynamo_local_tables": {
          "description": "Flag indicator for dynamo_local_tables.",
          "format": "boolean",
          "type": "boolean",
          "example": false
        },
        "attribution": {
          "description": "Attribution of the tenant.",
          "format": "string",
          "type": "string",
          "example": null
        },
        "features": {
          "description": "List of features with boolean value indicating that those features are enabled or not.",
          "items": {
            "$ref": "#/definitions/features_list_with_availability_flag_example"
          }
        },
        "plan": {
          "description": "Name of the billing plan.",
          "format": "string",
          "type": "string",
          "example": "enterprise"
        },
        "metadata": {
          "description": "Object with metadata key-value pairs.",
          "type": "object",
          "example": {
            "key": "value"
          }
        },
        "dnsInfo": {
          "description": "Populates the DNS related information like global and regional URLs.",
          "$ref": "#/definitions/dns_info_response"
        }
      }
    },
    "tenant_update_plan_example_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "The information about what are the new attribution, billing plan and features attributes for tenant after billing plan is updated.",
          "type": "object",
          "properties": {
            "attribution": {
              "description": "Attribution of the tenant.",
              "type": "string",
              "example": "Macrometa"
            },
            "plan": {
              "description": "Name of the billing plan.",
              "format": "string",
              "type": "string",
              "example": "Enterprise"
            },
            "features": {
              "description": "List of features with boolean value indicating that those features are enabled or not.",
              "items": {
                "$ref": "#/definitions/features_list_with_availability_flag_example"
              }
            }
          }
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "features_list_with_availability_flag_example": {
      "properties": {
        "CEP": {
          "description": "Name of the CEP feature.",
          "type": "boolean",
          "example": false
        },
        "DOCS": {
          "description": "Name of the Docs feature.",
          "type": "boolean",
          "example": false
        },
        "DYNAMO": {
          "description": "Name of the Dynamo feature.",
          "type": "boolean",
          "example": false
        },
        "GEO_FABRICS": {
          "description": "Name of the Geo Fabrics feature.",
          "type": "boolean",
          "example": false
        },
        "GRAPHS": {
          "description": "Name of the Graphs feature.",
          "type": "boolean",
          "example": false
        },
        "KV": {
          "description": "Name of the KV feature.",
          "type": "boolean",
          "example": true
        },
        "LOCAL_COLLECTIONS": {
          "description": "Name of the Local Collections feature.",
          "type": "boolean",
          "example": false
        },
        "STREAMS": {
          "description": "Name of the streams feature.",
          "type": "boolean",
          "example": false
        },
        "USERS": {
          "description": "Name of the Users feature.",
          "type": "boolean",
          "example": false
        },
        "COMPUTE": {
          "description": "Name of the Compute feature.",
          "type": "boolean",
          "example": false
        },
        "EVENT_HUB": {
          "description": "Name of the EventHub feature.",
          "type": "boolean",
          "example": false
        },
        "STREAM_IO_CONNECTORS": {
          "description": "Name of the Stream IO Connectors feature.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "get_tenant_metadata_object_example": {
      "properties": {
        "key1": {
          "description": "Name of metadata key 1.",
          "format": "string",
          "type": "string",
          "example": "value1"
        },
        "key2": {
          "description": "Name of metadata key 2.",
          "format": "string",
          "type": "string",
          "example": "value2"
        }
      },
      "default": {}
    },
    "create_tenant_contact_object_example": {
      "properties": {
        "firstname": {
          "description": "First name of user.",
          "type": "string",
          "example": "demo"
        },
        "lastname": {
          "description": "Last name of user.",
          "type": "string",
          "example": "marometa"
        },
        "email": {
          "description": "Email address of user.",
          "type": "string",
          "example": "demo@macrometa.com"
        },
        "phone": {
          "description": "Phone number of user.",
          "type": "string",
          "example": "+1 (650) 542-9144"
        },
        "line1": {
          "description": "First line of address of user.",
          "type": "string",
          "example": "646 Waverley Street"
        },
        "line2": {
          "description": "Second line of address of user.",
          "type": "string",
          "example": "Palo Alto, California 94301"
        },
        "city": {
          "description": "Name of the city.",
          "type": "string",
          "example": "Palo Alto"
        },
        "state": {
          "description": "Name of state.",
          "type": "string",
          "example": "California "
        },
        "country": {
          "description": "Name of country.",
          "type": "string",
          "example": "United States of America"
        },
        "zipcode": {
          "description": "Zip code of user.",
          "type": "string",
          "example": "94301"
        }
      }
    },
    "tenant_modify": {
      "properties": {
        "active": {
          "description": "Active status of the tenant.",
          "type": "boolean",
          "example": true
        },
        "status": {
          "description": "Status of the tenant. Possible values: **active | expired | delinquent | inactive** \n\n",
          "type": "string",
          "example": "active"
        },
        "metadata": {
          "description": "Object with metadata key-value pairs.",
          "type": "object",
          "example": {
            "key": "value"
          }
        }
      }
    },
    "tenant_modify_example_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Attributes of tenant after patch operation.",
          "items": {
            "$ref": "#/definitions/tenant_modify_result_value"
          }
        }
      },
      "type": "object"
    },
    "tenant_modify_result_value": {
      "properties": {
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": "Test"
        },
        "active": {
          "description": "Active state of tenant.",
          "format": "boolean",
          "type": "boolean",
          "example": true
        },
        "status": {
          "description": "Availability of tenant.",
          "format": "string",
          "type": "string",
          "example": "available"
        },
        "metadata": {
          "description": "Object with metadata key-value pairs.",
          "type": "object",
          "example": {
            "key": "value"
          }
        }
      },
      "type": "object"
    },
    "plan_create": {
      "properties": {
        "name": {
          "description": "Full name of the billing plan.",
          "type": "string",
          "example": "Test"
        },
        "planId": {
          "description": "Id of the billing plan.",
          "type": "string",
          "example": "a22jj3n3bh1b3njn3j"
        },
        "description": {
          "description": "Description of the billing plan.",
          "type": "string",
          "example": "New billing plan."
        },
        "featureGates": {
          "description": "List of the billing plan feature gates.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "KV"
          }
        },
        "attribution": {
          "description": "Attribution of the billing plan.",
          "type": "string",
          "example": "Macrometa"
        },
        "label": {
          "description": "Display label of the billing plan.",
          "type": "string",
          "example": "Enterprise"
        },
        "pricing": {
          "description": "Pricing details of the billing plan.",
          "type": "string",
          "example": "Custom pricing"
        },
        "isBundle": {
          "description": "Bundle.",
          "type": "boolean",
          "example": true
        },
        "metadata": {
          "description": "Metadata of the plan, having set of key-value pairs.",
          "type": "object",
          "example": {
            "key": "value"
          }
        },
        "metrics": {
          "description": "List of metrics applicable for billing plan.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/plan_metrics_example"
          }
        },
        "active": {
          "description": "A mandatory flag that specifies whether the billing plan is active.",
          "type": "boolean",
          "example": true
        },
        "demo": {
          "description": "An flag that specifies whether the billing plan is demo or not.",
          "type": "boolean",
          "default": false
        }
      },
      "type": "object"
    },
    "plan_metrics_example": {
      "properties": {
        "name": {
          "description": "Name of the metrics. e.g. reads, writes etc.",
          "type": "string",
          "example": "kv-reads"
        },
        "value": {
          "description": "Value of the metrics. e.g. c8db_service_read_requests_count, c8db_service_write_requests_count etc.",
          "type": "string",
          "example": "c8db_service_kv_read_requests_count"
        },
        "metricType": {
          "description": "Name of the metrics. e.g. counter, gauge, histogram.",
          "type": "string",
          "example": "counter"
        }
      }
    },
    "update_tenant_plan": {
      "properties": {
        "attribution": {
          "description": "Attribution of the billing plan.",
          "type": "string",
          "example": "Macrometa"
        },
        "plan": {
          "description": "Name of the billing plan.",
          "type": "string",
          "example": "Enterprise"
        },
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": ""
        },
        "payment_method_id": {
          "description": "ID of Stripe payment method.",
          "type": "string",
          "example": "pm_1KRHKj2eZvKYlo2CHkt3rab6"
        }
      },
      "required": [
        "attribution",
        "plan"
      ],
      "type": "object"
    },
    "apikey_create": {
      "properties": {
        "keyid": {
          "description": "The id of the API key.",
          "type": "string",
          "example": "test1"
        }
      },
      "required": [
        "keyid"
      ],
      "type": "object"
    },
    "apikey_validate": {
      "properties": {
        "apikey": {
          "description": "The id of the API key.",
          "type": "string",
          "example": "test1"
        }
      },
      "required": [
        "apikey"
      ],
      "type": "object"
    },
    "user_create": {
      "properties": {
        "active": {
          "description": "An optional flag that specifies whether the user is active.",
          "format": "boolean",
          "type": "boolean",
          "default": true
        },
        "email": {
          "description": "The email of the user.",
          "type": "string",
          "example": "test@bar.com"
        },
        "passwd": {
          "description": "The user password.",
          "type": "string",
          "example": "password"
        },
        "user": {
          "description": "The name of the user.",
          "type": "string",
          "example": "testuser"
        }
      },
      "required": [
        "user"
      ],
      "type": "object"
    },
    "user_grant_collection": {
      "properties": {
        "grant": {
          "description": "- Use \"rw\" to set the collection level access to *Read/Write*.\n- Use \"ro\" to set the collection level access to *Read Only*.\n- Use \"none\" to set the collection level access to *No access*.",
          "type": "string",
          "example": "rw"
        }
      },
      "required": [
        "grant"
      ],
      "type": "object"
    },
    "user_grant_database": {
      "properties": {
        "grant": {
          "description": "- Use \"rw\" to set the GeoFabric access level to *Administrate*.\n- Use \"ro\" to set the GeoFabric access level to *Access*.\n- Use \"none\" to set the database access level to *No access*.",
          "type": "string",
          "example": "rw"
        }
      },
      "required": [
        "grant"
      ],
      "type": "object"
    },
    "key_attributes": {
      "properties": {
        "attributes": {
          "description": "Use \"rw\" to set the database access level to *Administrate* .\n\nUse \"ro\" to set the database access level to *Access*.\n\nUse \"none\" to set the database access level to *No access*.\n\n",
          "type": "string"
        }
      },
      "required": [
        "attributes"
      ],
      "type": "object"
    },
    "user_modify": {
      "properties": {
        "active": {
          "description": "An optional flag that specifies whether the user is active.",
          "format": "boolean",
          "type": "boolean",
          "default": true
        },
        "extra": {
          "description": "An optional JSON object with arbitrary extra data about the user.",
          "type": "object"
        },
        "passwd": {
          "description": "The user password. Specifying a password is mandatory, but an empty string is allowed.",
          "type": "string"
        }
      },
      "required": [
        "passwd"
      ],
      "type": "object"
    },
    "user_queries_create_data_format": {
      "description": "Specify the query parameters.",
      "properties": {
        "name": {
          "description": "Name for the query.",
          "type": "string",
          "example": "workerName"
        },
        "parameter": {
          "additionalProperties": {},
          "description": "bindVars for the query.",
          "type": "object",
          "example": {}
        },
        "value": {
          "description": "Value of the query.",
          "type": "string",
          "example": "for u in testCollection return u"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "user_queries_create_user_queries": {
      "properties": {
        "query": {
          "$ref": "#/definitions/user_queries_create_data_format"
        }
      },
      "type": "object"
    },
    "user_queries_execute_saved_queries": {
      "properties": {
        "bindVars": {
          "additionalProperties": {},
          "description": "Specify the bindVars of the query.",
          "type": "object",
          "example": {}
        }
      },
      "type": "object"
    },
    "user_queries_execute_user_query": {
      "properties": {
        "bindVars": {
          "additionalProperties": {},
          "description": "Specify the bindVars of the query.\n\n",
          "type": "object"
        }
      },
      "type": "object"
    },
    "user_queries_update_data_format": {
      "description": "Specify the query parameters.",
      "properties": {
        "parameter": {
          "additionalProperties": {},
          "description": "bindVars for the query.",
          "type": "object",
          "example": {}
        },
        "value": {
          "description": "Value for the query.",
          "type": "string",
          "example": "for u in testCollection return u"
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "user_queries_update_user_queries": {
      "properties": {
        "query": {
          "$ref": "#/definitions/user_queries_update_data_format"
        }
      },
      "type": "object"
    },
    "edge_representation": {
      "description": "The edge document.",
      "properties": {
        "_id": {
          "description": "The _id value of the stored data.",
          "type": "string",
          "example": "edgeColltest020905135194uxprm/7050517"
        },
        "_key": {
          "description": "The _key-value of the stored data.",
          "type": "string",
          "example": "7050517"
        },
        "_rev": {
          "description": "The _rev value of the stored data.",
          "type": "string",
          "example": "_dsRmNZG--"
        },
        "_from": {
          "description": "The _from value of the stored data.",
          "type": "string",
          "example": "colltest020905135195vdbps/bbbb"
        },
        "_to": {
          "description": "The _to value of the stored data.",
          "type": "string",
          "example": "colltest020905135195vdbps/cccc"
        }
      },
      "type": "object"
    },
    "edge_representation_new": {
      "description": "The edge document.",
      "properties": {
        "_id": {
          "description": "The _id value of the stored data.",
          "type": "string",
          "example": "edgeColltest020905135194uxprm/7050517"
        },
        "_key": {
          "description": "The _key-value of the stored data.",
          "type": "string",
          "example": "7050517"
        },
        "_rev": {
          "description": "The _rev value of the stored data.",
          "type": "string",
          "example": "_dsRmNZG--"
        },
        "_from": {
          "description": "The _from value of the stored data.",
          "type": "string",
          "example": "colltest020905135195vdbps/bbbb"
        },
        "_to": {
          "description": "The _to value of the stored data.",
          "type": "string",
          "example": "colltest020905135195vdbps/eeee"
        }
      },
      "type": "object"
    },
    "event_create": {
      "properties": {
        "action": {
          "description": "The activity of the event (CREATE/UPDATE/DELETE/EXECUTE/LOGIN).",
          "type": "string",
          "example": "CREATE"
        },
        "attributes": {
          "$ref": "#/definitions/event_attributes"
        },
        "description": {
          "description": "Event description.",
          "type": "string",
          "example": "Test event"
        },
        "details": {
          "description": "Additional activity info.",
          "type": "string",
          "example": "Error message"
        },
        "entityName": {
          "description": "The entity name of the event.",
          "type": "string",
          "example": "Test"
        },
        "entityType": {
          "description": "The entity type of the event (COLLECTION/GRAPH/CEP/AUTH/STREAM/GEOFABRIC).",
          "type": "string",
          "example": "COLLECTION"
        },
        "status": {
          "description": "The activity status (OK/WARN/ERROR).",
          "type": "string",
          "example": "OK"
        }
      },
      "required": [
        "entityName"
      ],
      "type": "object"
    },
    "explain_options": {
      "description": "Options for the query.",
      "properties": {
        "allPlans": {
          "description": "If set to *true*, all possible execution plans will be returned. The default is *false*, meaning only the optimal plan is be returned.",
          "type": "boolean"
        },
        "maxNumberOfPlans": {
          "description": "An optional maximum number of plans that the optimizer is allowed to generate. Setting this attribute to a low value allows to put a cap on the amount of work the optimizer does.",
          "format": "int64",
          "type": "integer"
        },
        "optimizer.rules": {
          "description": "An array of to-be-included or to-be-excluded optimizer rules can be put into this attribute, telling the optimizer to include or exclude specific rules. To disable a rule, prefix its name with a `-`, to enable a rule, prefix it with a `+`. There is also a pseudo-rule `all`, which will match all optimizer rules.",
          "format": "string",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "graph_create_http_examples": {
      "properties": {
        "edgeDefinitions": {
          "description": "An array of definitions for the relations of the graph. Each has the following type:",
          "items": {
            "$ref": "#/definitions/graph_edge_definition"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the graph.",
          "type": "string",
          "example": "exampleGraph"
        },
        "options": {
          "$ref": "#/definitions/api_gharial_create_opts"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "graph_create_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the newly created graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_create_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the newly created graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_create_http_examples": {
      "properties": {
        "_from": {
          "description": "The source vertex of this edge. Has to be valid within the used edge definition.",
          "type": "string",
          "example": "sourceVertex"
        },
        "_to": {
          "description": "The target vertex of this edge. Has to be valid within the used edge definition.",
          "type": "string",
          "example": "destinationVertex"
        }
      },
      "required": [
        "_from"
      ],
      "type": "object"
    },
    "graph_edge_create_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "format": "",
          "type": "boolean"
        },
        "edge": {
          "$ref": "#/definitions/edge_representation",
          "description": "The internal attributes for the edge."
        },
        "new": {
          "description": "The newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by GeoFabric. Is only present if *returnNew* is true.",
          "$ref": "#/definitions/edge_representation_new"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_create_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "edge": {
          "$ref": "#/definitions/edge_representation",
          "description": "The internal attributes for the edge."
        },
        "new": {
          "$ref": "#/definitions/edge_representation_new",
          "description": "The newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by GeoFabric. Is only present if *returnNew* is true."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_definition_add_http_examples": {
      "properties": {
        "collection": {
          "description": "The name of the edge collection to be used.",
          "type": "string",
          "example": "edgeCollectionTest"
        },
        "from": {
          "description": "One or many vertex collections that can contain source vertices.",
          "items": {
            "type": "string",
            "example": "sourceVertex"
          },
          "type": "array"
        },
        "to": {
          "description": "One or many vertex collections that can contain target vertices.",
          "items": {
            "type": "string",
            "example": "destinationVertex"
          },
          "type": "array"
        }
      },
      "required": [
        "collection"
      ],
      "type": "object"
    },
    "graph_edge_definition_add_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the modified graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_definition_add_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the modified graph.\n\n"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_definition_modify_http_examples": {
      "properties": {
        "collection": {
          "description": "The name of the edge collection to be used.",
          "type": "string",
          "example": "edgeCollectionTest"
        },
        "from": {
          "description": "One or many vertex collections that can contain source vertices.",
          "items": {
            "type": "string",
            "example": "sourceVertex"
          },
          "type": "array"
        },
        "to": {
          "description": "One or many vertex collections that can contain target vertices.",
          "items": {
            "type": "string",
            "example": "destinationVertex"
          },
          "type": "array"
        }
      },
      "required": [
        "collection"
      ],
      "type": "object"
    },
    "graph_edge_definition_modify_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the modified graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_definition_modify_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the modified graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_definition_remove_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the modified graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_definition_remove_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the modified graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_delete_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "old": {
          "$ref": "#/definitions/edge_representation"
        },
        "removed": {
          "description": "Is set to true if the remove was successful.",
          "type": "boolean",
          "example": true
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_delete_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "old": {
          "$ref": "#/definitions/edge_representation",
          "description": "The removed edge document. Includes all attributes stored before this operation. Is only present if *returnOld* is true."
        },
        "removed": {
          "description": "Is set to true if the remove was successful.",
          "type": "boolean",
          "example": true
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "edge": {
          "$ref": "#/definitions/edge_representation",
          "description": "The edge."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_modify_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "edge": {
          "$ref": "#/definitions/edge_representation",
          "description": "The internal attributes for the edge."
        },
        "new": {
          "$ref": "#/definitions/edge_representation_new",
          "description": "The newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/edge_representation",
          "description": "The overwritten edge document. Includes all attributes stored before this operation. Is only present if *returnOld* is true."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_modify_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "edge": {
          "$ref": "#/definitions/edge_representation",
          "description": "The internal attributes for the edge."
        },
        "new": {
          "$ref": "#/definitions/edge_representation_new",
          "description": "The newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/edge_representation",
          "description": "The overwritten edge document. Includes all attributes stored before this operation. Is only present if *returnOld* is true."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_replace_http_examples": {
      "properties": {
        "_from": {
          "description": "The source vertex of this edge. Has to be valid within the used edge definition.",
          "type": "string",
          "example": "sourceVertex"
        },
        "_to": {
          "description": "The target vertex of this edge. Has to be valid within the used edge definition.",
          "type": "string",
          "example": "destinationVertex"
        }
      },
      "required": [
        "_from"
      ],
      "type": "object"
    },
    "graph_edge_replace_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "edge": {
          "$ref": "#/definitions/edge_representation",
          "description": "The internal attributes for the edge."
        },
        "new": {
          "$ref": "#/definitions/edge_representation_new",
          "description": "The newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/edge_representation",
          "description": "The overwritten edge document. Includes all attributes stored before this operation. Is only present if *returnOld* is true."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_edge_replace_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "edge": {
          "$ref": "#/definitions/edge_representation",
          "description": "The internal attributes for the edge."
        },
        "new": {
          "$ref": "#/definitions/edge_representation_new",
          "description": "The newly written edge document. Includes all written attributes in the Request Body and all internal attributes generated by database. Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/edge_representation",
          "description": "The overwritten edge document. Includes all attributes stored before this operation. Is only present if *returnOld* is true."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_list_edge_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "format": "",
          "type": "boolean"
        },
        "collections": {
          "description": "The list of all vertex collections within this graph. Includes collections in edge definitions as well as orphans.",
          "items": {
            "type": "string",
            "example": "edgeCollectionTest"
          },
          "type": "array"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_list_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graphs": {
          "items": {
            "$ref": "#/definitions/graph_list"
          },
          "type": "array"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_list_vertex_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "collections": {
          "description": "The list of all vertex collections within this graph. Includes collections in edge definitions as well as orphans.",
          "items": {
            "type": "string",
            "example": "vertex1"
          },
          "type": "array"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_collection_add_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the modified graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_collection_add_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the newly created graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_collection_remove_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the newly created graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_collection_remove_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "graph": {
          "$ref": "#/definitions/graph_representation",
          "description": "The information about the newly created graph."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_create_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "new": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The newly written vertex document. Includes all written attributes in the Request Body and all internal attributes generated by database. Is only present if *returnNew* is true."
        },
        "vertex": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The internal attributes for the vertex."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_create_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "new": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The newly written vertex document. Includes all written attributes in the Request Body and all internal attributes generated by database. Is only present if *returnNew* is true."
        },
        "vertex": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The internal attributes generated while storing the vertex. Does not include any attribute given in Request Body.\n\n"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_delete_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "old": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The removed vertex document. Includes all attributes stored before this operation. Is only present if *returnOld* is true."
        },
        "removed": {
          "description": "Is set to true if the remove was successful.",
          "type": "boolean",
          "example": true
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_delete_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "old": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The removed vertex document. Includes all attributes stored before this operation. Is only present if *returnOld* is true."
        },
        "removed": {
          "description": "Is set to true if the remove was successful.",
          "type": "boolean",
          "example": true
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "vertex": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The vertex."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_get_http_examples_rc_304": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 304
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Error message"
        },
        "errorNum": {
          "description": "Database error number for the error that occurred.",
          "type": "integer",
          "example": 581
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_modify_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "new": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The newly written vertex document.  Includes all written attributes in the Request Body and all internal attributes generated by database.  Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/example_old_id_key_rev",
          "description": "The overwritten vertex document. Includes all attributes stored before this operation.  Is only present if *returnOld* is true."
        },
        "vertex": {
          "$ref": "#/definitions/example_id_key_rev"
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_modify_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "new": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The newly written vertex document. Includes all written attributes in the Request Body and all internal attributes generated by database.  Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/example_old_id_key_rev",
          "description": "The overwritten vertex document.  Includes all attributes stored before this operation.  Is only present if *returnOld* is true."
        },
        "vertex": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The internal attributes for the vertex."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_replace_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "new": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The newly written vertex document.  Includes all written attributes in the Request Body and all internal attributes generated by database.  Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/example_old_id_key_rev",
          "description": "The overwritten vertex document.  Includes all attributes stored before this operation.  Is only present if *returnOld* is true."
        },
        "vertex": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The internal attributes for the vertex."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "graph_vertex_replace_http_examples_rc_202": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 202
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "new": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The newly written vertex document.  Includes all written attributes in the Request Body and all internal attributes generated by database.  Is only present if *returnNew* is true."
        },
        "old": {
          "$ref": "#/definitions/example_old_id_key_rev",
          "description": "The overwritten vertex document.  Includes all attributes stored before this operation.  Is only present if *returnOld* is true."
        },
        "vertex": {
          "$ref": "#/definitions/example_id_key_rev",
          "description": "The internal attributes for the vertex."
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "get_api_return_rc_200": {
      "properties": {
        "server": {
          "description": "Server type",
          "type": "string",
          "example": "C8DB"
        },
        "license": {
          "description": "Licene",
          "type": "string",
          "example": "Macrometa"
        },
        "version": {
          "description": "The server version string. The string has the format \"*major*.*minor*.*sub*\". *major* and *minor* are numeric, and *sub* may contain a number or a textual version.",
          "type": "string",
          "example": "99.15.0-release"
        }
      },
      "required": [
        "server"
      ],
      "type": "object"
    },
    "graph_edge_definition": {
      "description": "An array of definitions for the relations of the graph.",
      "properties": {
        "collection": {
          "description": "Name of the edge collection, where the edge are stored in.",
          "type": "string",
          "example": "edgeName"
        },
        "from": {
          "description": "List of vertex collection names.\nEdges in collection can only be inserted if their _from is in any of the collections here.",
          "format": "string",
          "items": {
            "type": "string",
            "example": "sourceNode"
          },
          "type": "array"
        },
        "to": {
          "description": "List of vertex collection names.\nEdges in collection can only be inserted if their _to is in any of the collections here.\n",
          "format": "string",
          "items": {
            "type": "string",
            "example": "destinationNode"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "graph_list": {
      "description": "",
      "properties": {
        "graph": {
          "$ref": "#/definitions/graph_representation"
        }
      },
      "type": "object"
    },
    "graph_representation": {
      "description": "The information about the newly created graph.",
      "properties": {
        "_id": {
          "description": "The internal id value of this graph.",
          "type": "string",
          "example": "_graphs/graph1"
        },
        "_key": {
          "description": "The key of this graph.",
          "type": "string",
          "example": "graph1"
        },
        "_rev": {
          "description": "The revision of this graph. Can be used to make sure to not override concurrent modifications to this graph.",
          "type": "string",
          "example": "_drxzsai--_"
        },
        "edgedefinitions": {
          "description": "An array of definitions for the relations of the graph.",
          "format": "graph_edge_definition",
          "items": {
            "$ref": "#/definitions/graph_edge_definition"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the graph.\n\n",
          "type": "string",
          "example": "graph1"
        },
        "orphanCollections": {
          "description": "An array of additional vertex collections. Documents within these collections do not have edges within this graph.",
          "format": "string",
          "items": {
            "type": "string",
            "example": "emptyNode"
          },
          "type": "array"
        }
      },
      "required": [
        "graph"
      ],
      "type": "object"
    },
    "key_generator_type": {
      "description": "A object which contains key generation options.\n\n",
      "properties": {
        "allowUserKeys": {
          "description": "If set to *true*, then it is allowed to supply own key-values in the *_key* attribute of a document. If set to *false*, then the key generator is solely responsible for generating keys and supplying own key-values in the *_key* attribute of documents is considered an error.\n\n",
          "type": "boolean"
        },
        "lastValue": {
          "description": "\n\n",
          "format": "",
          "type": "integer"
        },
        "type": {
          "description": "Specifies the type of the key generator. The currently available generators are *traditional*, *autoincrement*, *uuid* and *padded*.\n\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "api_analyzer": {
      "properties": {
        "features": {
          "description": "The set of features to set on the analyzer generated fields.\nThe default value is an empty array.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "The analyzer name.\n\n",
          "type": "string"
        },
        "properties": {
          "description": "The properties used to configure the specified type.\nValue may be a string, an object or null.\nThe default value is *null*.\n\n",
          "type": "string"
        },
        "type": {
          "description": "The analyzer type.\n\n",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "collection_stream": {
      "properties": {
        "hasStream": {
          "description": "If *true*, create a local stream associated with collection.\nLocal stream associated with collection cannot be deleted.\n",
          "format": "",
          "type": "boolean"
        },
        "waitForSync": {
          "description": "*True* if waiting for document to be synced to storage.",
          "format": "",
          "type": "boolean"
        }
      },
      "required": [
        "hasStream"
      ],
      "type": "object"
    },
    "api_cursor": {
      "properties": {
        "batchSize": {
          "description": "Sets the batch size of queries. This batch size decides how many results are returned as part of query output. If this option is not specified, default value is used. Maximum allowed for this parameter is *1000*.",
          "format": "int64",
          "type": "integer",
          "default": 100
        },
        "bindVars": {
          "additionalProperties": {},
          "description": "Key/value pairs representing the bind parameters.",
          "type": "object"
        },
        "count": {
          "description": "Indicates whether the number of documents in the result set should be returned in the \"count\" attribute of the result. Calculating the \"count\" attribute might have a performance impact for some queries in the future so this option is turned off by default, and \"count\" is only returned when requested.",
          "type": "boolean",
          "example": false
        },
        "options": {
          "$ref": "#/definitions/api_cursor_opts"
        },
        "query": {
          "description": "Contains the query string to be run.",
          "type": "string",
          "example": "for u in testCollection return u"
        },
        "ttl": {
          "description": "The cursor is automatically removed from the server after the specified amount of time. This is useful to ensure garbage collection of cursors that are not fully fetched by clients.",
          "format": "int64",
          "type": "integer",
          "default": 30
        }
      },
      "required": [
        "query"
      ],
      "type": "object"
    },
    "api_cursor_opts": {
      "description": "Key/value object with extra options for the query.",
      "properties": {
        "failOnWarning": {
          "description": "When set to *true*, the query throws an exception and abort instead of producing a warning. This option should be used during development to catch potential issues early. When the attribute is set to *false*, warnings are not propagated to exceptions and are returned with the query result.",
          "type": "boolean"
        },
        "fullCount": {
          "description": "If set to *true* and the query contains a *LIMIT* clause, then the result has an *extra* attribute with the sub-attributes *stats* and *fullCount*, `{ ... , \"extra\": { \"stats\": { \"fullCount\": 123 } } }`. The *fullCount* attribute contains the number of documents in the result before the last top-level LIMIT in the query is applied. It can be used to count the number of documents that match certain filter criteria, but only return a subset of them, in one go.  It is thus similar to MySQL's *SQL_CALC_FOUND_ROWS* hint. Note that setting the option disables a few LIMIT optimizations and may lead to more documents being processed and thus make queries run longer. Note that the *fullCount* attribute may only be present in the result if the query has a top-level LIMIT clause and the LIMIT clause is actually used in the query.",
          "type": "boolean"
        },
        "intermediateCommitCount": {
          "description": "Maximum number of operations after which an intermediate commit is performed automatically. **Note:** Use this option cautiously. The transactions are commited after every specific record count. In case of error, already commited records are not rolled back.",
          "format": "int64",
          "type": "integer"
        },
        "intermediateCommitSize": {
          "description": "Maximum total size of operations after which an intermediate commit is performed automatically. **Note:** Use this option cautiously. The transactions are commited after every specific query memory size. In case of error, already commited records are not rolled back.",
          "format": "int64",
          "type": "integer"
        },
        "maxTransactionSize": {
          "description": "Transaction size limit in bytes.",
          "format": "int64",
          "type": "integer"
        },
        "maxWarningCount": {
          "description": "Limits the maximum number of warnings returned by a query.",
          "format": "int64",
          "type": "integer",
          "default": 10
        },
        "profile": {
          "description": "If set to *true* or *1*, then the additional query profiling information is returned in the sub-attribute *profile* of the *extra* return attribute, if the query result is not served from the query cache. If set to *2* the query includes execution stats per query plan node in sub-attribute *stats.nodes* of the *extra* return attribute. Additionally the query plan is returned in the sub-attribute *extra.plan*.",
          "format": "",
          "type": "integer"
        },
        "skipInaccessibleCollections": {
          "description": "C8QL queries (especially graph traversals) will treat collection to which a user has no access rights as if these collections were empty. Instead of returning a forbidden access error, your query runs normally.",
          "type": "boolean"
        },
        "stream": {
          "description": "Specify *true* and the query runs as a **stream**. The query result is not stored on the server, but calculated on the fly. *Warnnig*: long-running queries need to hold the collection locks for as long as the query cursor exists.  When set to *false* a query is run right away in its entirety.  In that case query results are either returned right away (if the result set is small enough), or stored on the database instance and accessible via the cursor API (with respect to the `ttl`). \n\nIt is advisable to *only* use this option on short-running queries or without exclusive locks.  Query statistics, warnings and profiling data is only available after the query is finished.",
          "type": "boolean",
          "default": false
        },
        "optimizer.rules": {
          "description": "An array of to-be-included or to-be-excluded optimizer rules can be put into this attribute, telling the optimizer to include or exclude specific rules. To disable a rule, prefix its name with a `-`, to enable a rule, prefix it with a `+`. There is also a pseudo-rule `all`, which will match all optimizer rules.\n\n",
          "format": "string",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "api_cursor_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "integer",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "count": {
          "description": "Total number of result documents available if the *count* attribute was used.",
          "format": "int64",
          "type": "integer",
          "example": 1
        },
        "extra": {
          "description": "(Optional) A JSON object with extra information about the query result contained in the *stats* sub-attribute. For data-modification queries, the *extra.stats* sub-attribute contains the number of modified documents. If the *ignoreErrors* query option was specified, *extra.stats* also includes the number of documents that could not be modified due to an error.",
          "type": "object",
          "example": {
            "stats": {
              "writesExecuted": 0,
              "writesIgnored": 0,
              "scannedFull": 7,
              "scannedIndex": 0,
              "filtered": 0,
              "httpRequests": 0,
              "executionTime": 6.868839263916016e-4,
              "peakMemoryUsage": 18396
            },
            "warnings": []
          }
        },
        "hasMore": {
          "description": "True indicates there are more results available for the cursor on the server. False indicates there are no more results available.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "(Optional) ID of temporary cursor created on the server.",
          "type": "string",
          "example": "11176313"
        },
        "cached": {
          "description": "True indicates results are cached. False indicates results are not cached.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of result documents (might be empty if query has no results).",
          "example": [
            {
              "_id": "xxx/8753330",
              "_key": "8753330",
              "_rev": "_dpDmoaa--_",
              "item1": "data2"
            }
          ]
        }
      },
      "required": [
        "error"
      ]
    },
    "api_cursor_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "integer",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "count": {
          "description": "The total number of result documents available (only available if the query is run with the *count* attribute set)",
          "format": "int64",
          "type": "integer",
          "example": 1
        },
        "extra": {
          "description": "(Optional) A JSON object with extra information about the query result contained in the *stats* sub-attribute. For data-modification queries, the *extra.stats* sub-attribute contains the number of modified documents. If the *ignoreErrors* query option is specified, *extra.stats* also includes the number of documents that could not be modified due to an error.",
          "type": "object",
          "example": {
            "stats": {
              "writesExecuted": 0,
              "writesIgnored": 0,
              "scannedFull": 7,
              "scannedIndex": 0,
              "filtered": 0,
              "httpRequests": 0,
              "executionTime": 6.868839263916016e-4,
              "peakMemoryUsage": 18396
            },
            "warnings": []
          }
        },
        "hasMore": {
          "description": "True indicates there are more results available for the cursor on the server. False indicates there are no more results available.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "(Optional) ID of temporary cursor created on the server.",
          "type": "string",
          "example": "11176313"
        },
        "cached": {
          "description": "A boolean flag indicating whether the query result is served from the query cache or not. If the query result is served from the query cache, the extra return attribute does not contain any stats sub-attribute and no profile sub-attribute.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of result documents (might be empty if query has no results).",
          "example": [
            {
              "_id": "xxx/8753330",
              "_key": "8753330",
              "_rev": "_dpDmoaa--_",
              "item1": "data2"
            }
          ]
        }
      },
      "required": [
        "error"
      ]
    },
    "api_cursor_rc_400": {
      "description": "The JSON representation is malformed.",
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "int64",
          "type": "integer",
          "example": 400
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A descriptive error message. If the query specification is complete, the server processes the query. If an error occurs during query processing, the server returns an *HTTP 400* error with details in the response body.",
          "type": "string",
          "example": "error message"
        },
        "errorNum": {
          "description": "The server error number.",
          "format": "int64",
          "type": "integer",
          "example": 58322
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "api_cursor_rc_404": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "format": "int64",
          "type": "integer",
          "example": 404
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "errorMessage": {
          "description": "A descriptive error message",
          "type": "string",
          "example": "error message"
        },
        "errorNum": {
          "description": "The server error number.",
          "format": "int64",
          "type": "integer",
          "example": 58322
        }
      },
      "required": [
        "error"
      ],
      "type": "object"
    },
    "api_explain": {
      "properties": {
        "bindVars": {
          "description": "Key/value pairs representing the bind parameters.",
          "items": {
            "type": "object"
          },
          "type": "array"
        },
        "options": {
          "$ref": "#/definitions/explain_options"
        },
        "query": {
          "description": "The query which you want explained. If the query references any bind variables, these must also be passed in the attribute *bindVars*. Additional options for the query can be passed in the *options* attribute.\n\n",
          "type": "string"
        }
      },
      "required": [
        "query"
      ],
      "type": "object",
      "example": "for u in testCollection return u"
    },
    "api_export": {
      "properties": {
        "bindVars": {
          "additionalProperties": {},
          "description": "Key-value pairs representing the bind parameters. Optional if bind parameters are not used in query.",
          "type": "object",
          "example": {}
        },
        "query": {
          "description": "C8QL query. Default: returns all documents.",
          "format": "string",
          "type": "string",
          "default": "for u in testCollection return u"
        }
      },
      "type": "object"
    },
    "api_import": {
      "properties": {
        "data": {
          "description": "An array of JSON documents. Each document is interpreted separately. The maximum number of documents that can be imported is limited by the *Max Documents Imported Per API Call* limit.",
          "type": "array",
          "items": {
            "type": "object",
            "example": {
              "_key": "1634556",
              "name": "test1"
            }
          }
        },
        "details": {
          "description": "If *true* extra information for errors and unprocessed documents will be returned in the result.",
          "format": "boolean",
          "type": "boolean",
          "default": false
        },
        "primaryKey": {
          "description": "If used, this attribute becomes the *_key* for the new document. If the values in the attribute are not strings, they are convert to strings before import. Any existing *_key* value is renamed to *old_key*. Use the following naming convention: https://macrometa.dev/documents/naming-conventions/#document-keys",
          "format": "string",
          "type": "string",
          "default": "name"
        },
        "replace": {
          "description": "If *true*, existing document having same *_key* in the colletion, shall be replaced.",
          "format": "boolean",
          "type": "boolean",
          "default": false
        }
      },
      "type": "object"
    },
    "api_gharial_create_opts": {
      "description": "A JSON object to define options for creating collections within this graph.\nIt can contain the following attributes:\n\n",
      "type": "object"
    },
    "api_index_fulltext": {
      "properties": {
        "fields": {
          "description": "An array of attribute names. Currently, the array is limited\nto exactly one attribute.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "minLength": {
          "description": "Minimum character length of words to index. Will default to a server-defined value if unspecified. It is thus recommended to set this value explicitly when creating the index.\n\n",
          "format": "int64",
          "type": "integer"
        },
        "type": {
          "description": "Must be equal to *\"fulltext\"*.\n\n",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "api_index_geo": {
      "properties": {
        "fields": {
          "description": "An array with one or two attribute paths.\n\nIf it is an array with one attribute path *location*, then a geo-spatial index on all documents is created using *location* as path to the coordinates. The value of the attribute must be an array with at least two double values. The array must contain the latitude (first value) and the longitude (second value). All documents, which do not have the attribute path or with value that are not suitable, are ignored.\n\nIf it is an array with two attribute paths *latitude* and *longitude*, then a geo-spatial index on all documents is created using *latitude* and *longitude* as paths the latitude and the longitude. The value of the attribute *latitude* and of the attribute *longitude* must a double. All documents, which do not have the attribute paths or which values are not suitable, are ignored.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "geoJson": {
          "description": "If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions.\n\n",
          "type": "string"
        },
        "type": {
          "description": "Must be equal to *\"geo\"*.\n\n",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "api_index_hash": {
      "properties": {
        "deduplicate": {
          "description": "If *false*, the deduplication of array values is turned off.\n\n",
          "format": "boolean",
          "type": "boolean"
        },
        "fields": {
          "description": "An array of attribute paths.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sparse": {
          "description": "If *true*, then create a sparse index.\n\n",
          "format": "",
          "type": "boolean"
        },
        "type": {
          "description": "Must be equal to *\"hash\"*.\n\n",
          "type": "string"
        },
        "unique": {
          "description": "If *true*, then create a unique index.\n\n",
          "format": "",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "api_index_persistent": {
      "properties": {
        "fields": {
          "description": "An array of attribute paths.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sparse": {
          "description": "If *true*, then create a sparse index.\n\n",
          "format": "",
          "type": "boolean"
        },
        "type": {
          "description": "Must be equal to *\"persistent\"*.\n\n",
          "type": "string"
        },
        "unique": {
          "description": "If *true*, then create a unique index.\n\n",
          "format": "",
          "type": "boolean"
        },
        "deduplicate": {
          "description": "It controls whether inserting duplicate index values from the same document into a unique array index will lead to a unique constraint error or not. The default value is *true*.\n\n",
          "format": "",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "api_index_skiplist": {
      "properties": {
        "deduplicate": {
          "description": "If *false*, the deduplication of array values is turned off.\n\n",
          "format": "boolean",
          "type": "boolean"
        },
        "fields": {
          "description": "An array of attribute paths.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sparse": {
          "description": "If *true*, then create a sparse index.\n\n",
          "format": "",
          "type": "boolean"
        },
        "type": {
          "description": "Must be equal to *\"skiplist\"*.\n\n",
          "type": "string"
        },
        "unique": {
          "description": "If *true*, then create a unique index.\n\n",
          "format": "",
          "type": "boolean"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "api_index_ttl": {
      "properties": {
        "expireAfter": {
          "description": "The time (in seconds) after a document's creation after which the\ndocuments count as \"expired\".\n\n",
          "format": "",
          "type": "number"
        },
        "fields": {
          "description": "An array with exactly one attribute path.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "type": {
          "description": "Must be equal to *\"ttl\"*.\n\n",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "api_transaction": {
      "properties": {
        "action": {
          "description": "The actual transaction operations to be executed, in the form of stringified JavaScript code. The code will be executed on server side, with late binding. It is thus critical that the code specified in *action* properly sets up all the variables it needs.\nIf the code specified in *action* ends with a return statement, the value returned will also be returned by the REST API in the *result* attribute if the transaction committed successfully.\n\n",
          "type": "string"
        },
        "allowImplicit": {
          "description": "Allow reading from undeclared collections.\n\n",
          "format": "boolean",
          "type": "boolean"
        },
        "collections": {
          "description": "*collections* must be a JSON object that can have one or all sub-attributes *read*, *write* or *exclusive*, each being an array of collection names or a single collection name as string. Collections that will be written to in the transaction must be declared with the *write* or *exclusive* attribute or it will fail, whereas non-declared collections from which is solely read will be added lazily. The optional sub-attribute *allowImplicit* can be set to *false* to let transactions fail in case of undeclared collections for reading. Collections for reading should be fully declared if possible, to avoid deadlocks.\n\n",
          "type": "string"
        },
        "lockTimeout": {
          "description": "An optional numeric value that can be used to set a timeout for waiting on collection locks. If not specified, a default value will be used. Setting *lockTimeout* to *0* will make database not time out waiting for a lock.\n\n",
          "format": "int64",
          "type": "integer"
        },
        "maxTransactionSize": {
          "description": "Transaction size limit in bytes. \n\n",
          "format": "int64",
          "type": "integer"
        },
        "params": {
          "description": "Optional arguments passed to *action*.\n\n",
          "type": "string"
        }
      },
      "required": [
        "collections"
      ],
      "type": "object"
    },
    "api_transaction_begin": {
      "properties": {
        "allowImplicit": {
          "description": "Allow reading from undeclared collections.\n\n",
          "format": "boolean",
          "type": "boolean"
        },
        "collections": {
          "description": "*collections* must be a JSON object that can have one or all sub-attributes *read*, *write* or *exclusive*, each being an array of collection names or a single collection name as string. Collections that will be written to in the transaction must be declared with the *write* or *exclusive* attribute or it will fail, whereas non-declared collections from which is solely read will be added lazily. The optional sub-attribute *allowImplicit* can be set to *false* to let transactions fail in case of undeclared collections for reading. Collections for reading should be fully declared if possible, to avoid deadlocks.\n\n",
          "type": "string"
        },
        "lockTimeout": {
          "description": "An optional numeric value that can be used to set a timeout for waiting on collection locks. If not specified, a default value will be used. Setting *lockTimeout* to *0* will make database not time out waiting for a lock.\n\n",
          "format": "int64",
          "type": "integer"
        },
        "maxTransactionSize": {
          "description": "Transaction size limit in bytes. \n\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "collections"
      ],
      "type": "object"
    },
    "post_metrics_query": {
      "properties": {
        "GeoFabric": {
          "description": "GeoFabric name\n\n",
          "type": "string"
        },
        "limit": {
          "description": "Number of results we want to receive.\n\n",
          "format": "integer",
          "type": "integer"
        },
        "metrics": {
          "description": "Array of strings containing the metric names we want to receive.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "querytype": {
          "description": "\"list\" returns a list of all available metrics, \"get\" returns all the requested metrics, \"sum\" returns sum of all records for each of the requested metrics.\n\n",
          "type": "string"
        },
        "since": {
          "description": "Unix timestamp in milliseconds of oldest entry we want to receive.\n\n",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "querytype"
      ],
      "type": "object"
    },
    "setof_statistics_struct": {
      "description": "Total connection times\n\nthe system time \n\nthe request times\n\nthe time requests were queued waiting for processing\n\nIO Time\n\nnumber of bytes sent to the clients\n\nnumber of bytes received from the clients.\n\n",
      "properties": {
        "count": {
          "description": "Number of values summarized.\n\n",
          "format": "",
          "type": "integer"
        },
        "counts": {
          "description": "Array containing the values.\n\n",
          "format": "integer",
          "items": {
            "type": "integer"
          },
          "type": "array"
        },
        "sum": {
          "description": "Summarized value of all counts.\n\n",
          "format": "",
          "type": "number"
        }
      },
      "type": "object"
    },
    "system_statistics_struct": {
      "description": "Metrics gathered from the system about this process; may depend on the host OS.\n\n",
      "properties": {
        "majorPageFaults": {
          "description": "Page faults\n\n",
          "format": "",
          "type": "integer"
        },
        "minorPageFaults": {
          "description": "Page faults\n\n",
          "format": "",
          "type": "integer"
        },
        "numberOfThreads": {
          "description": "The number of threads in the server.\n\n",
          "format": "",
          "type": "integer"
        },
        "residentSize": {
          "description": "RSS of process\n\n",
          "format": "",
          "type": "integer"
        },
        "residentSizePercent": {
          "description": "RSS of process as a percentage\n\n",
          "format": "float",
          "type": "number"
        },
        "systemTime": {
          "description": "The system CPU time used by the server process.\n\n",
          "format": "float",
          "type": "number"
        },
        "userTime": {
          "description": "The user CPU time used by the server process.\n\n",
          "format": "float",
          "type": "number"
        },
        "virtualSize": {
          "description": "VSS of the process.\n\n\n",
          "format": "",
          "type": "integer"
        }
      },
      "required": [
        "system"
      ],
      "type": "object"
    },
    "v8_context_struct": {
      "description": "Statistics about the V8 javascript contexts.\n\n",
      "properties": {
        "available": {
          "description": "The number of currently spawned V8 contexts.\n\n",
          "format": "",
          "type": "integer"
        },
        "busy": {
          "description": "The number of currently active V8 contexts.\n\n",
          "format": "",
          "type": "integer"
        },
        "dirty": {
          "description": "The number of contexts that were previously used, and should now be garbage collected before being re-used.\n\n",
          "format": "",
          "type": "integer"
        },
        "free": {
          "description": "The number of V8 contexts that are free to use.\n\n",
          "format": "",
          "type": "integer"
        },
        "max": {
          "description": "The total number of V8 contexts we may spawn as configured by --javascript.v8-contexts.\n\n\n",
          "format": "",
          "type": "integer"
        },
        "memory": {
          "description": "A list of V8 memory / garbage collection watermarks; Refreshed on every garbage collection run;\nPreserves min/max memory used at that time for 10 seconds.\n\n",
          "format": "v8_isolate_memory",
          "items": {
            "$ref": "#/definitions/v8_isolate_memory"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v8_isolate_memory": {
      "description": "",
      "properties": {
        "contextId": {
          "description": "ID of the context this set of memory statistics is from.\n\n",
          "format": "",
          "type": "integer"
        },
        "countOfTimes": {
          "description": "How many times was the garbage collection run in these 10 seconds.\n\n",
          "format": "",
          "type": "integer"
        },
        "heapMax": {
          "description": "High watermark of all garbage collection runs in 10 seconds.\n\n",
          "format": "",
          "type": "integer"
        },
        "heapMin": {
          "description": "Low watermark of all garbage collection runs in these 10 seconds.\n\n\n",
          "format": "",
          "type": "integer"
        },
        "tMax": {
          "description": "The timestamp where the 10 seconds interval started.\n\n",
          "format": "",
          "type": "number"
        }
      },
      "type": "object"
    },
    "version_details_struct": {
      "description": "An optional JSON object with additional details. This is returned only if the *details* query parameter is set to *true* in the request.\n\n",
      "properties": {
        "build-date": {
          "description": "The date when this binary was created.\n\n",
          "type": "string"
        }
      },
      "type": "object"
    },
    "error_response": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "stream_app_validate_request": {
      "type": "object",
      "properties": {
        "definition": {
          "type": "string"
        }
      }
    },
    "stream_app_response": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "stream_app1"
        },
        "definition": {
          "type": "string"
        },
        "regions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "example": "region1"
        },
        "isActive": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "stream_app_response_container": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "streamApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream_app_response"
          }
        }
      }
    },
    "stream_app_response_container_201": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "streamApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream_app_response"
          }
        }
      }
    },
    "get_all_sample_stream_apps_response": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "streamAppSamples": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sample_stream_app_information"
          }
        }
      }
    },
    "sample_stream_app_information": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "stream_app1"
        },
        "definition": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "get_all_stream_apps_response": {
      "type": "object",
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "streamApps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/stream_app_information"
          }
        }
      }
    },
    "stream_app_information": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "stream_app1"
        },
        "definition": {
          "type": "string"
        },
        "regions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "example": "region1"
        },
        "isActive": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "stream_app_request": {
      "type": "object",
      "properties": {
        "definition": {
          "type": "string"
        },
        "regions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "stream_app_query_response": {
      "type": "object",
      "properties": {
        "records": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      }
    },
    "stream_app_query_request": {
      "type": "object",
      "properties": {
        "query": {
          "description": "",
          "type": "string",
          "example": "for d in testCollection return d"
        }
      }
    },
    "Account_Create": {
      "properties": {
        "tenant": {
          "description": "Tenant",
          "format": "string",
          "type": "string"
        },
        "plan": {
          "description": "Plan types.",
          "format": "string",
          "type": "object",
          "properties": {
            "name": {
              "description": "Plan name.",
              "format": "string",
              "type": "string"
            },
            "demo": {
              "description": "If billing plan is demo, set `true`. Else set `false`.",
              "format": "boolean",
              "type": "boolean"
            }
          }
        },
        "contact": {
          "properties": {
            "firstname": {
              "description": "First Name",
              "format": "string",
              "type": "string"
            },
            "lastname": {
              "description": "Last Name",
              "format": "string",
              "type": "string"
            },
            "email": {
              "description": "Email id",
              "format": "string",
              "type": "string"
            },
            "phone": {
              "description": "Phone number",
              "format": "string",
              "type": "string"
            },
            "line1": {
              "description": "Address line 1",
              "format": "string",
              "type": "string"
            },
            "line2": {
              "description": "Address line 2",
              "format": "string",
              "type": "string"
            },
            "city": {
              "description": "City",
              "format": "string",
              "type": "string"
            },
            "state": {
              "description": "State",
              "format": "string",
              "type": "string"
            },
            "country": {
              "description": "Two-letter country code (ISO 3166-1 alpha-2).",
              "format": "string",
              "type": "string"
            },
            "zipcode": {
              "description": "Zip code",
              "format": "string",
              "type": "string"
            }
          }
        }
      },
      "required": [
        "tenant"
      ],
      "type": "object"
    },
    "Contact_Update": {
      "properties": {
        "firstname": {
          "description": "First Name",
          "format": "string",
          "type": "string"
        },
        "lastname": {
          "description": "Last Name",
          "format": "string",
          "type": "string"
        },
        "email": {
          "description": "Email id",
          "format": "string",
          "type": "string"
        },
        "phone": {
          "description": "Phone number",
          "format": "string",
          "type": "string"
        },
        "line1": {
          "description": "Address line 1",
          "format": "string",
          "type": "string"
        },
        "line2": {
          "description": "Address line 2",
          "format": "string",
          "type": "string"
        },
        "city": {
          "description": "City",
          "format": "string",
          "type": "string"
        },
        "state": {
          "description": "State",
          "format": "string",
          "type": "string"
        },
        "country": {
          "description": "Two-letter country code (ISO 3166-1 alpha-2).",
          "format": "string",
          "type": "string"
        },
        "zipcode": {
          "description": "Zip code",
          "format": "string",
          "type": "string"
        }
      },
      "required": [
        "tenant"
      ],
      "type": "object"
    },
    "Plan_Update": {
      "properties": {
        "name": {
          "description": "Plan name",
          "format": "string",
          "type": "string"
        }
      },
      "required": [
        "tenant"
      ],
      "type": "object"
    },
    "Payment_Update": {
      "properties": {
        "payment_method_id": {
          "description": "Payment Method ID",
          "format": "string",
          "type": "string"
        }
      }
    },
    "stripe_200_invoice_month_year": {
      "properties": {
        "id": {
          "type": "string",
          "example": "ID"
        },
        "object": {
          "type": "string",
          "example": "invoice"
        },
        "account_country": {
          "type": "string",
          "example": "US"
        },
        "account_name\"": {
          "type": "string",
          "example": "Stripe.com"
        },
        "account_tax_ids": {
          "type": "object",
          "example": null
        },
        "amount_due": {
          "type": "integer",
          "example": 40298
        },
        "amount_paid": {
          "type": "integer",
          "example": 0
        },
        "amount_remaining": {
          "type": "integer",
          "example": 40298
        }
      }
    },
    "stripe_200_invoice_upcoming": {
      "properties": {
        "object": {
          "type": "string",
          "example": "invoice"
        },
        "account_country": {
          "type": "string",
          "example": "US"
        },
        "account_name\"": {
          "type": "string",
          "example": "Stripe.com"
        },
        "account_tax_ids": {
          "type": "object",
          "example": null
        },
        "amount_due": {
          "type": "integer",
          "example": 40298
        },
        "amount_paid": {
          "type": "integer",
          "example": 0
        },
        "amount_remaining": {
          "type": "integer",
          "example": 40298
        }
      }
    },
    "stripe_200_invoice_list": {
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "url": {
          "type": "string",
          "example": "/v1/payment_intents"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        },
        "data": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "example": "pi_1DpxME2eZvKYlo2CdLPnXZPO"
              },
              "object": {
                "type": "string",
                "example": "invoice"
              },
              "account_country": {
                "type": "string",
                "example": "US"
              },
              "account_name\"": {
                "type": "string",
                "example": "Stripe.com"
              },
              "account_tax_ids": {
                "type": "object",
                "example": null
              },
              "amount_due": {
                "type": "integer",
                "example": 498
              },
              "amount_paid": {
                "type": "integer",
                "example": 0
              },
              "amount_remaining": {
                "type": "integer",
                "example": 498
              }
            }
          }
        }
      }
    },
    "stripe_200_intent_list": {
      "properties": {
        "object": {
          "type": "string",
          "example": "list"
        },
        "url": {
          "type": "string",
          "example": "/v1/payment_intents"
        },
        "has_more": {
          "type": "boolean",
          "example": false
        },
        "data": {
          "type": "array",
          "items": {
            "properties": {
              "id": {
                "type": "string",
                "example": "pi_1DpxME2eZvKYlo2CdLPnXZPO"
              },
              "object": {
                "type": "string",
                "example": "payment_intent"
              },
              "amount": {
                "type": "integer",
                "example": 1099
              }
            }
          }
        }
      }
    },
    "Response_Billing_Code_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "message": {
          "description": "Message from server",
          "type": "string"
        }
      }
    },
    "Response_Billing_Code_400": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 400
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean"
        },
        "message": {
          "description": "Message from server",
          "type": "string"
        }
      }
    },
    "Response_Billing_Account_Get": {
      "properties": {
        "code": {
          "type": "number",
          "example": "200"
        },
        "error": {
          "type": "boolean",
          "example": false
        },
        "data": {
          "type": "object",
          "properties": {
            "created_at": {
              "type": "string",
              "example": "Timestamp when account was created."
            },
            "plan": {
              "type": "object",
              "properties": {
                "attribution": {
                  "description": "Attribution of the plan",
                  "type": "string",
                  "example": "Macrometa"
                },
                "name": {
                  "description": "Name of the plan",
                  "type": "string",
                  "example": "PlanName"
                },
                "subscription": {
                  "description": "List of the subscription ID of the plan",
                  "type": "object"
                },
                "target": {
                  "description": "Target where billing data is uploaded. E.g. Stripe, AWS S3.",
                  "type": "string",
                  "example": "Macrometa"
                }
              }
            },
            "subscription_id": {
              "description": "If target is Stripe, subscription ID is returned by Stripe. If not, it's empty",
              "type": "string",
              "example": "sub_<subscription_id>"
            },
            "customer_id": {
              "description": "If target is Stripe, customer ID is returned by Stripe. If not, it's empty",
              "type": "string",
              "example": "cus_<customer_id>"
            },
            "contact": {
              "type": "object",
              "properties": {
                "firstname": {
                  "type": "string",
                  "example": "First name of the user."
                },
                "lastname": {
                  "type": "string",
                  "example": "Last name of the user."
                },
                "email": {
                  "type": "string",
                  "example": "Email address of the user."
                },
                "phone": {
                  "type": "string",
                  "example": "Phone number of the user."
                },
                "line1": {
                  "type": "string",
                  "example": "Address line 1."
                },
                "line2": {
                  "type": "string",
                  "example": "Address line 2."
                },
                "city": {
                  "type": "string",
                  "example": "Address city."
                },
                "state": {
                  "type": "string",
                  "example": "Address state."
                },
                "country": {
                  "type": "string",
                  "example": "Address country."
                },
                "zipcode": {
                  "type": "string",
                  "example": "Address zip code."
                }
              }
            }
          }
        }
      }
    },
    "Response_Usage_Get": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "data": {
          "description": "Message from server",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_key": {
                "type": "string",
                "example": "key"
              },
              "tenant": {
                "type": "string",
                "example": "tenant1"
              },
              "from": {
                "description": "The date from where usage is tracked",
                "type": "integer",
                "example": "2022-12-01"
              },
              "to": {
                "description": "The date to which usage is tracked",
                "type": "integer",
                "example": "2022-12-31"
              },
              "region": {
                "type": "string",
                "example": "region1"
              },
              "records": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "integer"
                    },
                    "value": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "federation_member_peerip": {
      "properties": {
        "peer": {
          "description": "Hostname of the peer cluster that needs to be added to the federation.",
          "type": "string",
          "example": "192.168.251.192"
        }
      }
    },
    "search_get_view_rc_200_example": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Search view information",
          "type": "object",
          "properties": {
            "globallyUniqueId": {
              "type": "string",
              "example": "h83A7584E8AA9/81730851"
            },
            "id": {
              "type": "string",
              "example": "81730851"
            },
            "name": {
              "type": "string",
              "example": "c8search_view_server_list"
            },
            "type": {
              "type": "string",
              "example": "search"
            }
          }
        }
      }
    },
    "search_get_view_properties_rc_200_example": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Search view information",
          "type": "object",
          "properties": {
            "globallyUniqueId": {
              "description": "Global Unique identifier of the search view.",
              "type": "string",
              "example": "h83A7584E8AA9/81730851"
            },
            "id": {
              "description": "Unique identifier of the search view.",
              "type": "string",
              "example": "81730851"
            },
            "name": {
              "description": "The name of the search view. This field is immutable.",
              "type": "string",
              "example": "new_collection_view"
            },
            "primarySort": {
              "description": "Specify default sorting order. This field is immutable.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "field": {
                    "description": "The name of the field.",
                    "type": "string",
                    "example": "attribute1"
                  },
                  "direction": {
                    "description": "The sorting direction.",
                    "type": "string",
                    "example": "asc"
                  }
                },
                "default": {}
              },
              "default": []
            },
            "links": {
              "$ref": "#/definitions/post_api_view_links"
            },
            "type": {
              "description": "The type of the search view. must be equal to *search*.",
              "type": "string",
              "default": "search"
            }
          }
        }
      }
    },
    "Concurrency": {
      "properties": {
        "limit": {
          "minimum": 0,
          "type": "number"
        },
        "target": {
          "minimum": 0,
          "type": "number"
        },
        "utilization": {
          "minimum": 0,
          "type": "number"
        }
      },
      "required": [
        "limit",
        "target",
        "utilization"
      ],
      "type": "object"
    },
    "CreateConfigmapDto": {
      "properties": {
        "fromEnvFile": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fromFile": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fromLiteral": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "regions"
      ],
      "type": "object"
    },
    "CreateNamespaceDto": {
      "properties": {
        "annotations": {
          "type": "object"
        },
        "labels": {
          "type": "object"
        },
        "limits": {
          "$ref": "#/definitions/Limits"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requests": {
          "$ref": "#/definitions/Limits"
        },
        "tenant": {
          "type": "string"
        }
      },
      "required": [
        "tenant",
        "regions",
        "annotations",
        "labels",
        "limits",
        "requests"
      ],
      "type": "object"
    },
    "CreateRegistrySecretDto": {
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "server": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "regions",
        "name",
        "server",
        "email",
        "username",
        "password"
      ],
      "type": "object"
    },
    "CreateServiceDto": {
      "properties": {
        "annotationRevision": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "annotationService": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "annotations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string",
            "example": "location"
          },
          "type": "array"
        },
        "autoscaleWindow": {
          "type": "string"
        },
        "cmd": {
          "type": "string"
        },
        "concurrency": {
          "$ref": "#/definitions/Concurrency"
        },
        "env": {
          "items": {
            "type": "string",
            "example": "_key"
          },
          "type": "array"
        },
        "envFrom": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "force": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "labelRevision": {
          "items": {
            "type": "string",
            "example": "hashKey"
          },
          "type": "array"
        },
        "labelService": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limits": {
          "$ref": "#/definitions/Limits"
        },
        "lockToDigest": {
          "type": "boolean"
        },
        "mount": {
          "items": {
            "type": "string",
            "example": "id"
          },
          "type": "array"
        },
        "port": {
          "maximum": 65535,
          "type": "number"
        },
        "pullSecret": {
          "type": "string"
        },
        "regions": {
          "items": {
            "type": "string",
            "example": "_key"
          },
          "type": "array"
        },
        "requests": {
          "$ref": "#/definitions/Limits"
        },
        "revision": {
          "type": "string"
        },
        "scale": {
          "$ref": "#/definitions/Scale"
        },
        "service": {
          "type": "string"
        }
      },
      "required": [
        "service",
        "image"
      ],
      "type": "object"
    },
    "Limits": {
      "properties": {
        "cpu": {
          "type": "number"
        },
        "memory": {
          "type": "number"
        }
      },
      "required": [
        "cpu",
        "memory"
      ],
      "type": "object"
    },
    "Scale": {
      "properties": {
        "init": {
          "minimum": 0,
          "type": "number"
        },
        "max": {
          "minimum": 0,
          "type": "number"
        },
        "min": {
          "minimum": 0,
          "type": "number"
        }
      },
      "required": [
        "init",
        "min",
        "max"
      ],
      "type": "object"
    },
    "UpdateConfigmapDto": {
      "properties": {
        "fromEnvFile": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fromFile": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "fromLiteral": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "type": "string"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "UpdateNamespaceDto": {
      "properties": {
        "annotations": {
          "type": "object"
        },
        "labels": {
          "type": "object"
        },
        "limits": {
          "$ref": "#/definitions/Limits"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requests": {
          "$ref": "#/definitions/Limits"
        }
      },
      "type": "object"
    },
    "UpdateServiceDto": {
      "properties": {
        "annotationRevision": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "annotationService": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "annotations": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "args": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "autoscaleWindow": {
          "type": "string"
        },
        "cmd": {
          "type": "string"
        },
        "concurrency": {
          "$ref": "#/definitions/Concurrency"
        },
        "env": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "envFrom": {
          "items": {
            "type": "string",
            "example": "c8cep_app_cpu_tenant_total"
          },
          "type": "array"
        },
        "force": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "labelRevision": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labelService": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limits": {
          "$ref": "#/definitions/Limits"
        },
        "lockToDigest": {
          "type": "boolean"
        },
        "mount": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "port": {
          "maximum": 65535,
          "type": "number"
        },
        "pullSecret": {
          "type": "string"
        },
        "regions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "requests": {
          "$ref": "#/definitions/Limits"
        },
        "revision": {
          "type": "string"
        },
        "scale": {
          "$ref": "#/definitions/Scale"
        },
        "tag": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "traffic": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "untag": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "StreamSourceRequestBody": {
      "type": "object",
      "description": "Body of the Stream Source creation/update request.",
      "properties": {
        "region": {
          "type": "string",
          "description": "Name of the region in which this connector will run. The default value is the local region where the request is executed.",
          "example": "gdn-us-east"
        },
        "sourceType": {
          "type": "string",
          "description": "Type of the connector.",
          "example": "POSTGRESQL"
        },
        "database": {
          "type": "object",
          "description": "Information of the database connection.",
          "properties": {
            "hostname": {
              "type": "string",
              "description": "Name of the host. Is this the same as the region name. We don't have a concept of a hostname.",
              "example": "www.mydomain.com"
            },
            "port": {
              "type": "string",
              "description": "Port the database service is running on.",
              "example": "5432"
            },
            "user": {
              "type": "string",
              "description": "Database user.",
              "example": "postgres"
            },
            "password": {
              "type": "string",
              "description": "Database password.",
              "example": "changeme"
            },
            "dbname": {
              "type": "string",
              "description": "Name of the database to connect.",
              "example": "postgres"
            },
            "serverId": {
              "type": "string",
              "description": "Unique id for this database server. This will be automatically assigned if left unset."
            },
            "serverName": {
              "type": "string",
              "description": "Name for this database server.",
              "example": "dbserver1"
            },
            "tableWhitelist": {
              "type": "string",
              "description": "Comma seperated table list to listen changes. If left unset, all non-system table changes will be captured. Every item should be of <schemaName>.<tableName> format.",
              "example": "public.person,public.order"
            }
          },
          "required": [
            "hostname",
            "port",
            "user",
            "password",
            "dbname",
            "serverName"
          ]
        }
      },
      "required": [
        "sourceType",
        "database"
      ]
    },
    "StreamSinkRequestBody": {
      "type": "object",
      "description": "Body of the Stream Sink creation/update request.",
      "properties": {
        "region": {
          "type": "string",
          "description": "Name of the region in which this connector will run. The default value is the local region where the request is executed.",
          "example": "test-us-east"
        },
        "sinkType": {
          "type": "string",
          "description": "Type of the connector.",
          "example": "POSTGRESQL"
        },
        "database": {
          "type": "object",
          "description": "Information of the database connection.",
          "properties": {
            "hostname": {
              "type": "string",
              "description": "Host the database is deployed at.",
              "example": "www.mydomain.com"
            },
            "port": {
              "type": "string",
              "description": "Port the database service is running on.",
              "example": "5432"
            },
            "user": {
              "type": "string",
              "description": "Database user.",
              "example": "postgres"
            },
            "password": {
              "type": "string",
              "description": "Database password.",
              "example": "changeme"
            },
            "dbname": {
              "type": "string",
              "description": "Name of the database to connect.",
              "example": "postgres"
            },
            "tableName": {
              "type": "string",
              "description": "Table the Sink connector will connect to.",
              "example": "person"
            },
            "columns": {
              "type": "array",
              "description": "Column definitions of the Sink table.",
              "items": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the column",
                    "example": "id"
                  },
                  "type": {
                    "type": "string",
                    "description": "Data type of the column",
                    "example": "int"
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            }
          },
          "required": [
            "hostname",
            "port",
            "user",
            "password",
            "dbname",
            "tableName",
            "columns"
          ]
        }
      },
      "required": [
        "sinkType",
        "database"
      ]
    },
    "StreamConnectorSupportedPlatform": {
      "type": "object",
      "description": "Information of a supported Stream-IO-Connector Platform.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Type of the connector.",
          "example": "POSTGRESQL"
        },
        "description": {
          "type": "string",
          "description": "Description of the connector.",
          "example": "PostgreSQL Connector"
        },
        "sourceSupported": {
          "type": "boolean",
          "description": "Whether this connector supports sources.",
          "example": true
        },
        "sinkSupported": {
          "type": "boolean",
          "description": "Whether this connector supports sinks.",
          "example": true
        }
      }
    },
    "StreamConnectorDefinition": {
      "type": "object",
      "description": "Definition of an IO Connector.",
      "properties": {
        "region": {
          "type": "string",
          "description": "Region the connector runs on.",
          "example": "gdn-us-east"
        },
        "tenant": {
          "type": "string",
          "description": "Tenant the connector runs on.",
          "example": "PostgreSQL Connector"
        },
        "global": {
          "type": "boolean",
          "description": "Whether the connector supports accross regions.",
          "example": false
        },
        "fabric": {
          "type": "string",
          "description": "Fabric the connector runs on.",
          "example": "_system"
        },
        "name": {
          "type": "string",
          "description": "Name of the connector.",
          "example": "c8locals.postgres-connector"
        },
        "direction": {
          "type": "string",
          "description": "Whether the connector is a SOURCE or SINK. One of these values will be available."
        },
        "type": {
          "type": "string",
          "description": "Type of the connector.",
          "example": "POSTGRESQL"
        },
        "database": {
          "type": "object",
          "description": "Information of the database connection.",
          "properties": {
            "hostname": {
              "type": "string",
              "description": "Host the database is deployed at.",
              "example": "www.mydomain.com"
            },
            "port": {
              "type": "string",
              "description": "Port the database service is running on.",
              "example": "5432"
            },
            "user": {
              "type": "string",
              "description": "Database user.",
              "example": "postgres"
            },
            "password": {
              "type": "string",
              "description": "Database password.",
              "example": "changeme"
            },
            "dbname": {
              "type": "string",
              "description": "Name of the database to connect.",
              "example": "postgres"
            },
            "serverId": {
              "type": "string",
              "description": "Unique id for this database server. This will be automatically assigned if left unset. Specific for Source connectors."
            },
            "serverName": {
              "type": "string",
              "description": "Name for this database server. Specific for Source connectors.",
              "example": "dbserver1"
            },
            "tableWhitelist": {
              "type": "string",
              "description": "Comma seperated table list to listen changes. Specific for Source connectors.",
              "example": "public.person,public.order"
            },
            "tableName": {
              "type": "string",
              "description": "Table the Sink connector will connect to. Specific for Sink connectors.",
              "example": "person"
            },
            "columns": {
              "type": "array",
              "description": "Column definitions of a Sink table. Specific to Sink connectors.",
              "items": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the column",
                    "example": "id"
                  },
                  "type": {
                    "type": "string",
                    "description": "Data type of the column",
                    "example": "int"
                  }
                }
              }
            }
          }
        },
        "active": {
          "type": "boolean",
          "description": "Whether the connector is started or not.",
          "example": true
        },
        "lastError": {
          "type": "string",
          "description": "If there was an error at the last action of creating/updating/deleting the connector, it will be available.",
          "example": "Could not create the connector due to unsupported connector type."
        }
      }
    },
    "dns_info_response": {
      "properties": {
        "global_url": {
          "type": "string",
          "description": "The global URL for the tenant and fabric pair.",
          "example": "global-url.mydomain.io"
        },
        "regional_urls": {
          "type": "object",
          "description": "Populates the regional URLs.",
          "properties": {
            "region-name-1": {
              "type": "string",
              "description": "The regional URL for the tenant and fabric pair for data center 1.",
              "example": "regional-url-1.mydomain.io"
            },
            "region-name-2": {
              "type": "string",
              "description": "The regional URL for the tenant and fabric pair for data center 2.",
              "example": "regional-url-2.mydomain.io"
            }
          }
        },
        "status": {
          "type": "object",
          "description": "Status of the regional URLs.",
          "properties": {
            "region-name-1": {
              "type": "string",
              "description": "Status of the regional URL for data center 1. Available status - enabled, disabled, pending, error",
              "example": "enabled"
            },
            "region-name-2": {
              "type": "string",
              "description": "Status of the regional URL for data center 2. Available status - enabled, disabled, pending, error",
              "example": "enabled"
            }
          }
        },
        "err_msg": {
          "type": "string",
          "description": "The error message for the failure during the DNS record CRUD operations.",
          "example": "Error message string"
        }
      }
    },
    "post_zendesk_api": {
      "properties": {
        "operation": {
          "type": "string",
          "description": "The type of support ticket to be created.\nThe following values for *operation* are valid (The default is *Generic*):\n - **Generic**: Generic support request.\n - **AddRegionToTenant**: Add a new region to the existing tenant.\n - **RemoveRegionFromTenant**: Remove a region from the existing tenant.\n - **AddRegionToFabric**: Add a new region to the specified fabric.\n - **RemoveRegionFromFabric**: Remove a region from the specified fabric.\n",
          "example": "Generic"
        },
        "subject": {
          "type": "string",
          "description": "The subject of the support ticket.",
          "example": "Enable Stream worker"
        },
        "body": {
          "type": "string",
          "description": "Add body to describe request/problem you are facing.",
          "example": "Can you please enable Stream worker feature for my tenant?"
        },
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the tenant.",
              "example": "Demo"
            },
            "email": {
              "type": "string",
              "description": "The email of the tenant.",
              "example": "demo@gmail.com"
            },
            "datacenter": {
              "type": "string",
              "description": "The name of the data center.",
              "example": "gdn-us-west"
            },
            "fabric": {
              "type": "string",
              "description": "The name of the fabric.",
              "example": "_system"
            }
          }
        }
      }
    },
    "api_index_http_200_help": {
      "properties": {
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* If the index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "fulltext"
        },
        "unique": {
          "description": "*True* If the index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "indexes": {
          "description": "The array of indexes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_index_http_200_help"
          }
        },
        "identifiers": {
          "description": "The object of indexes with index id as key.",
          "type": "object",
          "properties": {
            "global_demo/0": {
              "$ref": "#/definitions/api_index_http_200_help"
            }
          }
        }
      },
      "type": "object"
    },
    "api_index_fulltext_body": {
      "properties": {
        "fields": {
          "description": "An array of attribute names. Currently, the array is limited\nto exactly one attribute.",
          "items": {
            "type": "string",
            "example": "_key"
          },
          "type": "array"
        },
        "minLength": {
          "description": "Minimum character length of words to index. Will default to a server-defined value if unspecified. It is thus recommended to set this value explicitly when creating the index.",
          "type": "integer"
        },
        "type": {
          "description": "Must be equal to *\"fulltext\"*.",
          "type": "string",
          "example": "fulltext"
        }
      },
      "required": [
        "fields",
        "type"
      ],
      "type": "object"
    },
    "api_index_general_body": {
      "properties": {
        "fields": {
          "description": "An array of attribute names. Currently, the array is limited\nto exactly one attribute.",
          "items": {
            "type": "string",
            "example": "_key"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "type": {
          "description": "Must be equal to *\"fulltext\"*.",
          "type": "string",
          "example": "fulltext"
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "example": false,
          "type": "boolean"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "example": false,
          "type": "boolean"
        },
        "deduplicate": {
          "description": "*False if the deduplication of array values is turned off.",
          "type": "boolean"
        }
      },
      "required": [
        "fields",
        "type"
      ],
      "type": "object"
    },
    "api_index_post_fulltext_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "fulltext"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_fulltext_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 201
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "fulltext"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        },
        "isNewlyCreated": {
          "description": "*True* if index is newly created.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_geo_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "geoJson": {
          "description": "If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions.",
          "type": "boolean",
          "example": true
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "maxNumCoverCells": {
          "description": "The maximum number of cover cells.",
          "type": "integer",
          "example": 8
        },
        "worstIndexedLevel": {
          "description": "The worst indexed level.",
          "type": "integer",
          "example": 4
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": true
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "fulltext"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_geo_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "geoJson": {
          "description": "If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions.",
          "type": "boolean",
          "example": true
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "maxNumCoverCells": {
          "description": "The maximum number of cover cells.",
          "type": "integer",
          "example": 8
        },
        "worstIndexedLevel": {
          "description": "The worst indexed level.",
          "type": "integer",
          "example": 4
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": true
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "fulltext"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_ttl_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "ttl"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        },
        "expireAfter": {
          "description": "Index expiry time",
          "type": "number",
          "example": 600
        }
      }
    },
    "api_index_post_ttl_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "ttl"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        },
        "expireAfter": {
          "description": "Index expiry time",
          "type": "number",
          "example": 600
        }
      }
    },
    "api_index_post_hash_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "hash"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_persistent_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "geoJson": {
          "description": "If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions.",
          "type": "boolean",
          "example": true
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "maxNumCoverCells": {
          "description": "The maximum number of cover cells.",
          "type": "integer",
          "example": 8
        },
        "worstIndexedLevel": {
          "description": "The worst indexed level.",
          "type": "integer",
          "example": 4
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": true
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "persistent"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_persistent_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "geoJson": {
          "description": "If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions.",
          "type": "boolean",
          "example": true
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "maxNumCoverCells": {
          "description": "The maximum number of cover cells.",
          "type": "integer",
          "example": 8
        },
        "worstIndexedLevel": {
          "description": "The worst indexed level.",
          "type": "integer",
          "example": 4
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": true
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "persistent"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_hash_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "hash"
        },
        "unique": {
          "description": "*True* If the index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_skiplist_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "skiplist"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_index_post_skiplist_http_examples_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "fields": {
          "description": "HTTP response code.",
          "type": "array",
          "items": {
            "type": "string",
            "example": "_key"
          }
        },
        "id": {
          "description": "Index identifier.",
          "type": "string",
          "example": "61862387"
        },
        "name": {
          "description": "Name of the index.",
          "type": "string",
          "example": "idx_1723573111790501888"
        },
        "selectivityEstimate": {
          "description": "The selectivity estimate of index.",
          "type": "number",
          "example": 1
        },
        "sparse": {
          "description": "*True* if index is sparse type.",
          "type": "boolean",
          "example": false
        },
        "type": {
          "description": "Index type.",
          "type": "string",
          "example": "skiplist"
        },
        "unique": {
          "description": "*True* if index is unique.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "api_collection_ttl_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "Removed collection identifier.",
          "type": "string",
          "example": "61862387"
        }
      }
    },
    "fabric_sync_get_status_example": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Fabric sync information",
          "type": "object",
          "properties": {
            "collections": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Collection name"
                  },
                  "status": {
                    "type": "string",
                    "description": "Collection sync status",
                    "example": "50%"
                  }
                }
              }
            },
            "fabric": {
              "type": "string",
              "description": "The fabric name.",
              "example": "_system"
            },
            "status": {
              "type": "string",
              "description": "The fabric sync status.",
              "example": "50%"
            }
          }
        }
      }
    },
    "administration_tenants_helper": {
      "properties": {
        "tenant": {
          "type": "string",
          "description": "The tenant name.",
          "example": "__system"
        },
        "dcList": {
          "description": "The array of data center names on which this tenant is created.",
          "example": [
            "sol1-ap-west"
          ]
        },
        "status": {
          "type": "string",
          "description": "The tenant status.",
          "example": "available"
        }
      },
      "type": "object"
    },
    "administration_tenants_get_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Array of tenants.",
          "type": "array",
          "$ref": "#/definitions/administration_tenants_helper"
        }
      }
    },
    "administration_tenant_create_rc_201": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "type": "object",
          "properties": {
            "name": {
              "description": "The name of the tenant.",
              "type": "string",
              "example": "Test"
            },
            "email": {
              "description": "Email address of tenant.",
              "type": "string",
              "example": "demo@macrometa.com"
            },
            "attribution": {
              "description": "The attribution.",
              "type": "string",
              "default": "",
              "example": "Macrometa"
            },
            "plan": {
              "description": "The billing plan name.",
              "type": "string",
              "default": "",
              "example": "ENTERPRISE"
            },
            "dcList": {
              "description": "A comma-separated string containing the data center names on which this tenant is to be created. If an empty string is passed in, the tenant is assumed to be global to the federation and will be created on all current data centers in the federation.",
              "type": "string",
              "default": ""
            },
            "tenant": {
              "description": "The tenant name.",
              "type": "string",
              "default": "",
              "example": "Test"
            },
            "metadata": {
              "description": "The metadata as a JSON object. This Object has a metadata key-value pairs.",
              "$ref": "#/definitions/get_tenant_metadata_object_example"
            }
          }
        }
      }
    },
    "administration_tenant_delete_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "*True* if then tenant removed successfully.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "administration_get_event_rc_201": {
      "type": "array",
      "description": "Array of delted events information.",
      "items": {
        "properties": {
          "_id": {
            "description": "ID of the event.",
            "type": "string",
            "example": "test/foo"
          },
          "_key": {
            "description": "_key details of event.",
            "type": "string",
            "example": "foo"
          },
          "_rev": {
            "description": "_rev details of event.",
            "type": "string",
            "example": "_dPRuHxe--_"
          }
        }
      }
    },
    "administration_create_event_rc_201": {
      "properties": {
        "_id": {
          "description": "ID of the event.",
          "type": "string",
          "example": "test/foo"
        },
        "_key": {
          "description": "_key details of event.",
          "type": "string",
          "example": "foo"
        },
        "_rev": {
          "description": "_rev details of event.",
          "type": "string",
          "example": "_dPRuHxe--_"
        }
      }
    },
    "administration_get_events_rc_200": {
      "type": "array",
      "description": "Array of event details",
      "items": {
        "properties": {
          "_id": {
            "description": "ID of the event.",
            "type": "string",
            "example": "test/foo"
          },
          "_key": {
            "description": "_key details of event.",
            "type": "string",
            "example": "foo"
          },
          "_rev": {
            "description": "_rev details of event.",
            "type": "string",
            "example": "_dPRuHxe--_"
          },
          "action": {
            "description": "The activity of the event (CREATE/UPDATE/DELETE/EXECUTE/LOGIN).",
            "type": "string",
            "example": "CREATE"
          },
          "attributes": {
            "$ref": "#/definitions/event_attributes"
          },
          "clusterID": {
            "description": "Cluster id",
            "type": "string",
            "example": "sol1-ap-west"
          },
          "email": {
            "description": "The email id.",
            "type": "string",
            "example": "test@foo.com"
          },
          "entityName": {
            "description": "The entity name of the event.",
            "type": "string",
            "example": "Test"
          },
          "entityType": {
            "description": "The entity type of the event (COLLECTION/GRAPH/CEP/AUTH/STREAM/GEOFABRIC).",
            "type": "string",
            "example": "COLLECTION"
          },
          "fabric": {
            "type": "string",
            "description": "Fabric the event runs on.",
            "example": "_system"
          },
          "status": {
            "description": "The activity status (OK/WARN/ERROR).",
            "type": "string",
            "example": "OK"
          },
          "tenant": {
            "type": "string",
            "description": "The tenant name.",
            "example": "__system"
          },
          "timestamp": {
            "type": "number",
            "description": "Timestamp of event creted at.",
            "example": 1643991111
          },
          "user": {
            "description": "Name of the user.",
            "type": "string",
            "example": "root"
          },
          "version": {
            "description": "The version string.",
            "type": "string",
            "example": "0.1"
          }
        }
      }
    },
    "administration_api_get_metrics_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Returns array of metrics details.",
          "type": "string",
          "example": "{\"result\":[{\"name\":\"c8cep_app_cpu_tenant_total\",\"type\":\"counter\",\"help\":\"\"}]}"
        }
      }
    },
    "administration_api_query_metrics_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "Returns metrics details.",
          "type": "string",
          "example": "{\"c8cep_app_cpu_tenant_total\":[]}"
        }
      }
    },
    "api_collection_http_200_help": {
      "properties": {
        "id": {
          "description": "Id of the the collection.",
          "type": "string",
          "example": "89218"
        },
        "name": {
          "description": "Name of the collection.",
          "type": "string",
          "example": "colltest0127133421258ogefv"
        },
        "status": {
          "description": "Status of the collection.",
          "type": "number",
          "example": 3
        },
        "type": {
          "description": "Type of the collection.",
          "type": "number",
          "example": 2
        },
        "collectionModel": {
          "description": "Type of collection model.",
          "type": "string",
          "example": "DOC"
        },
        "isSpot": {
          "description": "*True* if collection is a spot collection.",
          "type": "boolean",
          "example": false
        },
        "isLocal": {
          "description": "*True* if collection is a local collection.",
          "type": "boolean",
          "example": false
        },
        "hasStream": {
          "description": "*True* if collection has a stream.",
          "type": "boolean",
          "example": true
        },
        "waitForSync": {
          "description": "*True* if all data must be synced to disk before operation returns.",
          "type": "boolean",
          "example": false
        },
        "isSystem": {
          "description": "*True* if collection is a system collection.",
          "type": "boolean",
          "example": false
        },
        "globallyUniqueId": {
          "description": "Collection's global unique Id.",
          "type": "string",
          "example": "h2C627F3DCC8E/89218"
        },
        "searchEnabled": {
          "description": "*True* if collection is searchable.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "api_collection_get_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "An array of API keys with details as",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_collection_http_200_help"
          }
        }
      }
    },
    "api_collection_post_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "Removed collection identifier.",
          "type": "string",
          "example": "61862387"
        }
      }
    },
    "api_collection_get_collection_name_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "Id of the the collection.",
          "type": "string",
          "example": "89218"
        },
        "name": {
          "description": "Name of the collection.",
          "type": "string",
          "example": "colltest0127133421258ogefv"
        },
        "status": {
          "description": "Status of the collection.",
          "type": "number",
          "example": 3
        },
        "type": {
          "description": "Type of the collection.",
          "type": "number",
          "example": 2
        },
        "collectionModel": {
          "description": "Type of collection model.",
          "type": "string",
          "example": "DOC"
        },
        "isSpot": {
          "description": "*True* if collection is a spot collection.",
          "type": "boolean",
          "example": false
        },
        "isLocal": {
          "description": "*True* if collection is a local collection.",
          "type": "boolean",
          "example": false
        },
        "hasStream": {
          "description": "*True* if collection has a stream.",
          "type": "boolean",
          "example": true
        },
        "waitForSync": {
          "description": "*True* if all data must be synced to disk before operation returns.",
          "type": "boolean",
          "example": false
        },
        "isSystem": {
          "description": "*True* if collection is a system collection.",
          "type": "boolean",
          "example": false
        },
        "globallyUniqueId": {
          "description": "Collection's global unique Id.",
          "type": "string",
          "example": "h2C627F3DCC8E/89218"
        },
        "searchEnabled": {
          "description": "*True* if collection is searchable.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "api_collection_put_collection_property_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "Id of the the collection.",
          "type": "string",
          "example": "89218"
        },
        "objectId": {
          "description": "Object id of the the collection.",
          "type": "string",
          "example": "6966663"
        },
        "name": {
          "description": "Name of the collection.",
          "type": "string",
          "example": "colltest0127133421258ogefv"
        },
        "status": {
          "description": "Status of the collection.",
          "type": "number",
          "example": 3
        },
        "type": {
          "description": "Type of the collection.",
          "type": "number",
          "example": 2
        },
        "collectionModel": {
          "description": "Type of collection model.",
          "type": "string",
          "example": "DOC"
        },
        "isSpot": {
          "description": "*True* if collection is a spot collection.",
          "type": "boolean",
          "example": false
        },
        "isLocal": {
          "description": "*True* if collection is a local collection.",
          "type": "boolean",
          "example": false
        },
        "cacheEnabled": {
          "description": "*True* if collection has cache enable",
          "type": "boolean",
          "example": false
        },
        "hasStream": {
          "description": "*True* if collection has a stream.",
          "type": "boolean",
          "example": true
        },
        "waitForSync": {
          "description": "*True* if all data must be synced to disk before operation returns.",
          "type": "boolean",
          "example": false
        },
        "keyOptions": {
          "$ref": "#/definitions/fabric_collection_validate_keyoption"
        },
        "isSystem": {
          "description": "*True* if collection is a system collection.",
          "type": "boolean",
          "example": false
        },
        "globallyUniqueId": {
          "description": "Collection's global unique Id.",
          "type": "string",
          "example": "h2C627F3DCC8E/89218"
        },
        "searchEnabled": {
          "description": "*True* if collection is searchable.",
          "type": "boolean",
          "example": false
        }
      }
    },
    "api_collection_get_count_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "searchEnabled": {
          "description": "*True* if collection is searchable.",
          "type": "boolean",
          "example": false
        },
        "count": {
          "description": "Number of document in the collection.",
          "type": "string",
          "example": "89218"
        },
        "id": {
          "description": "Id of the the collection.",
          "type": "string",
          "example": "89218"
        },
        "isSystem": {
          "description": "*True* if collection is a system collection.",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "Name of the collection.",
          "type": "string",
          "example": "colltest0127133421258ogefv"
        },
        "globallyUniqueId": {
          "description": "Global unique identifier.",
          "type": "string",
          "example": "h83A7584E8AA9"
        }
      }
    },
    "api_collection_put_properties_http_examples_rc_200": {
      "properties": {
        "hasStream": {
          "description": "*True* if a local stream is associated with the collection.",
          "format": "",
          "type": "boolean"
        },
        "waitForSync": {
          "description": "*True* if waiting for document to be synced to storage.",
          "format": "",
          "type": "boolean"
        }
      },
      "required": [
        "hasStream"
      ],
      "type": "object"
    },
    "fabric_collection_validate": {
      "properties": {
        "isLocal": {
          "description": "If *true*, create a local collection. For a local collection data is not replicated across regions.",
          "type": "boolean",
          "default": false
        },
        "isSystem": {
          "description": "If *true*, create a system collection. The *collection-name* must start with an underscore. Not Applicable for *end-users*.",
          "type": "boolean",
          "default": false
        },
        "keyOptions": {
          "$ref": "#/definitions/fabric_collection_validate_keyoption"
        },
        "name": {
          "description": "The name of the collection.\n\n",
          "type": "string",
          "example": "Test"
        },
        "shardKeys": {
          "description": "In a cluster, this attribute determines which document attributes are used to determine the target shard for documents. Documents are sent to shards based on the values of their shard key attributes. The values of all shard key attributes in a document are hashed, and the hash value is used to determine the target shard.\n\n**Note**: Values of shard key attributes cannot be changed once set.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array",
          "default": [
            "_key"
          ]
        },
        "enableShards": {
          "description": "If *true*, enable sharding for the collection.\n",
          "type": "boolean",
          "default": false
        },
        "type": {
          "description": "The type of the collection to create.\nThe following values for *type* are valid:\n\n- *2*: document collection\n- *3*: edge collection.\n\n",
          "type": "integer",
          "default": 2
        },
        "stream": {
          "description": "If *true*, create a local stream for collection.",
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "fabric_collection_validate_keyoption": {
      "description": "Additional options for key generation. If specified, then *keyOptions* should be a JSON array containing the following attributes:\n\n",
      "properties": {
        "allowUserKeys": {
          "description": "If set to *true*, then it is allowed to supply own key-values in the *_key* attribute of a document. If set to *false*, then the key generator will solely be responsible for generating keys and supplying own key-values in the *_key* attribute of documents is considered an error.\n\n",
          "type": "boolean",
          "example": false
        },
        "increment": {
          "description": "Increment value for *autoincrement* key generator. Not used for other key generator types.\n\n",
          "type": "integer",
          "example": 1
        },
        "offset": {
          "description": "Initial offset value for *autoincrement* key generator. Not used for other key generator types.\n\n",
          "type": "integer",
          "example": 1
        },
        "type": {
          "description": "Specifies the type of the key generator. The currently available generators are *traditional*, *autoincrement*, *uuid* and *padded*.\n\nThe *traditional* key generator generates numerical keys in ascending order.\n\nThe *autoincrement* key generator generates numerical keys in ascending order, the initial offset and the spacing can be configured\n\nThe *padded* key generator generates keys of a fixed length (16 bytes) in ascending lexicographical sort order. \n\nThe *uuid* key generator generates universally unique 128 bit keys, which are stored in hexadecimal human-readable format. This key generator can be used to generate \"seemingly random\" keys. The keys produced by this key generator are not lexicographically sorted.\n\n",
          "type": "string",
          "example": "autoincrement"
        }
      }
    },
    "support_trigger_zendesk_post_rc_400": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 400
        },
        "error": {
          "description": "Flag if there is an error in response. True for this response.",
          "type": "boolean",
          "example": true
        },
        "message": {
          "description": "A message created for this error.",
          "type": "string",
          "example": "Invalid input API request paramaters"
        },
        "requestId": {
          "description": "The requestId generated for the support ticket request.",
          "type": "string",
          "example": "b0d08ea6-efa3-472c-a5f3-5b91558113e8/2"
        },
        "serverId": {
          "description": "The serverId generated for the support ticket request.",
          "type": "string",
          "example": "C8Apid 0.1.39"
        }
      }
    },
    "api_search_post_view_http_examples_rc_201": {
      "properties": {
        "globallyUniqueId": {
          "description": "Gloable Unique identifier of the search view.",
          "type": "string",
          "example": "h83A7584E8AA9/81730851"
        },
        "id": {
          "description": "Unique identifier of the search view.",
          "type": "string",
          "example": "81730851"
        },
        "name": {
          "description": "The name of the search view. This field is immutable.",
          "type": "string",
          "example": "new_collection_view"
        },
        "primarySort": {
          "description": "Specify default sorting order. This field is immutable.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "field": {
                "description": "The name of the field.",
                "type": "string",
                "example": "attribute1"
              },
              "direction": {
                "description": "The sorting direction.",
                "type": "string",
                "example": "asc"
              }
            },
            "default": {}
          },
          "default": []
        },
        "links": {
          "$ref": "#/definitions/post_api_view_links"
        },
        "type": {
          "description": "The type of the search view. must be equal to *search*.",
          "type": "string",
          "default": "search"
        }
      }
    },
    "api_search_get_view_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "hasMore": {
          "description": "*True* if then more results available for the cursor on the server",
          "type": "boolean",
          "example": false
        },
        "count": {
          "description": "Number of matching documents.",
          "type": "number",
          "example": 1
        },
        "cached": {
          "description": "*True* if then indicating whether the query result was served from the query cache or not",
          "type": "boolean",
          "example": false
        },
        "result": {
          "description": "The array of matching documents.",
          "example": [
            {
              "URL": "https://www.macrometa.com/",
              "_id": "server_list/62487646",
              "_key": "62487646",
              "_rev": "_dcf-QQO--_"
            }
          ]
        }
      }
    },
    "api_search_get_views_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "$ref": "#/definitions/api_search_post_view_http_examples_rc_201",
          "type": "array"
        }
      }
    },
    "api_search_view_search": {
      "properties": {
        "collection": {
          "type": "string",
          "example": "my_collection",
          "description": "Collection in which to search.\n\n"
        },
        "search": {
          "type": "string",
          "example": "filter doc.URL== @URL Return doc",
          "description": "C8QL search query, specifying search criteria for the documents in the collection.\n\n"
        },
        "bindVars": {
          "type": "object",
          "example": {
            "URL": "https://www.macrometa.com/"
          },
          "description": "Bind variables for the search query.\n\n"
        },
        "ttl": {
          "type": "integer",
          "example": 60,
          "description": "How long search results should be preserved by the server (in seconds).\n\n"
        }
      },
      "required": [
        "collection",
        "search"
      ],
      "type": "object"
    },
    "api_search_get_analyzer_det_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "The name of analyzer.",
          "type": "string",
          "example": "text_pt"
        },
        "type": {
          "description": "The type of analyzer.",
          "type": "string",
          "example": "text"
        },
        "properties": {
          "description": "The properties of analyzer.",
          "properties": {
            "locale": {
              "description": "The locale for analyzer.",
              "type": "string",
              "example": "pt.utf-8"
            },
            "case": {
              "description": "The character casing for analyzer.",
              "type": "string",
              "example": "upper"
            },
            "stopwords": {
              "description": "The array of specified words to omit from the result.",
              "example": []
            },
            "accent": {
              "description": "*True* then it preserves accented characters",
              "type": "boolean",
              "default": true
            },
            "stemming": {
              "description": "*True* then stem returned words",
              "type": "boolean",
              "default": true
            }
          },
          "type": "object"
        },
        "features": {
          "description": "The array of properties of analyzer.",
          "example": [
            "position",
            "norm"
          ]
        }
      },
      "type": "object"
    },
    "api_search_get_analyzer_http_examples_rc_200": {
      "properties": {
        "name": {
          "description": "The name of analyzer.",
          "type": "string",
          "example": "text_pt"
        },
        "type": {
          "description": "The type of analyzer.",
          "type": "string",
          "example": "text"
        },
        "properties": {
          "description": "The properties of analyzer.",
          "properties": {
            "locale": {
              "description": "The locale for analyzer.",
              "type": "string",
              "example": "pt.utf-8"
            },
            "case": {
              "description": "The character casing for analyzer.",
              "type": "string",
              "example": "upper"
            },
            "stopwords": {
              "description": "The array of specified words to omit from the result.",
              "example": []
            },
            "accent": {
              "description": "*True* then it preserves accented characters",
              "type": "boolean",
              "default": true
            },
            "stemming": {
              "description": "*True* then stem returned words",
              "type": "boolean",
              "default": true
            }
          },
          "type": "object"
        },
        "features": {
          "description": "The array of properties of analyzer.",
          "example": [
            "position",
            "norm"
          ]
        }
      },
      "type": "object"
    },
    "api_search_get_analyzer_http_examples_rc_201": {
      "properties": {
        "name": {
          "description": "The name of analyzer.",
          "type": "string",
          "example": "text_pt"
        },
        "type": {
          "description": "The type of analyzer.",
          "type": "string",
          "example": "text"
        },
        "properties": {
          "description": "The properties of analyzer.",
          "properties": {
            "locale": {
              "description": "The locale for analyzer.",
              "type": "string",
              "example": "pt.utf-8"
            },
            "case": {
              "description": "The character casing for analyzer.",
              "type": "string",
              "example": "upper"
            },
            "stopwords": {
              "description": "The array of specified words to omit from the result.",
              "example": []
            },
            "accent": {
              "description": "*True* then it preserves accented characters",
              "type": "boolean",
              "default": true
            },
            "stemming": {
              "description": "*True* then stem returned words",
              "type": "boolean",
              "default": true
            }
          },
          "type": "object"
        },
        "features": {
          "description": "The array of properties of analyzer.",
          "example": [
            "position",
            "norm"
          ]
        }
      },
      "type": "object"
    },
    "api_search_get_analyzers_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "result": {
          "items": {
            "$ref": "#/definitions/api_search_get_analyzer_http_examples_rc_200"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "api_search_post_analyzer_http_examples_rc_200": {
      "properties": {
        "code": {
          "description": "HTTP response code.",
          "type": "integer",
          "example": 200
        },
        "error": {
          "description": "Flag if there is an error in response. False for this response.",
          "type": "boolean",
          "example": false
        },
        "name": {
          "description": "Name of the removed analyzer.",
          "type": "string",
          "example": "my_custom_analyzer"
        }
      },
      "type": "object"
    },
    "compute_get_config_helper": {
      "type": "object",
      "properties": {
        "_id": {
          "description": "ID of the configmap.",
          "type": "string",
          "example": "_computeConfigMap/test:47c62b6e8c72d4afb0cc3e49a98d3c:sol1-ap-west"
        },
        "_key": {
          "description": "_key details of configmap.",
          "type": "string",
          "example": "test:47c62b6e8c72d4afb0cc3e49a98d3c:sol1-ap-west"
        },
        "_rev": {
          "description": "_rev details of configmap.",
          "type": "string",
          "example": "_dPRuHxe--_"
        },
        "annotations": {},
        "creationTimestamp": {
          "type": "string",
          "description": "Timestamp when configmap created.",
          "example": "2022-02-16T06:55:51.000Z"
        },
        "data": {
          "description": "List of key value pairs present in configmap.",
          "type": "object",
          "example": {
            "id": "1",
            "env": "prod"
          }
        },
        "labels": {},
        "name": {
          "type": "string",
          "description": "Name of the configmap",
          "example": "test"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the configmap",
          "example": "47c62b6e8c72d4afb0cc3e49a98d3c"
        },
        "region": {
          "description": "Region of the configmap.",
          "type": "string",
          "example": "sol1-ap-west"
        },
        "resourceVersion": {
          "type": "string",
          "description": "Resource version of configmap.",
          "example": "120478510"
        },
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": "_mm"
        },
        "uid": {
          "description": "Unique UUID of configmap.",
          "type": "string",
          "example": "3b03d7a0-c962-49e1-9e99-223cfdf1b4"
        }
      }
    },
    "compute_get_secret_helper": {
      "type": "object",
      "properties": {
        "_id": {
          "description": "ID of the configmap.",
          "type": "string",
          "example": "_computeConfigMap/test:47c62b6e8c72d4afb0cc3e49a98d3c:sol1-ap-west"
        },
        "_key": {
          "description": "_key details of configmap.",
          "type": "string",
          "example": "test:47c62b6e8c72d4afb0cc3e49a98d3c:sol1-ap-west"
        },
        "_rev": {
          "description": "_rev details of configmap.",
          "type": "string",
          "example": "_dPRuHxe--_"
        },
        "annotations": {},
        "creationTimestamp": {
          "type": "string",
          "description": "Timestamp when configmap created.",
          "example": "2022-02-16T06:55:51.000Z"
        },
        "data": {
          "description": "List of key value pairs present in configmap.",
          "type": "object",
          "example": {
            ".dockerconfigjson": "174 bytes"
          }
        },
        "labels": {},
        "name": {
          "type": "string",
          "description": "Name of the configmap",
          "example": "test"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace of the configmap",
          "example": "47c62b6e8c72d4afb0cc3e49a98d3c"
        },
        "region": {
          "description": "Region of the configmap.",
          "type": "string",
          "example": "sol1-ap-west"
        },
        "resourceVersion": {
          "type": "string",
          "description": "Resource version of configmap.",
          "example": "120478510"
        },
        "tenant": {
          "description": "Name of the tenant.",
          "type": "string",
          "example": "_mm"
        },
        "uid": {
          "description": "Unique UUID of configmap.",
          "type": "string",
          "example": "3b03d7a0-c962-49e1-9e99-223cfdf1b4"
        }
      }
    },
    "compute_get_secrets_rc_200": {
      "description": "List of configmaps.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/compute_get_secret_helper"
      }
    },
    "compute_get_configs_rc_200": {
      "description": "List of configmaps.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/compute_get_config_helper"
      }
    },
    "compute_revision_helper": {
      "type": "object",
      "properties": {
        "_id": {
          "description": "ID of the revision.",
          "type": "string",
          "example": "_computeRevision/apitestdemo-00001:47c62b6e8c72d4afb0cc3e49a98d3c9f:sol1-ap-west"
        },
        "_key": {
          "description": "_key details of revision.",
          "type": "string",
          "example": "apitestdemo-00001:47c62b6e8c72d4afb0cc3e49a98d3c9f:sol1-ap-west"
        },
        "_rev": {
          "description": "_rev details of revision.",
          "type": "string",
          "example": "_duFJppC--_"
        },
        "conditions": {
          "type": "array",
          "items": {
            "description": "Condition object.",
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time",
                "example": "2022-02-15T12:31:34Z"
              },
              "message": {
                "type": "string",
                "example": "Requests to the target are being buffered as resources are provisioned."
              },
              "reason": {
                "type": "string",
                "example": "Queued"
              },
              "severity": {
                "type": "string",
                "example": "Info"
              },
              "status": {
                "type": "string",
                "example": "Unknown"
              },
              "type": {
                "type": "string",
                "example": "Active"
              }
            }
          }
        },
        "metadata": {
          "description": "Metadata information.",
          "type": "object",
          "properties": {
            "annotations": {
              "type": "object",
              "properties": {
                "autoscaling.compute.dev/class": {
                  "type": "string",
                  "example": "kpa.autoscaling.compute.dev"
                },
                "autoscaling.compute.dev/minScale": {
                  "type": "string",
                  "example": "1"
                },
                "serving.compute.dev/creator": {
                  "type": "string",
                  "example": "system:serviceaccount:c8:c8compute"
                },
                "serving.compute.dev/routes": {
                  "type": "string",
                  "example": "apitestdemo"
                },
                "serving.compute.dev/routingStateModified": {
                  "type": "string",
                  "format": "date-time",
                  "example": "2022-02-15T12:31:23Z"
                }
              }
            },
            "creationTimestamp": {
              "type": "string",
              "format": "date-time",
              "example": "2022-02-15T12:31:23Z"
            },
            "generation": {
              "type": "number",
              "example": "1"
            },
            "resourceVersion": {
              "type": "string",
              "example": "119984683"
            },
            "uid": {
              "type": "string",
              "example": "7685e310-9714-4a11-992f-d9e3e916898d"
            }
          }
        },
        "name": {
          "description": "Name of the revision.",
          "type": "string",
          "example": "apitestdemo-00001"
        },
        "namespace": {
          "description": "Namespace of the revision.",
          "type": "string",
          "example": "47c62b6e8c72d4afb0cc3e49a98d3c9f"
        },
        "observedGeneration": {
          "type": "number",
          "example": "1"
        },
        "ready": {
          "type": "string",
          "example": "False"
        },
        "region": {
          "description": "Region of the configmap.",
          "type": "string",
          "example": "sol1-ap-west"
        },
        "service": {
          "description": "Service name of the revision.",
          "type": "string",
          "example": "apitestdemo"
        },
        "spec": {
          "type": "object",
          "properties": {
            "containerConcurrency": {
              "type": "number",
              "example": "0"
            },
            "containers": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "image": {
                    "type": "string",
                    "example": "tusharspawar/ott-microservice:latest"
                  },
                  "imagePullPolicy": {
                    "type": "string",
                    "example": "Always"
                  },
                  "name": {
                    "type": "string",
                    "example": "user-container"
                  },
                  "ports": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "containerPort": {
                          "type": "number",
                          "example": "65535"
                        },
                        "protocol": {
                          "type": "string",
                          "example": "TCP"
                        }
                      }
                    }
                  },
                  "readinessProbe": {
                    "type": "object",
                    "properties": {
                      "successThreshold": {
                        "type": "number",
                        "example": "1"
                      },
                      "tcpSocket": {
                        "type": "object",
                        "properties": {
                          "port": {
                            "type": "number",
                            "example": "0"
                          }
                        }
                      }
                    }
                  },
                  "resources": {
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string",
                            "example": "100m"
                          },
                          "memory": {
                            "type": "string",
                            "example": "100Mi"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string",
                            "example": "50m"
                          },
                          "memory": {
                            "type": "string",
                            "example": "50Mi"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "enableServiceLinks": {
              "type": "boolean"
            },
            "serviceAccountName": {
              "type": "string",
              "example": "47c62b6e8c72d4afb0cc3e49a98d3c9f-user"
            },
            "timeoutSeconds": {
              "type": "number",
              "example": "300"
            }
          }
        },
        "watchTimestamp": {
          "type": "number",
          "example": "1645002600108"
        },
        "percent": {
          "type": "number",
          "example": "0"
        },
        "tags": {
          "description": "Revision tags.",
          "default": []
        }
      }
    },
    "compute_get_revisions_rc_200": {
      "description": "Array of revisions.",
      "items": {
        "$ref": "#/definitions/compute_revision_helper"
      },
      "type": "array"
    },
    "compute_route_helper": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "_computeRoute/apitestdemo:47c62b6e8c72d4afb0cc3e49a98d3c9f:sol1-ap-west"
        },
        "_key": {
          "type": "string",
          "example": "apitestdemo:47c62b6e8c72d4afb0cc3e49a98d3c9f:sol1-ap-west"
        },
        "_rev": {
          "type": "string",
          "example": "_duFfwPa--_"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time",
                "example": "2022-02-16T09:34:08Z"
              },
              "message": {
                "type": "string",
                "example": "Configuration apitestdemo does not have any ready Revision."
              },
              "reason": {
                "type": "string",
                "example": "RevisionMissing"
              },
              "status": {
                "type": "string",
                "example": "False"
              },
              "type": {
                "type": "string",
                "example": "AllTrafficAssigned"
              }
            }
          }
        },
        "metadata": {
          "type": "object",
          "properties": {
            "creationTimestamp": {
              "type": "string",
              "format": "date-time",
              "example": "2022-02-15T12:31:23Z"
            },
            "generation": {
              "type": "number",
              "example": "1"
            },
            "resourceVersion": {
              "type": "string",
              "example": "120549087"
            },
            "uid": {
              "type": "string",
              "example": "6a79e1ce-a0d7-46f9-be3d-c828495a2cd5"
            }
          }
        },
        "name": {
          "type": "string",
          "example": "apitestdemo"
        },
        "namespace": {
          "type": "string",
          "example": "47c62b6e8c72d4afb0cc3e49a98d3c9f"
        },
        "observedGeneration": {
          "type": "number",
          "example": "1"
        },
        "region": {
          "type": "string",
          "example": "sol1-ap-west"
        },
        "url": {
          "type": "string",
          "example": "http://apitestdemo.47c62b6e8c72d4afb0cc3e49a98d3c9f.sol1-ap-west-eng.macrometa.io"
        },
        "watchTimestamp": {
          "type": "number",
          "example": "1645004048659"
        }
      }
    },
    "compute_get_route_rc_200": {
      "description": "Array of routes.",
      "items": {
        "$ref": "#/definitions/compute_route_helper"
      },
      "type": "array"
    },
    "compute_get_service_rc_200": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "_computeService/apitestdemo:47c62b6e8c72d4afb0cc3e49a98d3c9f:sol1-ap-west"
        },
        "_key": {
          "type": "string",
          "example": "apitestdemo:47c62b6e8c72d4afb0cc3e49a98d3c9f:sol1-ap-west"
        },
        "_rev": {
          "type": "string",
          "example": "_duC3Kq---_"
        },
        "conditions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time",
                "example": "2022-02-15T12:31:34Z"
              },
              "status": {
                "type": "string",
                "example": "Unknown"
              },
              "type": {
                "type": "string",
                "example": "ConfigurationsReady"
              }
            }
          }
        },
        "latestCreatedRevisionName": {
          "type": "string",
          "example": "apitestdemo-00001"
        },
        "metadata": {
          "type": "object",
          "properties": {
            "annotations": {
              "type": "object",
              "properties": {
                "serving.compute.dev/creator": {
                  "type": "string",
                  "example": "system:serviceaccount:c8:c8compute"
                },
                "serving.compute.dev/lastModifier": {
                  "type": "string",
                  "example": "system:serviceaccount:c8:c8compute"
                }
              }
            },
            "creationTimestamp": {
              "type": "string",
              "format": "date-time",
              "example": "2022-02-15T12:31:23Z"
            },
            "generation": {
              "type": "number",
              "example": "1"
            },
            "resourceVersion": {
              "type": "string",
              "example": "119984678"
            },
            "uid": {
              "type": "string",
              "example": "94abc304-4df2-4821-8511-7291b8eae359"
            }
          }
        },
        "name": {
          "type": "string",
          "example": "apitestdemo"
        },
        "namespace": {
          "type": "string",
          "example": "47c62b6e8c72d4afb0cc3e49a98d3c9f"
        },
        "observedGeneration": {
          "type": "number",
          "example": "1"
        },
        "ready": {
          "type": "string",
          "example": "False"
        },
        "region": {
          "type": "string",
          "example": "sol1-ap-west"
        },
        "spec": {
          "type": "object",
          "properties": {
            "template": {
              "type": "object",
              "properties": {
                "metadata": {
                  "type": "object",
                  "properties": {
                    "annotations": {
                      "type": "object",
                      "properties": {
                        "autoscaling.compute.dev/class": {
                          "type": "string",
                          "example": "kpa.autoscaling.compute.dev"
                        },
                        "autoscaling.compute.dev/minScale": {
                          "type": "string",
                          "example": "1"
                        }
                      }
                    },
                    "creationTimestamp": {
                      "type": "string",
                      "format": "nullable"
                    }
                  }
                },
                "spec": {
                  "type": "object",
                  "properties": {
                    "containerConcurrency": {
                      "type": "number",
                      "example": "0"
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "image": {
                            "type": "string",
                            "example": "tusharspawar/ott-microservice:latest"
                          },
                          "imagePullPolicy": {
                            "type": "string",
                            "example": "Always"
                          },
                          "name": {
                            "type": "string",
                            "example": "user-container"
                          },
                          "ports": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "containerPort": {
                                  "type": "number",
                                  "example": "65535"
                                },
                                "protocol": {
                                  "type": "string",
                                  "example": "TCP"
                                }
                              }
                            }
                          },
                          "readinessProbe": {
                            "type": "object",
                            "properties": {
                              "successThreshold": {
                                "type": "number",
                                "example": "1"
                              },
                              "tcpSocket": {
                                "type": "object",
                                "properties": {
                                  "port": {
                                    "type": "number",
                                    "example": "0"
                                  }
                                }
                              }
                            }
                          },
                          "resources": {
                            "type": "object",
                            "properties": {
                              "limits": {
                                "type": "object",
                                "properties": {
                                  "cpu": {
                                    "type": "string",
                                    "example": "100m"
                                  },
                                  "memory": {
                                    "type": "string",
                                    "example": "100Mi"
                                  }
                                }
                              },
                              "requests": {
                                "type": "object",
                                "properties": {
                                  "cpu": {
                                    "type": "string",
                                    "example": "50m"
                                  },
                                  "memory": {
                                    "type": "string",
                                    "example": "50Mi"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "enableServiceLinks": {
                      "type": "boolean"
                    },
                    "serviceAccountName": {
                      "type": "string",
                      "example": "47c62b6e8c72d4afb0cc3e49a98d3c9f-user"
                    },
                    "timeoutSeconds": {
                      "type": "number",
                      "example": "300"
                    }
                  }
                }
              }
            },
            "traffic": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "latestRevision": {
                    "type": "boolean"
                  },
                  "percent": {
                    "type": "number",
                    "example": "100"
                  }
                }
              }
            }
          }
        },
        "url": {
          "type": "string",
          "example": "http://apitestdemo.47c62b6e8c72d4afb0cc3e49a98d3c9f.sol1-ap-west-eng.macrometa.io"
        },
        "watchTimestamp": {
          "type": "number",
          "example": "1644993000126"
        }
      }
    },
    "compute_get_services_rc_200": {
      "description": "Array of services.",
      "items": {
        "$ref": "#/definitions/compute_get_service_rc_200"
      },
      "type": "array"
    }
  },
  "info": {
    "description": "Macrometa Global Data Network API.",
    "license": {
      "name": "Macrometa License, Version 2.0"
    },
    "title": "Macrometa GDN API",
    "version": ""
  },
  "paths": {
    "/_api/key/validate": {
      "post": {
        "description": "Requires a JSON object with these properties:\n\n  - **apikey**: The API key as a string.\n  Requires administrator permissions.\n\n  - **jwt**: The JWT token as a string.\n  Requires administrator permissions.",
        "operationId": "ValidateApiKey",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apikey_validate"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "200": {
            "description": "API key is valid.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "An array of API keys with details as keyid, user name and tenant name.",
                  "items": {
                    "properties": {
                      "keyid": {
                        "description": "Keyid of the API key.",
                        "type": "string",
                        "example": "test"
                      },
                      "parent": {
                        "description": "Name of the parent.",
                        "type": "string",
                        "example": "root"
                      },
                      "tenant": {
                        "description": "Name of the tenant.",
                        "type": "string",
                        "example": "_mm"
                      },
                      "limitRequestsPerSec": {
                        "description": "Maximum request limit.",
                        "type": "integer",
                        "example": "0"
                      }
                    }
                  },
                  "type": "array"
                }
              },
              "required": [
                "error"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Validate API Key",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key": {
      "post": {
        "description": "Requires a JSON object with these properties:\n\n  - **keyid**: The id of the API key.\nYou can create API keys only for yourself.",
        "operationId": "CreateApiKey",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apikey_create"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully added API key.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "API key already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create API Key",
        "tags": [
          "API Keys"
        ]
      },
      "get": {
        "description": "Fetches data about all API keys.  You can only list your API keys.\n\nThe call returns a JSON object with at least the following attributes on success:\n\n- *keyid*: The id of the API key as a string.\n- *parent*: The user to who this API key belongs.\n- *tenant*: The API key tenant.",
        "operationId": "ListAvailableApiKeys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found API keys.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "List available API keys",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}": {
      "get": {
        "description": "Fetches an existing API key, identified by *keyid*.  You can only get your API keys.\n\nThe call returns a JSON object with at least the following attributes on success:\n\n- *keyid*: The id of the API key.\n- *parent*: The user to who this API key belongs.\n- *tenant*: The API key tenant.",
        "operationId": "GetAvailableApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found API key.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_200_0"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get available API key.",
        "tags": [
          "API Keys"
        ]
      },
      "delete": {
        "description": "Removes an existing API key, identified by *keyid*.  You can only remove your API keys.",
        "operationId": "RemoveApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed API key.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_202"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove API Key.",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/database": {
      "get": {
        "description": "Fetch the list of databases available to the specified *keyid*. This call requires *Administrate* server access.\n\nReturns a JSON object with the per-database access privileges for the specified *keyid*. The result object contains databases names as object keys, and associated privileges for the database as values.\n\nIf you specified *full*, the result contains permissions for the databases as well as permissions for the collections and streams.",
        "operationId": "ListTheAccessibleDatabasesForApiKey",
        "parameters": [
          {
            "description": "The id of the API key for which you want to query the databases.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return the full set of access levels for all databases and all collections.",
            "in": "query",
            "name": "full",
            "default": false,
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found list of databases.",
            "schema": {
              "$ref": "#/definitions/api_key_get_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List the accessible databases for a keyid",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/database/{dbname}": {
      "get": {
        "description": "\nFetch the database access level for a specific database.\n\n",
        "operationId": "GetTheDatabaseAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database to query.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found access level.",
            "schema": {
              "$ref": "#/definitions/api_key_dbname_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the database access level",
        "tags": [
          "API Keys"
        ]
      },
      "delete": {
        "description": "Clears the database access level for the database *dbname* of API key with *keyid*. Reverts to default database access level. If there is no defined default database access level, it defaults to *No access*. This call requires *_system* database permissions.",
        "operationId": "ClearTheDatabaseAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared access level.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Clear the database access level",
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Requires a JSON object with these properties:\n\n  - **grant**: Use \"rw\" to set the database access level to *Administrate*.\n   Use \"ro\" to set the database access level to *Access*.\n   Use \"none\" to set the database access level to *No access*.\n\nSets the database access levels for the database *dbname* of API key with *keyid*. This call requires *Administrate* server access.",
        "operationId": "SetTheDatabaseAccessLevelForApiKey",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_database"
            },
            "x-description-offset": 54
          },
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed access level.",
            "schema": {
              "$ref": "#/definitions/api_key_put_dbname_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the database access level",
        "tags": [
          "API Keys"
        ],
        "x-examples": []
      }
    },
    "/_api/key/{keyid}/database/{dbname}/collection": {
      "get": {
        "description": "Fetch the list of collections access level for a specific *user*\n\n If access level for collection is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then database access level is used.",
        "operationId": "GetTheApiKeyCollectionsAccessLevel",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database to query.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return the full set of access levels for all collections.",
            "in": "query",
            "name": "full",
            "default": false,
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found access level.",
            "schema": {
              "$ref": "#/definitions/api_key_database_collection_get_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the specific collection access level",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/database/{dbname}/collection/{collection}": {
      "get": {
        "description": "Returns the access level for a specific collection.\n\n If access level for collection is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then database access level is used.",
        "operationId": "GetTheSpecificCollectionAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database to query.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found access level.",
            "schema": {
              "$ref": "#/definitions/api_key_dbname_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the specific collection access level",
        "tags": [
          "API Keys"
        ]
      },
      "delete": {
        "description": "Clears the access level for the collection *collection* in the database *dbname* of API key with *keyid*.  Reverts to default collection access level. If there is no defined default collection access level, it defaults to *No access*.  This call requires *_system* database permissions.",
        "operationId": "ClearTheCollectionAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared access level.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Clear the collection access level.",
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Requires a JSON object with these properties:\n\n  - **grant**: Use \"rw\" to set the collection level access to *Read/Write*. Use \"ro\" to set the collection level access to  *Read Only*. Use \"none\" to set the collection level access to *No access*.\n\n - **collection**: Use \"&#42;\" to set default access level for all collections.\n\nIf access level for collection is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then database access level is used.\n\nSets the collection access level for the *collection* in the database *dbname* for API key with *keyid*. This call requires *Administrate* server access.",
        "operationId": "SetTheCollectionAccessLevelForApiKey",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_collection"
            },
            "x-description-offset": 54
          },
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "default": "*",
            "name": "collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed access level.",
            "schema": {
              "$ref": "#/definitions/api_key_dbname_collection_put_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the collection access level",
        "tags": [
          "API Keys"
        ],
        "x-examples": []
      }
    },
    "/_api/key/{keyid}/database/{dbname}/stream": {
      "get": {
        "description": "Fetch the list of streams available to the specified *keyid*. This call requires *Administrate* server access.\nThe call returns a JSON object with the per-stream access privileges for the specified keyid. The *result* object contains the stream names as object keys and the associated privileges for the stream as values.\n\n If access level for stream is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then database access level is used.",
        "operationId": "ListTheAccessibleStreamsForApiKey",
        "parameters": [
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the API key for which you want to query the streams.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return the full set of access levels for all streams.",
            "in": "query",
            "name": "full",
            "default": false,
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found streams.",
            "schema": {
              "$ref": "#/definitions/api_key_database_stream_get_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List the accessible streams",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/database/{dbname}/stream/{stream}": {
      "get": {
        "description": "Fetch the stream access level for a specific stream.",
        "operationId": "GetTheStreamAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key for which you want to query the streams.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the stream to query.",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found access level.",
            "schema": {
              "$ref": "#/definitions/api_key_dbname_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the stream access level",
        "tags": [
          "API Keys"
        ]
      },
      "delete": {
        "description": "Clears the stream access level for the *stream* of API key with *keyid*. Reverts to default stream access level. If there is no defined default stream access level, it defaults to *No access*.",
        "operationId": "ClearTheStreamAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the stream.",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared access level.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Clear the stream access level",
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Requires a JSON object with these properties:\n\n  - **grant**: Use \"ro\" to set the stream access level to Subscribe.\n   Use \"wo\" to set the stream access level to Publish.\n Use \"rw\" to set the stream access level to Publish and Subscribe.\n  Use \"none\" to set the stream access level to *No access*.\n\n - **stream**: Use \"&#42;\" to set default access level for all streams.\n\nIf access level for stream is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then database access level is used.\n\n Sets the stream access levels for the *stream* of API key with *keyid*. This call requires *Administrate* server access.",
        "operationId": "SetTheStreamAccessLevelForApiKey",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_database"
            },
            "x-description-offset": 54
          },
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "dbname",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the stream.",
            "format": "string",
            "in": "path",
            "default": "*",
            "name": "stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed access level.",
            "schema": {
              "$ref": "#/definitions/api_key_dbname_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the stream access level",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/billing": {
      "get": {
        "description": "\nFetch the billing access level.\n\n",
        "operationId": "GetTheBillingAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key for which you want to query the billing access level.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found access level.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_200_billing"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the billing access level",
        "tags": [
          "API Keys"
        ]
      },
      "delete": {
        "description": "Clears the billing access level of *keyid*.",
        "operationId": "ClearTheBillingAccessLevelForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.\n\n",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared access level.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Clear the billing access level",
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Requires a JSON object with these properties:\n\n  - **grant**: Use \"rw\" to set the billing access level to *Administrate*.\n   Use \"ro\" to set the billing access level to *Access*.\n   Use \"none\" to set the billing access level to *No access*.\n\nSets the billing access levels for API key with *keyid*. This call requires *Administrate* server access.",
        "operationId": "SetTheBillingAccessLevelForApiKey",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_database"
            },
            "x-description-offset": 54
          },
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed access level.",
            "schema": {
              "$ref": "#/definitions/api_key_dbname_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the billing access level",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/attributes": {
      "get": {
        "description": "\nFetch the list of attributes for the specified *keyid*.",
        "operationId": "GetTheAttributesForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found attributes.",
            "schema": {
              "$ref": "#/definitions/http_examples_rc_200_attributes"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the API key attributes",
        "tags": [
          "API Keys"
        ]
      },
      "put": {
        "description": "Requires a JSON object with key-value pairs.\n\nThis call requires *Administrate* server access.",
        "operationId": "UpdateTheAttributesForApiKey",
        "parameters": [
          {
            "description": "The id of the API key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute_values"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully changed attributes.",
            "schema": {
              "$ref": "#/definitions/http_examples_rc_200_attributes"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Update attributes",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/attributes/truncate": {
      "delete": {
        "description": "Remove all attributes from *keyid*.",
        "operationId": "ClearAllAttributesForApiKey",
        "parameters": [
          {
            "description": "The id of the api key.",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed attributes.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove all attributes",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_api/key/{keyid}/attributes/{attributeid}": {
      "delete": {
        "description": "Remove the attribute from *keyid*.",
        "operationId": "ClearTheAttributesForApiKey",
        "parameters": [
          {
            "description": "The id of the api key.\n\n",
            "format": "string",
            "in": "path",
            "name": "keyid",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "attributeid",
            "required": true,
            "default": "attributeid",
            "type": "string",
            "format": "string",
            "description": "Attribute id."
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed attribute.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified API key.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove attribute",
        "tags": [
          "API Keys"
        ]
      }
    },
    "/_open/auth": {
      "post": {
        "description": "Obtain a JWT Authentication for a user. After obtaining the token, REST API\ncalls may be invoked by passing the obtained token in the REST header.\nEither email or both tenant and username are required.\nAdd the following to your header when you make REST calls:\n*\"Authorization: bearer TOKEN\"*\n\n\nA JSON object with these properties is required:\n\n  - **username**: Name of the user for whom we want the auth token.\n  - **password**: User password as a string. \n  - **email**: Email of the user for whom we want the auth token.\n  - **tenant**: Name of the tenant for whose user we want the auth token.",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/auth_token"
            },
            "x-description-offset": 355
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created token.",
            "schema": {
              "$ref": "#/definitions/authentication_examples_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "429": {
            "description": "Requests count from this IP exceeds the rate limit.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 429
                },
                "error": {
                  "description": "Flag if there is an error in response. True for this response.",
                  "type": "boolean",
                  "example": true
                },
                "errorMessage": {
                  "description": "A message created for this error.",
                  "type": "string",
                  "example": "Error message"
                },
                "errorNum": {
                  "description": "Error number returned from the database.",
                  "type": "integer",
                  "example": "102020"
                }
              }
            }
          }
        },
        "summary": "Obtain JWT Authentication token for user.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv/{collection}/count": {
      "get": {
        "description": "Get number of key-value pairs in collection.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned number of key-value pairs.",
            "schema": {
              "$ref": "#/definitions/kv_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified fabric or collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get number of key-value pairs in collection",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv/{collection}/keys": {
      "get": {
        "description": "Get keys from key-value collection.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          },
          {
            "description": "This option simulates paging.",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "type": "string"
          },
          {
            "description": "This option limits results while simulating paging.  Use with offset.",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 20,
            "maximum": 100,
            "type": "string"
          },
          {
            "description": "Order the results ascending (asc) or descending (desc).",
            "in": "query",
            "name": "order",
            "required": false,
            "default": "asc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the key-value keys.",
            "schema": {
              "$ref": "#/definitions/kv_array_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified fabric or collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Gets keys from key-value collection",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv": {
      "get": {
        "description": "\nLists all key-value collections.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all key-value collection with expiration details.",
            "schema": {
              "$ref": "#/definitions/keys_array_rc_200_1"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Lists all key-value collections",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv/{collection}": {
      "post": {
        "description": "Create key-value collection.",
        "operationId": "CreateNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          },
          {
            "description": "Enable TTL support.",
            "in": "query",
            "name": "expiration",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "description": "A JSON object with these optional properties:\n\n - **stream**: *True* if creating a stream with this collection.\n - **enableShards**: *True* if enabling sharding\n - **waitForSync**: *True* if enabling waitForSync\n - **shardKeys**: an array of shard keys",
            "schema": {
              "properties": {
                "stream": {
                  "description": "Flag for on-demand stream collection",
                  "type": "boolean",
                  "example": false
                },
                "enableShards": {
                  "description": "Enabling sharding for the collection",
                  "type": "boolean",
                  "example": false
                },
                "waitForSync": {
                  "description": "If true, Wait until document has been synced to disk.",
                  "type": "boolean",
                  "example": true
                },
                "shardKeys": {
                  "type": "array",
                  "items": {
                    "description": "Array of shard keys",
                    "type": "string",
                    "example": "key1"
                  }
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully created key-value collection.",
            "schema": {
              "$ref": "#/definitions/kv_collection_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified fabric or collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "409": {
            "description": "Failed if collection with the same name already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          },
          "429": {
            "description": "Collection count exceeds the maximum number of collections per fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_429"
            }
          }
        },
        "summary": "Create key-value collection",
        "tags": [
          "Key Value"
        ]
      },
      "delete": {
        "description": "Remove key-value collection.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed the collection.",
            "schema": {
              "$ref": "#/definitions/kv_collection_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove key-value collection",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv/{collection}/value/{key}": {
      "get": {
        "description": "Get value from key-value collection.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.",
            "default": "_system"
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          },
          {
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The key."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the key-value pair.",
            "schema": {
              "$ref": "#/definitions/kv_key_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified key-value pair.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get value from key-value collection",
        "tags": [
          "Key Value"
        ]
      },
      "delete": {
        "description": "Remove key-value pair.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          },
          {
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The key."
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed key-value pair.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev"
            }
          },
          "404": {
            "description": "Failed to find specified key-value pair.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove key-value pair",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv/{collection}/values": {
      "post": {
        "description": "Get key-value pairs from collection.\nOptional list of keys.  Max limit is 100 keys per request.",
        "operationId": "GetValues",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          },
          {
            "description": "This option can be used to simulate paging.",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "type": "string"
          },
          {
            "description": "This option can be used to simulate paging. Limit the result.",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 20,
            "maximum": 100,
            "type": "string"
          },
          {
            "description": "An optional JSON array of keys.",
            "in": "body",
            "name": "JSON Body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/keys_array"
            },
            "x-description-offset": 0
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully returned an array of key-value pairs from collection.  If no keys are found and empty array is returned.",
            "schema": {
              "$ref": "#/definitions/kv_get_values_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified key-value pair.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get key-value pairs from collection",
        "tags": [
          "Key Value"
        ]
      },
      "delete": {
        "description": "Remove key-value pairs. Requires a list of keys.  Max limit is 1000 keys per request.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          },
          {
            "description": "A JSON array of keys.",
            "in": "body",
            "name": "JSON Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/keys_array"
            },
            "x-description-offset": 0
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed key-value pairs.",
            "schema": {
              "items": {
                "properties": {
                  "_id": {
                    "description": "ID of the collection.",
                    "type": "string",
                    "example": "test/foo"
                  },
                  "_key": {
                    "description": "_key details of collection.",
                    "type": "string",
                    "example": "foo"
                  },
                  "_rev": {
                    "description": "_rev details of collection.",
                    "type": "string",
                    "example": "_dPRuHxe--_"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed to find specified fabric, collection or key-value pair.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove key-value pairs.",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv/{collection}/value": {
      "put": {
        "description": "Set one or more key-value pairs in key-value collection. \nIf the input is an array of objects then key-value pairs are created in batch.\nIf the key does not exist the key-value pairs are created.  Otherwise the entry for the key is updated.\nSpecify expiration in UTC timestamp.\n\n**Note:** \n  Max limit is **100** key-value pairs per request.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection\n"
          },
          {
            "description": "A JSON object of a single document or of an array of documents.\n\nFields:\n* \"_key\" - if it is not set, it is generated by the system\n* \"value\" - string or JSON object. Required.\n* \"expireAt\" - UNIX timestamp, indicating when the value expires (-1 means no expiration)",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/key_value_array"
            },
            "x-description-offset": 0
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully updated key-value pair.",
            "schema": {
              "items": {
                "properties": {
                  "_id": {
                    "description": "ID of the collection.",
                    "type": "string",
                    "example": "test/foo"
                  },
                  "_key": {
                    "description": "_key details of collection.",
                    "type": "string",
                    "example": "foo"
                  },
                  "_rev": {
                    "description": "updated _rev details of collection.",
                    "type": "string",
                    "example": "_dPSbTGC---"
                  },
                  "_oldrev": {
                    "description": "prvious _rev details of collection.",
                    "type": "string",
                    "example": "_dPRuHxe--_"
                  }
                },
                "type": "object"
              }
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set one or more key-value pairs in key-value collection",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_fabric/{fabric}/_api/kv/{collection}/truncate": {
      "put": {
        "description": "Remove all key-value pairs in a collection.",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the key-value collection."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed all key-value entries.",
            "schema": {
              "$ref": "#/definitions/kv_collection_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified fabric or collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove all key-value pairs in a collection",
        "tags": [
          "Key Value"
        ]
      }
    },
    "/_api/dynamo": {
      "post": {
        "description": "Dynamo-like API interface.\n\nSet your JWT token or APIKEY as a aws_access_key_id (ex. '*bearer XXXXX*' or '*apikey XXXXX*').\n\nCurrently supported Dynamo actions (set as *'x-amz-target'* header tag): \n\n  - **CreateTable**\n  - **CreateGlobalTable**\n  - **DeleteItem**\n  - **DeleteTable**\n  - **DescribeGlobalTable**\n  - **DescribeTable**\n  - **DescribeTimeToLive**\n  - **GetItem**\n  - **ListGlobalTables**\n  - **ListTables**\n  - **PutItem**\n  - **Query**\n  - **UpdateItem**\n  - **UpdateTable**\n  - **UpdateTimeToLive**\n  - **Scan**\n  - **BatchGetItem**\n  - **BatchWriteItem**",
        "operationId": "DynamoLikeInterfaceAPI",
        "parameters": [
          {
            "description": "Dynamo actions",
            "format": "string",
            "in": "header",
            "name": "x-amz-target",
            "required": true,
            "type": "string"
          },
          {
            "description": "The body depends on the action.",
            "in": "body",
            "name": "JSON Request Body",
            "required": false,
            "schema": {
              "properties": {
                "AttributeDefinitions": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "AttributeName": {
                        "type": "string"
                      },
                      "AttributeType": {
                        "type": "string"
                      }
                    }
                  }
                },
                "TableName": {
                  "type": "string"
                },
                "KeySchema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "AttributeName": {
                        "type": "string"
                      },
                      "KeyType": {
                        "type": "string"
                      }
                    }
                  }
                },
                "ProvisionedThroughput": {
                  "properties": {
                    "ReadCapacityUnits": {
                      "type": "number"
                    },
                    "WriteCapacityUnits": {
                      "type": "number"
                    }
                  }
                }
              },
              "example": {
                "AttributeDefinitions": [
                  {
                    "AttributeName": "Artist",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "SongTitle",
                    "AttributeType": "S"
                  }
                ],
                "TableName": "Music",
                "KeySchema": [
                  {
                    "AttributeName": "Artist",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "SongTitle",
                    "KeyType": "RANGE"
                  }
                ],
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 5
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned after execution.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "Result will be based on Dynamo actions given in JSON body.",
                  "type": "object",
                  "properties": {
                    "TableDescription": {
                      "type": "object",
                      "properties": {
                        "AttributeDefinitions": {
                          "type": "array",
                          "items": {
                            "properties": {
                              "AttributeName": {
                                "type": "string"
                              },
                              "AttributeType": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "TableName": {
                          "type": "string"
                        },
                        "KeySchema": {
                          "type": "array",
                          "items": {
                            "properties": {
                              "AttributeName": {
                                "type": "string"
                              },
                              "KeyType": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "TableStatus": {
                          "type": "string"
                        },
                        "CreationDateTime": {
                          "type": "number"
                        },
                        "TableSizeBytes": {
                          "type": "number"
                        },
                        "ItemCount": {
                          "type": "number"
                        }
                      }
                    }
                  },
                  "example": {
                    "TableDescription": {
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "Artist",
                          "AttributeType": "S"
                        },
                        {
                          "AttributeName": "SongTitle",
                          "AttributeType": "S"
                        }
                      ],
                      "TableName": "Music",
                      "KeySchema": [
                        {
                          "AttributeName": "Artist",
                          "KeyType": "HASH"
                        },
                        {
                          "AttributeName": "SongTitle",
                          "KeyType": "RANGE"
                        }
                      ],
                      "TableStatus": "ACTIVE",
                      "CreationDateTime": 1637001376,
                      "TableSizeBytes": 0,
                      "ItemCount": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Dynamo-like API interface",
        "tags": [
          "Dynamo"
        ]
      }
    },
    "/_fabric/{fabric}/_api/document/{collection}": {
      "delete": {
        "description": "The body of the request is an array consisting of selectors for documents. A selector can either be a string with a key or a string with a document handle or an object with a *_key* attribute. \n\nThis API call removes all specified documents from *collection*. If the selector is an object and has a *_rev* attribute, it is a precondition that the actual revision of the removed document in the collection is the specified one.\n\nThe body of the response is an array of the same length as the input array. For each input selector, the output contains a JSON object with the information about the outcome of the operation. If no error occurred, an object is built in which the attribute *_id* contains the known *document-handle* of the removed document, *_key* contains the key which uniquely identifies a document in a given collection, and the attribute *_rev* contains the document revision. \n\nIn case of an error, an object with the attribute *error* set to *true* and *errorCode* set to the error code is built. If the query parameter *returnOld* is *true*, then the previous revision of the document is returned under the *old* attribute in the result.\n\nNote that if any precondition is violated or an error occurred with some of the documents, the return code is still 200 or 202, but the additional HTTP header *X-C8-Error-Codes* is set, which contains a map of the error codes that occurred together with their multiplicities, as in: *1200:17,1205:10* which means that in 17 cases the error 1200 \"revision conflict\" and in 10 cases the error 1205 \"illegal document handle\" has happened.",
        "operationId": "removeDocument",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "description": "An array of keys or documents.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "key"
              }
            }
          },
          {
            "description": "Collection from which documents are removed.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to *true*, adds the *old* attribute which displays original document.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, ignore any *_rev* attribute in the selectors. No revision check is performed.",
            "in": "query",
            "name": "ignoreRevs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, returns only after data has been synced to disk.",
            "in": "query",
            "name": "waitForSync",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed documents and *waitForSync* is *true*.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If any precondition is violated or an error occurred with some of the documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "202": {
            "description": "Successfully removed documents and *waitForSync* is *false*.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If any precondition is violated or an error occurred with some of the documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "404": {
            "description": "Failed to find specified documents.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Removes multiple documents",
        "tags": [
          "Documents"
        ]
      },
      "patch": {
        "description": "Partially updates documents. The *_key* attributes in the body specify which documents should be updated. The body of the request must contain a JSON array of document updates with the attributes to patch (the patch documents). All attributes from the patch documents are added to the existing documents if they do not yet exist and overwritten in the existing documents if they do exist.\n\nSetting an attribute value to *null* in the patch documents causees a value of *null* to be saved for the attribute.\n\nIf *ignoreRevs* is *false* and there is a *_rev* attribute in a document in the body and its value does not match the revision of the corresponding document in the database, the precondition is violated.\n\nIf the document exists and can be updated, then an *HTTP 201* or an *HTTP 202* is returned (depending on *waitForSync*, see below).\n\nThe body of the response contains a JSON array of the same length as the input array with the information about the handle and the revision of the updated documents. In each entry:\n - *_id* contains the known *document-handle* of each updated document.\n - *_key* contains the key that uniquely identifies a document.\n - *_rev* contains the new document revision.\n\nIn case of an error or violated precondition, an error object with the attribute *error* set to *true* and the attribute *errorCode* set to the error code is built.\n\nIf the query parameter *returnOld* is *true*, then, for each generated document, the previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, then, for each generated document, the new document is returned under the *new* attribute in the result.\n\nNote that if any precondition is violated or an error occurred with some of the documents, the return code is still 201 or 202, but the additional HTTP header *X-C8-Error-Codes* is set, which contains a map of the error codes that occurred together with their multiplicities, as in: *1200:17,1205:10* which means that in 17 cases the error 1200 \"revision conflict\" and in 10 cases the error 1205 \"illegal document handle\" has happened.\n\n",
        "operationId": "updateDocument",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "A JSON representation of an array of document updates as objects.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": [
                {
                  "_key": "key1",
                  "item1": "data1"
                }
              ]
            }
          },
          {
            "description": "The name of the collection in which the documents are updated.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to *false*, you can use the patch command to remove attributes from an existing document if the patch document contains the same attributes with a null value.",
            "in": "query",
            "name": "keepNull",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "Controls whether objects (not arrays) are merged if present in both the existing and the patch document. If set to *false*, the value in the patch document overwrites the existing document's value. If set to *true*, objects are merged.",
            "in": "query",
            "name": "mergeObjects",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If this is set to *true*, the *_rev* attributes in the given documents are ignored. If this is set to *false*, then any *_rev* attribute given in a body document is taken as a precondition. The document is only updated if the current revision is the one specified.",
            "in": "query",
            "name": "ignoreRevs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, adds the *old* attribute which displays document revisions.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, adds the new documents to the *new* attribute.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, returns only after data has been synced to disk.",
            "in": "query",
            "name": "waitForSync",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated documents and *waitForSync* is *true*.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If any precondition is violated or an error occurred with some of the documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "202": {
            "description": "Successfully updated documents and *waitForSync* is *false*.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If any precondition is violated or an error occurred with some of the documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Update documents",
        "tags": [
          "Documents"
        ]
      },
      "post": {
        "description": "Creates a new document from the document given in the body, unless there is already a document with the *_key* given. If no *_key* is given, a new unique *_key* is generated automatically.\n\nThe body can be an array of documents, in which case all documents in the array are inserted with the same semantics as for a single document. The result body will contain a JSON array of the same length as the input array, and each entry contains the result of the operation for the corresponding input. In case of an error the entry is a document with attributes *error* set to *true* and errorCode set to the error code that has happened.\n\nPossibly given *_id* and *_rev* attributes in the body are always ignored, the URL part or the query parameter collection respectively counts.\n\nIf the document is created successfully, then the *Location* header contains the path to the newly created document. The *Etag* header field contains the revision of the document. Both are only set in the single document case.\n\nIf *silent* is not set to *true*, the body of the response contains a JSON object (single document case) with the following attributes:\n\n - *_id* contains the document handle of the newly created document.\n - *_key* contains the document key.\n - *_rev* contains the document revision.\n\nIn the multi case the body is an array of such objects. If the query parameter *returnNew* is *true*, then, for each generated document, the new document is returned under the *new* attribute in the result.",
        "operationId": "insertDocument",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The *collection* in which the collection is to be created.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "A JSON representation of a single document or of an array of documents.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": [
                {
                  "item1": "data1"
                },
                {
                  "item2": "data2"
                }
              ]
            }
          },
          {
            "description": "The name of the collection. This is only for backward compatibility.",
            "in": "query",
            "name": "collection",
            "required": false,
            "type": "string"
          },
          {
            "description": "If set to *true*, adds the new documents to the *new* attribute.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, adds the *old* attribute which displays the previous version of the document. Only available if the *overwrite* option is set to *true*.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, an empty object is returned as response. No meta-data is returned for the created document. This option can be used to save some network traffic.",
            "in": "query",
            "name": "silent",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, the insert becomes a replace-insert. If a document with the same *_key* already exists the new document is not rejected with unique constraint violated but replaces the old document.",
            "in": "query",
            "name": "overwrite",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, returns only after data has been synced to disk.",
            "in": "query",
            "name": "waitForSync",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created documents and *waitForSync* is *true*. If more than one document is specified in the JSON body, check the response body to verify the creations succeeded.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If an error occurred while inserting an array of documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "202": {
            "description": "Successfully created documents and *waitForSync* is *false*.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If an error occurred while inserting an array of documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "409": {
            "description": "Failed to create document, in the single document case.  If a document with the same qualifiers in an indexed attribute conflicts with an already existing document and thus violates that unique constraint, the response body contains an error document. In the array case only 201 or 202 is returned, but if an error occurred, the additional HTTP header *X-C8-Error-Codes* is set, which contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create document",
        "tags": [
          "Documents"
        ]
      },
      "put": {
        "description": "Replaces multiple documents in the specified collection with the ones in the body. The replaced documents are specified by the *_key* attributes in the body documents.\n\nIf *ignoreRevs* is *false*,, a *_rev* attribute in each document body must match the revision of the corresponding document in the database. Otherwise, the call fails\n\nIf the document exists and can be updated, then a *HTTP 201* or a *HTTP 202* is returned (depending on *waitForSync*, see below).\n\nThe body of the response contains a JSON array of the same length as the input array with the information about the handle and the revision of the replaced documents. In each entry:\n - *_id* contains the known *document-handle* of each updated document.\n - *_key* contains the key which uniquely identifies a document.\n - *_rev* contains the new document revision.\n\nIn case of an error or violated precondition, an error object with the attribute *error* set to *true* and the attribute *errorCode* set to the error code.\n\nIf the query parameter *returnOld* is *true*, for each generated document the previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, for each generated document the new document is returned under the *new* attribute in the result.\n\nNote that if any precondition is violated or an error occurred with some of the documents, the return code is still 201 or 202, but the additional HTTP header *X-C8-Error-Codes* is set, that contains a map of the error codes that occurred together with their multiplicities, as in: *1200:17,1205:10* which means that in 17 cases the error 1200 \"revision conflict\" and in 10 cases the error 1205 \"illegal document handle\" has happened.",
        "operationId": "replaceDocument:multiple",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "A JSON representation of an array of documents.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": [
                {
                  "_key": "key1",
                  "item1": "data1"
                }
              ]
            }
          },
          {
            "description": "This URL parameter is the name of the collection in which the documents are replaced.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "If this is set to *true*, the *_rev* attributes in the given documents are ignored. If this is set to *false*, then any *_rev* attribute given in a body document is taken as a precondition. The document is only replaced if the current revision is the one specified.",
            "in": "query",
            "name": "ignoreRevs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, adds the *old* attribute which displays document revisions.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, adds the new documents to the *new* attribute.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, returns only after data has been synced to disk.",
            "in": "query",
            "name": "waitForSync",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully replaced documents and *waitForSync* is *true*.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If any precondition is violated or an error occurred with some of the documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "202": {
            "description": "Successfully replaced documents and *waitForSync* is *false*.",
            "headers": {
              "x-database-error-codes": {
                "type": "string",
                "description": "If any precondition is violated or an error occurred with some of the documents, this header contains a map of the error codes that occurred together with their multiplicities, as in: *1205:10,1210:17* which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened."
              }
            },
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_array"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Replace documents",
        "tags": [
          "Documents"
        ]
      }
    },
    "/_fabric/{fabric}/_api/document/{collection}/{key}": {
      "delete": {
        "description": "If *silent* is set to *false*, the body of the response contains a JSON object with the information about the handle and the revision.\n\n - *_id* contains the known *key* of the removed document.\n - *_key* contains the key which uniquely identifies a document.\n - *_rev* contains the document revision.\n\nIf the query parameter *returnOld* is *true*, then the previous revision of the document is returned under the *old* attribute in the result.",
        "operationId": "removeDocument2",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "Removes the document identified by *collection*.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "Removes the document identified by *key*.",
            "format": "string",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to *true*, adds the *old* attribute which displays document revisions.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, an empty object will be returned as response. No meta-data will be returned for the removed document. This option can be used to save some network traffic.",
            "in": "query",
            "name": "silent",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, returns only after data has been synced to disk.",
            "in": "query",
            "name": "waitForSync",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "You can conditionally remove a document based on a target revision id by using the *if-match* HTTP header.",
            "in": "header",
            "name": "If-Match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed document and *waitForSync* was *true*.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev"
            }
          },
          "202": {
            "description": "Successfully removed document and *waitForSync* was *false*.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev"
            }
          },
          "404": {
            "description": "Failed to find specified collection or document.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to remove document due to different version if a *If-Match* header or *rev* is given. The response contains the found document's current revision in the *_rev* attribute. Additionally, the attributes *_id* and *_key* are returned.",
            "schema": {
              "$ref": "#/definitions/document_get_412"
            }
          }
        },
        "summary": "Removes a document",
        "tags": [
          "Documents"
        ]
      },
      "get": {
        "description": "Returns the document identified by *key*. The returned document contains three special attributes:\n - *_id* containing the document handle.\n - *_key* containing key which uniquely identifies a document.\n - *_rev* containing the revision.",
        "operationId": "readDocument",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The key of the document.",
            "format": "string",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "If the *If-None-Match* header is given, then it must contain exactly one Etag. The document is returned, if it has a different revision than the given Etag. Otherwise an *HTTP 304* is returned.",
            "in": "header",
            "name": "If-None-Match",
            "type": "string"
          },
          {
            "description": "If the *If-Match* header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a *HTTP 412* is returned.",
            "in": "header",
            "name": "If-Match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found document.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_data"
            }
          },
          "304": {
            "description": "Docment has the same revision if the *If-None-Match* header is given.",
            "schema": {
              "type": "string",
              "example": "Error: Not modified"
            }
          },
          "404": {
            "description": "Failed to find the specified collection or document.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Document has different version if an *If-Match* header is given. The response contains the found document's current revision in the *_rev* attribute. Additionally, the attributes *_id* and *_key* are returned.",
            "schema": {
              "$ref": "#/definitions/document_get_412"
            }
          }
        },
        "summary": "Read document",
        "tags": [
          "Documents"
        ]
      },
      "head": {
        "description": "Like GET, but only returns the header fields and not the body. You can use this call to get the current revision of a document or check if the document was deleted.",
        "operationId": "checkDocument",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The key of the document.",
            "format": "string",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "If the *If-None-Match* header is given, then it must contain exactly one Etag. If the current document revision is not equal to the specified Etag, an *HTTP 200* response is returned. If the current document revision is identical to the specified Etag, then an *HTTP 304* is returned.",
            "in": "header",
            "name": "If-None-Match",
            "type": "string"
          },
          {
            "description": "If the *If-Match* header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a *HTTP 412* is returned.",
            "in": "header",
            "name": "If-Match",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found document.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_data"
            }
          },
          "304": {
            "description": "Docment has the same version if the *If-None-Match* header is given.",
            "schema": {
              "type": "string",
              "example": "Error: Not modified"
            }
          },
          "404": {
            "description": "Failed to find the specified collection or document.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Document has different version if an *If-Match* header is given. The response contains the found document's current revision in the *_rev* attribute. Additionally, the attributes *_id* and *_key* are returned.",
            "schema": {
              "$ref": "#/definitions/document_get_412"
            }
          }
        },
        "summary": "Read document header",
        "tags": [
          "Documents"
        ]
      },
      "patch": {
        "description": "Partially updates the document identified by *key*. The body of the request must contain a JSON document with the attributes to patch (the patch document). All attributes from the patch document are added to the existing document if they do not yet exist, and overwritten in the existing document if they do exist there.\n\nSetting an attribute value to *null* in the patch document causes a value of *null* to be saved for the attribute by default.\n\nIf the *If-Match* header is specified and the revision of the document in the database is unequal to the given revision, the precondition is violated.\n\nIf *If-Match* is not given and *ignoreRevs* is *false*, a *_rev* attribute in each document bodymust match the revision of the corresponding document in the database. Otherwise, the call fails.\n\nIf a precondition is violated, a *HTTP 412* is returned.\n\nIf the document exists and can be updated, then a *HTTP 201* or a *HTTP 202* is returned, the *Etag* header field contains the new revision of the document (in double quotes) and the *Location* header contains a URL under which the document can be queried.\n\nIf *silent* is set to *false*, the body of the response contains a JSON object with the information about the handle and the revision.\n - *_id* contains the known *document-handle* of the updated document.\n - *_key* contains the key that uniquely identifies a document.\n - *_rev* contains the new document revision.\n\nIf the query parameter *returnOld* is *true*, then the previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, then the new document is returned under the *new* attribute in the result.\n\nIf the document does not exist, then a *HTTP 404* is returned and the body of the response contains an error document.",
        "operationId": "updateDocument2",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "A JSON representation of a document update as an object.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": {
                "_key": "key1",
                "item1": "data1"
              }
            }
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "This URL parameter must be a document key.",
            "format": "string",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "If the intention is to remove existing attributes with the patch command, the URL query parameter *keepNull* can be used with a value of *false*. This will modify the behavior of the patch command to remove any attributes from the existing document that are contained in the patch document with an attribute value of *null*.",
            "in": "query",
            "name": "keepNull",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "Controls whether objects (not arrays) will be merged if present in both the existing and the patch document. If set to *false*, the value in the patch document will overwrite the existing document's value. If set to *true*, objects will be merged. The default is *true*.",
            "in": "query",
            "name": "mergeObjects",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, the *_rev* attributes in the given document is ignored. If set to *false*, the *_rev* attribute given in the body document is taken as a precondition. The document is only updated if the current revision is the one specified.",
            "in": "query",
            "name": "ignoreRevs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, adds the *old* attribute which displays document revisions.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, adds the new documents to the *new* attribute.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, an empty object will be returned as response. No meta-data will be returned for the updated document. This option can be used to save some network traffic.",
            "in": "query",
            "name": "silent",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, returns only after data has been synced to disk.",
            "in": "query",
            "name": "waitForSync",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "You can conditionally update a document based on a target revision id by using the *if-match* HTTP header.",
            "in": "header",
            "name": "If-Match",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated document and waitForSync is *true*.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_oldrev"
            }
          },
          "202": {
            "description": "Successfully updated document and waitForSync is *false*.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_oldrev"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection or document.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed due to the precondition being violated. The response contains the found documents' current revisions in the *_rev* attributes. Additionally, the attributes *_id* and *_key* are returned.",
            "schema": {
              "$ref": "#/definitions/document_get_412"
            }
          }
        },
        "summary": "Update document",
        "tags": [
          "Documents"
        ]
      },
      "put": {
        "description": "Replaces the document with key <key> with the one in the body, provided there is such a document and no precondition is violated.\n\nIf the *If-Match* header is specified and the revision of the document in the database is unequal to the given revision, the precondition is violated.\n\nIf *If-Match* is not given and *ignoreRevs* is *false*, a *_rev* attribute in each document body must match the revision of the corresponding document in the database. Otherwise, the call fails.\n\nIf a precondition is violated, a *HTTP 412* is returned.\n\nIf the document exists and can be updated, then a *HTTP 201* or a *HTTP 202* is returned (depending on *waitForSync*, see below), the *Etag* header field contains the new revision of the document and the *Location* header contains a URL under which the document can be queried.\n\nIf *silent* is set to *false*, the body of the response contains a JSON object with the information about the handle and the revision.\n - *_id* contains the known *document-handle* of each document.\n - *_key* contains the key that uniquely identifies a document.\n - *_rev* contains the new document revision.\n\nIf the query parameter *returnOld* is *true*, then the previous revision of the document is returned under the *old* attribute in the result.\n\nIf the query parameter *returnNew* is *true*, then the new document is returned under the *new* attribute in the result.\n\nIf the document does not exist, then a *HTTP 404* is returned and the body of the response contains an error document.",
        "operationId": "replaceDocument",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "A JSON representation of a single document.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": {
                "item1": "data1"
              }
            }
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "This URL parameter must be a document key.",
            "format": "string",
            "in": "path",
            "name": "key",
            "required": true,
            "type": "string"
          },
          {
            "description": "If set to *true*, the *_rev* attributes in the given document is ignored. If set to *false*, then the *_rev* attribute given in the body document is taken as a precondition. The document is only replaced if the current revision is the one specified.",
            "in": "query",
            "name": "ignoreRevs",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, adds the *old* attribute which displays document revisions.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, adds the new documents to the *new* attribute.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If set to *true*, an empty object will be returned as response. No meta-data will be returned for the replaced document. This option can be used to save some network traffic.",
            "in": "query",
            "name": "silent",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If set to *true*, returns only after data has been synced to disk.",
            "in": "query",
            "name": "waitForSync",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "You can conditionally replace a document based on a target revision id by using the *if-match* HTTP header.",
            "in": "header",
            "name": "If-Match",
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully replaced documents and waitForSync is true.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_oldrev"
            }
          },
          "202": {
            "description": "Successfully replaced documents and waitForSync is false.",
            "schema": {
              "$ref": "#/definitions/examples_id_key_rev_oldrev"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection or document.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed due to the precondition being violated. The response contains the found documents' current revisions in the *_rev* attributes. Additionally, the attributes *_id* and *_key* are returned.",
            "schema": {
              "$ref": "#/definitions/document_get_412"
            }
          }
        },
        "summary": "Replace document",
        "tags": [
          "Documents"
        ]
      }
    },
    "/_fabric/{fabric}/_api/collection": {
      "get": {
        "description": "Fetches the list of all collections.\n The call returns a JSON object with at least the following attributes on success:\n- **id**: The id of collection as string.\n- **name**: The name of collection as string.\n- **status**: The status of collection as number.\n- **type**: The type of collection as number.\n    - *2*: document collection\n    - *3*: edge collection\n- **collectionModel**: The collection data model type as string.\n   - DOC: document model\n   - KV: key/value model\n    - DYNAMO: dynamo model \n - **isSpot**: *True* if collection is spot type as boolean.\n- **isLocal**: The scope type of collection as boolean.\n    - *true*: global collection\n    - *false*: local collection\n- **hasStream**: The collection with live stream as boolean.\n- **waitForSync**: *True* if waiting for documents to be synchronized to storage.\n- **isSystem**: *True* if the collection is a system collection.\n- **globallyUniqueId**: The globally unique identifier of collection as string.\n- **searchEnabled**: The search enabled for collection as boolean.",
        "operationId": "handleCommandGet",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "Whether or not system collections should be excluded from the result.",
            "in": "query",
            "name": "excludeSystem",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found collections.",
            "schema": {
              "$ref": "#/definitions/api_collection_get_http_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List all collections",
        "tags": [
          "Collections"
        ]
      },
      "post": {
        "description": "Create collection.\nRequires a JSON object with these properties:\n- **name**: The name of the collection.\n - **keyOptions**:\n    - **allowUserKeys**: If set to *true*, you can supply a key value in the *_key* attribute of a document. If set to *false*, the key generator creates keys, and an error occurs if you add a *_key* value.\n    - **type**: Choose the type of key generator:\n      - **traditional**: generates numerical keys in ascending order.\n      - **autoincrement:** generates numerical keys in ascending order with configurable initial offset and spacing.\n      - **padded:** generates keys of a fixed length (16 bytes) in ascending lexicographical sort order.\n      - **uuid64**: generates universally unique keys.\n    - **increment**: increment value for *autoincrement* key generator. Not used for other key generator types.\n    - **offset**: Initial offset value for *autoincrement* key generator. Not used for other key generator types.\n  - **isSystem**: If *true*, create a system collection. The *collection-name* must start with an underscore. Not Applicable for *end-users*. (The default is *false*)\n  - **isLocal**: If *true*, create a local collection. For a local collection data is not replicated across regions. (The default is *false*)\n - **type**: The type of the collection to be created.\n The following values for *type* are valid (The default is *2*):\n    - *2*: document collection\n    - *3*: edge collection.\n  - **stream**: If *true*, create a local stream for collection. (The default is *false*)\n  - **shardKeys**: The specified shard key determines in which shard a given document is to be stored. Choosing the right shard key can have significant impact on your performance can reduce network traffic and increase performance.",
        "operationId": "handleCommandPost:CreateCollection",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fabric_collection_validate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully created collection.",
            "schema": {
              "$ref": "#/definitions/api_collection_http_200_help"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create collection",
        "tags": [
          "Collections"
        ]
      }
    },
    "/_fabric/{fabric}/_api/collection/{collection-name}": {
      "delete": {
        "description": "Remove the collection.\n On success it returns an object is with the following attributes:\n- **error**: false\n- **id**: The identifier of the removed collection.",
        "operationId": "handleCommandDelete:collection",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the collection to remove.",
            "format": "string",
            "in": "path",
            "name": "collection-name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Whether or not the collection to remove is a system collection. This parameter must be set to *true* in order to remove system collections.",
            "in": "query",
            "name": "isSystem",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed collection.",
            "schema": {
              "$ref": "#/definitions/api_collection_post_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove collection",
        "tags": [
          "Collections"
        ]
      },
      "get": {
        "description": "Fetches the information about collection.\nThe call returns a JSON object with at least the following attributes on success:\n- **id**: The identifier of the collection.\n - **name**: The name of the collection.\n - **status**: The status of the collection as number.\n   - 1: new born collection\n   - 2: unloaded\n   - 3: loaded\n    - 4: in the process of being unloaded\n   - 5: deleted\n   - 6: loading\n    - Every other status indicates a corrupted collection.\n- **type**: The type of the collection as number.\n  - 2: document collection (normal case)\n  - 3: edges collection\n- **isSystem**: If *true* then the collection is a system collection.\n- **stream**: *True* if the collection has a local streams associate with it.",
        "operationId": "handleCommandGet:collectionGetProperties",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found collection.",
            "schema": {
              "$ref": "#/definitions/api_collection_get_collection_name_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the information about collection",
        "tags": [
          "Collections"
        ]
      }
    },
    "/_fabric/{fabric}/_api/collection/{collection-name}/count": {
      "get": {
        "description": "Returns the number of documents in the collection.\n**Note**: This always loads the collection into memory.\nThe call returns a JSON object with at least the following attributes on success:\n- **error**: false\n- **count**: The number of documents inside the collection.\n- **id**: The id of collection as string.\n- **name**: The name of collection as string.\n- **isSystem**: *True* if the collection is a system collection.\n- **searchEnabled**: *True* if the collection is searchable.\n- **globallyUniqueId**: Global unique identifier as string.",
        "operationId": "handleCommandGet:getCollectionCount",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned number of documents in a collection.",
            "schema": {
              "$ref": "#/definitions/api_collection_get_count_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get number of documents in a collection",
        "tags": [
          "Collections"
        ]
      }
    },
    "/_fabric/{fabric}/_api/collection/{collection-name}/truncate": {
      "put": {
        "description": "Remove all documents from the collection but leaves the indexes intact.\nThe call returns a JSON object with at least the following attributes on success:\n- **id**: The identifier of the collection.\n - **name**: The name of the collection.\n - **status**: The status of the collection as number.\n   - 1: new born collection\n   - 2: unloaded\n   - 3: loaded\n    - 4: in the process of being unloaded\n   - 5: deleted\n   - 6: loading\n    - Every other status indicates a corrupted collection.\n- **type**: The type of the collection as number.\n  - 2: document collection (normal case)\n  - 3: edges collection\n- **isSystem**: *True* if the collection is a system collection.\n- **stream**: *True* if the collection has a local streams associate with it.",
        "operationId": "handleCommandPut:truncateCollection",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed all the documents.",
            "schema": {
              "$ref": "#/definitions/api_collection_get_collection_name_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Truncate collection",
        "tags": [
          "Collections"
        ]
      }
    },
    "/_fabric/{fabric}/_api/collection/{collection-name}/properties": {
      "put": {
        "description": "Changes the properties of a collection.\n Requires a JSON object with these properties:\n- **hasStream**: *True* if creating a live collection stream.\n- **waitForSync**: *True* if waiting for documents to be synchronized to storage.\nThe call returns a JSON object with at least the following attributes on success:\n- **id**: The identifier of the collection.\n - **name**: The name of the collection.\n - **status**: The status of the collection as number.\n   - 1: new born collection\n   - 2: unloaded\n   - 3: loaded\n    - 4: in the process of being unloaded\n   - 5: deleted\n   - 6: loading\n    - Every other status indicates a corrupted collection.\n- **type**: The type of the collection as number.\n  - 2: document collection (normal case)\n  - 3: edges collection\n- **isSystem**: *True* then the collection is a system collection.\n- **stream**: *True* if the collection has a local streams associate with it.\n**Note**: except for *waitForSync* and *hasStream*, collection properties **cannot be changed** once a collection is created.",
        "operationId": "handleCommandPut:modifyProperties",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection-name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_collection_put_properties_http_examples_rc_200"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the document.",
            "schema": {
              "$ref": "#/definitions/api_collection_put_collection_property_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Update collection properties",
        "tags": [
          "Collections"
        ]
      }
    },
    "/_fabric/{fabric}/_api/cursor": {
      "post": {
        "description": "The query details include the query string plus query options and bind parameters. These values need to be passed in a JSON representation in the body of the POST request.",
        "operationId": "createQueryCursor",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_cursor"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully created the cursor.",
            "schema": {
              "$ref": "#/definitions/api_cursor_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/api_cursor_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified fabric or collection.",
            "schema": {
              "$ref": "#/definitions/api_cursor_rc_404"
            }
          }
        },
        "summary": "Create cursor",
        "tags": [
          "Query"
        ]
      }
    },
    "/_fabric/{fabric}/_api/cursor/{cursor-identifier}": {
      "delete": {
        "description": "Remove the cursor and free the resources associated with it. The cursor is automatically removed on the server when the client has retrieved all documents from it. The client can also explicitly remove the cursor at any earlier time using an HTTP DELETE request. The cursor *ID* must be included as part of the URL.\n\nNote: The server automatically removes abandoned cursors after a period of time specified by the *ttl* attribute when the cursor was created.",
        "operationId": "deleteQueryCursor",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The id of the cursor.",
            "format": "string",
            "in": "path",
            "name": "cursor-identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed the cursor.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 202
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "id": {
                  "description": "Id of cursor",
                  "type": "string",
                  "example": "11177234"
                }
              }
            }
          },
          "404": {
            "description": "Failed to find the specified cursor.",
            "schema": {
              "$ref": "#/definitions/api_cursor_rc_404"
            }
          }
        },
        "summary": "Remove cursor",
        "tags": [
          "Query"
        ]
      },
      "put": {
        "description": "If the cursor has not been deleted, returns an object with the following attributes:\n\n- *id*: the *cursor-identifier*\n- *result*: a list of documents for the current batch\n- *hasMore*: *false* if this was the last batch\n- *count*: if present the total number of elements\n\nNote: If *hasMore* returns *true*, the next call might still return no documents. If *hasMore* is *false*, the cursor is exhausted.  Once the *hasMore* attribute has a value of *false*, the client can stop.",
        "operationId": "modifyQueryCursor",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the cursor.",
            "format": "string",
            "in": "path",
            "name": "cursor-identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return JSON object.",
            "schema": {
              "$ref": "#/definitions/api_cursor_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified cursor.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Read next batch from cursor",
        "tags": [
          "Query"
        ]
      }
    },
    "/_fabric/{fabric}/_api/query": {
      "post": {
        "description": "This endpoint is for query validation only. To query the database, see `/api/cursor`.",
        "operationId": "parseQuery",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_query_properties"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfull returns *collections* attributes with an array of collections used in the query and *bindVars* attribute with names of the bind parameters found in the query (if any).\n\nIf the query is parsed successfully, the *ast* attribute of the returned JSON contain the abstract syntax tree representation of the query. The format of the *ast* is subject to change in future versions of database, but it can be used to inspect how database interprets a given query. Note that the abstract syntax tree is returned without any optimizations applied to it.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "parsed": true,
                "collections": [
                  "testCollection"
                ],
                "bindVars": [],
                "ast": [
                  {
                    "type": "root",
                    "subNodes": [
                      {
                        "type": "for",
                        "subNodes": [
                          {
                            "type": "variable",
                            "name": "u",
                            "id": 0
                          },
                          {
                            "type": "collection",
                            "name": "testCollection"
                          },
                          {
                            "type": "no-op"
                          }
                        ]
                      },
                      {
                        "type": "return",
                        "subNodes": [
                          {
                            "type": "reference",
                            "name": "u",
                            "id": 0
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Failed due to missing, malformed data or the query contains a parse error. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Parse an C8QL query",
        "tags": [
          "Query"
        ]
      }
    },
    "/_fabric/{fabric}/_api/query/explain": {
      "post": {
        "description": "To explain how an C8QL query would run on the server, the query string can be sent to the server via an HTTP POST request. The server validates the query and creates an execution plan for it. The execution plan is returned, but the query does not run.\n\nThe execution plan that is returned by the server can be used to estimate the probable performance of the query. Though the actual performance will depend on many different factors, the execution plan normally can provide some rough estimates on the amount of work the server needs to do in order to run the query.\n\nBy default, the explain operation returns the optimal plan as chosen by the query optimizer. The optimal plan is the plan with the lowest total estimated cost. The response object contains the plan as a *plan* attribute. If the option *allPlans* is specified in the request, the result will contain all plans created by the optimizer. The plans will then be returned in the attribute *plans*.\n\nThe result also contains an attribute *warnings*, that is an array of warnings that occurred during optimization or execution of plan creation. Additionally, the result contains a *stats* attribute with optimizer statistics. If *allPlans* is set to *false*, the result contains an attribute *cacheable* that states whether the query results can be cached on the server if the query result cache were used. The *cacheable* attribute is not present when *allPlans* is set to *true*.\n\nEach plan in the result is a JSON object with the following attributes:\n- *nodes*: the array of execution nodes of the plan.  \n- *estimatedCost*: the total estimated cost for the plan. If there are multiple plans, the optimizer chooses the plan with the lowest total cost. \n- *collections*: an array of collections used in the query \n- *rules*: an array of rules the optimizer applied.  \n- *variables*: array of variables used in the query.",
        "operationId": "explainQuery",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_explain"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the optimal execution plan in the *plan* attribute.  If option *allPlans* is set in the request, an array of plans is returned in the *allPlans* attribute instead.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "plans": [
                  {
                    "nodes": [
                      {
                        "type": "SingletonNode",
                        "dependencies": [],
                        "id": 1,
                        "estimatedCost": 1,
                        "estimatedNrItems": 1
                      },
                      {
                        "type": "EnumerateCollectionNode",
                        "dependencies": [
                          1
                        ],
                        "id": 2,
                        "estimatedCost": 9,
                        "estimatedNrItems": 7,
                        "random": false,
                        "indexHint": {
                          "forced": false,
                          "type": "none"
                        },
                        "outVariable": {
                          "id": 0,
                          "name": "u"
                        },
                        "projections": [],
                        "producesResult": true,
                        "database": "_system",
                        "collection": "testCollection",
                        "satellite": false
                      },
                      {
                        "type": "ReturnNode",
                        "dependencies": [
                          2
                        ],
                        "id": 3,
                        "estimatedCost": 16,
                        "estimatedNrItems": 7,
                        "inVariable": {
                          "id": 0,
                          "name": "u"
                        },
                        "count": true
                      }
                    ],
                    "rules": [],
                    "collections": [
                      {
                        "name": "testCollection",
                        "type": "read"
                      }
                    ],
                    "variables": [
                      {
                        "id": 0,
                        "name": "u"
                      }
                    ],
                    "estimatedCost": 16,
                    "estimatedNrItems": 7,
                    "initialize": true,
                    "isModificationQuery": false
                  }
                ],
                "warnings": [],
                "stats": {
                  "rulesExecuted": 35,
                  "rulesSkipped": 1,
                  "plansCreated": 1
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing, malformed data or the query contains a parse error. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to validate query due to non-existing collection being accessed by the query.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Explain an C8QL query",
        "tags": [
          "Query"
        ]
      }
    },
    "/_fabric/{fabric}/_api/restql": {
      "post": {
        "description": "Save a query for a user for a fabric.",
        "operationId": "SaveRestqlByName",
        "parameters": [
          {
            "description": "Fabric name for which to save query.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_queries_create_user_queries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully saved query.",
            "schema": {
              "$ref": "#/definitions/query_workers_post_restql_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Save query worker",
        "tags": [
          "Query Workers"
        ]
      }
    },
    "/_fabric/{fabric}/_api/restql/execute/{name}": {
      "post": {
        "description": "Run a saved query for a given fabric.  If there are more that 100 records, the *hasMore* flag is set to *true* and the *id* is set.  This *id* is used to query subsequent records.",
        "operationId": "ExecuteRestqlByName",
        "parameters": [
          {
            "description": "Fabric name of the saved query.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Query name to run.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_queries_execute_saved_queries"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully ran the query.",
            "schema": {
              "$ref": "#/definitions/query_workers_post_restql_execute_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Run query worker",
        "tags": [
          "Query Workers"
        ]
      }
    },
    "/_fabric/{fabric}/_api/restql/fetch/{id}": {
      "put": {
        "description": "If the query worker cursor is still valid, returns an object with the following attributes:\n\n- *id*: the *cursor-identifier*\n- *result*: a list of documents for the current batch\n- *hasMore*: *false* if this was the last batch\n- *count*: if present the total number of elements\n\nNote that even if *hasMore* returns *true*, the next call might still return no documents. If *hasMore* is *false*, then the cursor is exhausted.  Once the *hasMore* attribute has a value of *false*, the client can stop.",
        "operationId": "fetchRestqlCursor",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The id of the cursor.",
            "format": "string",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the next batch of records.",
            "schema": {
              "$ref": "#/definitions/query_workers_post_restql_execute_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified query.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Read next batch from cursor",
        "tags": [
          "Query Workers"
        ]
      }
    },
    "/_fabric/{fabric}/_api/restql/user": {
      "get": {
        "description": "Get list of saved queries for the fabric.",
        "operationId": "ListRestqlAssociatedWithCurrentUser",
        "parameters": [
          {
            "description": "Fabric name for which to list saved queries.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of queries.",
            "schema": {
              "$ref": "#/definitions/query_workers_get_restql_user_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "List current query workers",
        "tags": [
          "Query Workers"
        ]
      }
    },
    "/_fabric/{fabric}/_api/restql/{name}": {
      "delete": {
        "description": "Remove a query for the fabric.",
        "operationId": "DeleteRestqlByName",
        "parameters": [
          {
            "description": "Fabric name for which to remove a query.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "description": "Query name to be removed.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed query.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "array",
                  "example": []
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Remove query worker",
        "tags": [
          "Query Workers"
        ]
      },
      "put": {
        "description": "Update a saved query for a fabric.",
        "operationId": "UpdateRestqlByName",
        "parameters": [
          {
            "description": "Fabric name for which to update a query.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "description": "Query name to update.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_queries_update_user_queries"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully updated the query.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "properties": {
                    "value": {
                      "description": "The query being saved",
                      "type": "string",
                      "example": "for u in testCollection return u"
                    },
                    "_key": {
                      "description": "The key for this record",
                      "type": "string",
                      "example": "testuser._system.testQueryName"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Update query worker",
        "tags": [
          "Query Workers"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index": {
      "get": {
        "description": "Fetches the list of all indexes of a collection.\n The call returns a JSON object with at least the following attributes on success:\n- **error**: *False*\n - **indexes**: Array of indexes.\n   - **fields**: Array of fields on which index is created.\n   - **id**: The id of index as string.\n    - **name**: Name of index as string.\n    - **selectivityEstimate**: The selectivity estimate of index as number.\n   - **sparse**: *True* if index is a sparse index.\n   - **type**: Index type as string.\n   - **unique**: *True* if index is unique.\n    - **expireAfter**: Index expiry time.\n - **identifiers**: List of indexes as an object with the index handles as keys.",
        "operationId": "getIndexes",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found indexes.",
            "schema": {
              "$ref": "#/definitions/api_index_get_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List all indexes of a collection",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/fulltext": {
      "post": {
        "description": "Creates fulltext index, if it does not already exist.\n Requires a JSON object with these properties:\n  - **fields**: An array of attribute names. Currently, the array is limited\n   to exactly one attribute.\n  - **type**: Must be equal to *\"fulltext\"*.\n  - **minLength**: Minimum character length of words to index.Default take server-defined value if unspecified. Thus it is recommended to set this value explicitly when creating the index.",
        "operationId": "createIndex#fulltext",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_index_fulltext_body"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_fulltext_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_fulltext_http_examples_rc_201"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create fulltext index",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/general": {
      "post": {
        "description": "Creates a new index.\nRequires a JSON object with these properties:\n  - **fields**: An array of attribute names as array of strings.\n   to exactly one attribute.\n  - **type**: Type of index.\n  -  **name**: Name of the index.\n - **unique**: *True* if the index is unique.\n **Note**: Unique indexes on non-shard keys are not supported in a cluster.\n The following index types do not support uniqueness, and using the *unique* attribute with these types may lead to an error:\n   - geo indexes\n   - fulltext indexes \n - **sparse**: *True* if the index is sparse type.\n**Note**: Hash, skiplist and persistent indexes can optionally be created in a sparse variant.  Sparse indexes do not index documents for which any of the index attributes is either not set or is null. \n - **deduplicate**: *True* then it controls whether inserting duplicate index values from the same document into a unique array index will lead to a unique constraint error or not. (The default is *true*, so only a single instance of each non-unique index value will be inserted into the index per document.)\n\n **Note**: Indexing the system attribute _id is not supported for user-defined indexes. Manually creating an index using _id as an index attribute fails with an error.",
        "operationId": "createIndex:general",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "\n",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_index_general_body"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_fulltext_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_fulltext_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create index",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/geo": {
      "post": {
        "description": "Creates a geo index.\nRequires a JSON object with these properties:\n - **fields** (string): An array with one or two attribute paths. If it is an array with one attribute path *location*, then a geo-spatial index on all documents is created using *location* as path to the coordinates. The value of the attribute must be an array with at least two double values. The array must contain the latitude (first value) and the longitude (second value).\n **Note**: All documents, which do not have the attribute path or with value that are not suitable, are ignored.If it is an array with two attribute paths *latitude* and *longitude*, then a geo-spatial index on all documents is created using *latitude* and *longitude* as paths the latitude and the longitude. The value of the attribute *latitude* and of the attribute *longitude* must be a double. All documents, which do not have the attribute paths or which values are not suitable, are ignored.\n  - **type**: Must be equal to *\"geo\"*.\n  - **geoJson**: If a geo-spatial index on a *location* is constructed and *geoJson* is *true*, then the order within the array is longitude followed by latitude. This corresponds to the format described in http://geojson.org/geojson-spec.html#positions\n\n **Note**: Geo indexes are always sparse, meaning that documents that do not contain the index attributes or have non-numeric values in the index attributes will not be indexed.",
        "operationId": "createIndex#geo",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_index_geo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing geo index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_geo_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created geo index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_geo_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create geo-spatial index",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/hash": {
      "post": {
        "description": "Creates a hash index.\nRequires a JSON object with these properties:\n - **fields** (string): An array of attribute paths.\n  - **unique**: *True* if the index is unique.\n  - **type**: Must be equal to *\"hash\"*.\n  - **sparse**: *True* if the index is sparse type.\n  - **deduplicate**: *False* if the deduplication of array values is turned off.\n\n **Note**: \n- In a sparse index all documents are excluded from the index that do not contain at least one of the specified index attributes (i.e. *fields*) or that have a value of *null* in any of the specified index attributes. Such documents are not indexed and are not taken into account for uniqueness checks if the *unique* flag is set.\n\n - In a non-sparse index, these documents are indexed (for non-present indexed attributes, a value of *null* is used) and are taken into account for uniqueness checks if the *unique* flag is set.\n -  Unique indexes on non-shard keys are not supported in a cluster.",
        "operationId": "createIndex:hash",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_index_hash"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing hash index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_hash_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created hash index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_hash_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create hash index",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/persistent": {
      "post": {
        "description": "Creates a hash index.\nRequires a JSON object with these properties:\n - **fields** (string): An array of attribute paths.\n  - **unique**: *True* if the index is unique.\n  - **type**: Must be equal to *\"persistent\"*.\n  - **sparse**: *True* if the index is sparse type.\n  - **deduplicate**: It controls whether inserting duplicate index values from the same document into a unique array index will lead to a unique constraint error or not. (The default is *true*)\n\n **Note**: \n - In a sparse index all documents are excluded from the index that do not contain at least one of the specified index attributes (i.e. *fields*) or that have a value of *null* in any of the specified index attributes. Such documents are not indexed and are not taken into account for uniqueness checks if the unique flag is set.\n\n - In a non-sparse index, these documents are indexed (for non-present indexed attributes, a value of *null* is used) and are taken into account for uniqueness checks if the *unique* flag is set.\n - unique indexes on non-shard keys are not supported in a cluster.",
        "operationId": "createIndex:persistent",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_index_persistent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing persistent index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_persistent_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created persistent index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_persistent_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create a persistent index",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/skiplist": {
      "post": {
        "description": "Creates a hash index.\nRequires a JSON object with these properties:\n - **fields** (string): An array of attribute paths.\n  - **unique**: *True* if index is unique.\n  - **type**: Must be equal to *\"skiplist\"*.\n  - **sparse**: *True* if the index is sparse type.\n  - **deduplicate**: *False* if the deduplication of array values is turned off.\n\n\n **Note**: \n - In a sparse index all documents are excluded from the index that do not contain at least one of the specified index attributes (i.e. *fields*) or that have a value of *null* in any of the specified index attributes. Such documents are not indexed and are not taken into account for uniqueness checks if the *unique* flag is set.\n\n - In a non-sparse index, these documents are indexed (for non-present indexed attributes, a value of *null* is used) and are taken into account for uniqueness checks if the *unique* flag is set.\n\n - Unique indexes on non-shard keys are not supported in a cluster.",
        "operationId": "createIndex:skiplist",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_index_skiplist"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing skiplist index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_skiplist_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created skiplist index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_skiplist_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create skip list",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/ttl": {
      "post": {
        "description": "Creates a hash index.\nRequires a JSON object with these properties:\n  - **fields** (string): An array with exactly one attribute path.\n  - **type**: Must be equal to *\"ttl\"*.\n  - **expireAfter**: The time (in seconds) after a document's creation after which the documents count as \"expired\".",
        "operationId": "createIndex:ttl",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "query",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_index_ttl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing ttl index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_ttl_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created ttl index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_ttl_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create TTL index",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/index/{collection}/{indexName}": {
      "delete": {
        "description": "Remove an index.",
        "operationId": "dropIndex",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "path",
            "format": "string",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the index.",
            "format": "string",
            "in": "path",
            "name": "indexName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed index.",
            "schema": {
              "$ref": "#/definitions/api_collection_ttl_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified index.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove index",
        "tags": [
          "Indexes"
        ]
      },
      "get": {
        "description": "Fetches the information about index.\nThe call returns a JSON object with at least the following attributes on success:\n- **error**: *False*\n - **indexes**: Array of indexes.\n   - **fields**: Array of fields on which index is created.\n   - **id**: The id of index as string.\n    - **name**: Name of index as string.\n    - **selectivityEstimate**: The selectivity estimate of index as number.\n   - **sparse**: *True* if index is a sparse index.\n   - **type**: Index type as string.\n   - **unique**: *True* if index is unique.\n    - **expireAfter**: Index expiry time.\n - **identifiers**: List of indexes as an object with the index handles as keys.",
        "operationId": "getIndexes:handle",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The collection name.",
            "in": "path",
            "format": "string",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the index.",
            "format": "string",
            "in": "path",
            "name": "indexName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing index.",
            "schema": {
              "$ref": "#/definitions/api_index_post_fulltext_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Read index",
        "tags": [
          "Indexes"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph": {
      "get": {
        "description": "Lists all graphs stored in this GeoFabric.",
        "operationId": "ListAllGraphs",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned if the module is available and the graphs could be listed.",
            "schema": {
              "$ref": "#/definitions/graph_list_http_examples_rc_200"
            }
          }
        },
        "summary": "List all graphs",
        "tags": [
          "Graphs"
        ]
      },
      "post": {
        "description": "The creation of a graph requires the name of the graph and a definition of its edges.\n\n**Note**: Requires *Administrator* permissions to access the GeoFabric and *Read Only* access on every collection used within this graph.",
        "operationId": "CreateAGraph",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/graph_create_http_examples"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully created the graph and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_create_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfully created the graph and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_create_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "Failed to store the the graph.  This can occur either if a graph with this name is already stored, or if there is one edge definition with the same edge collection but a different signature used in any other graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create a graph",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph/{graph}": {
      "delete": {
        "description": "Remove an existing graph object by name. Optionally all collections not used by other graphs can be removed as well.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "DropAGraph",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "Remove collections of this graph.  Collections are only removed if they are not used in other graphs.",
            "in": "query",
            "name": "dropCollections",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully removed the graph and waitForSync is enabled.",
            "schema": {
              "example": {
                "code": 201,
                "error": false,
                "removed": true
              }
            }
          },
          "202": {
            "description": "Successfully removed the graph and waitForSync is disabled.",
            "schema": {
              "example": {
                "code": 202,
                "error": false,
                "removed": true
              }
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove a graph",
        "tags": [
          "Graphs"
        ]
      },
      "get": {
        "description": "Retrieve information for a graph. Returns the edge definitions and orphan collections.",
        "operationId": "GetAGraph",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully return the graph data.",
            "schema": {
              "$ref": "#/definitions/graph_get_http_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find the specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get a graph",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph/{graph}/edge": {
      "get": {
        "description": "Lists all edge collections within this graph.",
        "operationId": "ListEdgedefinitions",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned if the edge definitions could be listed.",
            "schema": {
              "$ref": "#/definitions/graph_list_edge_http_examples_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find the specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List edge definitions",
        "tags": [
          "Graphs"
        ]
      },
      "post": {
        "description": "Adds an additional edge definition to the graph.\n\nThis edge definition has to contain a *collection* and an array of each *from* and *to* vertex collections.  An edge definition can only be added if this definition is either not used in any other graph, or it is used with exactly the same definition. It is not possible to store a definition \"e\" from \"v1\" to \"v2\" in the one graph, and \"e\" from \"v2\" to \"v1\" in the other graph.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "AddEdgedefinition",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_add_http_examples"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully added edge and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_add_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfully added edge and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_add_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing, malformed data or if the definition is used in another graph with a different signature. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find the specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Add edge definition",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph/{graph}/edge/{edgeCollection}": {
      "post": {
        "description": "Creates a new edge in the collection.\n\n**Note:** Requires *Read Only* permissions on the GeoFabric and *Write* access on the collection.",
        "operationId": "CreateAnEdge",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the edge collection the edge belongs to.",
            "format": "string",
            "in": "path",
            "name": "edgeCollection",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if the response should contain the new version of the document.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/graph_edge_create_http_examples"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully created the edge and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_create_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfully created the edge and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_create_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find graph, edge collection, `_from` or `_to`.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create an edge",
        "tags": [
          "Graphs"
        ]
      },
      "put": {
        "description": "Change one specific edge definition.\n\nThis modifies all occurrences of this definition in all graphs known to your GeoFabric.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "ReplaceAnEdgedefinition",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the edge collection the edge belongs to.",
            "format": "string",
            "in": "path",
            "name": "edgeCollection",
            "required": true,
            "type": "string"
          },
          {
            "description": "Remove the collection as well. Collection is only removed if it is not used in other graphs.",
            "in": "query",
            "name": "dropCollections",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_modify_http_examples"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully replaced edge and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_modify_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfully replaced edge and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_modify_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Replace an edge definition",
        "tags": [
          "Graphs"
        ]
      },
      "delete": {
        "description": "Remove one edge definition from the graph.  This only removes the edge collection, the vertex collections remain untouched and can still be used in your queries.\n\n**Note:** Requires *Administrator* permissions.",
        "operationId": "RemoveAnEdgedefinitionFromTheGraph",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the edge collection the edge belongs to.",
            "format": "string",
            "in": "path",
            "name": "edgeCollection",
            "required": true,
            "type": "string"
          },
          {
            "description": "Remove the collection as well. Collection is only removed if it is not used in other graphs.",
            "in": "query",
            "name": "dropCollections",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully removed edge definition and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_remove_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfully removed edge definition and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_definition_remove_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph or edge definition.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove an edge definition",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph/{graph}/edge/{collection}/{edge}": {
      "delete": {
        "description": "Removes an edge from the collection.\n\n**Note:** Requires *Read Only* permissions on the GeoFabric and *Write* access on the collection.",
        "operationId": "RemoveAnEdge",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the edge collection the edge belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the edge.",
            "format": "string",
            "in": "path",
            "name": "edge",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if a presentation of the removed document should be returned within the response object.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean"
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully removed the edge.",
            "schema": {
              "$ref": "#/definitions/graph_edge_delete_http_examples_rc_200"
            }
          },
          "202": {
            "description": "Successfully removed the edge and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_delete_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find graph, collection or edge.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to remove document due to different version if a \"If-Match\" header or *rev* is given.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Remove an edge",
        "tags": [
          "Graphs"
        ]
      },
      "get": {
        "description": "Gets an edge from the given collection.\n\n**Note**: Requires *Read Only* permissions to access the GeoFabric and *Read Only* access on the collection.",
        "operationId": "GetAnEdge",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the edge collection the edge belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the edge.",
            "format": "string",
            "in": "path",
            "name": "edge",
            "required": true,
            "type": "string"
          },
          {
            "description": "Must contain a revision. If this is set a document is only returned if it has exactly this revision. Also see if-match header as an alternative to this.",
            "in": "query",
            "name": "rev",
            "required": false,
            "type": "string"
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          },
          {
            "description": "If the \"If-None-Match\" header is given, then it must contain exactly one Etag. The document is returned, only if it has a different revision as the given Etag. Otherwise a HTTP 304 is returned.",
            "in": "header",
            "name": "if-none-match",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully returned edge.",
            "schema": {
              "$ref": "#/definitions/graph_edge_get_http_examples_rc_200"
            }
          },
          "304": {
            "description": "Docment has the same revision if the \"If-None-Match\" header is given. So there was no update between the last time the edge was fetched by the caller.",
            "schema": {
              "$ref": "#/definitions/redirect_example_rc_304"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find graph, collection, or vertex.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to return document due to different version if a \"If-Match\" header or *rev* is given.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Get an edge",
        "tags": [
          "Graphs"
        ]
      },
      "patch": {
        "description": "Updates the data of the specific edge in the collection.\n\n**Note:** Requires *Read Only* permissions on the GeoFabric and *Write* access on the collection.",
        "operationId": "ModifyAnEdge",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the edge collection the edge belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the vertex.",
            "format": "string",
            "in": "path",
            "name": "edge",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if values set to null should be stored. If *false* the attribute(s) are removed from the document.",
            "in": "query",
            "name": "keepNull",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "Define if a presentation of the removed document should be returned within the response object.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "Define if a presentation of the new document should be returned within the response object.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          },
          {
            "description": "The body has to contain a JSON object containing exactly the attributes that should be overwritten, all other attributes remain unchanged.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": {
                "data": 1234
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated edge and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_modify_http_examples_rc_200"
            }
          },
          "202": {
            "description": "Successfully updated edge and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_modify_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find graph, collection, vertex, `_from` or `_to`.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to return document due to different version if a \"If-Match\" header or rev is given.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Modify an edge",
        "tags": [
          "Graphs"
        ]
      },
      "put": {
        "description": "Replaces the data of an edge in the collection.\n\n**Note:** Requires *Read Only* permissions on the GeoFabric and *Write* access on the collection.",
        "operationId": "ReplaceAnEdge",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the edge collection the edge belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the vertex.",
            "format": "string",
            "in": "path",
            "name": "edge",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if values set to null should be stored. If *false* the attribute(s) are removed from the document.",
            "in": "query",
            "name": "keepNull",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "Define if a presentation of the removed document should be returned within the response object.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "Define if a presentation of the new document should be returned within the response object.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/graph_edge_replace_http_examples"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully replace edge and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_replace_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfully replace edge and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_edge_replace_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find graph, collection, vertex, `_from` or `_to`.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to return document due to different version if a \"If-Match\" header or rev is given",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Replace an edge",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph/{graph}/vertex": {
      "get": {
        "description": "Lists all vertex collections within this graph.",
        "operationId": "ListVertexCollections",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully return array of vertex collections.",
            "schema": {
              "$ref": "#/definitions/graph_list_vertex_http_examples_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List vertex collections",
        "tags": [
          "Graphs"
        ]
      },
      "post": {
        "description": "Adds a vertex collection to the set of orphan collections of the graph. If the collection does not exist, it is created.\n\n**Note:** Requires *Administrator* permissions to access the GeoFabric and *Read Only* access on every collection used within this graph.",
        "operationId": "AddVertexCollection",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfully created the vertex collection and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_collection_add_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfully created the vertex collection and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_collection_add_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Add vertex collection",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph/{graph}/vertex/{collection}": {
      "delete": {
        "description": "Removes a vertex collection from the graph and optionally removes the collection, if it is not used in any other graph. It only removes vertex collections that are no longer part of edge definitions.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "RemoveVertexCollection",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the vertex collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "Remove the collection as well. Collection is only removed if it is not used in other graphs.",
            "in": "query",
            "name": "dropCollection",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully removed vertex collection and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_collection_remove_http_examples_rc_200"
            }
          },
          "202": {
            "description": "Successfully removed vertex collection and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_collection_remove_http_examples_rc_202"
            }
          },
          "400": {
            "description": "Failed due to the vertex collection is still used in an edge definition.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove vertex collection",
        "tags": [
          "Graphs"
        ]
      },
      "post": {
        "description": "Adds a vertex to the given collection.\n\n**Note:** Requires *Read Only* permissions to access the GeoFabric and *Write* permissions to access the collection.",
        "operationId": "CreateAVertex",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the vertex collection the vertex should be inserted into.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if the response should contain the new version of the document.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "The body has to be the JSON object to be stored.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": {
                "collection": "demo1"
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Successfuly added the vertex and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_create_http_examples_rc_201"
            }
          },
          "202": {
            "description": "Successfuly added the vertex and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_create_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph or collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create a vertex",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/graph/{graph}/vertex/{collection}/{vertex}": {
      "delete": {
        "description": "Removes a vertex from the collection.\n\n**Note:** Requires *Read Only* permissions to access the GeoFabric and *Write* permissions to access the collection.",
        "operationId": "RemoveAVertex",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the vertex collection the vertex belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the vertex.",
            "format": "string",
            "in": "path",
            "name": "vertex",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if a presentation of the removed document should be returned within the response object.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully removed vertex and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_delete_http_examples_rc_200"
            }
          },
          "202": {
            "description": "Successfully removed vertex and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_delete_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph, collection, or vertex.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to return document due to different version if a \"If-Match\" header or rev is given.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Remove a vertex",
        "tags": [
          "Graphs"
        ]
      },
      "get": {
        "description": "Gets a vertex from the given collection.\n\n**Note:** Requires *Read Only* permissions to access the GeoFabric and *Read Only* permissions to access the collection.",
        "operationId": "GetAVertex",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the vertex collection the vertex belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the vertex.",
            "format": "string",
            "in": "path",
            "name": "vertex",
            "required": true,
            "type": "string"
          },
          {
            "description": "Must contain a revision. If this is set a document is only returned if it has exactly this revision. Also see if-match header as an alternative to this.",
            "in": "query",
            "name": "rev",
            "required": false,
            "default": false,
            "type": "string"
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is returned, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an query parameter *rev*.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          },
          {
            "description": "If the \"If-None-Match\" header is given, then it must contain exactly one Etag. The document is returned, only if it has a different revision as the given Etag. Otherwise a HTTP 304 is returned.",
            "in": "header",
            "name": "if-none-match",
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully return the vertex.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_get_http_examples_rc_200"
            }
          },
          "304": {
            "description": "Docment has the same revision as specified in the \"If-None-Match\" header. There is no update since the last time the vertex was fetched.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_get_http_examples_rc_304"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph, collection, or vertex.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to return document due to different version if a \"If-Match\" header or rev is given.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Get a vertex",
        "tags": [
          "Graphs"
        ]
      },
      "patch": {
        "description": "Updates the data of the specific vertex in the collection.\n\n**Note:** Requires *Read Only* permissions to access the GeoFabric and *Write* permissions to access the collection.",
        "operationId": "UpdateAVertex",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the vertex collection the vertex belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the vertex.",
            "format": "string",
            "in": "path",
            "name": "vertex",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if values set to null should be stored. If *false* the attribute(s) are removed from the document.",
            "in": "query",
            "name": "keepNull",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "description": "Define if a presentation of the removed document should be returned within the response object.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "Define if a presentation of the new document should be returned within the response object.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          },
          {
            "description": "The body has to contain a JSON object containing exactly the attributes that should be overwritten, all other attributes remain unchanged.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": {
                "data": "demo1"
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the vertex and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_modify_http_examples_rc_200"
            }
          },
          "202": {
            "description": "Successfully updated the vertex and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_modify_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph, collection, or vertex.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to return document due to different version if a \"If-Match\" header or rev is given.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Update a vertex",
        "tags": [
          "Graphs"
        ]
      },
      "put": {
        "description": "Replaces the data of a vertex in a collection.\n\n**Note:** Requires *Read Only* permissions to access the GeoFabric and *Write* permissions to access the collection.",
        "operationId": "ReplaceAVertex",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the graph.",
            "format": "string",
            "in": "path",
            "name": "graph",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the vertex collection the vertex belongs to.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          },
          {
            "description": "The *_key* attribute of the vertex.",
            "format": "string",
            "in": "path",
            "name": "vertex",
            "required": true,
            "type": "string"
          },
          {
            "description": "Define if values set to null should be stored. If *false* the attribute(s) are removed from the document.",
            "in": "query",
            "name": "keepNull",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "Define if a presentation of the removed document shoul be returned within the response object.",
            "in": "query",
            "name": "returnOld",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "Define if a presentation of the new document should be returned within the response object.",
            "in": "query",
            "name": "returnNew",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "If the \"If-Match\" header is given, then it must contain exactly one Etag. The document is updated, if it has the same revision as the given Etag. Otherwise a HTTP 412 is returned. As an alternative you can supply the Etag in an attribute rev in the URL.",
            "in": "header",
            "name": "if-match",
            "type": "string"
          },
          {
            "description": "The body has to be the JSON object to be stored.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": {
                "data": "demo1"
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successfully replace vertex and waitForSync is enabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_replace_http_examples_rc_200"
            }
          },
          "202": {
            "description": "Successfully replace vertex and waitForSync is disabled.",
            "schema": {
              "$ref": "#/definitions/graph_vertex_replace_http_examples_rc_202"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified graph, collection, or vertex.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "412": {
            "description": "Failed to return document due to different version if a \"If-Match\" header or rev is given.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_412"
            }
          }
        },
        "summary": "Replace a vertex",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/edges/{collection-id}": {
      "get": {
        "description": "Returns an array of edges starting or ending in the vertex identified by *vertex*.",
        "operationId": "ReadIn-OrOutboundEdges",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The id of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection-id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The id of the start vertex.",
            "in": "query",
            "name": "vertex",
            "required": true,
            "type": "string"
          },
          {
            "description": "Select *in* or *out* direction for edges. If not set, all edges are returned.",
            "in": "query",
            "name": "direction",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the edge collection was found and edges were retrieved."
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified edge collection."
          }
        },
        "summary": "Read in- or outbound edges",
        "tags": [
          "Graphs"
        ],
        "x-examples": []
      }
    },
    "/_fabric/{fabric}/_api/graphs/traversal": {
      "post": {
        "description": "\nStarts a traversal starting from a given vertex and following. edges contained in a given edgeCollection. The request must contain the following attributes.\n\nA JSON object with these properties is required:\n\n  - **sort**: body (JavaScript) code of a custom comparison function for the edges. The signature of this function is *(l, r) -> integer* (where l and r are edges) and must return -1 if l is smaller than, +1 if l is greater than, and 0 if l and r are equal. The reason for this is the following: The order of edges returned for a certain vertex is undefined. This is because there is no natural order of edges for a vertex with multiple connected edges. To explicitly define the order in which edges on the vertex are followed, you can specify an edge comparator function with this attribute. Note that the value here has to be a string to conform to the JSON standard, which in turn is parsed as function body on the server side. Furthermore note that this attribute is only used for the standard expanders. If you use your custom expander you have to do the sorting yourself within the expander code.\n  - **direction**: direction for traversal\n   - *if set*, must be either *\"outbound\"*, *\"inbound\"*, or *\"any\"*\n   - *if not set*, the *expander* attribute must be specified\n  - **minDepth**: ANDed with any existing filters): visits only nodes in at least the given depth\n  - **startVertex**: id of the startVertex, e.g. *\"users/foo\"*.\n  - **visitor**: body (JavaScript) code of custom visitor function function signature: *(config, result, vertex, path, connected) -> void* The visitor function can do anything, but its return value is ignored. To populate a result, use the *result* variable by reference. Note that the *connected* argument is only populated when the *order* attribute is set to *\"preorder-expander\"*.\n  - **itemOrder**: item iteration order can be *\"forward\"* or *\"backward\"*\n  - **strategy**: traversal strategy can be *\"depthfirst\"* or *\"breadthfirst\"*\n  - **filter**: default is to include all nodes: body (JavaScript code) of custom filter function function signature: *(config, vertex, path) -> mixed* can return four different string values:\n   - *\"exclude\"* -> this vertex will not be visited.\n   - *\"prune\"* -> the edges of this vertex will not be followed.\n   - *\"\"* or *undefined* -> visit the vertex and follow its edges.\n   - *Array* -> containing any combination of the above. If there is at least one *\"exclude\"* or *\"prune\"* respectively is contained, it's effect will occur.\n  - **init**: body (JavaScript) code of custom result initialization function function signature: *(config, result) -> void* initialize any values in result with what is required\n  - **maxIterations**: Maximum number of iterations in each traversal. This number can be set to prevent endless loops in traversal of cyclic graphs. When a traversal performs as many iterations as the *maxIterations* value, the traversal will abort with an error. If *maxIterations* is not set, a server-defined value may be used.\n  - **maxDepth**: ANDed with any existing filters visits only nodes in at most the given depth\n  - **uniqueness**: specifies uniqueness for vertices and edges visited.\n   If set, must be an object like this:\n   `\"uniqueness\": {\"vertices\": \"none\"|\"global\"|\"path\", \"edges\": \"none\"|\"global\"|\"path\"}`\n  - **order**: traversal order can be *\"preorder\"*, *\"postorder\"* or *\"preorder-expander\"*\n  - **graphName**: name of the graph that contains the edges. Either *edgeCollection* or *graphName* has to be given. In case both values are set the *graphName* is preferred.\n  - **expander**: body (JavaScript) code of custom expander function *must* be set if *direction* attribute is **not** set function signature: *(config, vertex, path) -> array* expander must return an array of the connections for *vertex* each connection is an object with the attributes *edge* and *vertex*\n  - **edgeCollection**: name of the collection that contains the edges.\n\nIf the Traversal is successfully executed *HTTP 200* will be returned.\n\nAdditionally the *result* object will be returned by the traversal.\n\nFor successful traversals, the returned JSON object has the following properties:\n- *error*: boolean flag to indicate if an error occurred (*false* in this case)\n- *code*: the HTTP status code\n- *result*: the return value of the traversal\nIf the traversal specification is either missing or malformed, the server will respond with *HTTP 400*.\n\nThe body of the response will then contain a JSON object with additional error details. The object has the following attributes:\n\n- *error*: boolean flag to indicate that an error occurred (*true* in this case)\n- *code*: the HTTP status code\n- *errorNum*: the server error number\n- *errorMessage*: a descriptive error message\n\n",
        "operationId": "executesATraversal",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "description": "Successfully found edge collection.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "_id": {
                        "description": "ID of the collection.",
                        "type": "string",
                        "example": "relation/18858926"
                      },
                      "_key": {
                        "description": "_key details of collection.",
                        "type": "string",
                        "example": "18858926"
                      },
                      "_rev": {
                        "description": "_rev details of collection.",
                        "type": "string",
                        "example": "_dPRuHxe--_"
                      },
                      "_from": {
                        "description": "The source vertex of this edge",
                        "type": "string",
                        "example": "female/alice"
                      },
                      "_to": {
                        "description": "The target vertex of this edge",
                        "type": "string",
                        "example": "male/bob"
                      }
                    }
                  }
                },
                "stats": {
                  "properties": {
                    "scannedIndex": {
                      "description": "The total number of documents iterated over when scanning a collection using an index",
                      "type": "integer",
                      "example": 1
                    },
                    "filtered": {
                      "description": "The total number of documents that were removed after executing a filter condition",
                      "type": "integer",
                      "example": 0
                    }
                  }
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the traversal is fully executed\n*HTTP 200* will be returned."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified edge collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Read in/outbound edges",
        "tags": [
          "Graphs"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams": {
      "get": {
        "description": "Get list of all streams.\n\n",
        "operationId": "ListOfStreams",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Get list of streams",
        "tags": [
          "Streams"
        ],
        "x-filename": "database/Documentation/DocuBlocks/Rest/Streams/README.md",
        "x-hints": ""
      }
    },
    "/_fabric/{fabric}/_api/streams/{stream}": {
      "post": {
        "description": "Create stream.\n\n",
        "operationId": "CreateStream",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream (up to 230 characters).\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "409": {
            "description": "Returned if the stream already exist.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create stream",
        "tags": [
          "Streams"
        ]
      },
      "delete": {
        "description": " Remove stream.\n",
        "operationId": "DeleteStream",
        "parameters": [
          {
            "description": "Fabric name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Stop all producer/consumer and remove stream forcefully. *deprecated*\n",
            "format": "string",
            "in": "query",
            "name": "force",
            "required": false,
            "default": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified stream."
          }
        },
        "summary": "Remove stream",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/{stream}/publish": {
      "post": {
        "description": "Publish message in stream.\n\n",
        "operationId": "PublishStreamMessage",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "Name of the message.\n",
            "in": "body",
            "name": "Message",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Publish message",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/{stream}/backlog": {
      "get": {
        "description": "\nGet estimated backlog for the stream.\n\n",
        "operationId": "Backlog",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Get backlog for the stream",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/{stream}/stats": {
      "get": {
        "description": "Get stats for the stream.\n\n",
        "operationId": "Stats",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Get stats for the stream",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/{stream}/subscriptions": {
      "get": {
        "description": "Get the list of subscriptions for given stream.\n\n",
        "operationId": "GetSubscriptionsList",
        "parameters": [
          {
            "description": "Fabric name.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Get subscriptions list",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/ttl": {
      "get": {
        "description": "Get message TTL in seconds for the streams.\n\n",
        "operationId": "GetStreamsTTL",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Get message TTL in seconds for streams",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/ttl/{ttl}": {
      "post": {
        "description": " Set message TTL in seconds for all streams.\n\n",
        "operationId": "SetStreamsTTL",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "TTL in seconds.\n",
            "format": "string",
            "in": "path",
            "name": "ttl",
            "default": 3600,
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Set message TTL in seconds for all streams.",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/clearbacklog": {
      "post": {
        "description": "Clear backlog for all streams.\n\n",
        "operationId": "ClearBacklog",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Clear backlog",
        "tags": [
          "Streams"
        ],
        "x-filename": "database/Documentation/DocuBlocks/Rest/Streams/README.md",
        "x-hints": ""
      }
    },
    "/_fabric/{fabric}/_api/streams/clearbacklog/{subscription}": {
      "post": {
        "description": "Clear backlog for all streams for given subscription.\n\n",
        "operationId": "ClearSubscription'sBacklog",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Identifying name of the subscription.\n",
            "format": "string",
            "in": "path",
            "name": "subscription",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Clear subscription's backlog",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/{stream}/expiry/{seconds}": {
      "post": {
        "description": " Expire messages on the stream for all subscriptions.\n\n",
        "operationId": "ExpireMessages",
        "parameters": [
          {
            "description": "Fabric name.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "Expiry time in seconds.\n",
            "format": "int",
            "in": "path",
            "name": "seconds",
            "required": true,
            "default": 3600,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Expire messages on the stream",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/subscription/{subscription}": {
      "delete": {
        "description": "Remove the given subscription on all streams on a stream db.\n\n",
        "operationId": "DeleteAllSubscriptions",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Identifying name of the subscription.\n",
            "format": "string",
            "in": "path",
            "name": "subscription",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Unsubscribe",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/{stream}/subscriptions/{subscription}": {
      "delete": {
        "description": "Remove the given subscription. There should not be any active consumers.\n\n",
        "operationId": "DeleteSubscription",
        "parameters": [
          {
            "description": "Fabric name of the streams.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the stream.\n",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          },
          {
            "description": "Is geo replicated stream?\n",
            "format": "string",
            "in": "query",
            "name": "global",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "description": "Identifying name of the subscription.\n",
            "format": "string",
            "in": "path",
            "name": "subscription",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Remove subscription.",
        "tags": [
          "Streams"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/platforms": {
      "get": {
        "description": "Returns the list of supported source platforms.\n\n",
        "operationId": "GetSupportedSourcePlatforms",
        "parameters": [
          {
            "description": "Fabric we are connecting to.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region to send the request to. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of supported source platforms.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StreamConnectorSupportedPlatform"
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get Supported Source Platforms",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources": {
      "get": {
        "description": "Returns all source definitions stored.\n\n",
        "operationId": "GetSourceDefinitions",
        "parameters": [
          {
            "description": "Fabric of the sources.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sources. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of source definitions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StreamConnectorDefinition"
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get Source Definitions",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/deployed": {
      "get": {
        "description": "Returns all sources currently deployed.\n\n",
        "operationId": "GetDeployedSources",
        "parameters": [
          {
            "description": "Fabric of the sources.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sources. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of source names currently deployed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get Deployed Sources",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}": {
      "get": {
        "description": "Returns the definition of a source.\n\n",
        "operationId": "GetSourceDefinition",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested source definition.",
            "schema": {
              "$ref": "#/definitions/StreamConnectorDefinition"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source definition."
          }
        },
        "summary": "Get Source Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      },
      "post": {
        "description": "Creates a new source definition.\n\n",
        "operationId": "CreateSourceDefinition",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source information.\n",
            "in": "body",
            "name": "Source request body.\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamSourceRequestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Source definition created."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Create Source Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      },
      "put": {
        "description": "Updates a source definition.\n\n",
        "operationId": "UpdateSourceDefinition",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Source information.\n",
            "in": "body",
            "name": "Source request body.\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamSourceRequestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Source definition updated."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source definition."
          }
        },
        "summary": "Update Source Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      },
      "delete": {
        "description": "Remove a source definition.",
        "operationId": "DeleteSourceDefinition",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region to remove the source definition from. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Source definition deleted."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source definition."
          }
        },
        "summary": "Remove Source Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/info": {
      "get": {
        "description": "Returns information about a source currently deployed.\n\n",
        "operationId": "GetSourceInfo",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Realtime information about the deployed source."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source definition."
          }
        },
        "summary": "Get Source Info",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/status": {
      "get": {
        "description": "Returns the status of a source currently deployed.\n\n",
        "operationId": "GetSourceStatus",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the deployed source."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source definition."
          }
        },
        "summary": "Get Source Status",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/status": {
      "get": {
        "description": "Returns the status of an instance of a source currently deployed.\n\n",
        "operationId": "GetSourceInstanceStatus",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the deployed source instance."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source definition."
          }
        },
        "summary": "Get Source Instance Status",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/start": {
      "post": {
        "description": "Starts all instances of a source.\n\n",
        "operationId": "StartSource",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Source started."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source."
          }
        },
        "summary": "Start Source",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/start": {
      "post": {
        "description": "Starts an instance of a source.\n\n",
        "operationId": "StartSourceInstance",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Source instance started."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source."
          }
        },
        "summary": "Start Source Instance",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/restart": {
      "post": {
        "description": "Restarts all instances of a source.\n\n",
        "operationId": "RestartSource",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Source restarted."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source."
          }
        },
        "summary": "Restart Source",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/restart": {
      "post": {
        "description": "Restarts an instance of a source.\n\n",
        "operationId": "RestartSourceInstance",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Source instance restarted."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source."
          }
        },
        "summary": "Restart Source Instance",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/stop": {
      "post": {
        "description": "Stops all instances of a source.\n\n",
        "operationId": "StopSource",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Source stopped."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source."
          }
        },
        "summary": "Stop Source",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sources/{sourceName}/{instanceId}/stop": {
      "post": {
        "description": "Stops an instance of a source.\n\n",
        "operationId": "StopSourceInstance",
        "parameters": [
          {
            "description": "Fabric of the source.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the source.\n",
            "format": "string",
            "in": "path",
            "name": "sourceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the source instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the source. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Source instance stopped."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified source."
          }
        },
        "summary": "Stop Source Instance",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/platforms": {
      "get": {
        "description": "Returns the list of supported sink platforms.\n\n",
        "operationId": "GetSupportedSinkPlatforms",
        "parameters": [
          {
            "description": "Fabric we are connecting to.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region to send the request to. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of supported sink platforms.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StreamConnectorSupportedPlatform"
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get Supported Sink Platforms",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks": {
      "get": {
        "description": "Returns all sink definitions stored.\n\n",
        "operationId": "GetSinkDefinitions",
        "parameters": [
          {
            "description": "Fabric of the sinks.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sinks. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of sink definitions.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StreamConnectorDefinition"
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get Sink Definitions",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/deployed": {
      "get": {
        "description": "Returns all sinks currently deployed.\n\n",
        "operationId": "GetDeployedSinks",
        "parameters": [
          {
            "description": "Fabric of the sinks.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sinks. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of sink names currently deployed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get Deployed Sinks",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}": {
      "get": {
        "description": "Returns the definition of a sink.\n\n",
        "operationId": "GetSinkDefinition",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested sink definition.",
            "schema": {
              "$ref": "#/definitions/StreamConnectorDefinition"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Get Sink Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      },
      "post": {
        "description": "Creates a new sink definition.\n\n",
        "operationId": "CreateSinkDefinition",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sink information.\n",
            "in": "body",
            "name": "Sink request body.\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamSinkRequestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sink definition created."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Create Sink Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      },
      "put": {
        "description": "Updates a sink definition.\n\n",
        "operationId": "UpdateSinkDefinition",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sink information.\n",
            "in": "body",
            "name": "Sink request body.\n",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamSinkRequestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sink definition updated."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink definition."
          }
        },
        "summary": "Update Sink Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      },
      "delete": {
        "description": "Remove a sink definition.\n\n",
        "operationId": "DeleteSinkDefinition",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region to remove the sink definition from. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Sink definition deleted."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink definition."
          }
        },
        "summary": "Remove Sink Definition",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/info": {
      "get": {
        "description": "Returns information about a sink currently deployed.\n\n",
        "operationId": "GetSinkInfo",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Realtime information about the deployed sink."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Get Sink Info",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/status": {
      "get": {
        "description": "Returns the status of a sink currently deployed.\n\n",
        "operationId": "GetSinkStatus",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the deployed sink."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Get Sink Status",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/status": {
      "get": {
        "description": "Returns the status of an instance of a sink currently deployed.\n\n",
        "operationId": "GetSinkInstanceStatus",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Status of the deployed sink instance."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Get Sink Instance Status",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/start": {
      "post": {
        "description": "Starts all instances of a sink.\n\n",
        "operationId": "StartSink",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Sink started."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Start Sink",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/start": {
      "post": {
        "description": "Starts an instance of a sink.\n\n",
        "operationId": "StartSinkInstance",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Sink instance started."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Start Sink Instance",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/restart": {
      "post": {
        "description": "Restarts all instances of a sink.\n\n",
        "operationId": "RestartSink",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Sink restarted."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Restart Sink",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/restart": {
      "post": {
        "description": "Restarts an instance of a sink.\n",
        "operationId": "RestartSinkInstance",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Sink instance restarted."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Restart Sink Instance",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/stop": {
      "post": {
        "description": "Stops all instances of a sink.\n\n",
        "operationId": "StopSink",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Sink stopped."
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Stop Sink",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streams/sinks/{sinkName}/{instanceId}/stop": {
      "post": {
        "description": "Stops an instance of a sink.\n\n",
        "operationId": "StopSinkInstance",
        "parameters": [
          {
            "description": "Fabric of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the sink.\n",
            "format": "string",
            "in": "path",
            "name": "sinkName",
            "required": true,
            "type": "string"
          },
          {
            "description": "ID of the sink instance. This is the index of the instance starting from 0.\n",
            "format": "string",
            "in": "path",
            "name": "instanceId",
            "required": true,
            "type": "integer",
            "default": 0
          },
          {
            "description": "Region of the sink. Defaults to the connected region if not supplied.\n",
            "format": "string",
            "in": "query",
            "name": "region",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Sink instance stopped."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified sink."
          }
        },
        "summary": "Stop Sink Instance",
        "tags": [
          "Stream IO Connectors"
        ]
      }
    },
    "/_fabric/{fabric}/_api/streamapps/validate": {
      "post": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Validate the definition of a stream application.",
        "description": "Validate the definition of a stream application.",
        "operationId": "validate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Stream application.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stream_app_validate_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully validated stream application.",
            "schema": {
              "$ref": "#/definitions/example_operation_success_rc_200_validate_stream_worker"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "422": {
            "description": "Failed to validate stream application because there is an error in the definition.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_422"
            }
          }
        }
      }
    },
    "/_fabric/{fabric}/_api/streamapps": {
      "get": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Fetch all stream applications.",
        "description": "Fetch all stream applications.",
        "operationId": "getAll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched stream applications.",
            "schema": {
              "$ref": "#/definitions/stream_app_response_container"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Create and deploy a stream application.",
        "description": "Create and deploy a stream application.",
        "operationId": "create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "default": "_system",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Stream application.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stream_app_request"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created stream application.",
            "schema": {
              "$ref": "#/definitions/stream_app_response_container_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "409": {
            "description": "Stream application already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          },
          "422": {
            "description": "Failed to create stream application because there is an error in the definition.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_422"
            }
          }
        }
      }
    },
    "/_fabric/{fabric}/_api/streamapps/samples": {
      "get": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Fetch all sample stream applications.",
        "description": "Fetch all sample stream applications.",
        "operationId": "getSamples",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched sample stream applications.",
            "schema": {
              "$ref": "#/definitions/get_all_sample_stream_apps_response"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        }
      }
    },
    "/_fabric/{fabric}/_api/streamapps/{appname}": {
      "get": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Fetch a stream application.",
        "description": "Fetch the specified stream application.",
        "operationId": "getApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "name": "appname",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched stream application.",
            "schema": {
              "$ref": "#/definitions/get_all_stream_apps_response"
            }
          },
          "404": {
            "description": "Failed to find specified stream application.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Update and redeploy a stream application.",
        "description": "Update and redeploy a stream application.",
        "operationId": "update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "name": "appname",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Stream application.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stream_app_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated stream application.",
            "schema": {
              "$ref": "#/definitions/stream_app_response_container"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified stream application.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "422": {
            "description": "Failed to update stream application because there is an error in the definition.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_422"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Stop and remove a stream application.",
        "description": "Stop and remove a stream application.",
        "operationId": "delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "name": "appname",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed stream application.",
            "schema": {
              "$ref": "#/definitions/example_operation_success_rc_204_delete_stream_worker"
            }
          },
          "404": {
            "description": "Failed to find specified stream application.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        }
      }
    },
    "/_fabric/{fabric}/_api/streamapps/query/{appName}": {
      "post": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Submit an ad hoc stream query and get the result",
        "description": "Submit an ad hoc stream query and get the resulting records from a store.",
        "operationId": "queryStreamApp",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "name": "appName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Query object.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/stream_app_query_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully executed query.",
            "schema": {
              "$ref": "#/definitions/stream_app_query_response"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "422": {
            "description": "Failed to execute query because there is an error in the stream application definition",
            "schema": {
              "$ref": "#/definitions/error_example_rc_422"
            }
          }
        }
      }
    },
    "/_fabric/{fabric}/_api/streamapps/{appname}/active": {
      "patch": {
        "tags": [
          "Stream Workers"
        ],
        "summary": "Enable or disable a stream application.",
        "description": "Enable or disable a stream application.",
        "operationId": "enableApplication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fabric",
            "in": "path",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "name": "appname",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set the active status for the stream application.",
            "schema": {
              "$ref": "#/definitions/get_all_stream_apps_response"
            }
          },
          "404": {
            "description": "Failed to find specified stream application.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        }
      }
    },
    "/_fabric/{fabric}/_api/search": {
      "post": {
        "description": "Search a collection for string matches.\n\nThe specified search query is executed for the collection. If there are too many results, the cursor *id* is set and can be used to obtain the remaining results.\n\n **Note**: This API is applicable for collections with search capability enabled. For user created views, use C8QL query to execute search operation.",
        "operationId": "SearchView",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "schema": {
              "$ref": "#/definitions/api_search_view_search"
            },
            "required": true,
            "description": "Collection in which to search."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully completed search.",
            "schema": {
              "$ref": "#/definitions/api_search_get_view_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Search in collection",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/{fabric}/_api/search/collection/{collection-name}": {
      "post": {
        "description": "Enable or disable search capability of a collection. The collection is created if it does not exist. Search capability is enabled only for one field per collection.",
        "operationId": "SearchViewUpdate",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection-name",
            "required": true,
            "type": "string",
            "description": "Collection for which to set search capability."
          },
          {
            "in": "query",
            "name": "enable",
            "required": true,
            "type": "boolean",
            "default": true,
            "description": "Whether to enable or disable search capability."
          },
          {
            "in": "query",
            "name": "field",
            "type": "string",
            "required": false,
            "description": "For which field to enable search capability (required if enable == true)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set search capablitiy.",
            "schema": {
              "$ref": "#/definitions/example_operation_success_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set Search Capability",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/{fabric}/_api/search/view/{view-name}": {
      "delete": {
        "description": "Remove the search view identified by *view-name*.",
        "operationId": "deleteView",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the search view to remove.",
            "format": "string",
            "in": "path",
            "name": "view-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed search view.",
            "schema": {
              "$ref": "#/definitions/example_operation_success_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove search view",
        "tags": [
          "Search"
        ]
      },
      "get": {
        "description": "Fetches information about a search view.\n\n The call returns a JSON object with at least the following attributes on success:\n  - **result**: Object of search view details\n   - **globallyUniqueId**: Unique identifier of the collection.\n    - **id**: Unique identifier of the search view.\n    - **name**: Name of the search view.\n    - **type**: *search* as type of search view.",
        "operationId": "getViews:Properties",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The name of the search view.\n\n",
            "format": "string",
            "in": "path",
            "name": "view-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found search view.",
            "schema": {
              "$ref": "#/definitions/search_get_view_rc_200_example"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the information about search view",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/{fabric}/_api/search/view/{view-name}/properties": {
      "get": {
        "description": "Returns an object containing the definition of the search view identified by *view-name*.\n\nThe call returns a JSON object with at least the following attributes on success\n - **id**: The identifier of the search view\n- **name**: The name of the search view\n- **type**: The type of the search view as string\n- Any additional search view implementation specific properties.",
        "operationId": "getView",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the search view.",
            "format": "string",
            "in": "path",
            "name": "view-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned search view properties.",
            "schema": {
              "$ref": "#/definitions/search_get_view_properties_rc_200_example"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Read properties of search view",
        "tags": [
          "Search"
        ]
      },
      "put": {
        "description": "Changes the properties of search view.\n\nRequires a JSON object with these properties:\n - **type**: The type of the search view. Must be equal to *search*.\n  - **name**: The name of the search view.\n  - **primarySort**: The default sorting order for the search .\n   - **links**:\n     - **[collection-name]**:\n       - **analyzers** (string): The list of analyzers to be used for indexing of string values (default is [\"identity\"]).\n       - **fields**:\n         - **field-name** (object): This is a recursive structure for the specific attribute path, potentially containing any of the following attributes:\n      *analyzers*, *includeAllFields*, *trackListPositions*, *storeValues*\n      Any attributes not specified are inherited from the parent.\n       - **includeAllFields**: The flag determines whether or not to index all fields on a particular level of\n     depth (default is false).\n       - **trackListPositions**: The flag determines whether or not values in a lists should be treated separate\n     (default is false).\n       - **storeValues**: How should the search view track the attribute values, this setting allows for additional value retrieval optimizations, one of:\n          - *none*: Do not store values by the search view\n         - *id*: Store only information about value presence, to allow use of the EXISTS() function(default is *none*).\n\nThe call returns a JSON object with at least the following attributes on success:\n- **id**: The identifier of the search view\n- **name**: The name of the search view\n- **type**: The search view type\n- all additional search view implementation specific properties\n\n",
        "operationId": "modifyViewPut",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The name of the search view.\n\n",
            "format": "string",
            "in": "path",
            "name": "view-name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/post_api_view_iresearch"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated search view.",
            "schema": {
              "$ref": "#/definitions/api_search_post_view_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Change properties of search view",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/{fabric}/_api/search/view/{view-name}/rename": {
      "put": {
        "description": "Renames a search view.\n\n Requires a JSON object with these properties:\n- **name**: The new search view name\n\nThe call returns a JSON object with at least the following attributes on success:\n- **id**: The identifier of the search view.\n- **name**: The new name of the search view.\n- **type**: The search view type.\n\n**Note**: This method is not available in a cluster.",
        "operationId": "modifyView:rename",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "description": "The name of the search view to rename.\n",
            "format": "string",
            "in": "path",
            "name": "view-name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/rename_view"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully renamed search view.",
            "schema": {
              "$ref": "#/definitions/example_operation_success_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Rename search view",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/{fabric}/_api/search/view": {
      "get": {
        "description": "Returns an object containing an array of all search view descriptions.",
        "operationId": "getViews:AllViews",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found search views.",
            "schema": {
              "$ref": "#/definitions/api_search_get_views_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List all search views.",
        "tags": [
          "Search"
        ]
      },
      "post": {
        "description": "Creates a search view.\n\n Requires a JSON object with these properties:\n - **type**: The type of the search view. Must be equal to *search*.\n  - **name**: The name of the search view.\n  - **primarySort**: The default sorting order for the search view.\n   - **links**:\n     - **[collection-name]**:\n       - **analyzers** (string): The list of analyzers to be used for indexing of string values (default is [\"identity\"]).\n       - **fields**:\n         - **field-name** (object): This is a recursive structure for the specific attribute path, potentially containing any of the following attributes:\n      *analyzers*, *includeAllFields*, *trackListPositions*, *storeValues*\n      Any attributes not specified are inherited from the parent.\n       - **includeAllFields**: The flag determines whether or not to index all fields on a particular level of\n     depth (default is false).\n       - **trackListPositions**: The flag determines whether or not values in a lists should be treated separate\n     (default is false).\n       - **storeValues**: How should the search view track the attribute values, this setting allows for additional value retrieval optimizations, one of:\n          - *none*: Do not store values by the search view\n         - *id*: Store only information about value presence, to allow use of the EXISTS() function(default is *none*).\n\n **Note**: Search view can't be created with the links. Please use PUT/PATCH for links management.",
        "operationId": "createView",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/post_api_view_iresearch"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created search view.",
            "schema": {
              "$ref": "#/definitions/api_search_post_view_http_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "Successfully found existing search view with same name.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create search view",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/{fabric}/_api/search/analyzer": {
      "get": {
        "description": "Returns an object containing an array of all anlyzer descriptions.\n\nThe call returns a JSON object with at least the following attributes on success:\n- **name**: The analyzer name.\n- **type**: The analyzer type.\n- **properties**: The properties used to configure the specified type.\n- **features**: The set of features to set on the analyzer generated fields.",
        "operationId": "RestAnalyzerHandler:List",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found analyzers.",
            "schema": {
              "$ref": "#/definitions/api_search_get_analyzers_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List all analyzers",
        "tags": [
          "Search"
        ]
      },
      "post": {
        "description": "Creates a analyzer.\n\nRequires a JSON object with these properties:\n  - **features** (string): The set of features to set on the analyzer generated fields (default value is an empty array).\n  - **type**: The analyzer type.\n  - **name**: The analyzer name.\n  - **properties**: The properties used to configure the specified type.  Value may be a string, an object or null(default value is *null*).\n\n**Note**: Requires administrator permissions.\n",
        "operationId": "RestAnalyzerHandler:Create",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric.\n"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/post_api_analyzer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found existing analyzer.",
            "schema": {
              "$ref": "#/definitions/api_search_get_analyzer_http_examples_rc_200"
            }
          },
          "201": {
            "description": "Successfully created analyzer.",
            "schema": {
              "$ref": "#/definitions/api_search_get_analyzer_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified collection.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create analyzer",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/{fabric}/_api/search/analyzer/{analyzer-name}": {
      "delete": {
        "description": "Removes an analyzer configuration identified by *analyzer-name*.\n\nThe call returns a JSON object with at least the following attributes on success:\n - **name**: The name of the removed analyzer\n\n**Note**: Requires administrator permissions.",
        "operationId": "RestAnalyzerHandler:Delete",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the analyzer to remove.",
            "format": "string",
            "in": "path",
            "name": "analyzer-name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The analyzer configuration should be removed even if it is in-use.",
            "in": "query",
            "name": "force",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed analyzer configuration.",
            "schema": {
              "$ref": "#/definitions/api_search_post_analyzer_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified analyzer configuration.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "409": {
            "description": "The specified analyzer configuration is still in use and *force* was omitted or *false* specified.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Remove analyzer",
        "tags": [
          "Search"
        ]
      },
      "get": {
        "description": "Fetches the information about analyzer.\n\n The call returns a JSON object with at least the following attributes on success:\n- **name**: The analyzer name.\n- **type**: The analyzer type.\n- **properties**: the properties used to configure the specified type.\n- **features**: The set of features to set on the analyzer generated fields.",
        "operationId": "RestAnalyzerHandler:GetDefinition",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the analyzer to retrieve.",
            "format": "string",
            "in": "path",
            "name": "analyzer-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found analyzer.",
            "schema": {
              "$ref": "#/definitions/api_search_get_analyzer_det_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified analyzer.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Return the analyzer definition",
        "tags": [
          "Search"
        ]
      }
    },
    "/_fabric/_system/_api/database": {
      "get": {
        "description": "Fetches the list of all existing GeoFabrics\n\n**Note**: fetching the list of GeoFabrics requires administrator privileges.",
        "operationId": "ListOfGeo-fabrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Sucessfully fetched the list of GeoFabrics.",
            "schema": {
              "$ref": "#/definitions/get_all_GeoFabrics_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "List of GeoFabrics",
        "tags": [
          "GeoFabrics"
        ]
      },
      "post": {
        "description": "Creates a new GeoFabric.\n\n A JSON object with these properties is required:\n\n  - **name**: has to contain a valid GeoFabric name. \n  - **tenant**: name of the tenant to associate with the GeoFabric. This option is applicable only when system tenant _mm invokes the API. Other tenants need not specify this option, the tenant invoking the API shall be associated with the geoGeoFabricfabric.\n  - **options**:\n\n    - **spotDc**: the Edge Location (Datacenter) where on-spot operations for the given GeoFabric is performed. By default a random data center is chosen from those which are capable.\n    - **metadata**: an optional JSON object with user defined key-value pairs.\n  - **users**: enter an array of usernames that will have admin access to the new GeoFabric. If this field is left blank, the default user *root* will have admin access.\n\nFor instance, if one of your Edge Location URL is *http://myfederation-us-east-1.dev.aws.macrometa.io*, then the corresponding value of spotDC is *myfederation-us-east-1*.\n\n**Note**: creating a new GeoFabric is only possible from within the *_system* fabric.",
        "operationId": "CreateGeo-fabric",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/create_database"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/create_GeoFabric_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "Failed because GeoFabric already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create GeoFabric",
        "tags": [
          "GeoFabrics"
        ]
      }
    },
    "/_fabric/_system/_api/database/user": {
      "get": {
        "description": "Fetches a list of all GeoFabrics the current user can access along with the corresponding information for each GeoFabric.\n\nThe response is a JSON object with the following attributes:\n\n- *name*: the name of the GeoFabric\n\n- *options*:\n    - *associated_regions*: list of data centers added to the GeoFabric\n    - *clusters*: list of data centers added to the GeoFabric\n    - *dcList*: comma-separated list of data centers added to the GeoFabric\n    - *dynamo_local_tables*: flag indicator for dynamo_local_tables\n    - *metadata*: an optional JSON object with user defined key-value pairs\n    - *name*: name of the GeoFabric\n    - *realTime*: whether the changes are published in real time streams\n    - *spotDc*: the Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed\n    - *status*: available or not\n    - *tenant*: tenant's name\n\n- *isSystem*: whether or not the current GeoFabric is the *_system* fabric",
        "operationId": "ListOfAccessibleGeoFabrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully fetched list of GeoFabrics.",
            "schema": {
              "$ref": "#/definitions/get_user_GeoFabrics_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "List of accessible GeoFabrics",
        "tags": [
          "GeoFabrics"
        ]
      }
    },
    "/_fabric/_system/_api/database/{fabric}": {
      "delete": {
        "description": "Remove the GeoFabric along with all the data stored in it.\n\n**Note:** deleting a GeoFabric requires administrator privileges.",
        "operationId": "DropGeo-fabric",
        "parameters": [
          {
            "description": "The name of the GeoFabric.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/dropped_GeoFabrics_example_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove GeoFabric",
        "tags": [
          "GeoFabrics"
        ]
      }
    },
    "/_fabric/{fabric}/_api/database/metadata": {
      "get": {
        "description": "Fetches information about a GeoFabric.\n\nThe response is a JSON object with the following attributes:\n\n- *name*: the name of the GeoFabric\n\n- *options*:\n    - *associated_regions*: list of data centers added to the GeoFabric\n    - *clusters*: list of data centers added to the GeoFabric\n    - *dcList*: comma-separated list of data centers added to the GeoFabric\n    - *dynamo_local_tables*: flag indicator for dynamo_local_tables\n    - *metadata*: an optional JSON object with user defined key-value pairs\n    - *name*: name of the GeoFabric\n    - *realTime*: whether the changes are published in real time streams\n    - *spotDc*: the Edge Location (Datacenter) where on-spot operations for the given GeoFabric will be performed\n    - *status*: available or not\n    - *tenant*: tenant's name\n\n- *isSystem*: whether or not the current GeoFabric is the *_system* fabric",
        "operationId": "InformationOfTheGeo-fabric",
        "parameters": [
          {
            "description": "The GeoFabric name for which we want the information.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the information for the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/get_GeoFabric_info_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Information of the GeoFabric",
        "tags": [
          "GeoFabrics"
        ]
      },
      "put": {
        "description": "A JSON object with following properties is required:\n\n- *metadata*: a JSON object with user defined key-value pairs.",
        "operationId": "SetMetadataInformationOfTheGeo-fabric",
        "parameters": [
          {
            "description": "The GeoFabric name for which metadata should be set.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "description": "A JSON object with user defined key-value pairs.\n\nFields:\n* metadata - json object",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/database_metadata"
            },
            "x-description-offset": 0
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully set the GeoFabric metadata.",
            "schema": {
              "$ref": "#/definitions/set_GeoFabric_example_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the GeoFabric metadata",
        "tags": [
          "GeoFabrics"
        ]
      },
      "patch": {
        "description": "A JSON object with following properties is required:\n\n- *metadata*: a JSON object with user defined key-value pairs to be updated or added in existing metadata.",
        "operationId": "UpdateMetadataInformationOfTheGeo-fabric",
        "parameters": [
          {
            "description": "The GeoFabric name for which metadata should be updated.",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "description": "A JSON object with user defined key-value pairs.\n\nFields:\n* metadata - JSON object",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/database_metadata"
            },
            "x-description-offset": 0
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated the GeoFabric metadata.",
            "schema": {
              "$ref": "#/definitions/patch_GeoFabric_example_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Modify the GeoFabric metadata",
        "tags": [
          "GeoFabrics"
        ]
      }
    },
    "/_api/environments": {
      "get": {
        "description": "Fetches the list of all existing environments.\n\n **Note**: requires administrator permissions.",
        "operationId": "ListEnvironments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully fetched the list of available environments.",
            "schema": {
              "$ref": "#/definitions/get_all_environment_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "List of all environments",
        "tags": [
          "Environments"
        ]
      },
      "post": {
        "description": "A JSON object with these properties is required:\n\n  - **name**: contains a valid environment name. \n  - **tenant**: name of the tenant to associate with the environment. This option is applicable only when system tenant _mm invokes the API. Other tenants need not specify this option as the tenant invoking the API shall be associated with environment.\n  - **options**:\n    - **spotDc**: the Edge Location (Datacenter) where on-spot operations for the given environment are to be performed. By default a random geoFabric is chosen from those which are capable.\n    - **metadata**: an optional JSON object with user defined key-value pairs.\n  - **users**: enter an array of usernames that are given admin access to the new environment. If this field is left blank, the default user *root* will have admin access.\n\nCreates a new environment. The response is a JSON object with the attribute *result* set to *true*.\n\n**Note**: Requires administrator permissions.",
        "operationId": "CreateEnvironment",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/create_environment_database"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created new environment.",
            "schema": {
              "$ref": "#/definitions/create_environment_examples_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "Environment already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/_api/environments/user": {
      "get": {
        "description": "Fetches a list of all _environments_ the current user can access along with the corresponding information for each environment.\n\nThe response is a JSON object with the following attributes:\n\n- *name*: the name of the environment\n\n- *options*:\n    - *associated_regions*: list of data centers with the environment\n    - *clusters*: list of data centers with the environment\n    - *dcList*: comma-separated list of data centers with the environment\n    - *dynamo_local_tables*: flag indicator for dynamo_local_tables\n    - *metadata*: an optional JSON object with user defined key-value pairs\n   - *name*: name of the environment\n    - *realTime*: whether the changes are published in real time streams\n    - *spotDc*: the Edge Location (Datacenter) where on-spot operations for the given environment will be performed\n    - *status*: available or not\n    - *tenant*: tenant's name\n\n- *isSystem*: _true_ if the environment is a system environment",
        "operationId": "ListOfAccessibleEnvironments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully fetched the list of _environments_",
            "schema": {
              "$ref": "#/definitions/get_user_environments_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "List all environments",
        "tags": [
          "Environments"
        ]
      }
    },
    "/_api/environments/{environment}": {
      "delete": {
        "description": "Remove the environment with all the data stored in it.\n\n**Note**: Requires administrator permissions",
        "operationId": "DropEnvironment",
        "parameters": [
          {
            "description": "The name of the environment.",
            "format": "string",
            "in": "path",
            "name": "environment",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed the environment.",
            "schema": {
              "$ref": "#/definitions/dropped_environment_example_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified environment.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove an environment",
        "tags": [
          "Environments"
        ]
      }
    },
    "/_api/environments/{environment}/metadata": {
      "get": {
        "description": "Fetches information about an environment.\n\nThe response is a JSON object with the following attributes:\n\n- *name*: the name of the environment\n\n- *options*:\n    - *associated_regions*: list of data centers with the environment\n    - *clusters*: list of data centers with the environment\n    - *dcList*: comma-separated list of data centers with the environment\n    - *dynamo_local_tables*: flag indicator for dynamo_local_tables\n    - *metadata*: an optional JSON object with user defined key-value pairs\n    - *name*: name of the environment\n    - *realTime*: whether the changes are published in real time streams\n    - *spotDc*: the Edge Location (Datacenter) where on-spot operations for the given environment are performed\n    - *status*: available or not\n    - *tenant*: tenant's name associated with the environment.\n\n- *isSystem*: whether or not the current environment is the *_system* fabric",
        "operationId": "InformationOfTheEnvironment",
        "parameters": [
          {
            "description": "The Database name for which we want the information.",
            "format": "string",
            "in": "path",
            "name": "environment",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the information for the environment.",
            "schema": {
              "$ref": "#/definitions/get_environment_info_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find the specified environment.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Information about the environment",
        "tags": [
          "Environments"
        ]
      },
      "put": {
        "description": "A JSON object with following properties is required:\n\n- *metadata*: a JSON object with user defined key-value pairs.",
        "operationId": "SetMetadataInformationOfTheEnvironment",
        "parameters": [
          {
            "description": "The environment name for which metadata should be set.",
            "format": "string",
            "in": "path",
            "name": "environment",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "description": "A JSON object with user defined key-value pairs.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/database_metadata"
            },
            "x-description-offset": 0
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully set the environment metadata.",
            "schema": {
              "$ref": "#/definitions/set_environment_example_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified environment",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the environment metadata",
        "tags": [
          "Environments"
        ]
      },
      "patch": {
        "description": "A JSON object with following properties is required:\n\n- *metadata*: a JSON object with user defined key-value pairs to be updated or added in existing metadata.",
        "operationId": "UpdateMetadataInformationOfTheEnvironment",
        "parameters": [
          {
            "description": "The environment name for which metadata should be set.",
            "format": "string",
            "in": "path",
            "name": "environment",
            "required": true,
            "default": "_system",
            "type": "string"
          },
          {
            "description": "A JSON object with user defined key-value pairs.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/database_metadata"
            },
            "x-description-offset": 0
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated the environment metadata.\n",
            "schema": {
              "$ref": "#/definitions/patch_environment_example_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified environment",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Modify the environment metadata",
        "tags": [
          "Environments"
        ]
      }
    },
    "/_api/version": {
      "get": {
        "description": "Returns the server name and version number.",
        "operationId": "RestVersionHandler",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returned in all cases.",
            "schema": {
              "$ref": "#/definitions/get_api_return_rc_200"
            }
          }
        },
        "summary": "Return server version",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user": {
      "post": {
        "description": "Create a new user.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "CreateUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created user.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 201
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "active": {
                  "description": "Account status",
                  "type": "boolean",
                  "example": true
                },
                "email": {
                  "description": "The email of the user for whom we want the auth token.",
                  "type": "string",
                  "example": "joe@foo.com"
                },
                "extra": {
                  "description": "The tenant name.",
                  "type": "string",
                  "example": {}
                },
                "tenant": {
                  "description": "The name of the tenant for whose user we want the auth token.",
                  "type": "string",
                  "example": "foo"
                },
                "user": {
                  "description": "The name of the user for whom we want the auth token.",
                  "type": "string",
                  "example": "joe"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "Failed user already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create User",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/": {
      "get": {
        "description": "Fetch data about all users.",
        "operationId": "ListAvailableUsers",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all users.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "array",
                  "items": {
                    "properties": {
                      "tenant": {
                        "description": "The name of the tenant.",
                        "type": "string",
                        "example": "_mm"
                      },
                      "user": {
                        "description": "The username of the tenant.",
                        "type": "string",
                        "example": "test1"
                      },
                      "email": {
                        "description": "The email of the user.",
                        "type": "string",
                        "example": "test@foo.com"
                      },
                      "active": {
                        "description": "Active status of the user.",
                        "type": "boolean",
                        "example": true
                      },
                      "apikey": {
                        "description": "Hash of API key.",
                        "type": "object",
                        "properties": {
                          "hash": {
                            "description": "Hash of API key.",
                            "type": "string",
                            "example": "1467ad2eed8e823f5a5db74aacd716d2f87dc3dde2bced8799e3c07dcf1c88ee"
                          },
                          "parent": {
                            "description": "Hash of API key.",
                            "type": "string",
                            "example": ""
                          }
                        }
                      },
                      "extra": {
                        "description": "A JSON object with extra user information.",
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "List available Users",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}": {
      "delete": {
        "description": "Remove an existing user.\n\n**Note**: Requires Administrator permissions.",
        "operationId": "RemoveUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed user.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 202
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified user",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove User",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Fetch data about the specified user.\n\n**Note**: Requires *Administrator* permissions to access other users data.",
        "operationId": "FetchUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched data.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_200_0"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified user",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Fetch User",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Update the data of an existing user.",
        "operationId": "ModifyUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_modify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully modified user.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_200_0"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified user",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Modify User.",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Replace the data of an existing user.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "ReplaceUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_modify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully replaced user.",
            "schema": {
              "$ref": "#/definitions/api_key_http_examples_rc_200_0"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified user",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Replace User",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/database": {
      "get": {
        "description": "Fetch the list of GeoFabrics available.\n\nThe *result* object contains the GeoFabric names as object keys and the associated privileges for the geofaGeoFabricbric as values.\n\nIn case *full* is specified, the result contains the permissions for the GeoFabric as well as the permissions for the collections and streams.\n\n**Note**:  Requires *Administrate* permissions.",
        "operationId": "ListTheAccessibleDatabasesForAUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user for which you want to query the databases.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return the full set of access levels for all databases and all collections.",
            "in": "query",
            "name": "full",
            "default": false,
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of GeoFabrics.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "result": {
                  "test": "rw"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "List the GeoFabrics available to user.",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/database/{geofabric}": {
      "get": {
        "description": "Fetch the access level for a specific GeoFabric.",
        "operationId": "GetTheDatabaseAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "default": "_system",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user for which you want to query the GeoFabric.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the GeoFabric to query.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return GeoFabric access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "result": "rw"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Get the GeoFabric access level.",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Clear the access level for the GeoFabric *geoname* of user *user*. As consequence the default GeoFabric access level is used. If there is no defined default GeoFabric access level, it defaults to *No access*.\n\n**Note**: Requires *Administrator* permissions..",
        "operationId": "ClearTheDatabaseAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared GeoFabric access level.",
            "schema": {
              "example": {
                "code": 202,
                "error": false
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Clear the GeoFabric access level",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Set the access levels for the GeoFabric *geoname* of user *user*.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "SetTheDatabaseAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_database"
            }
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the GeoFabric.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set GeoFabric access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "testgeo": "ro"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Set the GeoFabric access level",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/database/{geofabric}/collection": {
      "get": {
        "description": "Fetch the list of collections access level for a specific *user*\n\n If access level for collection is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then GeoFabric access level is used.",
        "operationId": "GetTheAllCollectionAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user for which you want to query the GeoFabric.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the GeoFabric to query.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return the full set of access levels for all collections.",
            "in": "query",
            "name": "full",
            "default": false,
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return collections access level.",
            "schema": {
              "example": {
                "error": false,
                "code": 200,
                "result": {
                  "testCollection": "rw"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the specific collection access level",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/database/{geofabric}/collection/{collection}": {
      "get": {
        "description": "Return the collection access level for a specific collection\n\n If access level for collection is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then GeoFabric access level is used.",
        "operationId": "GetTheSpecificCollectionAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user for which you want to query the GeoFabric.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the GeoFabric to query.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return collection access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "result": "rw"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the specific collection access level",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Clear the collection access level for the collection *collection* in the GeoFabric *geofabric* of user *user*.  As consequence the default collection access level is used. If there is no defined default collection access level, it defaults to *No access*.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "ClearTheCollectionAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared collection access level.",
            "schema": {
              "example": {
                "code": 202,
                "error": false
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Clear the collection access level.",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Set the collection access level for the *collection* in the GeoFabric *geoname* for user *user*.\n\nIf access level for collection is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then GeoFabric access level is used.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "SetTheCollectionAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_collection"
            }
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the collection.",
            "format": "string",
            "in": "path",
            "default": "*",
            "name": "collection",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed access permissions.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "_system/testCollection": "ro"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the collection access level",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/database/{geofabric}/stream": {
      "get": {
        "description": "Fetch the list of streams available to the specified *user*.\n\nThe *result* object contains the stream names as object keys, and the associated privileges for the stream as values.\n\nIf access level for stream is not set then default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set then GeoFabric access level is used.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "ListTheAccessibleStreamsForAUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the user for which you want to query the streams.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "Return the full set of access levels for all streams. If set to *false*, return the read-only streams.",
            "in": "query",
            "name": "full",
            "default": false,
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned stream access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "result": "rw"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List the accessible streams",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/database/{geofabric}/stream/{stream}": {
      "get": {
        "description": "Fetch the stream access level for a specific stream.",
        "operationId": "GetTheStreamAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user for which you want to query the streams.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the GeoFabric.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the stream to query.",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return the stream access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "result": "ro"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the stream access level",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Clear the stream access level for the *stream* of user *user*. As consequence the default stream access level is used. If there is no defined default stream access level, it defaults to *No access*.",
        "operationId": "ClearTheStreamAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the stream.",
            "format": "string",
            "in": "path",
            "name": "stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully clear the stream access level.",
            "schema": {
              "example": {
                "code": 202,
                "error": false
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Clear the stream access level.",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Set the stream access levels for the *stream* of API key with *keyid*.\n\nIf access level for stream is not set the default(\"&#42;\") access level is used. If default(\"&#42;\") access level is also not set the GeoFabric access level is used.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "SetTheStreamAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_database"
            }
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the database.",
            "format": "string",
            "in": "path",
            "default": "_system",
            "name": "geofabric",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the stream.",
            "format": "string",
            "in": "path",
            "default": "*",
            "name": "stream",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully set stream access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "c8globals.testStream": "ro"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric, user or collection",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the stream access level",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/billing": {
      "get": {
        "description": "Fetch the billing access level.",
        "operationId": "GetTheBillingAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user for which you want to query the billing.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned pilling access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "result": {
                  "billing": "rw"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find the specified user.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the billing access level",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "description": "Clear the billing access level of user *user*.",
        "operationId": "ClearTheBillingAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully cleared the billing access level.",
            "schema": {
              "example": {
                "code": 202,
                "error": false
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified user.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Clear the billing access level",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Set the billing access levels for user *user*.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "SetTheBillingAccessLevel",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user_grant_database"
            }
          },
          {
            "description": "The name of the user.",
            "format": "string",
            "in": "path",
            "name": "user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully return billing access level.",
            "schema": {
              "example": {
                "code": 200,
                "error": false,
                "billing": "ro"
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified user.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the billing access level.",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/attributes": {
      "get": {
        "description": "Fetch the list of attributes for the specified user.",
        "operationId": "GetTheAttributesForUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "default": "user",
            "type": "string",
            "format": "string",
            "description": "The name of the user."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched attributes.",
            "schema": {
              "$ref": "#/definitions/http_examples_rc_200_attributes"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified user.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the user attributes",
        "tags": [
          "Users"
        ]
      },
      "put": {
        "description": "Update the attributes for the user.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "CreateTheAttributesForUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "default": "user",
            "type": "string",
            "format": "string",
            "description": "The name of the user."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/attribute_values"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed attributes.",
            "schema": {
              "$ref": "#/definitions/http_examples_rc_200_attributes"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified user.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Update attributes",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/attributes/truncate": {
      "delete": {
        "description": "Remove all user's attribute.",
        "operationId": "ClearAllAttributesForUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "default": "user",
            "type": "string",
            "format": "string",
            "description": "The name of the user."
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed attributes.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 202
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                }
              },
              "required": [
                "error"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified user.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove all attributes",
        "tags": [
          "Users"
        ]
      }
    },
    "/_fabric/{fabric}/_api/user/{user}/attributes/{attributeid}": {
      "delete": {
        "description": "Removes a user's attribute.",
        "operationId": "ClearTheAttributesForUser",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "user",
            "required": true,
            "default": "user",
            "type": "string",
            "format": "string",
            "description": "The name of the user."
          },
          {
            "in": "path",
            "name": "attributeid",
            "required": true,
            "default": "attributeid",
            "type": "string",
            "format": "string",
            "description": "Attribute id."
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed attribute.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 202
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                }
              },
              "required": [
                "error"
              ],
              "type": "object"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "404": {
            "description": "Failed to find specified user.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove attribute",
        "tags": [
          "Users"
        ]
      }
    },
    "/_api/billing/account": {
      "get": {
        "description": "Get account details (plan, contact and payment settings) for given tenant\n\n - **tenant**: name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.\n\n **Note**: this API is not applicable for system tenants.",
        "operationId": "GetBillingAccount",
        "parameters": [
          {
            "description": "Tenant name",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched account details .",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Account_Get"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get account details",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/contact": {
      "put": {
        "description": "Update contact details for given tenant name.\n - **tenant**: name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.\n\n\n Following attributes are provided as part of JSON request body.\n - **firstname**: first name\n - **lastname**: last name\n - **company**: name of the company\n - **email**: email address\n - **phone**: phone number\n - **line1**: address Line 1 \n - **line2**: address Line 2\n - **city**: city\n - **state**: state \n - **country**: name of the country\n - **zipcode**: zip code\n\n **Note**: this API is not applicable for system tenants.",
        "operationId": "UpdateContactDetails",
        "parameters": [
          {
            "description": "Tenant name.",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Contact_Update"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated contact details.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "Returned if a billing plan with the same name already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Update contact details",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/paymentsettings": {
      "put": {
        "description": "Update payment settings for given tenant\n - **tenant**: name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.\n - **payment_method_id**: the payment method ID is sent in the body of a request as a key-value pair.\n\n **Note**: this API is not applicable for system tenants `_mm` and `demo`.",
        "operationId": "UpdatePaymentSettings",
        "parameters": [
          {
            "description": "Tenant name.",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Payment_Update"
            },
            "x-description-offset": 54
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated payment settings.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Update payment settings",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/payments": {
      "get": {
        "description": "Get all payments details of the tenant for specified number of previous months.\n - **tenant**: the name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.\n - **limit**: the number of previous months for which payment details are required.\n\n **Note**: this API is not applicable for system tenants.",
        "operationId": "GetPayments",
        "parameters": [
          {
            "description": "Tenant name.",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          },
          {
            "description": "Number of previous months for which payment details are required.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 10
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched payment details. \n\nExample - https://stripe.com/docs/api/payment_intents/list\n\n**Note**: the example here is an excerpt please follow the link above for a complete example.",
            "schema": {
              "$ref": "#/definitions/stripe_200_intent_list"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get payment details of the previous months for the given tenant.",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/invoices": {
      "get": {
        "description": "Get all invoice details of the tenant for specified number of previous months.\n- **tenant**: the name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.\n- **limit**: the number of previous months for which payment details are required.\n\n**Note**: this API is not applicable for system tenants.",
        "operationId": "GetBillingInvoices",
        "parameters": [
          {
            "description": "Name of the tenant.",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          },
          {
            "description": "Number of previous months for which invoices are required.",
            "format": "integer",
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "integer",
            "default": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched invoice details.\n\nExample - https://stripe.com/docs/api/invoices/list\n\n**Note**: the example here is an excerpt please follow the link above for a complete example.",
            "schema": {
              "$ref": "#/definitions/stripe_200_invoice_list"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get invoices for the previous months",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/invoice/current": {
      "get": {
        "description": "Get invoice of the tenant for the current month.\n- **tenant**: the name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.  \n**Note**: this API is not applicable for system tenants.",
        "operationId": "GetCurrentMonthInvoice",
        "parameters": [
          {
            "description": "Name of the tenant",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched invoice details.\n\nExample - https://stripe.com/docs/api/invoices/upcoming\n\n**Note**: the example here is an excerpt please follow the link above for a complete example.",
            "schema": {
              "$ref": "#/definitions/stripe_200_invoice_upcoming"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get invoice of the current month for the given tenant.",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/invoices/{year}/{month}": {
      "get": {
        "description": "Get invoices for a tenant, in a specific month and year.\n- **tenant**: the name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.  \n**Note**: this API is not applicable for system tenants.",
        "operationId": "GetInvoiceForMonthYear",
        "parameters": [
          {
            "description": "Name of the tenant.",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          },
          {
            "description": "Year in 'YYYY' format.",
            "format": "integer",
            "in": "path",
            "name": "year",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Month. Valid values:[1..12]",
            "format": "integer",
            "in": "path",
            "name": "month",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched invoice details.\n\nExample - https://stripe.com/docs/api/invoices/retrieve\n\n**Note**: the example here is an excerpt please follow the link above for a complete example.",
            "schema": {
              "$ref": "#/definitions/stripe_200_invoice_month_year"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get invoice of specific year and month for the tenant",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/usage": {
      "get": {
        "description": "Get usage of a tenant in a specific date range. If no query parameters are specified, usage from start date of the month to current date is returned.\n- **tenant**: the name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.  \n**Note**: this API is not applicable for system tenants.",
        "operationId": "GetAccountUsage",
        "parameters": [
          {
            "description": "Name of the tenant.",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          },
          {
            "description": "Start date in 'YYYY-MM-DD' format.",
            "format": "string",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "End date in 'YYYY-MM-DD' format.",
            "format": "string",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched usage of tenant.",
            "schema": {
              "$ref": "#/definitions/Response_Usage_Get"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get usage of the tenant",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_api/billing/region/{region}/usage": {
      "get": {
        "description": "Get usage of a tenant in specific date range for a specific region.\n If no query parameters are specified, usage from start date of the month to current date is returned.\n- **tenant**: the name of the tenant is sent as a HTTP header. This is an optional field, if left unprovided it will use the tenant invoking the request.  \n**Note**: this API is not applicable for system tenants.",
        "operationId": "GetAccountUsageOfSpecificRegion",
        "parameters": [
          {
            "description": "Name of the tenant.",
            "format": "string",
            "in": "header",
            "name": "tenant",
            "type": "string"
          },
          {
            "description": "Name of the region.",
            "format": "string",
            "in": "path",
            "name": "region",
            "required": true,
            "type": "string"
          },
          {
            "description": "Start date in 'YYYY-MM-DD' format.",
            "format": "string",
            "in": "query",
            "name": "startDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "End date in 'YYYY-MM-DD' format.",
            "format": "string",
            "in": "query",
            "name": "endDate",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched usage of tenant.",
            "schema": {
              "$ref": "#/definitions/Response_Usage_Get"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/Response_Billing_Code_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get usage of the tenant for specific region",
        "tags": [
          "Billing"
        ]
      }
    },
    "/_fabric/{fabric}/_api/export": {
      "post": {
        "description": "Execute the **query** and return list of result documents. **Query** cannot contain the following keywords: **INSERT**, **UPDATE**, **REPLACE**, **REMOVE** and **UPSERT**.",
        "operationId": "ExportQueryData",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_export"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully exported data.",
            "schema": {
              "$ref": "#/definitions/export_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Export data",
        "tags": [
          "Import Export"
        ]
      }
    },
    "/_fabric/{fabric}/_api/export/{collection}": {
      "get": {
        "description": "Return a list of documents in the specified collection. If offset, limit and order are not specified their default values are applied.",
        "operationId": "ExportCollectionData",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "type": "string",
            "format": "string",
            "description": "The name of the collection."
          },
          {
            "description": "This option can be used to simulate paging.",
            "in": "query",
            "name": "offset",
            "required": false,
            "default": 0,
            "type": "string"
          },
          {
            "description": "This option can be used to simulate paging. Limit the result. **Maximum: 1000**.",
            "in": "query",
            "name": "limit",
            "required": false,
            "default": 20,
            "minimum": 1,
            "maximum": 1000,
            "type": "string"
          },
          {
            "description": "Order the results asc or desc.",
            "in": "query",
            "name": "order",
            "required": false,
            "default": "asc",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of documents.",
            "schema": {
              "$ref": "#/definitions/export_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Export collection data",
        "tags": [
          "Import Export"
        ]
      }
    },
    "/_fabric/{fabric}/_api/import/{collection}": {
      "post": {
        "description": "Create documents in the collection identified by collection parameter.",
        "operationId": "ImportCollectionData",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "collection",
            "required": true,
            "default": "",
            "type": "string",
            "format": "string",
            "description": "The name of the collection."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_import"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully imported data.\n\nIf there are any errors, an additional header *X-C8-Error-Codes* is set, that contains a map of the error codes that occurred together with their multiplicities, as in: 1205:10,1210:17 which means that in 10 cases the error 1205 \"illegal document handle\" and in 17 cases the error 1210 \"unique constraint violated\" has happened. The response body has additional failed document details in *details* object.",
            "schema": {
              "$ref": "#/definitions/import_http_examples_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed to validate because you do not have access to the GeoFabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Import collection data",
        "tags": [
          "Import Export"
        ]
      }
    },
    "/_api/compute/configmaps": {
      "get": {
        "description": "Return list of configmaps.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of configmap.",
            "schema": {
              "$ref": "#/definitions/compute_get_configs_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ConfigmapController_findAll",
        "summary": "List configmaps"
      },
      "post": {
        "description": "Create a configmap using file or folder or using literals.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateConfigmapDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created configmap.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ConfigmapController_create",
        "summary": "Create configmap"
      }
    },
    "/_api/compute/configmaps/{configMap}": {
      "delete": {
        "description": "Remove a configmap.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "configMap",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed configmap.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified configmap.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ConfigmapController_remove",
        "summary": "Remove configmap"
      },
      "get": {
        "description": "Fetch information about configmap.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "configMap",
            "description": "ConfigMap name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found configmap.",
            "schema": {
              "$ref": "#/definitions/compute_get_configs_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified configmap or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ConfigmapController_findOne",
        "summary": "Describe configmap"
      },
      "patch": {
        "description": "Update a configmap.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "configMap",
            "description": "ConfigMap name.",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateConfigmapDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated configmap.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified configmap or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ConfigmapController_update"
      }
    },
    "/_api/compute/revisions": {
      "get": {
        "description": "Return list of revisions.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of revisions.",
            "schema": {
              "$ref": "#/definitions/compute_get_revisions_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "RevisionController_findAll",
        "summary": "List revisions"
      }
    },
    "/_api/compute/revisions/{revision}": {
      "delete": {
        "description": "Remove a revision.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "revision",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed revision.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified revision or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "RevisionController_remove",
        "summary": "Remove revision"
      },
      "get": {
        "description": "Return information about a revision.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "revision",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found revision.",
            "schema": {
              "$ref": "#/definitions/compute_get_revisions_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified revision or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "RevisionController_findOne",
        "summary": "Describe revision"
      }
    },
    "/_api/compute/routes": {
      "get": {
        "description": "Return list of routes.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of routes.",
            "schema": {
              "$ref": "#/definitions/compute_get_route_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "RouteController_findAll",
        "summary": "List routes"
      }
    },
    "/_api/compute/routes/{service}": {
      "get": {
        "description": "Return information about a route.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found route.",
            "schema": {
              "$ref": "#/definitions/compute_get_route_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified route or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "RouteController_findOne",
        "summary": "Describe route"
      }
    },
    "/_api/compute/secrets": {
      "get": {
        "description": "Return list of secrets.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of secrets.",
            "schema": {
              "$ref": "#/definitions/compute_get_secrets_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "SecretsController_findAll",
        "summary": "List secrets"
      }
    },
    "/_api/compute/secrets/registry": {
      "post": {
        "description": "Create a registry secret.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRegistrySecretDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created registry secret.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "SecretsController_create",
        "summary": "Create docker registry secret"
      }
    },
    "/_api/compute/secrets/{secret}": {
      "delete": {
        "description": "Remove a secret.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed a secret.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified secret or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "SecretsController_remove",
        "summary": "Remove secret"
      },
      "get": {
        "description": "Return information about a secret.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "secret",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found secret.",
            "schema": {
              "$ref": "#/definitions/compute_get_secrets_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified secret or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "SecretsController_findOne",
        "summary": "Describe secret"
      }
    },
    "/_api/compute/services": {
      "get": {
        "description": "Return list of services.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched list of services.",
            "schema": {
              "$ref": "#/definitions/compute_get_services_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ServiceController_findAll",
        "summary": "List services"
      },
      "post": {
        "description": "Create a service.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateServiceDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a service.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ServiceController_create",
        "summary": "Create service"
      }
    },
    "/_api/compute/services/{service}": {
      "delete": {
        "description": "Remove a service.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully remove a service.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified service or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ServiceController_remove",
        "summary": "Remove service"
      },
      "get": {
        "description": "Return information about a service.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found service.",
            "schema": {
              "$ref": "#/definitions/compute_get_services_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified service or regions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ServiceController_findOne",
        "summary": "Describe service"
      },
      "put": {
        "description": "Update a service.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateServiceDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the service.",
            "schema": {
              "type": "string",
              "example": "3aea55e5-b837-489d-83b0-abaf479fe2cf"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified service.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "ServiceController_update",
        "summary": "Update an existing service"
      }
    },
    "/_api/compute/status/{cmdId}": {
      "get": {
        "description": "Return status.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "cmdId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "details",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "regions",
            "description": "Comma separated list of region names or keywords (LOCAL or ALL).",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found status.",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified cmdid.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "tags": [
          "Compute"
        ],
        "operationId": "StatusController_findOne",
        "summary": "Get status"
      }
    },
    "/datacenter/all": {
      "get": {
        "description": "Fetches data about all the data centers.",
        "operationId": "ReturnListOfAllEdgeLocations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found data centers.",
            "schema": {
              "$ref": "#/definitions/get_datacenter_response_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Lists all data centers",
        "tags": [
          "Data Centers"
        ]
      }
    },
    "/datacenter/local": {
      "get": {
        "description": "Fetches data for a local/regional the data center.",
        "operationId": "ListDetailsOfLocalEdgeLocation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found data center.",
            "schema": {
              "$ref": "#/definitions/get_regional_datacenter_response_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Get a regional data center",
        "tags": [
          "Data Centers"
        ]
      }
    },
    "/datacenter/{dc-name}": {
      "get": {
        "description": "Fetches data for data center, identified by *dc-name*.",
        "operationId": "ListDetailsOfSpecifiedEdgeLocation",
        "parameters": [
          {
            "description": "The name of the data center.",
            "format": "string",
            "in": "path",
            "name": "dc-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found data center.",
            "schema": {
              "$ref": "#/definitions/datacenter_get_rc_200"
            }
          },
          "404": {
            "description": "Failed to find specified data center.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get data center",
        "tags": [
          "Data Centers"
        ]
      }
    },
    "/datacenter/{location}/{status}": {
      "put": {
        "description": "Changes the properties of a data center.",
        "operationId": "ChangeSpotCapabilityOfAnEdgeLocation",
        "parameters": [
          {
            "description": "The name of the data center.",
            "format": "string",
            "in": "path",
            "name": "location",
            "required": true,
            "type": "string"
          },
          {
            "description": "The on-spot capability of the data center.",
            "format": "boolean",
            "in": "path",
            "name": "status",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed data center on-spot capability.",
            "schema": {
              "properties": {
                "result": {
                  "type": "string",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          }
        },
        "summary": "Set data center spot capability",
        "tags": [
          "Data Centers"
        ]
      }
    },
    "/datacenter/_tenant/{tenant-name}": {
      "get": {
        "description": "Fetches data for all data centers for tenant identified by *tenant-name*.",
        "operationId": "ListEdgeLocation(akaDatacenter)DetailsForSpecifiedTenant",
        "parameters": [
          {
            "description": "The name of the tenant",
            "format": "string",
            "in": "path",
            "name": "tenant-name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found data center.",
            "schema": {
              "$ref": "#/definitions/datacenter_get_rc_200_array"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "List all available data centers.",
        "tags": [
          "Data Centers"
        ]
      }
    },
    "/_api/members": {
      "get": {
        "description": "Fetches data for all the clusters in the federation.",
        "operationId": "ListOfFederationMembers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found clusters.",
            "schema": {
              "$ref": "#/definitions/datacenter_members_get_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "List all clusters",
        "tags": [
          "Data Centers"
        ]
      },
      "post": {
        "description": "Updates the clusters in federation.",
        "operationId": "JoinFederationOfClusters",
        "parameters": [
          {
            "description": "A JSON Object with properties.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/federation_member_peerip"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully updated clusters in federation.",
            "schema": {
              "$ref": "#/definitions/datacenter_members_post_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          }
        },
        "summary": "Update clusters in federation",
        "tags": [
          "Data Centers"
        ]
      }
    },
    "/_api/members/{member}": {
      "delete": {
        "description": "Removes the cluster from federation, identified by *member*.",
        "operationId": "DeleteMemberFromFederation",
        "parameters": [
          {
            "description": "The name of the cluster.",
            "format": "string",
            "in": "path",
            "name": "member",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed cluster from federation."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "404": {
            "description": "Failed to find specified data center.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove a cluster from federation",
        "tags": [
          "Data Centers"
        ]
      }
    },
    "/_api/tenants": {
      "get": {
        "description": "Return a list of tenants in the system. Requires administrator permissions.\n",
        "operationId": "ReturnListOfTenants",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found tenants.",
            "schema": {
              "$ref": "#/definitions/administration_tenants_get_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Return list of tenants",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/tenant": {
      "post": {
        "description": "Create a new tenant\n\n**A JSON object with these properties is required:**\n\n  - **name**: The name of the tenant as a string. This is not mandatory.\n   - **email**: The email address of the tenant as a string. This is mandatory.\n   - **passwd**: The user password as a string. If no password is specified, an empty string is used.\n  - **plan**: The name of the tenant billing plan as a string. This is mandatory.\n  - **attribution**: The attribution of the tenant as a string. This is mandatory.\n   - **dcList**: A comma-separated string containing the data center names on which this tenant is to create. (default: the tenant is assumed to be global to the federation and is create on all current data centers in the federation).\n    - **metadata**: The metadata of the tenant as a JSON object. This is non mandotory\n - **contact**: Contact details of the user account. An optional JSON object with detailed contact information of the user.  This is field is non mandotory for **FREE**, **ENTERPRISE** and other **Demo** plans.\n\n**Note**: Requires *Administrator* permissions.",
        "operationId": "CreateTenant(requiresSuperuserPrivileges)",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created tenant.",
            "schema": {
              "$ref": "#/definitions/administration_tenant_create_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "409": {
            "description": "Failed because tenant with same name already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create Tenant",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/tenant/{tenant}": {
      "delete": {
        "description": "Removes the tenant. The system tenant _mm account cannot remove.\n\n  **Note**: Requires *Administrator* permissions",
        "operationId": "RemoveTenant(requiresSuperuserPrivileges)",
        "parameters": [
          {
            "description": "The tenant name to remove. The main default system tenant *_mm* cannot remove.\n\n",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed tenant.",
            "schema": {
              "$ref": "#/definitions/administration_tenant_delete_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove Tenant",
        "tags": [
          "Administration"
        ]
      },
      "get": {
        "description": "Fetch information about the tenant.\n\n **Note**: Requires *Administrator* permissions",
        "operationId": "ListDetailsOfTenant",
        "parameters": [
          {
            "description": "The tenant name for whom we want to fetch info.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found tenant.",
            "schema": {
              "$ref": "#/definitions/get_tenant_example_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List details of the tenant",
        "tags": [
          "Administration"
        ]
      },
      "patch": {
        "description": "Update a tenant.\n\nRequires a JSON object with these properties:\n\n  - **active**: *True* if then tenant is active.\n  - **status**: Status of tenant. **Valid values**: *`active, expired, delinquent, inactive`* \n  - **metadata**: The metadata of the tenant as a JSON object.\n\n**Note**: Requires *Administrator* permissions",
        "operationId": "ModifyTenant",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_modify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated tenant.",
            "schema": {
              "$ref": "#/definitions/tenant_modify_example_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Modify Tenant",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/plan": {
      "get": {
        "description": "Return a list of billing plans in the system.\n\n **Note**: Requires *Administrator* permissions",
        "operationId": "GetListOfPlans",
        "parameters": [],
        "responses": {
          "201": {
            "description": "List of billing plans displayed.",
            "schema": {
              "$ref": "#/definitions/api_plan_list_rc_200"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Return list of billing plans",
        "tags": [
          "Administration"
        ]
      },
      "post": {
        "description": "Create a new billing plan.\n\n Requires a JSON object with these properties:\n - **name**: Billing plan name as a string.\n - **planId**: Billing plan ID as a string.\n - **description**: (Optional) Description of the billing plan as a string.\n - **featureGates**: A list of strings containing the enabled feature gates for the billing plan.\n - **attribution**: (Optional) Billing plan attribution.\n - **label**: (Optional) Display label as a string.\n - **isBundle**: (Optional) True indicates the billing plan is a bundle, false indicates the billing plan is not a bundle(Default is false).\n - **metadata**: (Optional) Metadata of the billing plan as a set of key-value pairs.\n - **metrics** : (Optional) List of metrics applicable to this billing plan.\n - **active**: Specifies if the billing plan is active.\n - **demo**: (Optional) Specifies if the billing plan is a demo billing plan.",
        "operationId": "CreatePlan",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/plan_create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created billing plan.",
            "schema": {
              "$ref": "#/definitions/plan_201_billing"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          },
          "409": {
            "description": "Failed to create billing plan because billing plan already exists.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_409"
            }
          }
        },
        "summary": "Create billing plan",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/plan/{name}": {
      "get": {
        "description": "Fetch information about a billing plan.",
        "operationId": "ListDetailsOfPlan",
        "parameters": [
          {
            "description": "The billing plan name for which we want to fetch info.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned details of the billing plan.",
            "schema": {
              "$ref": "#/definitions/plan_201_billing"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "List details of the billing plan",
        "tags": [
          "Administration"
        ]
      },
      "patch": {
        "description": "Update the billing plan.\n\n Requires a JSON object with these properties:\n - **name**: Billing plan name as a string.\n - **planId**: Billing plan ID as a string.\n - **description**: (Optional) Description of the billing plan as a string.\n - **featureGates**: A list of strings containing the enabled feature gates for the billing plan.\n - **attribution**: (Optional) Billing plan attribution.\n - **label**: (Optional) Display label as a string.\n - **isBundle**: (Optional) True indicates the billing plan is a bundle, false indicates the billing plan is not a bundle(Default is false).\n - **metadata**: (Optional) Metadata of the billing plan as a set of key-value pairs.\n - **metrics** : (Optional) List of metrics applicable to this billing plan.\n - **active**: Specifies if the billing plan is active.",
        "operationId": "ModifyPlan",
        "parameters": [
          {
            "description": "The name of the billing plan to modify.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/plan_create"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated billing plan data.",
            "schema": {
              "$ref": "#/definitions/plan_create"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Modify billing plan",
        "tags": [
          "Administration"
        ]
      },
      "delete": {
        "description": "Removes an existing billing plan.",
        "operationId": "RemovePlan",
        "parameters": [
          {
            "description": "The billing plan name to remove.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successfully removed billing plan.",
            "schema": {
              "$ref": "#/definitions/plan_201_billing"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove billing plan",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/plan/update": {
      "post": {
        "description": "Update the billing plan for a tenant.\n\n **Note**: If tenant name is not specified, then tenant who is invoking API is used to update billing plan.\n\n Requires a JSON object with these properties:\n\n - **attribution**: Attribution of the billing plan.\n - **plan**: Name of the billing plan.\n  - **tenant**: (Optional) Name of the tenant.\n  - **payment_method_id**: (Optional) Stripe payment method ID which should be associated account.",
        "operationId": "UpdateTenantPlan",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/update_tenant_plan"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated billing plan.",
            "schema": {
              "$ref": "#/definitions/tenant_update_plan_example_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Update tenant billing plan",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/limits/defaults": {
      "get": {
        "description": "Return the default limits for tenants.",
        "operationId": "GetDefaultTenantLimits",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully found billing plan limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/tenant_limits_value"
                }
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Return the default limits for tenants",
        "tags": [
          "Administration"
        ]
      },
      "put": {
        "description": "Set the default tenant limits.\n\n **Note**: If data fields are omitted, then they are set to GDN defined default values.",
        "operationId": "SetDefaultTenantLimits",
        "parameters": [
          {
            "description": "The new default values.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_limits_value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the default tenant limit.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/tenant_limits_value"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Set the default tenant limits",
        "tags": [
          "Administration"
        ]
      },
      "patch": {
        "description": "Updates default tenant limits.\n\n **Note**: Omitted data fields keep their current value.",
        "operationId": "UpdateDefaultTenantLimits",
        "parameters": [
          {
            "description": "The new default values.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_limits_value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the default tenant limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/tenant_limits_value"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Updates default tenant limits",
        "tags": [
          "Administration"
        ]
      },
      "delete": {
        "description": "Reset default tenant limits.",
        "operationId": "ResetDefaultTenantLimits",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully reset default tenant limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/tenant_limits_value"
                }
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Reset default tenant limits",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/limits/defaults/{service}": {
      "get": {
        "description": "Return the default service limits for tenants.\n\n This API supports these services: `[apiServer, cep, compute, database, eventHub, streamsGlobal and streamsLocal]`",
        "operationId": "GetServiceDefaultLimits",
        "parameters": [
          {
            "description": "The name of the service.",
            "format": "string",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found service.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/streams_limits_example"
                }
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Return the default limits for tenants",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/limits/enable": {
      "get": {
        "description": "Return weather limits are configured for all tenants.\n\n **Note**: If set to *false* the limits are not enforced",
        "operationId": "GetEnableLimits",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully fetch whether limits are configured.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "Return the value of enable limits flag. *True* if then its enabled, else *false*",
                  "type": "object",
                  "example": {
                    "value": true
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Get limits configured",
        "tags": [
          "Administration"
        ]
      },
      "post": {
        "description": "Enable configuration of limits for all tenants. If set to false the limits are not enforced.",
        "operationId": "SetEnableLimits",
        "parameters": [
          {
            "description": "The flag indication whether limits are enabled for all tenants. The default value is *true*. If set to *false*, the configured limits are not applicable.",
            "in": "query",
            "name": "value",
            "required": true,
            "default": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully enabled limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/set_enable_limits_flag"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "summary": "Set limits configured",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/limits/tenant/{tenant}": {
      "get": {
        "description": "Return the limits for a tenant.",
        "operationId": "GetTenantLimits",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found tenant.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/tenant_limits_value"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Return the limits for a tenant",
        "tags": [
          "Administration"
        ]
      },
      "put": {
        "description": "Set the tenant limits.\n\n **Note**: If data fields are omitted, then they are set to GDN defined default values.",
        "operationId": "SetTenantLimits",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new default values.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_limits_value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the tenant limit.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the tenant limits",
        "tags": [
          "Administration"
        ]
      },
      "patch": {
        "description": "Updates tenant limits.\n\n **Note**: Omitted data fields keep their current value.",
        "operationId": "UpdateTenantLimits",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new default values.",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_limits_value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the tenant limit.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Updates tenant limit",
        "tags": [
          "Administration"
        ]
      },
      "delete": {
        "description": "Reset tenant limits.",
        "operationId": "ResetTenantLimits",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Reset tenant limits",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/limits/tenant/{tenant}/{service}": {
      "get": {
        "description": "Return the limit for a tenant.\n\n This API supports these services: `[apiServer, cep, compute, database, eventHub, streamsGlobal and streamsLocal]`",
        "operationId": "GetTenantServiceLimits",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the service.",
            "format": "string",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetch tenant service limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/streams_limits_example"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the limits for a tenant service",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/limits/plan/{attribution}/{name}": {
      "get": {
        "description": "Return the limits for a billing plan.",
        "operationId": "GetPlanLimits",
        "parameters": [
          {
            "description": "The attribution of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "attribution",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found specified billing plan limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/tenant_limits_value"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the limits for a billing plan",
        "tags": [
          "Administration"
        ]
      },
      "put": {
        "description": "Set the billing plan limits.\n\n **Note**: If data fields are omitted, then they are set to GDN defined default values.",
        "operationId": "SetPlanLimits",
        "parameters": [
          {
            "description": "The attribution of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "attribution",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new default values with billing plan information",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_limits_value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated billing plan limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set the billing plan limits",
        "tags": [
          "Administration"
        ]
      },
      "patch": {
        "description": "Updates billing plan limits.\n\n **Note**: Omitted data fields keep their current value.",
        "operationId": "UpdatePlanLimits",
        "parameters": [
          {
            "description": "The attribution of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "attribution",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The new default values with billing plan information",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tenant_limits_value"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the billing plan limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Update billing plan limits",
        "tags": [
          "Administration"
        ]
      },
      "delete": {
        "description": "Reset specified billing plan limits.",
        "operationId": "ResetPlanLimits",
        "parameters": [
          {
            "description": "The attribution of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "attribution",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully reset billing plan limits.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Reset billing plan limits",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/limits/plan/{attribution}/{name}/{service}": {
      "get": {
        "description": "Return the service limits for a billing plan.\n\n This API supports these services: `[apiServer, cep, compute, database, eventHub, streamsGlobal and streamsLocal]`",
        "operationId": "GetPlanServiceLimits",
        "parameters": [
          {
            "description": "The attribution of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "attribution",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the billing plan.",
            "format": "string",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "The name of the service.",
            "format": "string",
            "in": "path",
            "name": "service",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found service.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "$ref": "#/definitions/streams_limits_example"
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified billing plan.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the service limits for a billing plan",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/features/tenant/{tenant}": {
      "delete": {
        "description": "Reset features for a tenant to default values.",
        "operationId": "ResetFeaturesForATenant",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully reset features for a tenent.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "*True* if then successfully reset features.",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Reset features for a tenant",
        "tags": [
          "Administration"
        ]
      },
      "get": {
        "description": "Return features for a tenant.",
        "operationId": "LookupFeaturesForATenant",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found features.",
            "schema": {
              "$ref": "#/definitions/features_list_with_availability_flag_example"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get features for a tenant",
        "tags": [
          "Administration"
        ]
      },
      "post": {
        "description": "Set the features for a tenant.",
        "operationId": "UpdateFeaturesForATenant",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "description": "The features to update (each value must be either *true* or *false*).",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/features_list_with_availability_flag_example"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully sets features.",
            "schema": {
              "description": "*True* if then successfully sets features",
              "type": "boolean",
              "example": "true"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Set features for a tenant",
        "tags": [
          "Administration"
        ]
      },
      "put": {
        "description": "Updates the features for a tenant.",
        "operationId": "UpdateFeaturesForSpecifiedTenant",
        "parameters": [
          {
            "description": "The name of the tenant.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "description": "The features to update (each value must be either *true* or *false*).",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/features_list_with_availability_flag_example"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated features.",
            "schema": {
              "description": "*True* if then successfully updated features",
              "type": "boolean",
              "example": "true"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Update features for a tenant",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/tenant/{tenant}/datacenter/{datacenter}": {
      "post": {
        "description": "Add data center to a tenant.\n\n **Note**: \n -  While the new data center is being added to the tenant, the new data center is not available for normal operations until all tenant data is synced to it.\n\n -  Requires *Administrator* permissions",
        "operationId": "AddDatacentersToTenant(superuser)",
        "parameters": [
          {
            "description": "The tenant to which the data center is added. You cannot add the system tenants `_mm` and `demo` to a data center.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "datacenter",
            "description": "Data center that needs to add to the tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Force syncing fabric data.",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "copyLocalCollections",
            "description": "Copy local collections data.",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "remoteDc",
            "description": "Name of remote data center to sync fabric data from.",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "in": "query",
            "name": "excludeCollections",
            "description": "Collections to exclude from syncing (comma-separated).",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fabric",
            "description": "Fabric to which the data center needs to add.",
            "required": false,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added data center to tenant.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "*True* if then successfully added data center to tenant.",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Add data center to the tenant",
        "tags": [
          "Administration"
        ]
      },
      "delete": {
        "description": "Removes data center from a tenant.\n\n **Note**: Requires *Administrator* permissions",
        "operationId": "RemoveTenantDatacenter(superuser)",
        "parameters": [
          {
            "description": "The tenant to modify. You cannot modify the system tenants `_mm` and `demo`.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "description": "The data center to remove.",
            "format": "string",
            "in": "path",
            "name": "datacenter",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fabric",
            "description": "Fabric from which the data center needs to remove.",
            "required": false,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed data center from tenant.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "*True* if then successfully removed data center from tenant.",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove data center from the tenant.",
        "tags": [
          "Administration"
        ]
      },
      "put": {
        "description": "Reconcile data center of a tenant.\n\n **Note**: Requires *Administrator* permissions",
        "operationId": "ReconcileTenantDatacenter(superuser)",
        "parameters": [
          {
            "description": "The tenant to reconcile. You cannot modify the system tenants `_mm` and `demo`.",
            "format": "string",
            "in": "path",
            "name": "tenant",
            "required": true,
            "type": "string"
          },
          {
            "description": "The data center on which to perform reconciling.",
            "format": "string",
            "in": "path",
            "name": "datacenter",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Force syncing fabric data.",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "remoteDc",
            "description": "Name of remote data center to sync fabric data from (leave empty to use default).",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "in": "query",
            "name": "excludeCollections",
            "description": "Collections to exclude from syncing (comma-separated).",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "in": "query",
            "name": "fabric",
            "description": "Fabric that needs to reconcile.",
            "required": false,
            "default": "_system",
            "type": "string"
          },
          {
            "in": "query",
            "name": "resume",
            "description": "*True* if then sync resumes from last point of failure. *False* if then sync starts from the beginning and removes all data replicated from previous sync.",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "cleanup",
            "description": "If true, all collections, views and stream are removed from local data center which are not available on remoteDc.",
            "required": false,
            "default": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully reconcile data center.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "*True* if then successfully reconcile data center.",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Reconcile tenant from given data center",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/tenant/{tenant}/datacenter/status": {
      "get": {
        "description": "Get the current sync status.\n\n **Note**: Requires *Administrator* permissions.",
        "operationId": "GetSyncStatus(superuser)",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "Name of the tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "fabric",
            "description": "Name of the fabric.",
            "required": false,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found fabric sync status.",
            "schema": {
              "$ref": "#/definitions/fabric_sync_get_status_example"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get the current sync status of a tenant or fabric",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/tenant/datacenter/{datacenter}/syncall": {
      "post": {
        "description": "Add data center to all fabrics from all tenants.\n\n**Note**: \n -  Synchronize all *tenants* from remote regions, including all *GeoFabrics* created for each tenant.\n\n -  While the new data center is being added to the all fabrics, the new data center is not available for normal operations until after the synchronization is finished. \n\n - Requires *Administrator* permissions.",
        "operationId": "AddDatacentersToAllTenant(superuser)",
        "parameters": [
          {
            "in": "path",
            "name": "datacenter",
            "description": "Data center that needs to add to the tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "remoteDc",
            "description": "Name of remote data center to sync fabric data from (leave empty to use default).",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "in": "query",
            "name": "force",
            "description": "Force the restart of the sync call.",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "skip",
            "description": "If *true* then automatically exclude tenants and fabrics which are not added to all dc except the one passed in data center parameter.",
            "required": false,
            "default": true,
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "excludeTenants",
            "description": "Tenants to exclude from syncing (comma-separated).",
            "required": false,
            "default": "",
            "type": "string"
          },
          {
            "in": "query",
            "name": "copyLocalCollections",
            "description": "Copy local collections data.",
            "required": false,
            "default": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added data center to all fabrics form all tenants.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "description": "*True* if then successfully added data center to all febrics from all tenant.",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified data center.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Add data center to all fabrics from all tenants",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/tenant/{tenant}/fabric/{fabric}/publish-local-collections": {
      "put": {
        "description": "Enable publishing changes to local collections.\n\n **Note**: Requires *Administrator* permissions.",
        "operationId": "EnableLocalCollectionsUpdatesPublishing(superuser)",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "Tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fabric",
            "description": "Fabric.",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully enabled publishing changes to local collections.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Enable publishing changes to local collections",
        "tags": [
          "Administration"
        ]
      },
      "delete": {
        "description": "Disable publishing changes to local collections.\n\n **Note**: Requires *Administrator* permissions.",
        "operationId": "DisableLocalCollectionsUpdatesPublishing(superuser)",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "Tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fabric",
            "description": "Fabric.",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully disabled publishing changes to local collection.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Disable publishing changes to local collections",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/tenant/{tenant}/fabric/{fabric}/accept-local-collections-updates": {
      "put": {
        "description": "Enable accepting updates to local collections.\n\n **Note**: Requires *Administrator* permissions",
        "operationId": "EnableAcceptingLocalCollectionsUpdates(superuser)",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "Tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fabric",
            "description": "Fabric.",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully enabled accepting updates to local collection.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Enable accepting updates to local collections",
        "tags": [
          "Administration"
        ]
      },
      "delete": {
        "description": "Disable accepting updates to local collections.\n\n **Note**: Requires *Administrator* permissions",
        "operationId": "DisableAcceptingLocalCollectionsUpdates(superuser)",
        "parameters": [
          {
            "in": "path",
            "name": "tenant",
            "description": "Tenant.",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "fabric",
            "description": "Fabric.",
            "required": true,
            "default": "_system",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully disabled accepting updates to local collection.",
            "schema": {
              "properties": {
                "code": {
                  "description": "HTTP response code.",
                  "type": "integer",
                  "example": 200
                },
                "error": {
                  "description": "Flag if there is an error in response. False for this response.",
                  "type": "boolean",
                  "example": false
                },
                "result": {
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified tenant.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Disable accepting updates to local collections",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_fabric/{fabric}/_api/events": {
      "delete": {
        "description": "Removes one or more events by _id.",
        "operationId": "DeleteEvent",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "description": "A JSON array of strings (event _ids).",
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "example": [
                "_events/2885469"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully removed events.",
            "schema": {
              "$ref": "#/definitions/administration_get_event_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Remove event",
        "tags": [
          "Administration"
        ]
      },
      "post": {
        "description": "Create an event.\n\n Requires a JSON object with these properties: \n\n  - **status**: The activity status. Allowed values `OK, WARN, ERROR`.\n  - **description**: Event description.\n  - **entityName**: The entity name of the event. Ex: name of collection; name of user etc\n  - **entityType**: The entity type of the event. Allowed values `COLLECTION, GRAPH, PIPELINE, AUTH, STREAM, GEOFABRIC`.\n  - **details**: Additional activity info. Ex: error message.\n  - **action**: The activity of the event. Allowed action `CREATE, UPDATE, DELETE, EXECUTE, LOGIN`.\n  - **attributes**: Object of attributes.",
        "operationId": "CreateEvent",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/event_create"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created event",
            "schema": {
              "$ref": "#/definitions/administration_create_event_rc_201"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Create event",
        "tags": [
          "Administration"
        ]
      },
      "get": {
        "description": "List events for a given fabric.",
        "operationId": "LookupEventsForATenantAndFabric",
        "parameters": [
          {
            "description": "The fabric name to use in the URL path for this API call. The main default system database is _system\n",
            "format": "string",
            "in": "path",
            "name": "fabric",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found events.",
            "schema": {
              "$ref": "#/definitions/administration_get_events_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Lookup events for a tenant and fabric",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_fabric/{fabric}/_api/metrics/names": {
      "get": {
        "description": "Return an array of all metrics names.",
        "operationId": "names",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetch metrics.",
            "schema": {
              "$ref": "#/definitions/administration_api_get_metrics_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Get metrics names",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_fabric/{fabric}/_api/metrics/query": {
      "post": {
        "description": "Query user metrics.\n\n Requires a JSON object with these properties:\n\n  - **metrics** (string): Array of strings containing the metric names we want to receive.\n  - **since**: Unix timestamp in milliseconds of oldest entry we want to receive.\n  - **limit**: Number of results we want to receive.\n  - **querytype**: \n     - *list*:  Return a list of all available metrics.\n      - *get*: Return all the requested metrics.\n     - *sum*:  Return sum of all records for each of the requested metrics. \n  - **GeoFabric**: GeoFabric name.",
        "operationId": "query",
        "parameters": [
          {
            "in": "path",
            "name": "fabric",
            "required": true,
            "default": "_system",
            "type": "string",
            "format": "string",
            "description": "The name of the fabric."
          },
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/post_metrics_query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sucessfully found metrics details.",
            "schema": {
              "$ref": "#/definitions/administration_api_query_metrics_rc_200"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          },
          "404": {
            "description": "Failed to find specified fabric.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_404"
            }
          }
        },
        "summary": "Query user metrics",
        "tags": [
          "Administration"
        ]
      }
    },
    "/_api/heal/all": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully healed.",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "default": "*True* if then successfully healed",
                  "type": "boolean",
                  "example": "true"
                }
              }
            }
          },
          "401": {
            "description": "Failed because you do not have administrator permissions.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_401"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_403"
            }
          }
        },
        "tags": [
          "Administration"
        ],
        "description": "Fixes streams settings for all tenants and fabrics.",
        "operationId": "FixesC8streamsSettings",
        "summary": "Fixes settings for all tenants and fabrics"
      }
    },
    "/_api/repair/check": {
      "post": {
        "description": "Returns an array of all metrics names.\n\n",
        "operationId": "repairCheckCollections",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "schema": {
              "type": "object",
              "required": [
                "collection"
              ],
              "properties": {
                "tenant": {
                  "type": "string",
                  "example": "_mm",
                  "description": "The name of the tenant.\n"
                },
                "fabric": {
                  "type": "string",
                  "example": "_system",
                  "description": "The name of the fabric.\n"
                },
                "collection": {
                  "type": "string",
                  "example": "[]",
                  "description": "The names of the collection.\n"
                }
              }
            },
            "required": true,
            "description": "Collection in which to search.\n\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned  when operation is successful\n"
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete."
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server."
          },
          "405": {
            "description": "Failed due to unsupported HTTP method."
          }
        },
        "summary": "Check if regions are in sync\n\n",
        "tags": [
          "Administration"
        ],
        "x-examples": []
      }
    },
    "/_api/repair/sync": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "schema": {
              "type": "object",
              "required": [
                "collection"
              ],
              "properties": {
                "tenant": {
                  "type": "string",
                  "example": "_mm",
                  "description": "The name of the tenant.\n"
                },
                "fabric": {
                  "type": "string",
                  "example": "_system",
                  "description": "The name of the fabric.\n"
                },
                "collection": {
                  "type": "string",
                  "example": "[]",
                  "description": "The names of the collection.\n"
                }
              }
            },
            "required": true,
            "description": "Collection in which to search.\n\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Returned if the call succeeded.\n\n",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "Failed due to missing or malformed data.  Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/error_example_rc_400"
            }
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server."
          },
          "405": {
            "description": "Failed due to unsupported HTTP method."
          }
        },
        "tags": [
          "Administration"
        ],
        "description": "\nProvides a way to synchronize global collections across remote regions using RICE data\n\n",
        "operationId": "repairSyncCollections",
        "summary": "Synchronize global collections that are experiencing data discrepancies between regions"
      }
    },
    "/_api/repair/sync/priority/{priority}": {
      "post": {
        "description": "Set sync priority.\n\n",
        "operationId": "SyncPriority",
        "parameters": [
          {
            "description": "Priority of sync operation.\n",
            "format": "integer",
            "in": "path",
            "name": "priority",
            "default": "-20",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server."
          },
          "404": {
            "description": "Returned if the sync operation is not running.\n\n"
          },
          "405": {
            "description": "Failed due to unsupported HTTP method."
          }
        },
        "summary": "Set sync priority",
        "tags": [
          "Administration"
        ],
        "x-hints": ""
      }
    },
    "/_api/repair/sync/cancel": {
      "post": {
        "description": "Cancel sync operation if it is already running.\n\n",
        "operationId": "CancelSync",
        "responses": {
          "200": {
            "description": "Success.\n\n"
          },
          "403": {
            "description": "Failed to validate because you do not have access to the server."
          },
          "404": {
            "description": "Returned if the sync operation is not running.\n\n"
          },
          "405": {
            "description": "Failed due to unsupported HTTP method."
          }
        },
        "summary": "Cancel sync operation",
        "tags": [
          "Administration"
        ],
        "x-hints": ""
      }
    },
    "/_api/trigger/zendesk": {
      "post": {
        "description": "Creates a new support ticket.",
        "operationId": "zendeskAPI",
        "parameters": [
          {
            "in": "body",
            "name": "JSON Request Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/post_zendesk_api"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created a support ticket."
          },
          "400": {
            "description": "Failed due to missing or malformed data. Verify that all parameters are complete.",
            "schema": {
              "$ref": "#/definitions/support_trigger_zendesk_post_rc_400"
            }
          }
        },
        "summary": "Create a support ticket",
        "tags": [
          "Support"
        ]
      }
    }
  },
  "swagger": "2.0"
}
