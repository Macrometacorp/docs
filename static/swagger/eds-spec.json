{
  "openapi": "3.0.0",
  "info": {
    "title": "PhotonIQ Global Event Delivery Service (EDS)",
    "description": "The PhotonIQ Global Event Delivery Service (EDS) offers a robust platform capable of streaming live event data directly to your applications. This system supports thousands of simultaneous connections, allowing for easily incorporating event-driven capabilities into your infrastructure. This ensures your applications receive updates in real-time, enhancing their reactivity and efficiency.\n\nFeatures:\n- Delivery of live event information through WebSockets, including a unique feature for event de-duplication.\n- Options to subscribe to specific events and publish new ones to the event stream\n- Comprehensive metrics on user connections.\n- A health check and versioning API for the service.\nFor detailed information on endpoints, how to format requests and responses, and guidelines for integrating EDS with your applications, please refer to the API documentation provided below.\n",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Publish Events",
      "description": "APIs related to event publishing."
    },
    {
      "name": "Manage Subscriptions",
      "description": "APIs related to event subscriptions and streaming."
    },
    {
      "name": "Event Delivery Metrics",
      "description": "APIs for retrieving metrics data related to EDS."
    },
    {
      "name": "Event Delivery Status",
      "description": "APIs for checking the health of EDS."
    },
    {
      "name": "Event Delivery Version",
      "description": "APIs for checking the version of EDS."
    }
  ],
  "paths": {
    "/api/es/v1/fabric/{fabricName}/stream/{streamName}/publish": {
      "post": {
        "summary": "Publish events",
        "description": "Publish events to a specified stream asynchronously.",
        "tags": [
          "Publish Events"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "fabricName",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the fabric."
          },
          {
            "in": "path",
            "name": "streamName",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The name of the stream."
          },
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The type of the stream (local or global or collection)."
          }
        ],
        "requestBody": {
          "required": true,
          "description": "The request body containing the event data to publish to the stream.",
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully published events.",
            "headers": {
              "x-gdn-service": {
                "description": "The hostname of the GDN.",
                "schema": {
                  "type": "string",
                  "description": "Custom header value indicating the hostname of the GDN."
                }
              },
              "X-PhotonIQ-ES": {
                "description": "Epoch time header.",
                "schema": {
                  "type": "string",
                  "description": "Epoch time in seconds."
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "ws://api/es/v1/subscribe": {
      "get": {
        "summary": "Subscribe to stream",
        "description": "Subscribe to stream via WebSocket based on stream, type, or query parameters. Provide either `stream` or `filters` but not both or neither.\nThis API keeps the connection live and continuously receives messages from the server based on the specified `stream` or `filters`.\n\"filters\\\" is a JSON format string with different fields. E.g :- <br>\nfilters={ <br>\n  \\\"action\\\":“add”, <br>\n  \\\"once\\\":”TRUE | FALSE”, <br>\n  \\\"queries\\\":[ <br>\n  “select * from XXXX where n1==v1”, <br>\n  “select * from MMMM where n2==v1 OR n3>5”, <br>\n  “select \\<path\\> from XXXX” <br>\n  ] <br>\n  } <br>\n  The *path* is a dot separated fully qualified string representing a json path for an object. *once* flag (default is false) specifies if the filters needs to be applied just once. <br>\n  *filters* can be dynamically added and removed by sending message data on web socket connection in JSON format. E.g :- <br>\n  {\\\"action\\\": \\\"remove\\\", \\\"queries\\\": [ \\\"select * from XXXX where n1=v1\\\"]}\n\n  **This API should not be tried from the Swagger UI**.\n",
        "tags": [
          "Manage Subscriptions"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "stream",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The name of the stream to subscribe to."
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The type of events to subscribe to."
          },
          {
            "in": "query",
            "name": "filters",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "An optional query parameter to filter events."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully subscribed to stream.",
            "headers": {
              "X-PhotonIQ-ES": {
                "description": "Epoch time header.",
                "schema": {
                  "type": "string",
                  "description": "Epoch time in seconds."
                }
              },
              "X-PhotonIQ-CustomerId": {
                "description": "Customer ID header.",
                "schema": {
                  "type": "string",
                  "description": "Customer ID that includes the tenant and fabric name."
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/es/v1/metrics": {
      "get": {
        "summary": "Retrieve Metrics",
        "description": "Retrieve metrics data within a specified time range.",
        "tags": [
          "Event Delivery Metrics"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The start date used for querying metrics data. Must be provided in RFC3339 date-time format.",
            "example": "YYYY-MM-DDTHH:MM:SSZ"
          },
          {
            "in": "query",
            "name": "end",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The end date used for querying metrics data. Must be provided in RFC3339 date-time format.",
            "example": "YYYY-MM-DDTHH:MM:SSZ"
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "The name of the metrics data to retrieve."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "The maximum number of metrics to retrieve (optional)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metrics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "domain_key": {
                        "type": "string",
                        "description": "The domain key."
                      },
                      "es_cpu_usage_second": {
                        "type": "number",
                        "description": "ES CPU usage per second."
                      },
                      "es_errors_per_second": {
                        "type": "number",
                        "description": "ES errors per second."
                      },
                      "es_memory_usage_second": {
                        "type": "integer",
                        "description": "ES memory usage per second."
                      },
                      "es_subscriber_count": {
                        "type": "integer",
                        "description": "ES subscriber count."
                      },
                      "es_subscribers_per_second": {
                        "type": "number",
                        "description": "ES subscribers per second."
                      },
                      "fabric": {
                        "type": "string",
                        "description": "The fabric name."
                      },
                      "origin_key": {
                        "type": "string",
                        "description": "The origin key."
                      },
                      "region": {
                        "type": "string",
                        "description": "The region."
                      },
                      "tenant": {
                        "type": "string",
                        "description": "The tenant name."
                      },
                      "timestamp": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The timestamp."
                      },
                      "type": {
                        "type": "integer",
                        "description": "The type."
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/es/v1/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check the health status of EDS.",
        "tags": [
          "Event Delivery Status"
        ],
        "responses": {
          "200": {
            "description": "Successfully checked health.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The health status (e.g., \"healthy\" or \"unhealthy\")."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/es/v1/version": {
      "get": {
        "summary": "Version",
        "description": "Get the version information of EDS.",
        "tags": [
          "Event Delivery Version"
        ],
        "responses": {
          "200": {
            "description": "Successfully returned the version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string",
                      "description": "The version of EDS."
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}