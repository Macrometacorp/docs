{
  "openapi": "3.0.0",
  "info": {
    "title": "PhotonIQ Performance Proxy API",
    "description": "API documentation for PhotonIQ Performance Proxy (P3).",
    "version": "3.1.0"
  },
  "servers": [
    {
      "url": "https://demo-p3.photoniq.macrometa.io"
    }
  ],
  "tags": [
    {
      "name": "Version"
    },
    {
      "name": "Health"
    },
    {
      "name": "Policies"
    },
    {
      "name": "Validations"
    },
    {
      "name": "Cache"
    },
    {
      "name": "PPM",
      "description": "Photoniq Performance Measurement"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Metrics"
    },
    {
      "name": "Telemetry",
      "description": "(example can change)"
    },
    {
      "name": "Usage"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "CreatePolicyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the policy to be created.",
            "example": "Test_Policy"
          },
          "pageType": {
            "type": "string",
            "description": "Indicates the specific type of page being optimized, such as Home, Product, or Category.",
            "example": "Home"
          },
          "uriMatchingRule": {
            "type": "string",
            "description": "URI Matching Rule defines how incoming requests are matched against the URI (urlPattern)",
            "example": "="
          },
          "urlPattern": {
            "type": "string",
            "description": "URL Path pattern to group same pages under similar set of optimizations.",
            "example": "^/us/.*$"
          },
          "serverUrl": {
            "type": "string",
            "description": "Origin or server URL from which HTML content is retrieved to be optimized.",
            "example": "https://www.example.com"
          },
          "domainName": {
            "type": "string",
            "description": "Host or domain name used to retrieve HTML content, depending on this value origin can return different content.",
            "example": "www.example.com"
          },
          "deviceType": {
            "type": "string",
            "description": "Targeted device type for optimization.",
            "enum": [
              "Desktop",
              "Mobile",
              "All"
            ],
            "example": "Desktop"
          },
          "optimizationLevel": {
            "type": "string",
            "description": "Defines the level of optimization, with different techniques applied based on the selected option.",
            "enum": [
              "Aggressive",
              "Standard",
              "Light"
            ],
            "example": "Aggressive"
          },
          "optimizers": {
            "type": "object",
            "properties": {
              "preloadDNSPrefetchHints": {
                "type": "boolean",
                "description": "Enables DNS prefetching to reduce latency by resolving domain names ahead of time.",
                "example": false
              },
              "inlineOutlineJS": {
                "type": "boolean",
                "description": "Converts external JavaScript files into inline scripts for faster initial load.",
                "example": false
              },
              "inlineOutlineCSS": {
                "type": "boolean",
                "description": "Converts external CSS files into inline styles to improve render speed.",
                "example": false
              },
              "minifyCSS": {
                "type": "boolean",
                "description": "Reduces CSS file size by removing unnecessary spaces, comments, and characters.",
                "example": false
              },
              "minifyJS": {
                "type": "boolean",
                "description": "Compresses JavaScript code to decrease load times by removing redundant characters.",
                "example": false
              },
              "minifyHTML": {
                "type": "boolean",
                "description": "Compacts HTML code by eliminating whitespace and comments, reducing file size.",
                "example": false
              },
              "bundleJSCSS": {
                "type": "boolean",
                "description": "Combines multiple JavaScript and CSS files into a single file to minimize HTTP requests.",
                "example": false
              },
              "prefetchURLs": {
                "type": "boolean",
                "description": "Prefetches URLs likely to be accessed, enhancing load speed for subsequent page navigations.",
                "example": false
              },
              "preconnectResources": {
                "type": "boolean",
                "description": "Establishes early connections to required resources, reducing connection latency.",
                "example": false
              },
              "collapseWhitespace": {
                "type": "boolean",
                "description": "Eliminates excess whitespace in HTML files, reducing file size and improving load speed.",
                "example": false
              },
              "optimizationsByUserAgentType": {
                "type": "boolean",
                "description": "Applies specific optimizations based on the user's device type (e.g., mobile, desktop).",
                "example": false
              },
              "compressionForMobileDevices": {
                "type": "boolean",
                "description": "Implements additional compression techniques for mobile devices to reduce data usage.",
                "example": false
              },
              "moveScriptTagsFromTopToBottom": {
                "type": "boolean",
                "description": "Moves JavaScript tags from the top of the page to the bottom to avoid blocking rendering.",
                "example": false
              },
              "deferJS": {
                "type": "boolean",
                "description": "Defers the execution of JavaScript until after the page has loaded to improve initial render speed.",
                "example": false
              },
              "delayJSExecution": {
                "type": "boolean",
                "description": "Delays JavaScript execution until a user interaction occurs, improving load times.",
                "example": false
              }
            }
          }
        }
      },
      "UpdatePolicyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the policy to be created.",
            "example": "Updated Policy Name"
          },
          "pageType": {
            "type": "string",
            "description": "Type of page to be optimized.",
            "enum": [
              "Home",
              "Category",
              "Product"
            ],
            "example": "Category"
          },
          "deviceType": {
            "type": "string",
            "description": "Type of device the optimizations are intended to be applied.",
            "enum": [
              "Desktop",
              "Mobile",
              "All"
            ],
            "example": "Desktop"
          },
          "optimizationLevel": {
            "type": "string",
            "description": "Defines the level of optimization, with different techniques applied based on the selected option.",
            "enum": [
              "Aggresive",
              "Standard",
              "Light"
            ],
            "example": "Standard"
          },
          "optimizers": {
            "type": "object",
            "properties": {
              "preloadDNSPrefetchHints": {
                "type": "boolean"
              },
              "inlineOutlineJS": {
                "type": "boolean"
              },
              "inlineOutlineCSS": {
                "type": "boolean"
              },
              "minifyCSS": {
                "type": "boolean"
              },
              "minifyJS": {
                "type": "boolean"
              },
              "minifyHTML": {
                "type": "boolean"
              },
              "bundleJSCSS": {
                "type": "boolean"
              },
              "prefetchURLs": {
                "type": "boolean"
              },
              "preconnectResources": {
                "type": "boolean"
              },
              "collapseWhitespace": {
                "type": "boolean"
              },
              "optimizationsByUserAgentType": {
                "type": "boolean"
              },
              "compressionForMobileDevices": {
                "type": "boolean"
              },
              "moveScriptTagsFromTopToBottom": {
                "type": "boolean"
              },
              "deferJS": {
                "type": "boolean"
              },
              "delayJSExecution": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "GetVersionResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "1.0.0"
          }
        }
      },
      "GetHealthStatusResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          }
        }
      },
      "GetPoliciesResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "deviceType": {
              "type": "string",
              "example": "all"
            },
            "optimizationLevel": {
              "type": "string",
              "example": "standard"
            },
            "_key": {
              "type": "string",
              "example": "3a7fcdb1-ff8c-514b-a575-09e3aea8f35d"
            },
            "createdAt": {
              "type": "number",
              "example": 1703767869457
            },
            "updatedAt": {
              "type": "number",
              "example": 1703767869457
            },
            "name": {
              "type": "string",
              "example": "First Integration Test"
            },
            "pageType": {
              "type": "string",
              "example": "home"
            },
            "uriMatchingRule": {
              "type": "string",
              "example": "="
            },
            "urlPattern": {
              "type": "string",
              "example": "^.*$"
            },
            "serverUrl": {
              "type": "string",
              "example": "https://www.example.com/"
            },
            "domainName": {
              "type": "string",
              "example": "www.example.com"
            },
            "optimizers": {
              "type": "object",
              "properties": {
                "bundleCss": {
                  "type": "boolean",
                  "example": true
                },
                "bundleJavascript": {
                  "type": "boolean",
                  "example": true
                },
                "collapseWhitespace": {
                  "type": "boolean",
                  "example": false
                },
                "compressionForMobileDevices": {
                  "type": "boolean",
                  "example": false
                },
                "deferJavascript": {
                  "type": "boolean",
                  "example": false
                },
                "delayJavascriptExecution": {
                  "type": "boolean",
                  "example": false
                },
                "inlineCss": {
                  "type": "boolean",
                  "example": true
                },
                "inlineJavascript": {
                  "type": "boolean",
                  "example": true
                },
                "minifyCss": {
                  "type": "boolean",
                  "example": true
                },
                "minifyHTML": {
                  "type": "boolean",
                  "example": true
                },
                "minifyJavascript": {
                  "type": "boolean",
                  "example": true
                },
                "moveScriptTagsFromTopToBottom": {
                  "type": "boolean",
                  "example": false
                },
                "optimizationsByUserAgentType": {
                  "type": "boolean",
                  "example": false
                },
                "outlineCss": {
                  "type": "boolean",
                  "example": true
                },
                "outlineJavascript": {
                  "type": "boolean",
                  "example": true
                },
                "preconnectResources": {
                  "type": "boolean",
                  "example": false
                },
                "prefetchURLs": {
                  "type": "boolean",
                  "example": false
                },
                "preloadDNSPrefetchHints": {
                  "type": "boolean",
                  "example": false
                }
              }
            }
          }
        }
      },
      "ValidationResultResponse": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "integer",
            "example": 1703767869457
          },
          "jobId": {
            "type": "string",
            "example": "03213-3234f-24242-fsfs-3113"
          },
          "optimizersApplied": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "SET_ATTRIBUTE('head', 'data-optimized-using', 'P3')",
              "MINIFY_HTML()"
            ]
          },
          "sourceUrl": {
            "type": "string",
            "example": "https://www.example.com/"
          },
          "domainName": {
            "type": "string",
            "example": "www.example.com"
          },
          "updatedAt": {
            "type": "integer",
            "example": 1703767869457
          },
          "urlPattern": {
            "type": "string",
            "example": "^/us/.*$"
          },
          "validatorId": {
            "type": "string",
            "example": "03213-3234f-24242-fsfs-3113"
          },
          "visualComparisonResult": {
            "$ref": "#/components/schemas/VisualComparisonResult"
          },
          "fnComparisonResult": {
            "$ref": "#/components/schemas/FunctionComparisonResult"
          }
        }
      },
      "GetPolicyResponse": {
        "type": "object",
        "properties": {
          "deviceType": {
            "type": "string",
            "example": "all"
          },
          "optimizationLevel": {
            "type": "string",
            "example": "standard"
          },
          "_key": {
            "type": "string",
            "example": "3a7fcdb1-ff8c-514b-a575-09e3aea8f35d"
          },
          "createdAt": {
            "type": "number",
            "example": 1703767869457
          },
          "updatedAt": {
            "type": "number",
            "example": 1703767869457
          },
          "name": {
            "type": "string",
            "example": "First Integration Test"
          },
          "pageType": {
            "type": "string",
            "example": "home"
          },
          "uriMatchingRule": {
            "type": "string",
            "example": "="
          },
          "urlPattern": {
            "type": "string",
            "example": "^.*$"
          },
          "serverUrl": {
            "type": "string",
            "example": "https://www.example.com"
          },
          "domainName": {
            "type": "string",
            "example": "www.example.com"
          },
          "optimizers": {
            "type": "object",
            "properties": {
              "bundleCss": {
                "type": "boolean",
                "example": true
              },
              "bundleJavascript": {
                "type": "boolean",
                "example": true
              },
              "collapseWhitespace": {
                "type": "boolean",
                "example": false
              },
              "compressionForMobileDevices": {
                "type": "boolean",
                "example": false
              },
              "deferJavascript": {
                "type": "boolean",
                "example": false
              },
              "delayJavascriptExecution": {
                "type": "boolean",
                "example": false
              },
              "inlineCss": {
                "type": "boolean",
                "example": true
              },
              "inlineJavascript": {
                "type": "boolean",
                "example": true
              },
              "minifyCss": {
                "type": "boolean",
                "example": true
              },
              "minifyHTML": {
                "type": "boolean",
                "example": true
              },
              "minifyJavascript": {
                "type": "boolean",
                "example": true
              },
              "moveScriptTagsFromTopToBottom": {
                "type": "boolean",
                "example": false
              },
              "optimizationsByUserAgentType": {
                "type": "boolean",
                "example": false
              },
              "outlineCss": {
                "type": "boolean",
                "example": true
              },
              "outlineJavascript": {
                "type": "boolean",
                "example": true
              },
              "preconnectResources": {
                "type": "boolean",
                "example": false
              },
              "prefetchURLs": {
                "type": "boolean",
                "example": false
              },
              "preloadDNSPrefetchHints": {
                "type": "boolean",
                "example": false
              }
            }
          }
        }
      },
      "AggregateUsageGetResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "object",
            "description": "Overall summary for the specified time period.",
            "properties": {
              "maxRPS": {
                "type": "number",
                "description": "The maximum RPS (Requests Per Second) for the specified time period. This is computed as the highest of the RPS calculated for each duration group (hour/day/month)."
              }
            }
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "number",
                  "description": "The duration group represented as the number of milliseconds since epoch.",
                  "example": 1717866000000
                },
                "humanReadableTimestamp": {
                  "type": "string",
                  "example": "2024-06-08T17:00:00.000Z"
                },
                "totalRequests": {
                  "type": "number",
                  "description": "The total number of HTTP requests received for the specified time period."
                },
                "rps": {
                  "type": "number",
                  "description": "The RPS for each duration group, calculated as total number of requests in that duration divided by number of seconds in that duration."
                }
              }
            }
          }
        }
      },
      "VisualComparisonResult": {
        "type": "object",
        "properties": {
          "pixelsMismatched": {
            "type": "integer",
            "example": 5
          },
          "pixelsMatched": {
            "type": "integer",
            "example": 9940
          },
          "totalPixels": {
            "type": "integer",
            "example": 9945
          },
          "highlightedScreenshot": {
            "type": "string",
            "example": "https://www.example.com/highlightedScreenshot"
          },
          "optimizedScreenshot": {
            "type": "string",
            "example": "https://www.example.com/optimizedScreenshot"
          },
          "deepAnalysis": {
            "type": "object",
            "properties": {
              "color_histogram_comparison": {
                "$ref": "#/components/schemas/ColorHistogramDetail"
              },
              "contour_similarity": {
                "$ref": "#/components/schemas/ContourSimilarity"
              },
              "edge_density_comparison": {
                "$ref": "#/components/schemas/EdgeDensityComparison"
              },
              "fourier_transform_similarity": {
                "$ref": "#/components/schemas/FourierTransformSimilarity"
              },
              "gradient_magnitude_similarity": {
                "$ref": "#/components/schemas/GradientMagnitudeSimilarity"
              },
              "hog_similarity": {
                "$ref": "#/components/schemas/HogSimilarity"
              },
              "layout_analysis": {
                "$ref": "#/components/schemas/LayoutAnalysis"
              },
              "pixel_intensity_distribution": {
                "$ref": "#/components/schemas/PixelIntensityDistribution"
              },
              "structural_similarity_analysis": {
                "$ref": "#/components/schemas/StructuralSimilarityAnalysis"
              },
              "template_matching": {
                "$ref": "#/components/schemas/TemplateMatching"
              },
              "text_analysis": {
                "$ref": "#/components/schemas/TextAnalysis"
              }
            }
          }
        }
      },
      "ColorHistogramDetail": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Color Histogram: 99% similarity using color histogram comparison."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "ContourSimilarity": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Color Histogram: 99% similarity using color histogram comparison."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "EdgeDensityComparison": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Edge Density: 99% similarity based on edge density comparison."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "FourierTransformSimilarity": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Fourier Transform Similarity: 99% similarity based on Fourier Transform."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "GradientMagnitudeSimilarity": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Gradient Magnitude Similarity: 99% similarity based on gradient magnitude."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "HogSimilarity": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "HOG Similarity: 99% similarity based on Histogram of Oriented Gradients."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "LayoutAnalysis": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Layout Analysis: 99% similarity based on edge detection."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "PixelIntensityDistribution": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Pixel Intensity: 99% similarity based on pixel intensity distribution."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "StructuralSimilarityAnalysis": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Structural Similarity: 99% similarity using SSIM."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "TemplateMatching": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Template Matching: 99% similarity based on template matching."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "TextAnalysis": {
        "type": "object",
        "properties": {
          "explanation": {
            "type": "string",
            "example": "Text Analysis: 99% similarity using object character recognition and SequenceMatcher."
          },
          "value": {
            "type": "number",
            "example": 99
          }
        }
      },
      "FunctionComparisonResult": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "example": 10
          },
          "selectedElements": {
            "type": "integer",
            "example": 5
          },
          "matchedElements": {
            "type": "integer",
            "example": 4
          },
          "expectedResult": {
            "type": "integer",
            "example": 80
          },
          "actualResult": {
            "type": "integer",
            "example": 80
          },
          "result": {
            "type": "boolean"
          }
        }
      },
      "ApiKeyCreateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "keyid": {
            "type": "string"
          },
          "keyRole": {
            "type": "string",
            "enum": [
              "admin",
              "editor",
              "viewer",
              "browser"
            ]
          },
          "tenant_key": {
            "type": "string"
          },
          "ttl": {
            "type": "string",
            "description": "The duration for which the key should remain valid. Format is \"\\<number>\\<unit>\". Unit is \"d\" for days and \"M\" for months.",
            "example": "30d"
          }
        },
        "required": [
          "keyid",
          "role",
          "tenant_key",
          "ttl"
        ]
      },
      "ApiKeyCreateResponse": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "expireAt": {
            "type": "number"
          }
        },
        "required": [
          "keyId",
          "apiKey",
          "createdAt",
          "expireAt"
        ]
      },
      "ApiKeyDeleteResponse": {
        "type": "object",
        "properties": {
          "keyId": {
            "type": "string"
          },
          "deletedAt": {
            "type": "string"
          }
        },
        "required": [
          "keyId",
          "deletedAt"
        ]
      },
      "ApiKeyGetResponse": {
        "type": "object",
        "properties": {
          "keyid": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "keyRole": {
            "type": "string",
            "enum": [
              "admin",
              "editor",
              "viewer",
              "browser"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tenant_key": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "expireAt": {
            "type": "number"
          }
        },
        "required": [
          "keyid",
          "role",
          "tenant_key",
          "createdAt",
          "expireAt"
        ]
      },
      "ApiKeyGetkeysResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "keyid": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean",
              "nullable": true
            },
            "keyRole": {
              "type": "string",
              "enum": [
                "admin",
                "editor",
                "viewer",
                "browser"
              ]
            },
            "created_at": {
              "type": "number"
            },
            "expires_at": {
              "type": "number"
            }
          }
        }
      },
      "JwtCreateRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "JwtCreateResponse": {
        "type": "object",
        "properties": {
          "jwt": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "jwt",
          "email"
        ]
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          }
        },
        "required": [
          "password"
        ]
      },
      "MetricsBaseResponse": {
        "type": "object",
        "properties": {
          "optimizedReqCount": {
            "type": "number",
            "default": 0,
            "description": "The count of optimized requests."
          },
          "passthroughReqCount": {
            "type": "number",
            "default": 0,
            "description": "The count of passthrough requests."
          },
          "unoptimizedReqCount": {
            "type": "number",
            "default": 0,
            "description": "The count of unoptimized requests."
          },
          "optimizedPageCount": {
            "type": "number",
            "default": 0,
            "description": "The count of unique optimized pages."
          },
          "passthroughPageCount": {
            "type": "number",
            "default": 0,
            "description": "The count of unique passthrough pages."
          },
          "unoptimizedPageCount": {
            "type": "number",
            "default": 0,
            "description": "The count of unique unoptimized pages."
          },
          "errorReqCount": {
            "type": "number",
            "default": 0,
            "description": "The count of requests that resulted in an error (status 4xx and 5xx)."
          }
        },
        "required": [
          "optimizedReqCount",
          "passthroughReqCount",
          "unoptimizedReqCount",
          "optimizedPageCount",
          "passthroughPageCount",
          "unoptimizedPageCount",
          "errorReqCount"
        ]
      },
      "MetricsSummaryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetricsBaseResponse"
          },
          {
            "type": "object",
            "properties": {
              "analysisTimeSeconds": {
                "type": "number",
                "description": "The average number of seconds required to run analysis."
              },
              "validationTimeSeconds": {
                "type": "number",
                "description": "The average number of seconds required to run validation."
              },
              "optimizationTimeSeconds": {
                "type": "number",
                "description": "The average number of seconds required to analysis and validation."
              }
            }
          }
        ]
      },
      "MetricsDetailsResponse": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/MetricsBaseResponse"
            },
            {
              "type": "object",
              "properties": {
                "dateGroup": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The timestamp group."
                },
                "requests": {
                  "type": "number",
                  "default": 0,
                  "description": "The total number of requests."
                },
                "errorReqCount": {
                  "type": "number",
                  "default": 0,
                  "description": "The total number of requests that failed."
                },
                "requestsPerSecond": {
                  "type": "number",
                  "default": 0,
                  "description": "The total number of requests per second, rounded to the nearest integer."
                },
                "requestErrorsPerSecond": {
                  "type": "number",
                  "default": 0,
                  "description": "The total number of requests that failed per second, rounded to the nearest integer."
                }
              }
            }
          ]
        }
      },
      "MetricsResponse": {
        "type": "object",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/MetricsSummaryResponse"
          },
          "details": {
            "$ref": "#/components/schemas/MetricsDetailsResponse"
          }
        }
      }
    }
  },
  "paths": {
    "/api/p3/v1/version": {
      "get": {
        "summary": "Version of service",
        "tags": [
          "Version"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get current version of the service.",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "Successfully fetched version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVersionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/health": {
      "get": {
        "summary": "Service health status",
        "tags": [
          "Health"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get current health status of the service.",
        "responses": {
          "200": {
            "description": "Successfully fetched health status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHealthStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/policies": {
      "get": {
        "summary": "Get policies",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all the existing policies.",
        "operationId": "getPolicies",
        "responses": {
          "200": {
            "description": "Successfully fetched policies.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPoliciesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "summary": "Create policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create a policy to set optimizations applicable for a URL pattern.",
        "operationId": "createPolicy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "87315f9f-0ef5-5499-ac6b-086ff488e3dd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "409": {
            "description": "Duplicate policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "type": {
                      "type": "string",
                      "example": "P3"
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Duplicate policy created.Needs to be a unique combination of server URL and URL pattern."
                    },
                    "code": {
                      "type": "number",
                      "example": 409
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/policies/{id}": {
      "get": {
        "summary": "Get policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get the details of a specific policy by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "87315f9f-0ef5-5499-ac6b-086ff488e3dd"
            },
            "required": true,
            "description": "ID of the policy to be fetched."
          }
        ],
        "operationId": "getPolicy",
        "responses": {
          "200": {
            "description": "Successfully fetched policy.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Policy ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "type": {
                      "type": "string",
                      "example": "P3"
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Policy ID not found."
                    },
                    "code": {
                      "type": "number",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/policies/job/{id}": {
      "get": {
        "summary": "Find Policy by job ID",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Find and return the policy corresponding to the given job ID based on URL pattern matching.",
        "operationId": "findPolicyByJobId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the job."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found and returned the policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "example": "b9b54012-6339-5987-a320-3effea2c087d"
                    },
                    "serverUrl": {
                      "type": "string",
                      "example": "https://www.macrometa.com"
                    },
                    "urlPattern": {
                      "type": "string",
                      "example": "/home"
                    },
                    "manualTest": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "The job with the given ID was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "patch": {
        "summary": "Update policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update the details of an existing policy.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "87315f9f-0ef5-5499-ac6b-086ff488e3dd"
            },
            "required": true,
            "description": "ID of the policy to update."
          }
        ],
        "operationId": "updatePolicy",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated policy.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "87315f9f-0ef5-5499-ac6b-086ff488e3dd"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Policy ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "type": {
                      "type": "string",
                      "example": "P3"
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Policy ID not found."
                    },
                    "code": {
                      "type": "number",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Delete policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete policy by ID.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "example": "87315f9f-0ef5-5499-ac6b-086ff488e3dd"
            },
            "required": true,
            "description": "ID of the policy to be deleted."
          }
        ],
        "operationId": "deletePolicy",
        "responses": {
          "204": {
            "description": "No content."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Policy ID not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": true
                    },
                    "type": {
                      "type": "string",
                      "example": "P3"
                    },
                    "errorMessage": {
                      "type": "string",
                      "example": "Policy ID not found."
                    },
                    "code": {
                      "type": "number",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/validations/validateHtml/ondemand": {
      "post": {
        "summary": "Validate HTML on-demand",
        "tags": [
          "Validations"
        ],
        "description": "Validates the HTML of a given URL and returns a detailed visual and functional comparison result.",
        "operationId": "validateHtmlOnDemand",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://www.example.com/us/shop/all-deals/tv-and-home-theater/"
                  },
                  "width": {
                    "type": "integer",
                    "example": 1383
                  },
                  "height": {
                    "type": "integer",
                    "example": 864
                  },
                  "deviceType": {
                    "type": "string",
                    "example": "desktop"
                  },
                  "domainName": {
                    "type": "string",
                    "example": "www.example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully fetched validation results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "visualComparisonResult": {
                      "type": "object",
                      "properties": {
                        "optimizedScreenshot": {
                          "type": "string",
                          "format": "uri"
                        },
                        "highlightedScreenshot": {
                          "type": "string",
                          "format": "uri"
                        },
                        "result": {
                          "type": "boolean"
                        },
                        "pixelsMatched": {
                          "type": "integer"
                        },
                        "totalPixels": {
                          "type": "integer"
                        },
                        "deepAnalysis": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "value": {
                                "type": "number",
                                "format": "float"
                              },
                              "explanation": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "fnComparisonResult": {
                      "type": "object"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "COMPLETED"
                      ]
                    },
                    "isPassed": {
                      "type": "boolean"
                    },
                    "result": {
                      "type": "string"
                    },
                    "resolution": {
                      "type": "object",
                      "properties": {
                        "width": {
                          "type": "integer"
                        },
                        "height": {
                          "type": "integer"
                        }
                      }
                    },
                    "jobId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "policyId": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "sourceUrl": {
                      "type": "string",
                      "format": "hostname"
                    },
                    "domainName": {
                      "type": "string"
                    },
                    "urlPattern": {
                      "type": "string",
                      "format": "uri"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters."
          },
          "401": {
            "description": "Unauthorized access - invalid API key."
          },
          "500": {
            "description": "Server error encountered during validation."
          }
        }
      }
    },
    "/api/p3/v1/validations": {
      "get": {
        "summary": "Get Validations Results",
        "tags": [
          "Validations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get all the validation result for the jobs.",
        "operationId": "getValidation",
        "responses": {
          "200": {
            "description": "Successfully fetched validation results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/validations/testSuite/{policyId}": {
      "post": {
        "summary": "Save Test Suite Result",
        "tags": [
          "Validations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Save the manual test suite results for a given policy.",
        "operationId": "saveTestSuite",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the validation to which the test suite result belongs."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "testCount",
                  "testsPassed",
                  "testsFailed"
                ],
                "properties": {
                  "testCount": {
                    "type": "number",
                    "example": 1
                  },
                  "testsPassed": {
                    "type": "number",
                    "example": 0
                  },
                  "testsFailed": {
                    "type": "number",
                    "example": 1
                  },
                  "error": {
                    "type": "string",
                    "example": "N/A",
                    "description": "Error message if the test suite failed, otherwise not required."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully saved test suite result.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Test suite result saved successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input parameters."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "The validation with the given ID was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/validations/testSuite/policy/{policyId}": {
      "post": {
        "summary": "Process OnDemand Tests by Policy ID",
        "tags": [
          "Validations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Processes OnDemand tests for a given policy ID and returns test suite results.",
        "operationId": "testSuiteByPolicyId",
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The unique identifier of the policy for which to process manual tests."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed manual tests and returned test suite results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "testCount": {
                      "type": "number",
                      "example": 1
                    },
                    "testsPassed": {
                      "type": "number",
                      "example": 1
                    },
                    "testsFailed": {
                      "type": "number",
                      "example": 0
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, possibly due to missing or invalid parameters."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "The policy with the given ID was not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/metrics": {
      "get": {
        "summary": "Get metrics",
        "tags": [
          "Metrics"
        ],
        "description": "Get metrics for a specific period.",
        "operationId": "filterMetricsByDate",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "The start date and time used for querying metrics data. Must be provided in ISO8601 format in UTC timezone or number of milliseconds after epoch.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "The end date and time used for querying metrics data. Must be provided in ISO8601 format in UTC timezone or number of milliseconds after epoch.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "The duration by which to group and summarize results.",
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "month"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of metrics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/metrics/prefetch": {
      "get": {
        "summary": "Get metrics related to page prefetching and prerendering",
        "tags": [
          "Metrics"
        ],
        "description": "Get prefetch related metrics for a specific period.",
        "operationId": "filterPrefetchMetricsByDate",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "The start date and time used for querying metrics data. Must be provided in ISO8601 format in UTC timezone or number of milliseconds after epoch.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "The end date and time used for querying metrics data. Must be provided in ISO8601 format in UTC timezone or number of milliseconds after epoch.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "The duration by which to group and summarize results.",
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of prefetch related metrics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "dateGroup": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp group"
                      },
                      "prefetchMode": {
                        "type": "string",
                        "description": "The prefetch category"
                      },
                      "reqCount": {
                        "type": "number",
                        "description": "The number of HTTP page requests corresponding to dateGroup and prefetchMode"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/telemetry": {
      "get": {
        "summary": "Provides the telemetry data",
        "tags": [
          "Telemetry"
        ],
        "description": "Provides telemetry data in Prometheus format. Useful for monitoring services to monitor the health of the service.",
        "operationId": "getTelemetry",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Return the telemetry data for service.",
            "content": {
              "application/text": {
                "example": ""
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/usage": {
      "get": {
        "summary": "Gets usage statistics",
        "tags": [
          "Usage"
        ],
        "description": "Get usage statistics for a specified time period.",
        "operationId": "getUsage",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "The start date and time used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "The end date and time used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": true,
            "description": "The duration by which to group and summarize results.",
            "schema": {
              "type": "string",
              "enum": [
                "hour",
                "day",
                "month"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The number of usage groups returned based on the 'group' parameter.",
            "schema": {
              "type": "number",
              "default": 1000,
              "minimum": 1
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "The starting point for usage groups based on the 'group' parameter. This parameter is especially useful in conjunction with the 'limit' parameter for pagination of a large number of usage records.",
            "schema": {
              "type": "number",
              "default": 0,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AggregateUsageGetResponse"
                  }
                },
                "examples": {
                  "example": {
                    "summary": "Response from usage API",
                    "value": {
                      "summary": {
                        "maxRPS": 15
                      },
                      "details": [
                        {
                          "timestamp": 1717858800000,
                          "humanReadableTimestamp": "2024-06-08T15:00:00.000Z",
                          "totalRequests": 36000,
                          "rps": 10
                        },
                        {
                          "timestamp": 1717862400000,
                          "humanReadableTimestamp": "2024-06-08T16:00:00.000Z",
                          "totalRequests": 48000,
                          "rps": 15
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/cache/purge": {
      "post": {
        "tags": [
          "Cache"
        ],
        "summary": "Purge cache",
        "description": "Purge URLs from the P3 cache. Can also purge CDN cache if specified.",
        "operationId": "purgeCache",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "urls": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of URLs to purge. If not provided, then all URLs in P3 are purged."
                  },
                  "purgeCdnCache": {
                    "type": "boolean",
                    "description": "If true, then the CDN cache will also be purged. Requires 'cdnData' object if true."
                  },
                  "cdnData": {
                    "type": "object",
                    "description": "Required if 'purgeCdnCache' is true. Contains CDN-related data.",
                    "properties": {
                      "network": {
                        "type": "string",
                        "description": "Environment of the CDN, e.g., production."
                      },
                      "objectsType": {
                        "type": "string",
                        "description": "Type of object to purge. Can be cpcode, urls, or tags."
                      },
                      "objects": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Depending on objectsType, this can be an array of integers (for cpcode) or strings (for urls or tags)."
                      },
                      "auth": {
                        "type": "object",
                        "properties": {
                          "accessToken": {
                            "type": "string"
                          },
                          "clientSecret": {
                            "type": "string"
                          },
                          "clientToken": {
                            "type": "string"
                          },
                          "baseUri": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "required": [
                      "network",
                      "objectsType",
                      "objects",
                      "auth"
                    ]
                  }
                }
              },
              "examples": {
                "purgeExample": {
                  "summary": "Example purge request",
                  "value": {
                    "urls": [
                      "https://example.com/*"
                    ],
                    "purgeCdnCache": true,
                    "cdnData": {
                      "network": "production",
                      "objectsType": "cpcode",
                      "objects": [
                        123456,
                        456789
                      ],
                      "auth": {
                        "accessToken": "ACCESS_TOKEN",
                        "clientSecret": "CLIENT_SECRET",
                        "clientToken": "CLIENT_TOKEN",
                        "baseUri": "HOST"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cache purge completed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "proxyCache": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "purgeResponse": {
                    "summary": "Example response for a successful purge",
                    "value": {
                      "message": "Proxy cache purge completed.",
                      "proxyCache": {
                        "status": {
                          "https://example.com/*": "PURGED",
                          "https://example.com/home/*": "PURGED"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/ppm/jobs": {
      "get": {
        "tags": [
          "PPM (Photoniq Performance Measurement)"
        ],
        "summary": "Get list of running PPM jobs",
        "description": "Retrieves a list of PPM jobs.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "The number of items to skip before starting to collect the result set."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "description": "The numbers of items to return."
          }
        ],
        "responses": {
          "200": {
            "description": "A list of PPM jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The total number of jobs available.",
                      "example": 5
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "123123-131231-123123-123123"
                          },
                          "cronExpression": {
                            "type": "string",
                            "nullable": true,
                            "example": "*/30 * * * *"
                          },
                          "isMobile": {
                            "type": "boolean",
                            "example": false
                          },
                          "url": {
                            "type": "string",
                            "example": "https://www.example.com/something/"
                          },
                          "isEnabled": {
                            "type": "boolean",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Possible issue with the pagination parameters."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "tags": [
          "PPM (Photoniq Performance Measurement)"
        ],
        "summary": "Create a PPM job",
        "description": "Creates a PPM job for analyzing core web vitals of a specified URL.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "cronExpression",
                  "deviceType",
                  "networkCondition",
                  "url"
                ],
                "properties": {
                  "cronExpression": {
                    "type": "string",
                    "description": "Cron expression for scheduling the job.",
                    "example": "*/30 * * * *"
                  },
                  "deviceType": {
                    "type": "string",
                    "enum": [
                      "Desktop",
                      "Mobile"
                    ],
                    "description": "The type of device to simulate.",
                    "example": "Desktop"
                  },
                  "networkCondition": {
                    "type": "string",
                    "enum": [
                      "Slow4G",
                      "Regular3G"
                    ],
                    "description": "The network condition to simulate.",
                    "example": "Regular3G"
                  },
                  "url": {
                    "type": "string",
                    "description": "The URL to test.",
                    "example": "https://www.example.com/something"
                  },
                  "viewport": {
                    "type": "object",
                    "properties": {
                      "height": {
                        "type": "integer",
                        "description": "The viewport height in pixels.",
                        "example": 1080
                      },
                      "width": {
                        "type": "integer",
                        "description": "The viewport width in pixels.",
                        "example": 1920
                      }
                    },
                    "required": [
                      "height",
                      "width"
                    ]
                  },
                  "headers": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Any additional headers to send in the request."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "PPM job successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the created PPM job."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Possible issue with the job data provided."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/ppm/vitals/{percentile}": {
      "get": {
        "tags": [
          "PPM (Photoniq Performance Measurement)"
        ],
        "summary": "Retrieve Core Web Vitals Metrics for a Specific Percentile",
        "description": "Returns Core Web Vitals metrics, such as loading speed and interactivity, for a specified percentile. For example, passing in a percentile of 75 will return metrics representing the 75th percentile of performance across the specified time range.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "percentile",
            "required": true,
            "schema": {
              "type": "number",
              "example": 75
            },
            "description": "The percentile value (e.g., 75) for which you want to retrieve the Core Web Vitals metrics. This helps you understand how the majority of users experience your site."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "The number of items to skip before starting to collect the result set."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "description": "The numbers of items to return."
          },
          {
            "name": "start",
            "in": "query",
            "description": "The start date used for querying core web vitals data. Must be provided in RFC3339 date-time format and UTC.",
            "required": false,
            "example": "YYYY-MM-DDTHH:MM:SSZ",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "The end date used for querying core web vitals data. Must be provided in RFC3339 date-time format and UTC.",
            "required": false,
            "example": "YYYY-MM-DDTHH:MM:SSZ",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved Core Web Vitals metrics for the specified percentile.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The total number of records available."
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "example": "https://www.example.com/something/"
                          },
                          "deviceType": {
                            "type": "string",
                            "enum": [
                              "Desktop",
                              "Mobile"
                            ]
                          },
                          "hostname": {
                            "type": "string",
                            "example": "www.example.com"
                          },
                          "score": {
                            "type": "integer",
                            "example": 99
                          },
                          "cumulativeLayoutShift": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "firstContentfulPaint": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "firstMeaningfulPaint": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "timeToInteractive": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "largestContentfulPaint": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "speedIndex": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "totalBlockingTime": {
                            "type": "string",
                            "example": "0.1"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Possible issue with the request body."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/ppm/vitals/url/{url}": {
      "get": {
        "tags": [
          "PPM (Photoniq Performance Measurement)"
        ],
        "summary": "Get Web Vitals Metrics by URL",
        "description": "Retrieves web vitals metrics for a specific URL and device type, with pagination.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string",
              "example": "https://www.example.com/something/"
            },
            "description": "The URL retrieving core web vitals for the provided URL."
          },
          {
            "in": "query",
            "name": "deviceType",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Desktop"
            },
            "description": "The device type of the URL for retrieving core web vitals."
          },
          {
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "description": "The number of items to skip before starting to collect the result set."
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 10
            },
            "description": "The numbers of items to return."
          }
        ],
        "responses": {
          "200": {
            "description": "Web vitals metrics data successfully retrieved by URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "The total number of records available."
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "key": {
                            "type": "string",
                            "example": "13123-13123-31231-ddddd"
                          },
                          "deviceType": {
                            "type": "string",
                            "example": "Desktop"
                          },
                          "hostname": {
                            "type": "string",
                            "example": "www.example.com"
                          },
                          "score": {
                            "type": "integer",
                            "example": 99
                          },
                          "cumulativeLayoutShift": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "firstContentfulPaint": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "firstMeaningfulPaint": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "timeToInteractive": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "largestContentfulPaint": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "speedIndex": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "totalBlockingTime": {
                            "type": "string",
                            "example": "0.1"
                          },
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "example": "https://www.example.com/something/"
                          },
                          "timestamp": {
                            "type": "integer",
                            "example": 1707767456253,
                            "format": "int64"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Possible issue with the request body."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/ppm/jobs/{jobId}": {
      "delete": {
        "tags": [
          "PPM (Photoniq Performance Measurement)"
        ],
        "summary": "Delete a job",
        "description": "Deletes a specific PPM job based on the job ID provided.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "jobId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "13123-13123-31231-ddddd"
            },
            "description": "The unique ID of the job to delete."
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - Successfully deleted the job."
          },
          "400": {
            "description": "Bad request. Possible issue with the job key provided."
          },
          "404": {
            "description": "The specified job key does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/auth/apikeys": {
      "post": {
        "summary": "Create API key",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Create API key",
        "operationId": "createApiKey",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKeyCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "409": {
            "description": "Duplicate API key."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "get": {
        "summary": "Get all api keys",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get API keys",
        "operationId": "getApiKeys",
        "responses": {
          "200": {
            "description": "Successfully fetched apikeys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyGetkeysResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/auth/apikeys/{apikey}": {
      "get": {
        "summary": "Get details of an API key",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Get details of an API key",
        "operationId": "getApiKey",
        "parameters": [
          {
            "in": "path",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched details of the specified API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyGetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Specified API key does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Delete an API key",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Delete an API key",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "in": "path",
            "name": "apikey",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the specified API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Specified API key does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/auth/bearer": {
      "post": {
        "summary": "Create a bearer token",
        "tags": [
          "Authentication"
        ],
        "description": "Obtain a bearer token based on email and password.",
        "operationId": "getBearerToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created new bearer token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtCreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/p3/v1/auth/users/{email}": {
      "patch": {
        "summary": "Update user",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "description": "Update new user",
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully created new user."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "User does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  }
}