{
  "openapi": "3.0.0",
  "info": {
    "title": "PhotonIQ Virtual Waiting Room Service API",
    "description": "API documentation for the PhotonIQ Virtual Waiting Room Service",
    "version": "1.20.0"
  },
  "servers": [
    {
      "url": "https://api-demo-vwrs-service.paas.macrometa.io",
      "description": "PhotonIQ Virtual Waiting Room Service API"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    },
    "schemas": {
      "Origin": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "origin_key"
            ],
            "properties": {
              "origin_key": {
                "type": "string",
                "description": "The unique origin key."
              }
            }
          },
          {
            "$ref": "#/components/schemas/OriginUpdate"
          }
        ]
      },
      "OriginUpdate": {
        "type": "object",
        "required": [
          "origin_url"
        ],
        "properties": {
          "origin_url": {
            "type": "string",
            "description": "The URL of the origin."
          },
          "custom_attributes": {
            "type": "object",
            "description": "A JSON object containing custom attributes."
          }
        }
      },
      "OriginGetResponse": {
        "type": "object",
        "properties": {
          "origin_url": {
            "type": "string",
            "description": "The URL of the origin."
          },
          "custom_attributes": {
            "type": "object",
            "description": "A JSON object containing custom attributes."
          }
        }
      },
      "OriginPostResponse": {
        "type": "object",
        "properties": {
          "origin_key": {
            "type": "string",
            "description": "A unique identifier for the origin response."
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OriginPutResponse": {
        "type": "object",
        "properties": {
          "origin_key": {
            "type": "string",
            "description": "A unique identifier for the origin response."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OriginDeleteResponse": {
        "type": "object",
        "properties": {
          "origin_key": {
            "type": "string",
            "description": "A unique identifier for the origin response."
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiKey": {
        "type": "object",
        "required": [
          "key_id"
        ],
        "properties": {
          "key_id": {
            "type": "string",
            "description": "A unique identifier for the API key."
          },
          "ttl": {
            "type": "integer",
            "description": "Time for which the API key will remain valid (in days).",
            "default": 180
          },
          "activated": {
            "type": "boolean",
            "description": "The activation status of the API key.",
            "default": true
          },
          "role": {
            "type": "string",
            "description": "The role of the API key. Supported Roles:[ admin, editor, and viewer].",
            "default": "editor"
          }
        }
      },
      "PatchApiKey": {
        "type": "object",
        "required": [
          "key_id"
        ],
        "properties": {
          "activated": {
            "type": "boolean",
            "description": "The activation status of the API key.",
            "default": true
          }
        }
      },
      "PostApiKeyResponse": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "A unique identifier for the API key."
          },
          "api_key": {
            "type": "string",
            "description": "API key to authenticate with."
          },
          "role": {
            "type": "string",
            "description": "The role of the API key.",
            "example": "editor"
          },
          "created_at": {
            "type": "integer"
          },
          "expire_at": {
            "type": "integer"
          }
        }
      },
      "PatchApiKeyResponse": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "A unique identifier for the API key."
          },
          "updated_at": {
            "type": "integer"
          }
        }
      },
      "GetApiKeyResponse": {
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "A unique identifier for the API key."
          },
          "expire_at": {
            "type": "integer",
            "description": "The Unix timestamp when the API key expires."
          },
          "created_at": {
            "type": "integer",
            "description": "The Unix timestamp when the API key is created."
          },
          "ttl": {
            "type": "integer",
            "description": "Duration in days from creation that the API key stays valid."
          }
        }
      },
      "GetApiKeysResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GetApiKeyResponse"
        }
      },
      "AuthDeleteResponse": {
        "type": "object",
        "properties": {
          "_key": {
            "type": "string"
          },
          "deleted_at": {
            "type": "integer"
          }
        }
      },
      "Domain": {
        "allOf": [
          {
            "type": "object",
            "required": [
              "domain_key"
            ],
            "properties": {
              "domain_key": {
                "type": "string",
                "description": "The unique key of the domain."
              }
            }
          },
          {
            "$ref": "#/components/schemas/DomainUpdate"
          }
        ]
      },
      "DomainUpdate": {
        "type": "object",
        "required": [
          "domain_url"
        ],
        "properties": {
          "origin_key": {
            "type": "string",
            "description": "The key of the associated origin."
          },
          "domain_url": {
            "type": "string",
            "description": "The URL of the domain."
          },
          "access_type": {
            "type": "string",
            "description": "The access type for the domain (users, rps, or users_per_period).",
            "default": "users"
          },
          "metric_interval": {
            "type": "integer",
            "description": "The time to enable and disable the waiting room (in seconds). This time represents how long the traffic is at or above the rate limit before traffic is directed to the waiting room.",
            "default": 60
          },
          "rate_limit": {
            "type": "integer",
            "description": "The rate limit for the domain.  The maximum 'rps' or 'users' limit before traffic is directed to the waiting room.",
            "default": 100
          },
          "period": {
            "type": "integer",
            "description": "The period for the 'users_per_period' rate (in seconds).",
            "default": 0
          },
          "queue_enablement": {
            "type": "boolean",
            "description": "If set to auto, then the decision to enable the waiting room is determined by the traffic rate exceeding the rate limit set by rate_limit. If set to manual, then the decision to direct traffic to the waiting room is performed all the time.",
            "default": "auto"
          },
          "is_queue_enabled": {
            "type": "boolean",
            "description": "Indicates whether the queue is enabled.",
            "default": false
          },
          "queue_type": {
            "type": "string",
            "description": "The type of queue (fifo, random, lottery).",
            "default": "fifo"
          },
          "priority": {
            "type": "array",
            "maxItems": 10,
            "description": "The domain has a range of priorities, where the highest priority corresponds to the lowest number.",
            "items": {
              "type": "integer",
              "minimum": 1,
              "maximum": 255,
              "default": []
            },
            "example": [
              1,
              4,
              255
            ]
          },
          "access_duration": {
            "type": "integer",
            "description": "The amount of time that users can access the origin (in seconds). Once a user has been granted access, the access_duration determines how long that user can access the origin before they are forwarded to the waiting room after coming to the EdgeWorker again.",
            "default": 60
          },
          "status_interval": {
            "type": "integer",
            "description": "The value at which the UI will reload itself to get the waiting room status.",
            "default": 10
          },
          "custom_attributes": {
            "type": "object",
            "description": "A JSON object containing custom attributes Any valid JSON can be stored here. It is not used by the waiting room at this time."
          },
          "waiting_room_path": {
            "type": "string",
            "description": "Netstorage path for the waiting room HTML file. It should have the full path with \"/{upload-directory-id}/path\"."
          }
        }
      },
      "DomainGetResponse": {
        "type": "object",
        "properties": {
          "origin_key": {
            "type": "string",
            "description": "The key of the associated origin."
          },
          "domain_key": {
            "type": "string",
            "description": "The key of the domain."
          },
          "domain_url": {
            "type": "string",
            "description": "The URL of the domain."
          },
          "access_type": {
            "type": "string",
            "description": "The access type for the domain (users, rps, or users_per_period).",
            "default": "users"
          },
          "period": {
            "type": "integer",
            "description": "The period for the users_per_period rate (in seconds)."
          },
          "queue_enablement": {
            "type": "boolean",
            "description": "If set to auto, then the decision to enable the waiting room is determined by the traffic rate exceeding the rate limit set by rate_limit.  If set to manual, then the decision to direct traffic to the waiting room is performed all the time.",
            "default": "auto"
          },
          "is_queue_enabled": {
            "type": "boolean",
            "description": "Indicates whether the queue is enabled.",
            "default": false
          },
          "queue_type": {
            "type": "string",
            "description": "The type of queue (fifo, random, or lottery).",
            "default": "fifo"
          },
          "metric_interval": {
            "type": "integer",
            "description": "The time to enable and disable the waiting room (in seconds). This time represents how long the traffic is at or above the rate limit before traffic is directed to the waiting room.",
            "default": 60
          },
          "rate_limit": {
            "type": "integer",
            "description": "The rate limit for the domain. The maximum 'rps' or 'users' limit before traffic is directed to the waiting room.",
            "default": 100
          },
          "priority": {
            "type": "integer",
            "description": "The priority for the domain.",
            "default": 0
          },
          "access_duration": {
            "type": "integer",
            "description": "The amount of time that users can access the origin (in seconds). Once a user has been granted access, the access_duration determines how long that user can access the origin before they are forwarded to the waiting room after coming to the EdgeWorker again.",
            "default": 60
          },
          "status_interval": {
            "type": "integer",
            "description": "Value at which the UI will reload itself to get the waiting room status.",
            "default": 10
          },
          "custom_attributes": {
            "type": "object",
            "description": "A JSON object containing custom attributes Any valid JSON can be stored here. It is not used by the waiting room at this time."
          },
          "created_at": {
            "type": "integer",
            "default": 1672531200000
          },
          "waiting_room_path": {
            "type": "string",
            "description": "Netstorage path for the waiting room HTML file. It should have the full path with \"/{upload-directory-id}/path\"."
          }
        }
      },
      "DomainPostResponse": {
        "type": "object",
        "properties": {
          "domain_key": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DomainPutResponse": {
        "type": "object",
        "properties": {
          "domain_key": {
            "type": "string"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DomainDeleteResponse": {
        "type": "object",
        "properties": {
          "domain_key": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RequestMetricsResponse": {
        "type": "object",
        "properties": {
          "avg_waiting_time": {
            "type": "integer",
            "format": "int32",
            "description": "The average time users spend in the virtual waiting room before being granted access to the origin service (in milliseconds)."
          },
          "domain_key": {
            "type": "string",
            "description": "The domain key."
          },
          "origin_key": {
            "type": "string",
            "description": "The origin key."
          },
          "duplicate_request_rate": {
            "type": "integer",
            "format": "int32",
            "description": "The percentage of duplicate requests detected and managed by the virtual waiting room service."
          },
          "peak_queue_length": {
            "type": "integer",
            "format": "int32",
            "description": "The highest number of users in the queue during a specific period."
          },
          "queue_abandonment_rate": {
            "type": "integer",
            "format": "int32",
            "description": "The percentage of users who leave the virtual waiting room without accessing the origin service."
          },
          "request_success_rate": {
            "type": "integer",
            "format": "int32",
            "description": "The percentage of requests to the origin service that are successfully processed after users leave the virtual waiting room."
          },
          "session_duration": {
            "type": "integer",
            "format": "int32",
            "description": "The average time users spend in the virtual waiting room before being granted access to the origin service (in milliseconds)."
          },
          "session_expiration_rate": {
            "type": "integer",
            "format": "int32",
            "description": "The average time users spend in the virtual waiting room before being granted access to the origin service (in milliseconds)."
          },
          "timestamp": {
            "type": "number",
            "format": "number",
            "description": "The epoch time of the start interval when the metric was generated (in seconds)."
          },
          "users_in_queue": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of users currently waiting in the virtual waiting room."
          }
        }
      },
      "AggregateUsageGetResponse": {
        "type": "object",
        "properties": {
          "domain_key": {
            "type": "integer",
            "format": "int32",
            "description": "A unique identifier for the domain."
          },
          "requests": {
            "type": "integer",
            "format": "int32",
            "description": "Total requests for the specified time period."
          },
          "max_rps": {
            "type": "string",
            "description": "Maximum request per second for the specified time period."
          }
        }
      },
      "UsageGetResponse": {
        "type": "object",
        "properties": {
          "domain_key": {
            "type": "string",
            "description": "A unique identifier for the domain."
          },
          "requests": {
            "type": "integer",
            "format": "int32",
            "description": "Total requests for the received time period slot."
          },
          "max_rps": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum request per second for the received time period slot."
          },
          "timestamp": {
            "type": "string",
            "description": "Date-time slot of the usage bucket."
          }
        }
      },
      "GetVersionResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version of the service."
          }
        }
      },
      "LogLevel": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "The log level of the service."
          }
        }
      },
      "getInformationResponse": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The type of the service.",
            "enum": [
              "leader",
              "follower",
              "vwrs"
            ],
            "example": "leader"
          },
          "service_host": {
            "type": "string",
            "description": "Name of the instance of the service.",
            "example": "test-service-us-east.example.io"
          }
        }
      }
    }
  },
  "paths": {
    "/api/vwr/v1/origins": {
      "post": {
        "summary": "Create a new origin",
        "tags": [
          "Origins"
        ],
        "description": "Create a new origin with the specified properties.",
        "operationId": "createOrigin",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Origin"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Origin created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OriginPostResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "get": {
        "summary": "Get information of origins",
        "tags": [
          "Origins"
        ],
        "description": "Get list of origins that match the pattern.",
        "operationId": "getAllMatchingOrigins",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "pattern",
            "in": "query",
            "description": "Fetch origin information that matches the pattern. For example, a pattern could be 'aa' or 'test'. To obtain all origins, set the pattern to '*'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The maximum number of domains returned.",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "origin_url",
                "origin_key"
              ],
              "default": "origin_key"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Origin information retrieved.",
            "headers": {
              "X-count": {
                "description": "The total number of records that match the pattern.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OriginPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either API key doesn't have permissions or it's deactivated."
          },
          "404": {
            "description": "Domain not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/origins/{origin_id}": {
      "get": {
        "summary": "Get information for a specific origin",
        "tags": [
          "Origins"
        ],
        "description": "Retrieve information about a specific origin.",
        "operationId": "getOrigin",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "origin_id",
            "in": "path",
            "description": "The ID of the origin to retrieve information for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Origin information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OriginPostResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Origin ID Not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "summary": "Update an origin",
        "tags": [
          "Origins"
        ],
        "description": "Update an origin with the specified properties.",
        "operationId": "updateOrigin.",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "origin_id",
            "in": "path",
            "description": "The ID of the origin to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OriginUpdate"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Origin updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OriginPutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Origin ID Not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "patch": {
        "summary": "Modify specific properties of an origin",
        "tags": [
          "Origins"
        ],
        "description": "Modify an origin by specifying the properties that need to be updated.",
        "operationId": "patchOrigin",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "origin_id",
            "in": "path",
            "description": "The ID of the origin to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OriginUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Origin modified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OriginGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Origin ID Not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Delete origin information",
        "tags": [
          "Origins"
        ],
        "description": "Delete  origin information about a specific origin.",
        "operationId": "deleteOrigin",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "origin_id",
            "in": "path",
            "description": "The ID of the origin to delete information for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Origin ID deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OriginDeleteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Origin ID Not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/domains": {
      "get": {
        "summary": "Get information of domains",
        "tags": [
          "Domains"
        ],
        "description": "Get list of domains that match the pattern.",
        "operationId": "getDomainUsingQueryParams",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "pattern",
            "in": "query",
            "description": "Fetch domain information that matches the pattern. For example, a pattern could be 'aa' or 'test'. To obtain all domains, set the pattern to '*'.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The maximum number of domains returned.",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "domain_key",
                "created_at",
                "domain_url"
              ],
              "default": "domain_url"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain information retrieved.",
            "headers": {
              "X-count": {
                "description": "The total number of records that match the pattern.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Domain not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "post": {
        "summary": "Create a domain",
        "tags": [
          "Domains"
        ],
        "description": "Create a new domain with the specified properties.",
        "operationId": "createDomain",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Domain created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainPostResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/domains/{domain_id}": {
      "get": {
        "summary": "Get domain information for a specific domain",
        "tags": [
          "Domains"
        ],
        "description": "Get information about a domain.",
        "operationId": "getDomain",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "description": "The ID of the domain to retrieve information for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Domain information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainGetResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Domain ID Not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "summary": "Update a domain",
        "tags": [
          "Domains"
        ],
        "description": "Update a domain with the specified properties.",
        "operationId": "updateDomain",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "description": "The ID of the domain to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Domain updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainPutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Domain ID not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "patch": {
        "summary": "Modify specific property of a domain",
        "tags": [
          "Domains"
        ],
        "description": "Modify a domain by specifying the properties that need to be updated.",
        "operationId": "patchDomain",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "description": "The ID of the domain to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainGetResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Domain ID not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Delete domain information",
        "tags": [
          "Domains"
        ],
        "description": "Delete domain information about a specific domain.",
        "operationId": "deleteDomain",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "description": "The ID of the domain to delete information for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Domain information deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainDeleteResponse"
                }
              }
            }
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Domain ID not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/apikey": {
      "post": {
        "summary": "Create a new API Key",
        "tags": [
          "Api key"
        ],
        "description": "Create a new API key. Keep the API key safe, because it cannot be retrieved. Provide the TTL in days and specify the role of the API key.\n\n__The following roles are supported.__\n* **admin** - Can run all API endpoints.\n* **editor** - Can run all API endpoints, except API keys endpoints.\n* **viewer** - Can only run read API endpoints.\n\nThis API requires **'admin'** permissions to run.\n",
        "operationId": "createApiKey",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiKey"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "ApiKey created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "409": {
            "description": "Conflict 'key_id' already present."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "get": {
        "summary": "Get API keys details",
        "tags": [
          "Api key"
        ],
        "description": "Get all API key details.",
        "operationId": "getApiKeysDetails",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The maximum number of API keys returned.",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "pattern",
            "in": "query",
            "required": false,
            "description": "The search pattern of the key_id.",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "key_id",
                "created_at",
                "expire_at",
                "ttl"
              ],
              "default": "key_id"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All API keys information retrieved.",
            "headers": {
              "X-count": {
                "description": "The total number of records that match the pattern.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiKeysResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/apikey/{key_id}": {
      "get": {
        "summary": "Get API key by unique key_id",
        "tags": [
          "Api key"
        ],
        "description": "Get API key by unique key_id.",
        "operationId": "getApiKey",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "Unique key_id to fetch the API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Key information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "API key not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "patch": {
        "summary": "Update API key",
        "tags": [
          "Api key"
        ],
        "description": "Update API key by unique key_id.\n\nThis API requires **'admin'** permissions to run.\n",
        "operationId": "updateApiKey",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "Unique key_id to fetch the API key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchApiKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Key information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchApiKeyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "API Key not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Delete key",
        "tags": [
          "Api key"
        ],
        "description": "Delete API key with a unique 'key_id'.\n\nThis API requires **'admin'** permissions to run.\n",
        "operationId": "deleteKey",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "description": "The unique ID of the API key to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "API key deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthDeleteResponse"
                }
              }
            }
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "API key Not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/metrics/{domain_id}": {
      "get": {
        "summary": "Filter metrics by domain ID",
        "tags": [
          "Metrics"
        ],
        "description": "Filter metrics for a specific domain. Optionally provide _from_ and _end_ filter for a specific period.",
        "operationId": "getMetrics",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "required": true,
            "description": "The key of the domain.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "The **start date** used for querying metrics data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "description": "The **end date** used for querying metrics data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The _limit_ parameter determines the number of metrics to be returned, up to 90 days worth of data.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "avg_waiting_time",
                "domain_key",
                "duplicate_request_rate",
                "peak_queue_length",
                "queue_abandonment_rate",
                "request_success_rate",
                "timestamp",
                "usage_requests"
              ],
              "default": "timestamp"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of metrics.",
            "headers": {
              "X-count": {
                "description": "The total number of records.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestMetricsResponse"
                  }
                },
                "examples": {
                  "example1": {
                    "value": [
                      {
                        "avg_waiting_time": 0,
                        "domain_key": "test",
                        "duplicate_request_rate": 0,
                        "origin_key": "test",
                        "peak_queue_length": 29,
                        "queue_abandonment_rate": 0,
                        "request_success_rate": 0,
                        "session_duration": 0,
                        "session_expiration_rate": 0,
                        "timestamp": 1680643801,
                        "users_in_queue": 0
                      },
                      {
                        "avg_waiting_time": 0,
                        "domain_key": "virtual-room.example.io",
                        "duplicate_request_rate": 0,
                        "origin_key": "example-origin",
                        "peak_queue_length": 0,
                        "queue_abandonment_rate": 0,
                        "request_success_rate": 0,
                        "session_duration": 0,
                        "session_expiration_rate": 0,
                        "timestamp": 1680643801,
                        "users_in_queue": 18446744073709552000
                      },
                      {
                        "avg_waiting_time": 0,
                        "domain_key": "virtual-room.example.io",
                        "duplicate_request_rate": 0,
                        "origin_key": "example-origin",
                        "peak_queue_length": 0,
                        "queue_abandonment_rate": 0,
                        "request_success_rate": 0,
                        "session_duration": 0,
                        "session_expiration_rate": 0,
                        "timestamp": 1680643741,
                        "users_in_queue": 18446744073709552000
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Metrics not available."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/metrics": {
      "get": {
        "summary": "Filter metrics",
        "tags": [
          "Metrics"
        ],
        "description": "Filter metrics for all the domains. Optionally provide _from_ and _to_ filter for a specific period.",
        "operationId": "filterMetricsByDate",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "The **start date** used for querying metrics data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "description": "The **end date** used for querying metrics data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The _limit_ parameter determines the number of metrics to be returned, up to 90 days worth of data.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "avg_waiting_time",
                "domain_key",
                "duplicate_request_rate",
                "peak_queue_length",
                "queue_abandonment_rate",
                "request_success_rate",
                "timestamp",
                "usage_requests"
              ],
              "default": "timestamp"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of metrics.",
            "headers": {
              "X-count": {
                "description": "The total number of records.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RequestMetricsResponse"
                  }
                },
                "examples": {
                  "example": {
                    "value": [
                      {
                        "avg_waiting_time": 0,
                        "domain_key": "test",
                        "duplicate_request_rate": 0,
                        "origin_key": "test",
                        "peak_queue_length": 29,
                        "queue_abandonment_rate": 0,
                        "request_success_rate": 0,
                        "session_duration": 0,
                        "session_expiration_rate": 0,
                        "timestamp": 1680643801,
                        "users_in_queue": 0
                      },
                      {
                        "avg_waiting_time": 0,
                        "domain_key": "virtual-room.example.io",
                        "duplicate_request_rate": 0,
                        "origin_key": "example-origin",
                        "peak_queue_length": 0,
                        "queue_abandonment_rate": 0,
                        "request_success_rate": 0,
                        "session_duration": 0,
                        "session_expiration_rate": 0,
                        "timestamp": 1680643801,
                        "users_in_queue": 18446744073709552000
                      },
                      {
                        "avg_waiting_time": 0,
                        "domain_key": "virtual-room.example.io",
                        "duplicate_request_rate": 0,
                        "origin_key": "example-origin",
                        "peak_queue_length": 0,
                        "queue_abandonment_rate": 0,
                        "request_success_rate": 0,
                        "session_duration": 0,
                        "session_expiration_rate": 0,
                        "timestamp": 1680643741,
                        "users_in_queue": 18446744073709552000
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/usage/hourly": {
      "get": {
        "summary": "Get hourly generated usage data",
        "tags": [
          "Usage"
        ],
        "description": "Get hourly generated usage data of a domain for a specified time period.",
        "operationId": "getHourlyUsage",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "description": "Domain for which the usage information is to be retrieved.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "The **start date** used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "The **end date** used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "required": false,
            "description": "If the _aggregate_ flag is _true_, then the results are consolidated and returned as an aggregate summary for the specified _from_ and _end_ period. If the _aggregate_ flag is _false_ or not provided, then the data is returned as separate, distributed records for the same period. If _aggregate_ flag is _true_, then [offset, limit, sort, order] are not considered.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The maximum number of domains returned.",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "usage_requests",
                "max_rps",
                "domain_key",
                "timestamp"
              ],
              "default": "timestamp"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage information retrieved.",
            "headers": {
              "X-count": {
                "description": "The total number of records for the specified time period if _aggregate_ is set to _false_.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UsageGetResponse"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AggregateUsageGetResponse"
                      }
                    }
                  ]
                },
                "examples": {
                  "example": {
                    "summary": "Response when aggregate is false.",
                    "value": [
                      {
                        "domain_key": "test.domain",
                        "requests": 1305,
                        "max_rps": 100,
                        "timestamp": "2023-07-12T07:00:00.000Z"
                      },
                      {
                        "domain_key": "test.domain",
                        "requests": 1200,
                        "max_rps": 125,
                        "timestamp": "2023-07-12T08:00:00.000Z"
                      }
                    ]
                  },
                  "example_two": {
                    "summary": "Response when aggregate is true.",
                    "value": [
                      {
                        "domain_key": "test.domain",
                        "requests": 2505,
                        "average_max_rps": 112.5
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Usage info not available."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/usage/daily": {
      "get": {
        "summary": "Get daily generated usage data",
        "tags": [
          "Usage"
        ],
        "description": "Get daily usage data of a domain for a specified time period.",
        "operationId": "getDailyUsage",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": true,
            "description": "Domain for which the usage information is to be retrieved.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "The **start date** used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "The **end date** used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "required": false,
            "description": "If the _aggregate_ flag is _true_, then the results are consolidated and returned as an aggregate summary for the specified _from_ and _end_ period. If the _aggregate_ flag is _false_ or not provided, then the data is returned as separate, distributed records for the same period. If _aggregate_ flag is _true_, then [offset, limit, sort, order] are not considered.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The maximum number of domains returned.",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "usage_requests",
                "max_rps",
                "domain_key",
                "timestamp"
              ],
              "default": "timestamp"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage information retrieved.",
            "headers": {
              "X-count": {
                "description": "The total number of records for the specified time period if _aggregate_ is set to _false_.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UsageGetResponse"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AggregateUsageGetResponse"
                      }
                    }
                  ]
                },
                "examples": {
                  "example": {
                    "summary": "Response when aggregate is set to false.",
                    "value": [
                      {
                        "domain_key": "test.domain",
                        "requests": 1305,
                        "max_rps": 100,
                        "timestamp": "2023-07-12T07:00:00.000Z"
                      },
                      {
                        "domain_key": "test.domain",
                        "requests": 1200,
                        "max_rps": 125,
                        "timestamp": "2023-07-13T08:00:00.000Z"
                      }
                    ]
                  },
                  "example_two": {
                    "summary": "Response when aggregate is set to true.",
                    "value": [
                      {
                        "domain_key": "test.domain",
                        "requests": 2505,
                        "average_max_rps": 112.5
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Usage info not available."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/usage/monthly": {
      "get": {
        "summary": "Get monthly generated usage data",
        "tags": [
          "Usage"
        ],
        "description": "Get monthly usage data of a domain for a specified time period.",
        "operationId": "getMonthlyUsage",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "required": false,
            "description": "Domain for which the usage information is to be retrieved.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "required": true,
            "description": "The **start date** used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "end",
            "in": "query",
            "required": true,
            "description": "The **end date** used for querying usage data. Must be provided in RFC3339 date-time format and be in UTC.",
            "schema": {
              "type": "string",
              "example": "YYYY-MM-DDTHH:MM:SSZ"
            }
          },
          {
            "name": "aggregate",
            "in": "query",
            "required": false,
            "description": "If the _aggregate_ flag is _true_, then the results are consolidated and returned as an aggregate summary for the specified _from_ and _end_ period. If the _aggregate_ flag is _false_ or not provided, then the data is returned as separate, distributed records for the same period.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "The maximum number of domains returned.",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Specify the offset to determine the starting point for data retrieval from the total records.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "sortby",
            "in": "query",
            "required": false,
            "description": "The field used for sorting.",
            "schema": {
              "type": "string",
              "enum": [
                "usage_requests",
                "max_rps",
                "domain_key",
                "timestamp"
              ],
              "default": "timestamp"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "description": "The sort order:\n * `asc` - Ascending, from A to Z\n * `desc` - Descending, from Z to A\n",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage information retrieved.",
            "headers": {
              "X-count": {
                "description": "The total number of records for the specified time period.",
                "schema": {
                  "type": "integer",
                  "default": 1000
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UsageGetResponse"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AggregateUsageGetResponse"
                      }
                    }
                  ]
                },
                "examples": {
                  "example": {
                    "summary": "Response when aggregate is false.",
                    "value": [
                      {
                        "domain_key": "test.domain",
                        "requests": 1305,
                        "max_rps": 100,
                        "timestamp": "2023-06-12T00:00:00.000Z"
                      },
                      {
                        "domain_key": "test.domain",
                        "requests": 1200,
                        "max_rps": 125,
                        "timestamp": "2023-07-12T00:00:00.000Z"
                      }
                    ]
                  },
                  "example_two": {
                    "summary": "Response when aggregate is true.",
                    "value": [
                      {
                        "domain_key": "test.domain",
                        "requests": 2505,
                        "average_max_rps": 112.5
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "404": {
            "description": "Usage info not available."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/version": {
      "get": {
        "summary": "Version of the service",
        "tags": [
          "Version"
        ],
        "description": "Get the current version of the service.",
        "operationId": "getVersion",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Return the current version of the service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetVersionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/telemetry": {
      "get": {
        "summary": "Provides the telemetry data",
        "tags": [
          "Telemetry"
        ],
        "description": "Provide telemetry data in Prometheus format. Useful for monitoring services to monitor the health of the Virtual Waiting Room Service.",
        "operationId": "getTelemetry",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Return the telemetry data for service.",
            "content": {
              "application/text": {
                "example": "# TYPE usage_requests_count counter\nusage_requests_count{domain=\"virtual-room.example.io\"} 1 1694758004532\n# TYPE waiting_time_count counter\nwaiting_time_count{domain=\"virtual-room.example.io\"} 0 1694758004532\n# TYPE waiting_time counter\nwaiting_time{domain=\"virtual-room.example.io\"} 0 1694758004532\n# TYPE max_queue_size counter\nmax_queue_size{domain=\"virtual-room.example.io\"} 0 1694758004532\n# TYPE queue_size counter\nqueue_size{domain=\"virtual-room.example.io\"} 0 1694758004532\n"
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/log/level": {
      "get": {
        "summary": "Get the current log level",
        "tags": [
          "Logs"
        ],
        "description": "Get the current log level of the service.\n\nThis API requires **'admin'** permissions to run.\n",
        "operationId": "getLogLevel",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Return the current log level of the service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogLevel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "summary": "Set the log level",
        "tags": [
          "Logs"
        ],
        "description": "Set the current log level of the service.\n\nValid values are **'DEBUG'**, **'INFO'**, **'WARNING'** and **'ERROR'**.\n\nThis API requires **'admin'** permissions to run.\n",
        "operationId": "setLogLevel",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Return the current log level of the service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogLevel"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/health": {
      "get": {
        "summary": "Check the health of the service",
        "tags": [
          "Health"
        ],
        "description": "Check the health of the service.",
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "Return when service is healthy."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/vwr/v1/info": {
      "get": {
        "summary": "Get the information of the service",
        "description": "Get the type and instance name of the service.\n\nValid values for type are **'leader'**, **'follower'**, and **'vwrs'**.\n\nThis API requires **'admin'** permissions to run.\n",
        "tags": [
          "Service information"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "This API returns the service type e.g.['leader', 'follower' and 'vwrs'] and service instance name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getInformationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authorization failure due to invalid authentication credentials."
          },
          "403": {
            "description": "Either the API key doesn't have permissions or it is deactivated."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "host": "api-play.paas.macrometa.io"
}
