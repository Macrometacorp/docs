{
  "openapi": "3.0.0",
  "info": {
    "title": "PhotonIQ Prerender Service",
    "description": "API documentation for the PhotonIQ Prerender service",
    "version": "1.2.0"
  },
  "components": { "schemas": {} },
  "paths": {
    "/api/prerender/v1/origins/{origin}/cache/purge": {
      "post": {
        "summary": "Purge cache",
        "tags": ["Cache"],
        "description": "Clears rendered pages from the origin cache. It is possible to clear all records related to the origin or specific records according to the \"urls\" list.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "urls": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Origin path."
                    },
                    "description": "List of origin paths to be deleted from the cache."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Cache purged successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Cache purged successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "OK",
                    "message": "Cache purged successfully."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/cache/{cacheKey}/preview": {
      "get": {
        "summary": "Preview cached document",
        "tags": ["Cache"],
        "description": "This endpoint retrieves cached documents from the cache. Users must specify both the \"origin\" and the \"cacheKey\" of the document they wish to access.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "cacheKey",
            "required": true,
            "description": "Unique key for the document."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Cached document preview fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Cached document preview fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "response": {
                          "type": "string",
                          "description": "Cached HTML content of the pre-rendered page"
                        }
                      },
                      "required": ["response"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Cached document preview fetched successfully.",
                    "data": {
                      "response": "<!DOCTYPE html><html lang=\"en\"><head><base href=\"https://www.origin.com/\"></head><body></body></html>"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/cache": {
      "get": {
        "summary": "Get all cached documents information",
        "tags": ["Cache"],
        "description": "This endpoint provides a paginated list of cached documents associated with a specified \"origin\". Users can control pagination using the \"limit\" and \"offset\" query parameters. The \"limit\" parameter defines the number of documents to retrieve, while \"offset\" specifies the starting point in the list.",
        "parameters": [
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 100,
              "maximum": 1000
            },
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Limit for results."
          },
          {
            "schema": { "type": "number", "default": 0 },
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Offset for results."
          },
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Cached documents information fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Cached documents information fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_key": {
                            "type": "string",
                            "description": "Cached document unique identifier.",
                            "minLength": 1
                          },
                          "requestUrl": {
                            "type": "string",
                            "format": "uri",
                            "description": "URL of the content that has been cached."
                          },
                          "statusCode": {
                            "type": "number",
                            "description": "Response HTTP status code."
                          },
                          "isPrefetch": {
                            "type": "boolean",
                            "description": "Whether rendering was performed as a prefetch operation (true) or on-demand (false)."
                          },
                          "isMobile": {
                            "type": "boolean",
                            "description": "Whether rendering was tailored for mobile devices."
                          },
                          "expiry": {
                            "type": "number",
                            "description": "Timestamp (in seconds) indicating when the document will expire."
                          },
                          "created": {
                            "type": "number",
                            "description": "Timestamp (in milliseconds) indicating when the document was created."
                          }
                        },
                        "required": [
                          "_key",
                          "requestUrl",
                          "isPrefetch",
                          "isMobile",
                          "expiry",
                          "created"
                        ]
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Cached documents information fetched successfully.",
                    "data": [
                      {
                        "_key": "10a92b2d8f021820ca55d2d4cb70b35b",
                        "requestUrl": "https://www.origin.com/terms",
                        "statusCode": 200,
                        "isPrefetch": false,
                        "isMobile": false,
                        "expiry": 1703447373,
                        "created": 1702928973210
                      },
                      {
                        "_key": "69fe05803fd08709f42dc48a551424c4",
                        "requestUrl": "https://www.origin.com/privacy",
                        "statusCode": 200,
                        "isPrefetch": false,
                        "isMobile": false,
                        "expiry": 1703447372,
                        "created": 1702928972960
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/health": {
      "get": {
        "summary": "Get service health",
        "tags": ["Health"],
        "description": "Returns the service health.",
        "responses": {
          "200": {
            "description": "Service health fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Service health fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string",
                          "description": "Service version."
                        }
                      },
                      "required": ["version"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Service health fetched successfully.",
                    "data": { "version": "1.0.0" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/interactions": {
      "get": {
        "summary": "Get synthetic interactions",
        "tags": ["Synthetic Interactions"],
        "description": "Returns the synthetic interactions associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Interactions fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Interactions fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "scroll": {
                          "type": "object",
                          "properties": {
                            "_key": {
                              "type": "string",
                              "description": "Interaction unique identifier."
                            },
                            "origin": {
                              "type": "string",
                              "format": "uri",
                              "description": "Origin base URL."
                            },
                            "created": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was created."
                            },
                            "lastUpdated": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was updated."
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the interaction is active."
                                },
                                "steps": {
                                  "type": "integer",
                                  "description": "In how many phases the scroll will be completed."
                                },
                                "valueInPx": {
                                  "type": "integer",
                                  "description": "Number of pixels to scroll in each step."
                                },
                                "delayBetween": {
                                  "type": "integer",
                                  "description": "Delay (in milliseconds) between steps."
                                },
                                "specific": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the specific interaction is active."
                                      },
                                      "urlPaths": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "description": "Origin path."
                                        },
                                        "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                      },
                                      "operation": {
                                        "type": "string",
                                        "enum": ["==", "!="],
                                        "description": "Operator applied against the urlPaths list."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "urlPaths",
                                      "operation"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "isActive",
                                "steps",
                                "valueInPx",
                                "delayBetween",
                                "specific"
                              ]
                            }
                          },
                          "required": ["_key", "origin", "config"]
                        },
                        "click": {
                          "type": "object",
                          "properties": {
                            "_key": {
                              "type": "string",
                              "description": "Interaction unique identifier."
                            },
                            "origin": {
                              "type": "string",
                              "format": "uri",
                              "description": "Origin base URL."
                            },
                            "created": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was created."
                            },
                            "lastUpdated": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was updated."
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the interaction is active."
                                },
                                "global": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the global interaction is active."
                                      },
                                      "htmlSelector": {
                                        "type": "string",
                                        "description": "HTML selector where the interaction is executed."
                                      },
                                      "waitAfterInteraction": {
                                        "type": "integer",
                                        "description": "Waiting time (in seconds) after the interaction is executed."
                                      },
                                      "executionSequence": {
                                        "type": "integer",
                                        "description": "Interaction execution order."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "htmlSelector",
                                      "executionSequence"
                                    ]
                                  }
                                },
                                "specific": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the specific interaction is active."
                                      },
                                      "htmlSelector": {
                                        "type": "string",
                                        "description": "HTML selector where the interaction is executed."
                                      },
                                      "waitAfterInteraction": {
                                        "type": "integer",
                                        "description": "Waiting time (in seconds) after the interaction is executed."
                                      },
                                      "executionSequence": {
                                        "type": "integer",
                                        "description": "Interaction execution order."
                                      },
                                      "urlPaths": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "description": "Origin path."
                                        },
                                        "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                      },
                                      "operation": {
                                        "type": "string",
                                        "enum": ["==", "!="],
                                        "description": "Operator applied against the urlPaths list."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "htmlSelector",
                                      "executionSequence",
                                      "urlPaths",
                                      "operation"
                                    ]
                                  }
                                }
                              },
                              "required": ["isActive", "global", "specific"]
                            }
                          },
                          "required": ["_key", "origin", "config"]
                        },
                        "hover": {
                          "type": "object",
                          "properties": {
                            "_key": {
                              "type": "string",
                              "description": "Interaction unique identifier."
                            },
                            "origin": {
                              "type": "string",
                              "format": "uri",
                              "description": "Origin base URL."
                            },
                            "created": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was created."
                            },
                            "lastUpdated": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was updated."
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the interaction is active."
                                },
                                "global": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the global interaction is active."
                                      },
                                      "htmlSelector": {
                                        "type": "string",
                                        "description": "HTML selector where the interaction is executed."
                                      },
                                      "waitAfterInteraction": {
                                        "type": "integer",
                                        "description": "Waiting time (in seconds) after the interaction is executed."
                                      },
                                      "executionSequence": {
                                        "type": "integer",
                                        "description": "Interaction execution order."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "htmlSelector",
                                      "executionSequence"
                                    ]
                                  }
                                },
                                "specific": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the specific interaction is active."
                                      },
                                      "htmlSelector": {
                                        "type": "string",
                                        "description": "HTML selector where the interaction is executed."
                                      },
                                      "waitAfterInteraction": {
                                        "type": "integer",
                                        "description": "Waiting time (in seconds) after the interaction is executed."
                                      },
                                      "executionSequence": {
                                        "type": "integer",
                                        "description": "Interaction execution order."
                                      },
                                      "urlPaths": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "description": "Origin path."
                                        },
                                        "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                      },
                                      "operation": {
                                        "type": "string",
                                        "enum": ["==", "!="],
                                        "description": "Operator applied against the urlPaths list."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "htmlSelector",
                                      "executionSequence",
                                      "urlPaths",
                                      "operation"
                                    ]
                                  }
                                }
                              },
                              "required": ["isActive", "global", "specific"]
                            }
                          },
                          "required": ["_key", "origin", "config"]
                        }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Interactions fetched successfully.",
                    "data": {
                      "scroll": {
                        "_key": "-xessvEdKI9qNn7fpR7czTV",
                        "origin": "https://www.origin.com",
                        "config": {
                          "isActive": true,
                          "steps": 4,
                          "valueInPx": 5000,
                          "delayBetween": 300,
                          "specific": []
                        }
                      },
                      "click": {
                        "_key": "-A5HO1NwgFrTMp5xv8KRWnk",
                        "origin": "https://www.origin.com",
                        "config": {
                          "isActive": true,
                          "global": [],
                          "specific": [
                            {
                              "isActive": true,
                              "htmlSelector": "#tab",
                              "waitAfterInteraction": 150,
                              "executionSequence": 0,
                              "urlPaths": ["^/.*$"],
                              "operation": "=="
                            }
                          ]
                        }
                      },
                      "hover": {
                        "_key": "-6txvJI2HHJHwRYqeGr8OHV",
                        "origin": "https://www.origin.com",
                        "config": {
                          "isActive": true,
                          "global": [
                            {
                              "isActive": true,
                              "htmlSelector": ".item",
                              "waitAfterInteraction": 50,
                              "executionSequence": 0
                            }
                          ],
                          "specific": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/interactions/{type}": {
      "get": {
        "summary": "Get synthetic interaction",
        "tags": ["Synthetic Interactions"],
        "description": "Returns a synthetic interaction associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["hover", "click", "scroll"]
            },
            "in": "path",
            "name": "type",
            "required": true,
            "description": "Interaction type."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Interaction fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Interaction fetched successfully.",
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Interaction fetched successfully.",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Success status."
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message."
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "_key": {
                              "type": "string",
                              "description": "Interaction unique identifier."
                            },
                            "origin": {
                              "type": "string",
                              "format": "uri",
                              "description": "Origin base URL."
                            },
                            "created": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was created."
                            },
                            "lastUpdated": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was updated."
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the interaction is active."
                                },
                                "steps": {
                                  "type": "integer",
                                  "description": "In how many phases the scroll will be completed."
                                },
                                "valueInPx": {
                                  "type": "integer",
                                  "description": "Number of pixels to scroll in each step."
                                },
                                "delayBetween": {
                                  "type": "integer",
                                  "description": "Delay (in milliseconds) between steps."
                                },
                                "specific": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the specific interaction is active."
                                      },
                                      "urlPaths": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "description": "Origin path."
                                        },
                                        "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                      },
                                      "operation": {
                                        "type": "string",
                                        "enum": ["==", "!="],
                                        "description": "Operator applied against the urlPaths list."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "urlPaths",
                                      "operation"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "isActive",
                                "steps",
                                "valueInPx",
                                "delayBetween",
                                "specific"
                              ]
                            }
                          },
                          "required": ["_key", "origin", "config"]
                        }
                      },
                      "required": ["status", "message", "data"]
                    },
                    {
                      "type": "object",
                      "description": "Interaction fetched successfully.",
                      "properties": {
                        "status": {
                          "type": "string",
                          "description": "Success status."
                        },
                        "message": {
                          "type": "string",
                          "description": "Success message."
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "_key": {
                              "type": "string",
                              "description": "Interaction unique identifier."
                            },
                            "origin": {
                              "type": "string",
                              "format": "uri",
                              "description": "Origin base URL."
                            },
                            "created": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was created."
                            },
                            "lastUpdated": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Date when the interaction was updated."
                            },
                            "config": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the interaction is active."
                                },
                                "global": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the global interaction is active."
                                      },
                                      "htmlSelector": {
                                        "type": "string",
                                        "description": "HTML selector where the interaction is executed."
                                      },
                                      "waitAfterInteraction": {
                                        "type": "integer",
                                        "description": "Waiting time (in seconds) after the interaction is executed."
                                      },
                                      "executionSequence": {
                                        "type": "integer",
                                        "description": "Interaction execution order."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "htmlSelector",
                                      "executionSequence"
                                    ]
                                  }
                                },
                                "specific": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "isActive": {
                                        "type": "boolean",
                                        "description": "Whether the specific interaction is active."
                                      },
                                      "htmlSelector": {
                                        "type": "string",
                                        "description": "HTML selector where the interaction is executed."
                                      },
                                      "waitAfterInteraction": {
                                        "type": "integer",
                                        "description": "Waiting time (in seconds) after the interaction is executed."
                                      },
                                      "executionSequence": {
                                        "type": "integer",
                                        "description": "Interaction execution order."
                                      },
                                      "urlPaths": {
                                        "type": "array",
                                        "items": {
                                          "type": "string",
                                          "description": "Origin path."
                                        },
                                        "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                      },
                                      "operation": {
                                        "type": "string",
                                        "enum": ["==", "!="],
                                        "description": "Operator applied against the urlPaths list."
                                      }
                                    },
                                    "required": [
                                      "isActive",
                                      "htmlSelector",
                                      "executionSequence",
                                      "urlPaths",
                                      "operation"
                                    ]
                                  }
                                }
                              },
                              "required": ["isActive", "global", "specific"]
                            }
                          },
                          "required": ["_key", "origin", "config"]
                        }
                      },
                      "required": ["status", "message", "data"]
                    }
                  ],
                  "example": {
                    "status": "OK",
                    "message": "Interaction fetched successfully.",
                    "data": {
                      "_key": "-A5HO1NwgFrTMp5xv8KRWnk",
                      "origin": "https://www.origin.com",
                      "config": {
                        "isActive": true,
                        "global": [],
                        "specific": [
                          {
                            "isActive": true,
                            "htmlSelector": "#tab",
                            "waitAfterInteraction": 150,
                            "executionSequence": 0,
                            "urlPaths": ["^/.*$"],
                            "operation": "=="
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create synthetic interaction",
        "tags": ["Synthetic Interactions"],
        "description": "Creates a synthetic interaction associated with the origin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "config": {
                        "type": "object",
                        "properties": {
                          "isActive": {
                            "type": "boolean",
                            "description": "Whether the interaction is active."
                          },
                          "steps": {
                            "type": "integer",
                            "description": "In how many phases the scroll will be completed."
                          },
                          "valueInPx": {
                            "type": "integer",
                            "description": "Number of pixels to scroll in each step."
                          },
                          "delayBetween": {
                            "type": "integer",
                            "description": "Delay (in milliseconds) between steps."
                          },
                          "specific": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the specific interaction is active."
                                },
                                "urlPaths": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "Origin path."
                                  },
                                  "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                },
                                "operation": {
                                  "type": "string",
                                  "enum": ["==", "!="],
                                  "description": "Operator applied against the urlPaths list."
                                }
                              },
                              "required": ["isActive", "urlPaths", "operation"]
                            }
                          }
                        },
                        "required": [
                          "isActive",
                          "steps",
                          "valueInPx",
                          "delayBetween",
                          "specific"
                        ]
                      }
                    },
                    "required": ["config"]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "config": {
                        "type": "object",
                        "properties": {
                          "isActive": {
                            "type": "boolean",
                            "description": "Whether the interaction is active."
                          },
                          "global": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the global interaction is active."
                                },
                                "htmlSelector": {
                                  "type": "string",
                                  "description": "HTML selector where the interaction is executed."
                                },
                                "waitAfterInteraction": {
                                  "type": "integer",
                                  "description": "Waiting time (in seconds) after the interaction is executed."
                                },
                                "executionSequence": {
                                  "type": "integer",
                                  "description": "Interaction execution order."
                                }
                              },
                              "required": [
                                "isActive",
                                "htmlSelector",
                                "executionSequence"
                              ]
                            }
                          },
                          "specific": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the specific interaction is active."
                                },
                                "htmlSelector": {
                                  "type": "string",
                                  "description": "HTML selector where the interaction is executed."
                                },
                                "waitAfterInteraction": {
                                  "type": "integer",
                                  "description": "Waiting time (in seconds) after the interaction is executed."
                                },
                                "executionSequence": {
                                  "type": "integer",
                                  "description": "Interaction execution order."
                                },
                                "urlPaths": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "Origin path."
                                  },
                                  "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                },
                                "operation": {
                                  "type": "string",
                                  "enum": ["==", "!="],
                                  "description": "Operator applied against the urlPaths list."
                                }
                              },
                              "required": [
                                "isActive",
                                "htmlSelector",
                                "executionSequence",
                                "urlPaths",
                                "operation"
                              ]
                            }
                          }
                        },
                        "required": ["isActive", "global", "specific"]
                      }
                    },
                    "required": ["config"]
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["hover", "click", "scroll"]
            },
            "in": "path",
            "name": "type",
            "required": true,
            "description": "Interaction type."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Interaction created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Interaction created successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Interaction unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Interaction created successfully.",
                    "data": { "_key": "-A5HO1NwgFrTMp5xv8KRWnk" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update synthetic interaction",
        "tags": ["Synthetic Interactions"],
        "description": "Updates a synthetic interaction associated with the origin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "config": {
                        "type": "object",
                        "properties": {
                          "isActive": {
                            "type": "boolean",
                            "description": "Whether the interaction is active."
                          },
                          "steps": {
                            "type": "integer",
                            "description": "In how many phases the scroll will be completed."
                          },
                          "valueInPx": {
                            "type": "integer",
                            "description": "Number of pixels to scroll in each step."
                          },
                          "delayBetween": {
                            "type": "integer",
                            "description": "Delay (in milliseconds) between steps."
                          },
                          "specific": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the specific interaction is active."
                                },
                                "urlPaths": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "Origin path."
                                  },
                                  "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                },
                                "operation": {
                                  "type": "string",
                                  "enum": ["==", "!="],
                                  "description": "Operator applied against the urlPaths list."
                                }
                              },
                              "required": ["isActive", "urlPaths", "operation"]
                            }
                          }
                        },
                        "required": [
                          "isActive",
                          "steps",
                          "valueInPx",
                          "delayBetween",
                          "specific"
                        ]
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "config": {
                        "type": "object",
                        "properties": {
                          "isActive": {
                            "type": "boolean",
                            "description": "Whether the interaction is active."
                          },
                          "global": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the global interaction is active."
                                },
                                "htmlSelector": {
                                  "type": "string",
                                  "description": "HTML selector where the interaction is executed."
                                },
                                "waitAfterInteraction": {
                                  "type": "integer",
                                  "description": "Waiting time (in seconds) after the interaction is executed."
                                },
                                "executionSequence": {
                                  "type": "integer",
                                  "description": "Interaction execution order."
                                }
                              },
                              "required": [
                                "isActive",
                                "htmlSelector",
                                "executionSequence"
                              ]
                            }
                          },
                          "specific": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "isActive": {
                                  "type": "boolean",
                                  "description": "Whether the specific interaction is active."
                                },
                                "htmlSelector": {
                                  "type": "string",
                                  "description": "HTML selector where the interaction is executed."
                                },
                                "waitAfterInteraction": {
                                  "type": "integer",
                                  "description": "Waiting time (in seconds) after the interaction is executed."
                                },
                                "executionSequence": {
                                  "type": "integer",
                                  "description": "Interaction execution order."
                                },
                                "urlPaths": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "description": "Origin path."
                                  },
                                  "description": "Origin paths where the specific interaction is evaluated to be executed based on the operation attribute."
                                },
                                "operation": {
                                  "type": "string",
                                  "enum": ["==", "!="],
                                  "description": "Operator applied against the urlPaths list."
                                }
                              },
                              "required": [
                                "isActive",
                                "htmlSelector",
                                "executionSequence",
                                "urlPaths",
                                "operation"
                              ]
                            }
                          }
                        },
                        "required": ["isActive", "global", "specific"]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["hover", "click", "scroll"]
            },
            "in": "path",
            "name": "type",
            "required": true,
            "description": "Interaction type."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Interaction updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Interaction updated successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Interaction unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Interaction updated successfully.",
                    "data": { "_key": "-A5HO1NwgFrTMp5xv8KRWnk" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete synthetic interaction",
        "tags": ["Synthetic Interactions"],
        "description": "Deletes a synthetic interaction associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["hover", "click", "scroll"]
            },
            "in": "path",
            "name": "type",
            "required": true,
            "description": "Interaction type."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Interaction deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Interaction deleted successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Interaction unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Interaction deleted successfully.",
                    "data": { "_key": "-A5HO1NwgFrTMp5xv8KRWnk" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/metrics": {
      "get": {
        "summary": "Get prerender service metrics",
        "tags": ["Metrics"],
        "description": "Returns prerender service metrics.",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "The unique identifier for the customer"
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "Authorization",
            "required": true,
            "description": "Authorization token for API access"
          }
        ],
        "responses": {
          "200": {
            "description": "Metrics fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Metrics fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    }
                  },
                  "required": ["status", "message"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins": {
      "get": {
        "summary": "Get origins",
        "tags": ["Origins"],
        "description": "Returns all origins.",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Origins fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Origins fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_key": {
                            "type": "string",
                            "description": "Origin unique identifier."
                          },
                          "origin": {
                            "type": "string",
                            "format": "uri",
                            "description": "Origin base URL."
                          },
                          "siteMaps": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "Sitemap path."
                            },
                            "description": "List of sitemap paths."
                          },
                          "identifyNotfound": {
                            "type": "string",
                            "description": "Text present on the rendered page HTML that signifies a not found error page (404). If this specific text appears on the rendered page, the HTTP status code of the response will be 404. For instance, if the text \"Sorry, the page you were looking for could not be found.\" is included on your not found error page, this text can serve as the identifier."
                          },
                          "allowOriginHeaderValue": {
                            "type": "string",
                            "description": "Value of x-photoniq-prerender-request header."
                          },
                          "passThroughHeaders": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "description": "Header key."
                            },
                            "description": "List of header keys that are forwarded from the bot request to the origin website."
                          },
                          "addResponseHeaders": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "basedOnStatusCode": {
                                  "type": "boolean",
                                  "description": "Whether the header value should be based on the response status code."
                                },
                                "value": {
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "description": "Header value."
                                    },
                                    {
                                      "type": "object",
                                      "description": "Status code. Ranges like 2xx can also be used.",
                                      "additionalProperties": {
                                        "type": "string",
                                        "description": "Header value."
                                      }
                                    }
                                  ]
                                }
                              },
                              "required": ["basedOnStatusCode", "value"],
                              "description": "Additional response headers configuration."
                            },
                            "description": "Map of headers to add to the response."
                          },
                          "caching": {
                            "type": "boolean",
                            "description": "Whether to cache rendered pages."
                          },
                          "ttl": {
                            "type": "number",
                            "description": "Cache lifetime of rendered pages (in seconds)."
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date when the origin was created."
                          },
                          "lastUpdated": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date when the origin was updated."
                          }
                        },
                        "required": [
                          "_key",
                          "origin",
                          "siteMaps",
                          "caching",
                          "ttl",
                          "created"
                        ]
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Origins fetched successfully.",
                    "data": [
                      {
                        "_key": "www_origin_com",
                        "origin": "https://www.origin.com",
                        "siteMaps": ["/sitemap.xml"],
                        "identifyNotfound": "Page Not Found",
                        "allowOriginHeaderValue": "948ef5f9-f15f-4b61-91b3-305b77db30e9",
                        "passThroughHeaders": ["accept-language", "user-agent"],
                        "addResponseHeaders": {
                          "cache-control": {
                            "basedOnStatusCode": true,
                            "value": {
                              "2xx": "public, max-age=86400",
                              "3xx": "public, max-age=7200",
                              "4xx": "no-store",
                              "5xx": "no-store"
                            }
                          }
                        },
                        "caching": false,
                        "ttl": 86400,
                        "created": "2023-01-01T00:00:00.000Z",
                        "lastUpdated": "2023-02-02T00:00:00.000Z"
                      },
                      {
                        "_key": "sub_origin_com",
                        "origin": "https://sub.origin.com",
                        "siteMaps": ["/sitemap.xml"],
                        "identifyNotfound": "Page Not Found",
                        "allowOriginHeaderValue": "0641e52b-aa25-45dc-9e4f-7298b959d87c",
                        "passThroughHeaders": ["accept-language", "user-agent"],
                        "addResponseHeaders": {
                          "cache-control": {
                            "basedOnStatusCode": true,
                            "value": {
                              "2xx": "public, max-age=86400",
                              "3xx": "public, max-age=7200",
                              "4xx": "no-store",
                              "5xx": "no-store"
                            }
                          }
                        },
                        "caching": false,
                        "ttl": 86400,
                        "created": "2023-01-01T00:00:00.000Z",
                        "lastUpdated": "2023-02-02T00:00:00.000Z"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create origin",
        "tags": ["Origins"],
        "description": "Creates an origin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "origin": {
                    "type": "string",
                    "format": "uri",
                    "description": "Origin base URL."
                  },
                  "siteMaps": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Sitemap path."
                    },
                    "description": "List of sitemap paths."
                  },
                  "identifyNotfound": {
                    "type": "string",
                    "description": "Text present on the rendered page HTML that signifies a not found error page (404). If this specific text appears on the rendered page, the HTTP status code of the response will be 404. For instance, if the text \"Sorry, the page you were looking for could not be found.\" is included on your not found error page, this text can serve as the identifier."
                  },
                  "allowOriginHeaderValue": {
                    "type": "string",
                    "description": "Value of x-photoniq-prerender-request header."
                  },
                  "passThroughHeaders": {
                    "type": "array",
                    "items": { "type": "string", "description": "Header key." },
                    "description": "List of header keys that are forwarded from the bot request to the origin website."
                  },
                  "addResponseHeaders": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "basedOnStatusCode": {
                          "type": "boolean",
                          "description": "Whether the header value should be based on the response status code."
                        },
                        "value": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "Header value."
                            },
                            {
                              "type": "object",
                              "description": "Status code. Ranges like 2xx can also be used.",
                              "additionalProperties": {
                                "type": "string",
                                "description": "Header value."
                              }
                            }
                          ]
                        }
                      },
                      "required": ["basedOnStatusCode", "value"],
                      "description": "Additional response headers configuration."
                    },
                    "description": "Map of headers to add to the response."
                  },
                  "caching": {
                    "type": "boolean",
                    "description": "Whether to cache rendered pages."
                  },
                  "ttl": {
                    "type": "number",
                    "description": "Cache lifetime of rendered pages (in seconds)."
                  }
                },
                "required": ["origin", "siteMaps", "ttl", "caching"]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Origin created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Origin created successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Origin unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Origin created successfully.",
                    "data": { "_key": "www_origin_com" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}": {
      "get": {
        "summary": "Get origin",
        "tags": ["Origins"],
        "description": "Returns an origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Origin fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Origin fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Origin unique identifier."
                        },
                        "origin": {
                          "type": "string",
                          "format": "uri",
                          "description": "Origin base URL."
                        },
                        "siteMaps": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "description": "Sitemap path."
                          },
                          "description": "List of sitemap paths."
                        },
                        "identifyNotfound": {
                          "type": "string",
                          "description": "Text present on the rendered page HTML that signifies a not found error page (404). If this specific text appears on the rendered page, the HTTP status code of the response will be 404. For instance, if the text \"Sorry, the page you were looking for could not be found.\" is included on your not found error page, this text can serve as the identifier."
                        },
                        "allowOriginHeaderValue": {
                          "type": "string",
                          "description": "Value of x-photoniq-prerender-request header."
                        },
                        "passThroughHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "description": "Header key."
                          },
                          "description": "List of header keys that are forwarded from the bot request to the origin website."
                        },
                        "addResponseHeaders": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "basedOnStatusCode": {
                                "type": "boolean",
                                "description": "Whether the header value should be based on the response status code."
                              },
                              "value": {
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "description": "Header value."
                                  },
                                  {
                                    "type": "object",
                                    "description": "Status code. Ranges like 2xx can also be used.",
                                    "additionalProperties": {
                                      "type": "string",
                                      "description": "Header value."
                                    }
                                  }
                                ]
                              }
                            },
                            "required": ["basedOnStatusCode", "value"],
                            "description": "Additional response headers configuration."
                          },
                          "description": "Map of headers to add to the response."
                        },
                        "caching": {
                          "type": "boolean",
                          "description": "Whether to cache rendered pages."
                        },
                        "ttl": {
                          "type": "number",
                          "description": "Cache lifetime of rendered pages (in seconds)."
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date when the origin was created."
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date when the origin was updated."
                        }
                      },
                      "required": [
                        "_key",
                        "origin",
                        "siteMaps",
                        "caching",
                        "ttl",
                        "created"
                      ]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Origin fetched successfully.",
                    "data": {
                      "_key": "www_origin_com",
                      "origin": "https://www.origin.com",
                      "siteMaps": ["/sitemap.xml"],
                      "identifyNotfound": "Page Not Found",
                      "allowOriginHeaderValue": "948ef5f9-f15f-4b61-91b3-305b77db30e9",
                      "passThroughHeaders": ["accept-language", "user-agent"],
                      "addResponseHeaders": {
                        "cache-control": {
                          "basedOnStatusCode": true,
                          "value": {
                            "2xx": "public, max-age=86400",
                            "3xx": "public, max-age=7200",
                            "4xx": "no-store",
                            "5xx": "no-store"
                          }
                        }
                      },
                      "caching": false,
                      "ttl": 86400,
                      "created": "2023-01-01T00:00:00.000Z",
                      "lastUpdated": "2023-02-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update origin",
        "tags": ["Origins"],
        "description": "Updates an origin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "siteMaps": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Sitemap path."
                    },
                    "description": "List of sitemap paths."
                  },
                  "identifyNotfound": {
                    "type": "string",
                    "description": "Text present on the rendered page HTML that signifies a not found error page (404). If this specific text appears on the rendered page, the HTTP status code of the response will be 404. For instance, if the text \"Sorry, the page you were looking for could not be found.\" is included on your not found error page, this text can serve as the identifier."
                  },
                  "allowOriginHeaderValue": {
                    "type": "string",
                    "description": "Value of x-photoniq-prerender-request header."
                  },
                  "passThroughHeaders": {
                    "type": "array",
                    "items": { "type": "string", "description": "Header key." },
                    "description": "List of header keys that are forwarded from the bot request to the origin website."
                  },
                  "addResponseHeaders": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "basedOnStatusCode": {
                          "type": "boolean",
                          "description": "Whether the header value should be based on the response status code."
                        },
                        "value": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "Header value."
                            },
                            {
                              "type": "object",
                              "description": "Status code. Ranges like 2xx can also be used.",
                              "additionalProperties": {
                                "type": "string",
                                "description": "Header value."
                              }
                            }
                          ]
                        }
                      },
                      "required": ["basedOnStatusCode", "value"],
                      "description": "Additional response headers configuration."
                    },
                    "description": "Map of headers to add to the response."
                  },
                  "caching": {
                    "type": "boolean",
                    "description": "Whether to cache rendered pages."
                  },
                  "ttl": {
                    "type": "number",
                    "description": "Cache lifetime of rendered pages (in seconds)."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Origin updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Origin updated successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Origin unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Origin updated successfully.",
                    "data": { "_key": "www_origin_com" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete origin",
        "tags": ["Origins"],
        "description": "Deletes an origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Origin deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Origin deleted successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Origin unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Origin deleted successfully.",
                    "data": { "_key": "www_origin_com" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/metrics/percentiles/responsetime": {
      "get": {
        "summary": "Get response time percentiles ",
        "tags": ["Metrics"],
        "description": "Returns response time percentiles within a specific time range, optionally filtered by URL pattern and response code. Required query parameters include from and to, denoting the epoch time range in seconds. An optional urlRegex parameter allows filtering by URL patterns, while responseCode filters the metrics by HTTP response code. The endpoint returns the 90th, 95th, and 99th percentiles of response times. A customerId header is required for authentication.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "urlRegex",
            "required": false,
            "description": "Regex of URL path."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "responseCode",
            "required": false,
            "description": "Response code for filtering."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Response time percentiles fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response time percentiles fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "p90": { "type": "number" },
                        "p95": { "type": "number" },
                        "p99": { "type": "number" }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Response time percentiles fetched successfully.",
                    "data": { "p90": 7355, "p95": 8007, "p99": 10517 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/metrics/percentiles/responsetime/{origin}": {
      "get": {
        "summary": "Get response time percentiles  by origin",
        "tags": ["Metrics"],
        "description": "Returns response time percentiles within a specific time range, optionally filtered by URL pattern and response code. Required query parameters include from and to, denoting the epoch time range in seconds. An optional urlRegex parameter allows filtering by URL patterns, while responseCode filters the metrics by HTTP response code. The endpoint returns the 90th, 95th, and 99th percentiles of response times. A customerId header is required for authentication.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "urlRegex",
            "required": false,
            "description": "Regex of URL path."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "responseCode",
            "required": false,
            "description": "Response code for filtering."
          },
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Response time percentiles fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response time percentiles fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "p90": { "type": "number" },
                        "p95": { "type": "number" },
                        "p99": { "type": "number" }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Response time percentiles fetched successfully.",
                    "data": { "p90": 7355, "p95": 8007, "p99": 10517 }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/prefetch/configs": {
      "get": {
        "summary": "Get prefetch configuration",
        "tags": ["Prefetch"],
        "description": "Returns the prefetch configuration associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch configuration fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Prefetch configuration fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Prefetch configuration unique identifier."
                        },
                        "origin": {
                          "type": "string",
                          "format": "uri",
                          "description": "Origin base URL."
                        },
                        "cronSchedule": {
                          "type": "string",
                          "description": "Cron expression for scheduling."
                        },
                        "isRenderForMobile": {
                          "type": "boolean",
                          "description": "Whether rendering should be tailored for mobile devices."
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date when the prefetch configuration was created."
                        },
                        "updatedAt": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date when the prefetch configuration was updated."
                        }
                      },
                      "required": [
                        "_key",
                        "origin",
                        "cronSchedule",
                        "isRenderForMobile",
                        "createdAt"
                      ]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Prefetch configuration fetched successfully.",
                    "data": {
                      "_key": "www_origin_com",
                      "origin": "https://www.origin.com",
                      "cronSchedule": "0 0 * * *",
                      "isRenderForMobile": false,
                      "createdAt": "2023-01-01T00:00:00.000Z",
                      "updatedAt": "2023-02-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Not found.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": { "status": "ERROR", "message": "Not found." }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create prefetch configuration",
        "tags": ["Prefetch"],
        "description": "Creates a prefetch configuration associated with the origin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cronSchedule": {
                    "type": "string",
                    "description": "Cron expression for scheduling."
                  },
                  "isRenderForMobile": {
                    "type": "boolean",
                    "description": "Whether rendering should be tailored for mobile devices."
                  }
                },
                "required": ["cronSchedule", "isRenderForMobile"]
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch configuration created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Prefetch configuration created successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Prefetch configuration unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Prefetch configuration created successfully.",
                    "data": { "_key": "www_origin_com" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update prefetch configuration",
        "tags": ["Prefetch"],
        "description": "Updates the prefetch configuration associated with the origin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cronSchedule": {
                    "type": "string",
                    "description": "Cron expression for scheduling."
                  },
                  "isRenderForMobile": {
                    "type": "boolean",
                    "description": "Whether rendering should be tailored for mobile devices."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch configuration updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Prefetch configuration updated successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Prefetch configuration unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Prefetch configuration updated successfully.",
                    "data": { "_key": "www_origin_com" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete prefetch configuration",
        "tags": ["Prefetch"],
        "description": "Deletes the prefetch configuration associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch configuration deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Prefetch configuration deleted successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Prefetch configuration unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Prefetch configuration deleted successfully.",
                    "data": { "_key": "www_origin_com" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/metrics/stats/prefetch/{origin}": {
      "get": {
        "summary": "Get prefetch statistics",
        "tags": ["Metrics"],
        "description": "Returns the latest prefetch statistics associated with the origin.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "enum": ["queued", "in_progress", "completed", "canceled"]
            },
            "in": "query",
            "name": "status",
            "required": false,
            "description": "Prefetch status."
          },
          {
            "schema": { "type": "integer", "minimum": 0, "default": 0 },
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Pagination offset."
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1,
              "default": 1000,
              "maximum": 1000
            },
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Pagination limit."
          },
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch statistics fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Prefetch statistics fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "prefetchType": {
                            "type": "string",
                            "enum": ["manual", "scheduled"],
                            "description": "Method of prefetching."
                          },
                          "prefetchStatus": {
                            "type": "string",
                            "description": "Current status of prefetching."
                          },
                          "totalPrefetched": {
                            "type": "number",
                            "description": "Count of total URLs prefetched."
                          },
                          "totalCompleted": {
                            "type": "number",
                            "description": "Count of URLs successfully prefetched."
                          },
                          "totalRetrying": {
                            "type": "number",
                            "description": "Count of URLs retrying prefetch."
                          },
                          "totalQueued": {
                            "type": "number",
                            "description": "Count of URLs queued for prefetch."
                          },
                          "totalFailed": {
                            "type": "number",
                            "description": "Count of URLs where prefetch failed."
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Unix timestamp of prefetch trigger creation."
                          }
                        },
                        "required": [
                          "prefetchType",
                          "prefetchStatus",
                          "totalPrefetched",
                          "totalCompleted",
                          "totalRetrying",
                          "totalQueued",
                          "totalFailed",
                          "createdAt"
                        ]
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Prefetch statistics fetched successfully.",
                    "data": [
                      {
                        "prefetchType": "scheduled",
                        "prefetchStatus": "in_progress",
                        "totalPrefetched": 500,
                        "totalCompleted": 400,
                        "totalRetrying": 3,
                        "totalQueued": 95,
                        "totalFailed": 2,
                        "createdAt": 1672542000
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/prefetch/triggers": {
      "post": {
        "summary": "Create prefetch trigger",
        "tags": ["Prefetch"],
        "description": "Creates a prefetch trigger associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch trigger created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Prefetch trigger created successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Prefetch trigger unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Prefetch trigger created successfully.",
                    "data": { "_key": "-A5HO1NwgFrTMp5xv8KRWnk" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Conflict.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "There's already a queued or in-progress trigger."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/prefetch/urls": {
      "get": {
        "summary": "Get prefetch URLs",
        "tags": ["Prefetch"],
        "description": "Returns the latest prefetch URLs associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "number", "default": 0 },
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Pagination offset."
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 1000,
              "maximum": 1000
            },
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Pagination limit."
          },
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Prefetch URLs fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Prefetch URLs fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "format": "uri",
                            "description": "Origin URL."
                          },
                          "isMobile": {
                            "type": "boolean",
                            "description": "Whether rendering was tailored for mobile devices."
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "queued",
                              "retrying",
                              "completed",
                              "failed"
                            ],
                            "description": "URL status."
                          },
                          "createdAt": {
                            "type": "number",
                            "description": "Timestamp of when the prefetch URL was created."
                          },
                          "updatedAt": {
                            "type": ["null", "number"],
                            "description": "Timestamp of when the prefetch URL was updated."
                          }
                        },
                        "required": ["url", "isMobile", "status", "createdAt"]
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Prefetch URLs fetched successfully.",
                    "data": [
                      {
                        "url": "https://www.origin.com/terms",
                        "isMobile": false,
                        "status": "queued",
                        "createdAt": 1672542000,
                        "updatedAt": 1675306800
                      },
                      {
                        "url": "https://www.origin.com/privacy",
                        "isMobile": false,
                        "status": "completed",
                        "createdAt": 1672542000,
                        "updatedAt": 1675306800
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/render/{mobile}/{url}": {
      "get": {
        "summary": "Get prerendered page",
        "tags": ["Prerender"],
        "description": "Returns the HTML content of the rendered page.",
        "parameters": [
          {
            "schema": { "type": "boolean" },
            "in": "path",
            "name": "mobile",
            "required": true,
            "description": "Whether rendering should be tailored for mobile devices."
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "url",
            "required": true,
            "description": "URL to render."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "HTML content fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "HTML content fetched successfully.",
                  "example": "<!DOCTYPE html><html lang=\"en\"><head><base href=\"https://www.origin.com/\"></head><body></body></html>"
                }
              }
            }
          },
          "301": {
            "description": "Moved permanently.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Moved permanently.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Moved permanently."
                  }
                }
              }
            }
          },
          "308": {
            "description": "Permanent redirect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Permanent redirect.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Permanent redirect."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Not found.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": { "status": "ERROR", "message": "Not found." }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Gateway timeout.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Gateway timeout."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/render": {
      "get": {
        "summary": "Get prerendered page",
        "tags": ["Prerender"],
        "description": "Returns the HTML content of the rendered page.",
        "parameters": [
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "origin",
            "required": false,
            "description": "Origin base URL."
          },
          {
            "schema": { "type": "boolean" },
            "in": "query",
            "name": "mobile",
            "required": false,
            "description": "Whether rendering should be tailored for mobile devices."
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "path",
            "required": false,
            "description": "Path to render."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-prerender-origin",
            "required": false,
            "description": "Origin base URL."
          },
          {
            "schema": { "type": "boolean" },
            "in": "header",
            "name": "x-photoniq-prerender-mobile",
            "required": false,
            "description": "Whether rendering should be tailored for mobile devices."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-prerender-path",
            "required": false,
            "description": "Path to render."
          }
        ],
        "responses": {
          "200": {
            "description": "HTML content fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "HTML content fetched successfully.",
                  "example": "<!DOCTYPE html><html lang=\"en\"><head><base href=\"https://www.origin.com/\"></head><body></body></html>"
                }
              }
            }
          },
          "301": {
            "description": "Moved permanently.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Moved permanently.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Moved permanently."
                  }
                }
              }
            }
          },
          "308": {
            "description": "Permanent redirect.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Permanent redirect.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Permanent redirect."
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Not found.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": { "status": "ERROR", "message": "Not found." }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          },
          "504": {
            "description": "Gateway timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Gateway timeout.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Gateway timeout."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/history/render": {
      "get": {
        "summary": "Get render history data",
        "tags": ["Prerender History"],
        "description": "Returns historical data for web metrics, with time-range filtering and optional response code criteria. This endpoint requires the from and to query parameters, indicating the time range as epoch seconds. Optional filters include responseCode for HTTP status, and pagination controls through limit and offset. Data can be optionally scoped to a specific origin if the origin path parameter is included. The response comprises an array of historical records, detailing bytes sent, response time, device type, and response codes. Authentication is handled via the customerId header.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": { "type": ["number", "string"] },
            "in": "query",
            "name": "responseCode",
            "required": false,
            "description": "Response code for filtering. It can be a specific response code or a range value, e.g., 200-310."
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "responseTime",
            "required": false,
            "description": "Response time range in seconds for filtering, e.g., 2-10."
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 100,
              "maximum": 100
            },
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Limit for results."
          },
          {
            "schema": { "type": "number", "default": 0 },
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Offset for results."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Render history fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Render history fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": { "type": "number" },
                          "origin": { "type": "string", "format": "uri" },
                          "path": { "type": "string" },
                          "bytesSent": { "type": "number" },
                          "responseTime": { "type": "number" },
                          "isMobile": { "type": "boolean" },
                          "responseCode": { "type": "number" }
                        }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Render history fetched successfully.",
                    "data": [
                      {
                        "timestamp": 1672543000,
                        "origin": "https://www.origin.com",
                        "path": "/terms",
                        "bytesSent": 362414,
                        "responseTime": 1000,
                        "isMobile": false,
                        "responseCode": 200
                      },
                      {
                        "timestamp": 1672542000,
                        "origin": "https://www.origin.com",
                        "path": "/terms",
                        "bytesSent": 362056,
                        "responseTime": 1500,
                        "isMobile": false,
                        "responseCode": 200
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/history/render/{origin}": {
      "get": {
        "summary": "Get render history data by origin",
        "tags": ["Prerender History"],
        "description": "Returns historical data for web metrics, with time-range filtering and optional response code criteria. This endpoint requires the from and to query parameters, indicating the time range as epoch seconds. Optional filters include responseCode for HTTP status, and pagination controls through limit and offset. Data can be optionally scoped to a specific origin if the origin path parameter is included. The response comprises an array of historical records, detailing bytes sent, response time, device type, and response codes. Authentication is handled via the customerId header.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": { "type": ["number", "string"] },
            "in": "query",
            "name": "responseCode",
            "required": false,
            "description": "Response code for filtering. It can be a specific response code or a range value, e.g., 200-310."
          },
          {
            "schema": { "type": "string" },
            "in": "query",
            "name": "responseTime",
            "required": false,
            "description": "Response time range in seconds for filtering, e.g., 2-10."
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "default": 100,
              "maximum": 100
            },
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Limit for results."
          },
          {
            "schema": { "type": "number", "default": 0 },
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Offset for results."
          },
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Render history fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Render history fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": { "type": "number" },
                          "origin": { "type": "string", "format": "uri" },
                          "path": { "type": "string" },
                          "bytesSent": { "type": "number" },
                          "responseTime": { "type": "number" },
                          "isMobile": { "type": "boolean" },
                          "responseCode": { "type": "number" }
                        }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Render history fetched successfully.",
                    "data": [
                      {
                        "timestamp": 1672543000,
                        "origin": "https://www.origin.com",
                        "path": "/terms",
                        "bytesSent": 362414,
                        "responseTime": 1000,
                        "isMobile": false,
                        "responseCode": 200
                      },
                      {
                        "timestamp": 1672542000,
                        "origin": "https://www.origin.com",
                        "path": "/terms",
                        "bytesSent": 362056,
                        "responseTime": 1500,
                        "isMobile": false,
                        "responseCode": 200
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/metrics/stats/render": {
      "get": {
        "summary": "Get render-stats metrics",
        "tags": ["Metrics"],
        "description": "Returns render stats metrics within a specified time range. This endpoint expects two required query parameters: from and to, representing the start and end of the time range in epoch seconds. The request must include a customerId header for authentication.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Render statistics fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Render statistics fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalPrefetch": { "type": "number" },
                        "totalCacheHits": { "type": "number" },
                        "totalCacheMisses": { "type": "number" },
                        "totalResponseSize": { "type": "number" },
                        "totalOriginsRenderingFor": { "type": "number" },
                        "totalRenders": { "type": "number" },
                        "totalFailed": { "type": "number" }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Render statistics fetched successfully.",
                    "data": {
                      "totalPrefetch": 75,
                      "totalCacheHits": 6,
                      "totalCacheMisses": 83,
                      "totalResponseSize": 30340237,
                      "totalOriginsRenderingFor": 3,
                      "totalRenders": 87,
                      "totalFailed": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/metrics/stats/render/{origin}": {
      "get": {
        "summary": "Get render-stats metrics by origin",
        "tags": ["Metrics"],
        "description": "Returns render stats metrics within a specified time range. This endpoint expects two required query parameters: from and to, representing the start and end of the time range in epoch seconds. The request must include a customerId header for authentication.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Render statistics fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Render statistics fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "totalPrefetch": { "type": "number" },
                        "totalCacheHits": { "type": "number" },
                        "totalCacheMisses": { "type": "number" },
                        "totalResponseSize": { "type": "number" },
                        "totalOriginsRenderingFor": { "type": "number" },
                        "totalRenders": { "type": "number" },
                        "totalFailed": { "type": "number" }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Render statistics fetched successfully.",
                    "data": {
                      "totalPrefetch": 75,
                      "totalCacheHits": 6,
                      "totalCacheMisses": 83,
                      "totalResponseSize": 30340237,
                      "totalOriginsRenderingFor": 3,
                      "totalRenders": 87,
                      "totalFailed": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/origins/{origin}/settings": {
      "get": {
        "summary": "Get prerender settings",
        "tags": ["Prerender Settings"],
        "description": "Returns the prerender settings associated with the origin.",
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Settings fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Settings fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Settings unique identifier."
                        },
                        "origin": {
                          "type": "string",
                          "format": "uri",
                          "description": "Origin base URL."
                        },
                        "injectInlineCSS": {
                          "type": "boolean",
                          "description": "Whether to inject CSS into the HTML."
                        },
                        "addRequestHeader": {
                          "type": "boolean",
                          "description": "Whether to add x-photoniq-prerender-request header to each request made during page rendering."
                        },
                        "blockRequestTypes": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "List of resource types that should be blocked, e.g., fonts, stylesheets."
                        },
                        "urlBlockList": {
                          "type": "array",
                          "items": { "type": "string" },
                          "description": "List of URLs that should be blocked, e.g., https://googleads.g.doubleclick.net/pagead."
                        },
                        "created": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date when the prerender settings was created."
                        },
                        "lastUpdated": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Date when the prerender settings was updated."
                        }
                      },
                      "required": [
                        "_key",
                        "origin",
                        "injectInlineCSS",
                        "addRequestHeader",
                        "blockRequestTypes",
                        "urlBlockList",
                        "created"
                      ]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Settings fetched successfully.",
                    "data": {
                      "_key": "www_origin_com",
                      "origin": "https://www.origin.com",
                      "injectInlineCSS": false,
                      "addRequestHeader": false,
                      "blockRequestTypes": ["fonts"],
                      "urlBlockList": [
                        "https://googleads.g.doubleclick.net/pagead/",
                        "https://www.googletagmanager.com/gtag/",
                        "https://bat.bing.com/p/action/",
                        "https://bat.bing.com/bat.js",
                        "https://connect.facebook.net/en_US/fbevents.js",
                        "https://maps.googleapis.com/maps-api-v3/api/js/"
                      ],
                      "created": "2023-01-01T00:00:00.000Z",
                      "lastUpdated": "2023-02-02T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update prerender settings",
        "tags": ["Prerender Settings"],
        "description": "Updates the prerender settings associated with the origin.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "injectInlineCSS": {
                    "type": "boolean",
                    "description": "Whether to inject CSS into the HTML."
                  },
                  "addRequestHeader": {
                    "type": "boolean",
                    "description": "Whether to add x-photoniq-prerender-request header to each request made during page rendering."
                  },
                  "blockRequestTypes": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of resource types that should be blocked, e.g., fonts, stylesheets."
                  },
                  "urlBlockList": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of URLs that should be blocked, e.g., https://googleads.g.doubleclick.net/pagead."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": { "type": "string", "minLength": 1 },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Settings updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Settings updated successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_key": {
                          "type": "string",
                          "description": "Settings unique identifier."
                        }
                      },
                      "required": ["_key"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Setting updated successfully.",
                    "data": { "_key": "www_origin_com" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/usage/{aggregationType}": {
      "get": {
        "summary": "Get usage metrics",
        "tags": ["Usage"],
        "description": "Returns usage metrics for a specified time range, with mandatory aggregation by type and an optional origin filter. This endpoint requires from and to query parameters as epoch times, along with an aggregationType in the path to define the data aggregation granularity (e.g., hourly, daily, monthly). It supports pagination (limit, offset) and sorting (sortOrder, sortBy) options in the query. Authentication is managed via the customerId header.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Limit for results."
          },
          {
            "schema": { "type": "number", "default": 0 },
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Offset for results."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["ASC", "DESC"],
              "default": "ASC"
            },
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "description": "Sorting order."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["timestamp", "maxRps", "totalRenders"],
              "default": "timestamp"
            },
            "in": "query",
            "name": "sortBy",
            "required": false,
            "description": "Sorting field."
          },
          {
            "schema": { "type": "boolean", "default": "false" },
            "in": "query",
            "name": "aggregation",
            "required": false,
            "description": "If the aggregate flag is true, then the results are consolidated and returned as an aggregate summary for the specified start and end period."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["hourly", "daily", "monthly"]
            },
            "in": "path",
            "name": "aggregationType",
            "required": true,
            "description": "Aggregation type."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Usage metrics fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Usage metrics fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": { "type": "number" },
                          "totalRenders": { "type": "number" },
                          "origin": { "type": "string", "format": "uri" },
                          "maxRps": { "type": "number" }
                        }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Usage metrics fetched successfully.",
                    "data": [
                      {
                        "timestamp": 1672628400000,
                        "totalRenders": 44,
                        "maxRps": 3
                      },
                      {
                        "timestamp": 1672542000000,
                        "totalRenders": 66,
                        "maxRps": 4
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/usage/{aggregationType}/{origin}": {
      "get": {
        "summary": "Get usage metrics by origin",
        "tags": ["Usage"],
        "description": "Returns usage metrics for a specified time range, with mandatory aggregation by type and an optional origin filter. This endpoint requires from and to query parameters as epoch times, along with an aggregationType in the path to define the data aggregation granularity (e.g., hourly, daily, monthly). It supports pagination (limit, offset) and sorting (sortOrder, sortBy) options in the query. Authentication is managed via the customerId header.",
        "parameters": [
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "from",
            "required": true,
            "description": "Timestamp (in seconds) used as the initial time for filtering."
          },
          {
            "schema": { "type": "number" },
            "in": "query",
            "name": "to",
            "required": true,
            "description": "Timestamp (in seconds) used as the final time for filtering."
          },
          {
            "schema": {
              "type": "number",
              "minimum": 1,
              "maximum": 1000,
              "default": 100
            },
            "in": "query",
            "name": "limit",
            "required": false,
            "description": "Limit for results."
          },
          {
            "schema": { "type": "number", "default": 0 },
            "in": "query",
            "name": "offset",
            "required": false,
            "description": "Offset for results."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["ASC", "DESC"],
              "default": "ASC"
            },
            "in": "query",
            "name": "sortOrder",
            "required": false,
            "description": "Sorting order."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["timestamp", "maxRps", "totalRenders"],
              "default": "timestamp"
            },
            "in": "query",
            "name": "sortBy",
            "required": false,
            "description": "Sorting field."
          },
          {
            "schema": { "type": "boolean", "default": "false" },
            "in": "query",
            "name": "aggregation",
            "required": false,
            "description": "If the aggregate flag is true, then the results are consolidated and returned as an aggregate summary for the specified start and end period."
          },
          {
            "schema": {
              "type": "string",
              "enum": ["hourly", "daily", "monthly"]
            },
            "in": "path",
            "name": "aggregationType",
            "required": true,
            "description": "Aggregation type."
          },
          {
            "schema": { "type": "string" },
            "in": "path",
            "name": "origin",
            "required": true,
            "description": "Origin hostname."
          },
          {
            "schema": { "type": "string" },
            "in": "header",
            "name": "x-photoniq-customerid",
            "required": true,
            "description": "Customer unique identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "Usage metrics fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Usage metrics fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "timestamp": { "type": "number" },
                          "totalRenders": { "type": "number" },
                          "origin": { "type": "string", "format": "uri" },
                          "maxRps": { "type": "number" }
                        }
                      }
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "Usage metrics fetched successfully.",
                    "data": [
                      {
                        "timestamp": 1672628400000,
                        "totalRenders": 44,
                        "maxRps": 3
                      },
                      {
                        "timestamp": 1672542000000,
                        "totalRenders": 66,
                        "maxRps": 4
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Bad request.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Header x-photoniq-customerid is required."
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/prerender/v1/version": {
      "get": {
        "summary": "Get API version",
        "tags": ["Version"],
        "description": "Returns the API version.",
        "responses": {
          "200": {
            "description": "API version fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "API version fetched successfully.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Success status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string",
                          "description": "API version."
                        }
                      },
                      "required": ["version"]
                    }
                  },
                  "required": ["status", "message", "data"],
                  "example": {
                    "status": "OK",
                    "message": "API version fetched successfully.",
                    "data": { "version": "1.0.0" }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Internal server error.",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "Error status."
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message."
                    }
                  },
                  "required": ["status", "message"],
                  "example": {
                    "status": "ERROR",
                    "message": "Internal server error."
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [{ "url": "https://demo-prerender.photoniq.macrometa.io" }],
  "tags": [
    { "name": "Prerender" },
    { "name": "Origins" },
    { "name": "Prerender Settings" },
    { "name": "Synthetic Interactions" },
    { "name": "Cache" },
    { "name": "Prefetch" },
    { "name": "Prerender History" },
    { "name": "Metrics" },
    { "name": "Usage" },
    { "name": "Health" },
    { "name": "Version" }
  ]
}
